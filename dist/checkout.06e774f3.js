// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"d2OCw":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "e07c678606e774f3";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else if ('reload' in location) location.reload();
            else {
                // Web extension context
                var ext = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;
                if (ext && ext.runtime && ext.runtime.reload) ext.runtime.reload();
            }
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"d7P74":[function(require,module,exports) {
var _jspdf = require("jspdf");
var _app = require("./app");
var _auth = require("firebase/auth");
var _cart = require("./functions/cart");
var _indexUtils = require("../utils/indexUtils");
const doc = new _jspdf.jsPDF();
const checkoutForm = document.getElementById("checkoutForm");
let cart = [];
function loadCart() {
    let total = 0;
    cart.forEach((product)=>{
        total += parseInt(product.price);
        checkoutForm.addEventListener("submit", async (e)=>{
            e.preventDefault();
            console.log("finish");
            const name = checkoutForm.name.value;
            const cardnumber = checkoutForm.cardnumber.value;
            const csc = checkoutForm.csc.value;
            const date = checkoutForm.date.value;
            const email = checkoutForm.email.value;
            if (name !== "" && cardnumber !== "" && csc !== "" && date !== "" && email !== "") {
                alert(`Thank you for your purchase`);
                doc.text("Thanks " + name + " for your purchase of:" + "\n" + product.name + "\n" + "for a total of: " + _indexUtils.currencyFormat(total), 10, 10);
                doc.save("receipt.pdf");
            } else alert(`Please fill every input`);
        });
    });
}
_auth.onAuthStateChanged(_app.auth, async (user)=>{
    if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        userLogged = user;
        cart = await _cart.getFirebaseCart(_app.db, userLogged.uid);
    // ...
    } else cart = _indexUtils.getMycart();
    loadCart();
});

},{"jspdf":"22HlH","./app":"bAabt","firebase/auth":"drt1f","./functions/cart":"bOATt","../utils/indexUtils":"aLoRT"}],"22HlH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AcroForm", ()=>St
);
parcelHelpers.export(exports, "AcroFormAppearance", ()=>At
);
parcelHelpers.export(exports, "AcroFormButton", ()=>mt
);
parcelHelpers.export(exports, "AcroFormCheckBox", ()=>wt
);
parcelHelpers.export(exports, "AcroFormChoiceField", ()=>ft
);
parcelHelpers.export(exports, "AcroFormComboBox", ()=>pt
);
parcelHelpers.export(exports, "AcroFormEditBox", ()=>gt
);
parcelHelpers.export(exports, "AcroFormListBox", ()=>dt
);
parcelHelpers.export(exports, "AcroFormPasswordField", ()=>Lt
);
parcelHelpers.export(exports, "AcroFormPushButton", ()=>vt
);
parcelHelpers.export(exports, "AcroFormRadioButton", ()=>bt
);
parcelHelpers.export(exports, "AcroFormTextField", ()=>Nt
);
parcelHelpers.export(exports, "GState", ()=>j
);
parcelHelpers.export(exports, "ShadingPattern", ()=>B
);
parcelHelpers.export(exports, "TilingPattern", ()=>M
);
parcelHelpers.export(exports, "jsPDF", ()=>E
);
/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 2.5.1 Built on 2022-01-28T15:37:57.791Z
 *                      CommitID 00000000
 *
 * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2021 yWorks GmbH, http://www.yworks.com
 *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, https://github.com/willowsystems
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */ var _typeof = require("@babel/runtime/helpers/typeof");
var _typeofDefault = parcelHelpers.interopDefault(_typeof);
var _fflate = require("fflate");
var global = arguments[3];
var n = function() {
    return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
}();
function i() {
    n.console && "function" == typeof n.console.log && n.console.log.apply(n.console, arguments);
}
var a = {
    log: i,
    warn: function(t) {
        n.console && ("function" == typeof n.console.warn ? n.console.warn.apply(n.console, arguments) : i.call(null, arguments));
    },
    error: function(t) {
        n.console && ("function" == typeof n.console.error ? n.console.error.apply(n.console, arguments) : i(t));
    }
};
function o(t, e, r) {
    var n1 = new XMLHttpRequest;
    n1.open("GET", t), n1.responseType = "blob", n1.onload = function() {
        l(n1.response, e, r);
    }, n1.onerror = function() {
        a.error("could not download file");
    }, n1.send();
}
function s(t) {
    var e = new XMLHttpRequest;
    e.open("HEAD", t, !1);
    try {
        e.send();
    } catch (t1) {}
    return e.status >= 200 && e.status <= 299;
}
function c(t) {
    try {
        t.dispatchEvent(new MouseEvent("click"));
    } catch (r) {
        var e = document.createEvent("MouseEvents");
        e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), t.dispatchEvent(e);
    }
}
var u, h, l = n.saveAs || ("object" !== ("undefined" == typeof window ? "undefined" : _typeofDefault.default(window)) || window !== n ? function() {} : "undefined" != typeof HTMLAnchorElement && "download" in HTMLAnchorElement.prototype ? function(t, e, r) {
    var i1 = n.URL || n.webkitURL, a1 = document.createElement("a");
    e = e || t.name || "download", a1.download = e, a1.rel = "noopener", "string" == typeof t ? (a1.href = t, a1.origin !== location.origin ? s(a1.href) ? o(t, e, r) : c(a1, a1.target = "_blank") : c(a1)) : (a1.href = i1.createObjectURL(t), setTimeout(function() {
        i1.revokeObjectURL(a1.href);
    }, 4e4), setTimeout(function() {
        c(a1);
    }, 0));
} : "msSaveOrOpenBlob" in navigator ? function(e1, r1, n2) {
    if (r1 = r1 || e1.name || "download", "string" == typeof e1) {
        if (s(e1)) o(e1, r1, n2);
        else {
            var i2 = document.createElement("a");
            i2.href = e1, i2.target = "_blank", setTimeout(function() {
                c(i2);
            });
        }
    } else navigator.msSaveOrOpenBlob(function(e, r) {
        return void 0 === r ? r = {
            autoBom: !1
        } : "object" !== _typeofDefault.default(r) && (a.warn("Deprecated: Expected third argument to be a object"), r = {
            autoBom: !r
        }), r.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type) ? new Blob([
            String.fromCharCode(65279),
            e
        ], {
            type: e.type
        }) : e;
    }(e1, n2), r1);
} : function(e, r, i3, a2) {
    if ((a2 = a2 || open("", "_blank")) && (a2.document.title = a2.document.body.innerText = "downloading..."), "string" == typeof e) return o(e, r, i3);
    var s1 = "application/octet-stream" === e.type, c1 = /constructor/i.test(n.HTMLElement) || n.safari, u1 = /CriOS\/[\d]+/.test(navigator.userAgent);
    if ((u1 || s1 && c1) && "object" === ("undefined" == typeof FileReader ? "undefined" : _typeofDefault.default(FileReader))) {
        var h1 = new FileReader;
        h1.onloadend = function() {
            var t = h1.result;
            t = u1 ? t : t.replace(/^data:[^;]*;/, "data:attachment/file;"), a2 ? a2.location.href = t : location = t, a2 = null;
        }, h1.readAsDataURL(e);
    } else {
        var l1 = n.URL || n.webkitURL, f1 = l1.createObjectURL(e);
        a2 ? a2.location = f1 : location.href = f1, a2 = null, setTimeout(function() {
            l1.revokeObjectURL(f1);
        }, 4e4);
    }
});
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */ function f(t2) {
    var e2;
    t2 = t2 || "", this.ok = !1, "#" == t2.charAt(0) && (t2 = t2.substr(1, 6));
    t2 = ({
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "00ffff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000000",
        blanchedalmond: "ffebcd",
        blue: "0000ff",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "00ffff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dodgerblue: "1e90ff",
        feldspar: "d19275",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "ff00ff",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgrey: "d3d3d3",
        lightgreen: "90ee90",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslateblue: "8470ff",
        lightslategray: "778899",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "00ff00",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "ff00ff",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370d8",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "d87093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        red: "ff0000",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        violetred: "d02090",
        wheat: "f5deb3",
        white: "ffffff",
        whitesmoke: "f5f5f5",
        yellow: "ffff00",
        yellowgreen: "9acd32"
    })[t2 = (t2 = t2.replace(/ /g, "")).toLowerCase()] || t2;
    for(var r2 = [
        {
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: [
                "rgb(123, 234, 45)",
                "rgb(255,234,245)"
            ],
            process: function(t) {
                return [
                    parseInt(t[1]),
                    parseInt(t[2]),
                    parseInt(t[3])
                ];
            }
        },
        {
            re: /^(\w{2})(\w{2})(\w{2})$/,
            example: [
                "#00ff00",
                "336699"
            ],
            process: function(t) {
                return [
                    parseInt(t[1], 16),
                    parseInt(t[2], 16),
                    parseInt(t[3], 16)
                ];
            }
        },
        {
            re: /^(\w{1})(\w{1})(\w{1})$/,
            example: [
                "#fb0",
                "f0f"
            ],
            process: function(t) {
                return [
                    parseInt(t[1] + t[1], 16),
                    parseInt(t[2] + t[2], 16),
                    parseInt(t[3] + t[3], 16)
                ];
            }
        }
    ], n3 = 0; n3 < r2.length; n3++){
        var i4 = r2[n3].re, a3 = r2[n3].process, o1 = i4.exec(t2);
        o1 && (e2 = a3(o1), this.r = e2[0], this.g = e2[1], this.b = e2[2], this.ok = !0);
    }
    this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b, this.toRGB = function() {
        return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
    }, this.toHex = function() {
        var t = this.r.toString(16), e = this.g.toString(16), r = this.b.toString(16);
        return 1 == t.length && (t = "0" + t), 1 == e.length && (e = "0" + e), 1 == r.length && (r = "0" + r), "#" + t + e + r;
    };
}
/**
 * @license
 * Joseph Myers does not specify a particular license for his work.
 *
 * Author: Joseph Myers
 * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
 *
 * Modified by: Owen Leong
 */ function d(t, e) {
    var r = t[0], n4 = t[1], i5 = t[2], a4 = t[3];
    r = g(r, n4, i5, a4, e[0], 7, -680876936), a4 = g(a4, r, n4, i5, e[1], 12, -389564586), i5 = g(i5, a4, r, n4, e[2], 17, 606105819), n4 = g(n4, i5, a4, r, e[3], 22, -1044525330), r = g(r, n4, i5, a4, e[4], 7, -176418897), a4 = g(a4, r, n4, i5, e[5], 12, 1200080426), i5 = g(i5, a4, r, n4, e[6], 17, -1473231341), n4 = g(n4, i5, a4, r, e[7], 22, -45705983), r = g(r, n4, i5, a4, e[8], 7, 1770035416), a4 = g(a4, r, n4, i5, e[9], 12, -1958414417), i5 = g(i5, a4, r, n4, e[10], 17, -42063), n4 = g(n4, i5, a4, r, e[11], 22, -1990404162), r = g(r, n4, i5, a4, e[12], 7, 1804603682), a4 = g(a4, r, n4, i5, e[13], 12, -40341101), i5 = g(i5, a4, r, n4, e[14], 17, -1502002290), r = m(r, n4 = g(n4, i5, a4, r, e[15], 22, 1236535329), i5, a4, e[1], 5, -165796510), a4 = m(a4, r, n4, i5, e[6], 9, -1069501632), i5 = m(i5, a4, r, n4, e[11], 14, 643717713), n4 = m(n4, i5, a4, r, e[0], 20, -373897302), r = m(r, n4, i5, a4, e[5], 5, -701558691), a4 = m(a4, r, n4, i5, e[10], 9, 38016083), i5 = m(i5, a4, r, n4, e[15], 14, -660478335), n4 = m(n4, i5, a4, r, e[4], 20, -405537848), r = m(r, n4, i5, a4, e[9], 5, 568446438), a4 = m(a4, r, n4, i5, e[14], 9, -1019803690), i5 = m(i5, a4, r, n4, e[3], 14, -187363961), n4 = m(n4, i5, a4, r, e[8], 20, 1163531501), r = m(r, n4, i5, a4, e[13], 5, -1444681467), a4 = m(a4, r, n4, i5, e[2], 9, -51403784), i5 = m(i5, a4, r, n4, e[7], 14, 1735328473), r = v(r, n4 = m(n4, i5, a4, r, e[12], 20, -1926607734), i5, a4, e[5], 4, -378558), a4 = v(a4, r, n4, i5, e[8], 11, -2022574463), i5 = v(i5, a4, r, n4, e[11], 16, 1839030562), n4 = v(n4, i5, a4, r, e[14], 23, -35309556), r = v(r, n4, i5, a4, e[1], 4, -1530992060), a4 = v(a4, r, n4, i5, e[4], 11, 1272893353), i5 = v(i5, a4, r, n4, e[7], 16, -155497632), n4 = v(n4, i5, a4, r, e[10], 23, -1094730640), r = v(r, n4, i5, a4, e[13], 4, 681279174), a4 = v(a4, r, n4, i5, e[0], 11, -358537222), i5 = v(i5, a4, r, n4, e[3], 16, -722521979), n4 = v(n4, i5, a4, r, e[6], 23, 76029189), r = v(r, n4, i5, a4, e[9], 4, -640364487), a4 = v(a4, r, n4, i5, e[12], 11, -421815835), i5 = v(i5, a4, r, n4, e[15], 16, 530742520), r = b(r, n4 = v(n4, i5, a4, r, e[2], 23, -995338651), i5, a4, e[0], 6, -198630844), a4 = b(a4, r, n4, i5, e[7], 10, 1126891415), i5 = b(i5, a4, r, n4, e[14], 15, -1416354905), n4 = b(n4, i5, a4, r, e[5], 21, -57434055), r = b(r, n4, i5, a4, e[12], 6, 1700485571), a4 = b(a4, r, n4, i5, e[3], 10, -1894986606), i5 = b(i5, a4, r, n4, e[10], 15, -1051523), n4 = b(n4, i5, a4, r, e[1], 21, -2054922799), r = b(r, n4, i5, a4, e[8], 6, 1873313359), a4 = b(a4, r, n4, i5, e[15], 10, -30611744), i5 = b(i5, a4, r, n4, e[6], 15, -1560198380), n4 = b(n4, i5, a4, r, e[13], 21, 1309151649), r = b(r, n4, i5, a4, e[4], 6, -145523070), a4 = b(a4, r, n4, i5, e[11], 10, -1120210379), i5 = b(i5, a4, r, n4, e[2], 15, 718787259), n4 = b(n4, i5, a4, r, e[9], 21, -343485551), t[0] = _(r, t[0]), t[1] = _(n4, t[1]), t[2] = _(i5, t[2]), t[3] = _(a4, t[3]);
}
function p9(t, e, r, n5, i6, a5) {
    return e = _(_(e, t), _(n5, a5)), _(e << i6 | e >>> 32 - i6, r);
}
function g(t, e, r, n6, i7, a6, o2) {
    return p9(e & r | ~e & n6, t, e, i7, a6, o2);
}
function m(t, e, r, n7, i8, a7, o3) {
    return p9(e & n7 | r & ~n7, t, e, i8, a7, o3);
}
function v(t, e, r, n8, i9, a8, o4) {
    return p9(e ^ r ^ n8, t, e, i9, a8, o4);
}
function b(t, e, r, n9, i10, a9, o5) {
    return p9(r ^ (e | ~n9), t, e, i10, a9, o5);
}
function y(t) {
    var e, r = t.length, n10 = [
        1732584193,
        -271733879,
        -1732584194,
        271733878
    ];
    for(e = 64; e <= t.length; e += 64)d(n10, w(t.substring(e - 64, e)));
    t = t.substring(e - 64);
    var i11 = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ];
    for(e = 0; e < t.length; e++)i11[e >> 2] |= t.charCodeAt(e) << (e % 4 << 3);
    if (i11[e >> 2] |= 128 << (e % 4 << 3), e > 55) for(d(n10, i11), e = 0; e < 16; e++)i11[e] = 0;
    return i11[14] = 8 * r, d(n10, i11), n10;
}
function w(t) {
    var e, r = [];
    for(e = 0; e < 64; e += 4)r[e >> 2] = t.charCodeAt(e) + (t.charCodeAt(e + 1) << 8) + (t.charCodeAt(e + 2) << 16) + (t.charCodeAt(e + 3) << 24);
    return r;
}
u = n.atob.bind(n), h = n.btoa.bind(n);
var N = "0123456789abcdef".split("");
function L(t) {
    for(var e = "", r = 0; r < 4; r++)e += N[t >> 8 * r + 4 & 15] + N[t >> 8 * r & 15];
    return e;
}
function A(t) {
    return String.fromCharCode((255 & t) >> 0, (65280 & t) >> 8, (16711680 & t) >> 16, (4278190080 & t) >> 24);
}
function x(t) {
    return y(t).map(A).join("");
}
var S = "5d41402abc4b2a76b9719d911017c592" != function(t) {
    for(var e = 0; e < t.length; e++)t[e] = L(t[e]);
    return t.join("");
}(y("hello"));
function _(t, e) {
    if (S) {
        var r = (65535 & t) + (65535 & e);
        return (t >> 16) + (e >> 16) + (r >> 16) << 16 | 65535 & r;
    }
    return t + e & 4294967295;
}
/**
 * @license
 * FPDF is released under a permissive license: there is no usage restriction.
 * You may embed it freely in your application (commercial or not), with or
 * without modifications.
 *
 * Reference: http://www.fpdf.org/en/script/script37.php
 */ function P(t, e) {
    var r, n11, i12, a10;
    if (t !== r) {
        for(var o6 = (i12 = t, a10 = 1 + (256 / t.length >> 0), new Array(a10 + 1).join(i12)), s2 = [], c2 = 0; c2 < 256; c2++)s2[c2] = c2;
        var u2 = 0;
        for(c2 = 0; c2 < 256; c2++){
            var h2 = s2[c2];
            u2 = (u2 + h2 + o6.charCodeAt(c2)) % 256, s2[c2] = s2[u2], s2[u2] = h2;
        }
        r = t, n11 = s2;
    } else s2 = n11;
    var l2 = e.length, f2 = 0, d1 = 0, p1 = "";
    for(c2 = 0; c2 < l2; c2++)d1 = (d1 + (h2 = s2[f2 = (f2 + 1) % 256])) % 256, s2[f2] = s2[d1], s2[d1] = h2, o6 = s2[(s2[f2] + s2[d1]) % 256], p1 += String.fromCharCode(e.charCodeAt(c2) ^ o6);
    return p1;
}
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 * Author: Owen Leong (@owenl131)
 * Date: 15 Oct 2020
 * References:
 * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
 * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
 * http://www.fpdf.org/en/script/script37.php
 */ var k = {
    print: 4,
    modify: 8,
    copy: 16,
    "annot-forms": 32
};
function I(t3, e, r, n12) {
    this.v = 1, this.r = 2;
    var i13 = 192;
    t3.forEach(function(t) {
        if (void 0 !== k.perm) throw new Error("Invalid permission: " + t);
        i13 += k[t];
    }), this.padding = "(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";
    var a11 = (e + this.padding).substr(0, 32), o7 = (r + this.padding).substr(0, 32);
    this.O = this.processOwnerPassword(a11, o7), this.P = -(1 + (255 ^ i13)), this.encryptionKey = x(a11 + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(n12)).substr(0, 5), this.U = P(this.encryptionKey, this.padding);
}
function F(t) {
    if (/[^\u0000-\u00ff]/.test(t)) throw new Error("Invalid PDF Name Object: " + t + ", Only accept ASCII characters.");
    for(var e = "", r = t.length, n13 = 0; n13 < r; n13++){
        var i14 = t.charCodeAt(n13);
        if (i14 < 33 || 35 === i14 || 37 === i14 || 40 === i14 || 41 === i14 || 47 === i14 || 60 === i14 || 62 === i14 || 91 === i14 || 93 === i14 || 123 === i14 || 125 === i14 || i14 > 126) e += "#" + ("0" + i14.toString(16)).slice(-2);
        else e += t[n13];
    }
    return e;
}
function C(e3) {
    if ("object" !== _typeofDefault.default(e3)) throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
    var r = {};
    this.subscribe = function(t, e, n14) {
        if (n14 = n14 || !1, "string" != typeof t || "function" != typeof e || "boolean" != typeof n14) throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
        r.hasOwnProperty(t) || (r[t] = {});
        var i15 = Math.random().toString(35);
        return r[t][i15] = [
            e,
            !!n14
        ], i15;
    }, this.unsubscribe = function(t) {
        for(var e in r)if (r[e][t]) return delete r[e][t], 0 === Object.keys(r[e]).length && delete r[e], !0;
        return !1;
    }, this.publish = function(t) {
        if (r.hasOwnProperty(t)) {
            var i16 = Array.prototype.slice.call(arguments, 1), o8 = [];
            for(var s3 in r[t]){
                var c3 = r[t][s3];
                try {
                    c3[0].apply(e3, i16);
                } catch (t) {
                    n.console && a.error("jsPDF PubSub Error", t.message, t);
                }
                c3[1] && o8.push(s3);
            }
            o8.length && o8.forEach(this.unsubscribe);
        }
    }, this.getTopics = function() {
        return r;
    };
}
function j(t) {
    if (!(this instanceof j)) return new j(t);
    var e = "opacity,stroke-opacity".split(",");
    for(var r in t)t.hasOwnProperty(r) && e.indexOf(r) >= 0 && (this[r] = t[r]);
    this.id = "", this.objectNumber = -1;
}
function O(t, e) {
    this.gState = t, this.matrix = e, this.id = "", this.objectNumber = -1;
}
function B(t, e, r, n15, i17) {
    if (!(this instanceof B)) return new B(t, e, r, n15, i17);
    this.type = "axial" === t ? 2 : 3, this.coords = e, this.colors = r, O.call(this, n15, i17);
}
function M(t, e, r, n16, i18) {
    if (!(this instanceof M)) return new M(t, e, r, n16, i18);
    this.boundingBox = t, this.xStep = e, this.yStep = r, this.stream = "", this.cloneIndex = 0, O.call(this, n16, i18);
}
function E(e4) {
    var r3, i19 = "string" == typeof arguments[0] ? arguments[0] : "p", o9 = arguments[1], s4 = arguments[2], c4 = arguments[3], u3 = [], d2 = 1, p2 = 16, g1 = "S", m1 = null;
    "object" === _typeofDefault.default(e4 = e4 || {}) && (i19 = e4.orientation, o9 = e4.unit || o9, s4 = e4.format || s4, c4 = e4.compress || e4.compressPdf || c4, null !== (m1 = e4.encryption || null) && (m1.userPassword = m1.userPassword || "", m1.ownerPassword = m1.ownerPassword || "", m1.userPermissions = m1.userPermissions || []), d2 = "number" == typeof e4.userUnit ? Math.abs(e4.userUnit) : 1, void 0 !== e4.precision && (r3 = e4.precision), void 0 !== e4.floatPrecision && (p2 = e4.floatPrecision), g1 = e4.defaultPathOperation || "S"), u3 = e4.filters || (!0 === c4 ? [
        "FlateEncode"
    ] : u3), o9 = o9 || "mm", i19 = ("" + (i19 || "P")).toLowerCase();
    var v1 = e4.putOnlyUsedFonts || !1, b1 = {}, y1 = {
        internal: {},
        __private__: {}
    };
    y1.__private__.PubSub = C;
    var w1 = "1.3", N1 = y1.__private__.getPdfVersion = function() {
        return w1;
    };
    y1.__private__.setPdfVersion = function(t) {
        w1 = t;
    };
    var L1 = {
        a0: [
            2383.94,
            3370.39
        ],
        a1: [
            1683.78,
            2383.94
        ],
        a2: [
            1190.55,
            1683.78
        ],
        a3: [
            841.89,
            1190.55
        ],
        a4: [
            595.28,
            841.89
        ],
        a5: [
            419.53,
            595.28
        ],
        a6: [
            297.64,
            419.53
        ],
        a7: [
            209.76,
            297.64
        ],
        a8: [
            147.4,
            209.76
        ],
        a9: [
            104.88,
            147.4
        ],
        a10: [
            73.7,
            104.88
        ],
        b0: [
            2834.65,
            4008.19
        ],
        b1: [
            2004.09,
            2834.65
        ],
        b2: [
            1417.32,
            2004.09
        ],
        b3: [
            1000.63,
            1417.32
        ],
        b4: [
            708.66,
            1000.63
        ],
        b5: [
            498.9,
            708.66
        ],
        b6: [
            354.33,
            498.9
        ],
        b7: [
            249.45,
            354.33
        ],
        b8: [
            175.75,
            249.45
        ],
        b9: [
            124.72,
            175.75
        ],
        b10: [
            87.87,
            124.72
        ],
        c0: [
            2599.37,
            3676.54
        ],
        c1: [
            1836.85,
            2599.37
        ],
        c2: [
            1298.27,
            1836.85
        ],
        c3: [
            918.43,
            1298.27
        ],
        c4: [
            649.13,
            918.43
        ],
        c5: [
            459.21,
            649.13
        ],
        c6: [
            323.15,
            459.21
        ],
        c7: [
            229.61,
            323.15
        ],
        c8: [
            161.57,
            229.61
        ],
        c9: [
            113.39,
            161.57
        ],
        c10: [
            79.37,
            113.39
        ],
        dl: [
            311.81,
            623.62
        ],
        letter: [
            612,
            792
        ],
        "government-letter": [
            576,
            756
        ],
        legal: [
            612,
            1008
        ],
        "junior-legal": [
            576,
            360
        ],
        ledger: [
            1224,
            792
        ],
        tabloid: [
            792,
            1224
        ],
        "credit-card": [
            153,
            243
        ]
    };
    y1.__private__.getPageFormats = function() {
        return L1;
    };
    var A1 = y1.__private__.getPageFormat = function(t) {
        return L1[t];
    };
    s4 = s4 || "a4";
    var x1 = {
        COMPAT: "compat",
        ADVANCED: "advanced"
    }, S1 = x1.COMPAT;
    function _1() {
        this.saveGraphicsState(), lt1(new Vt1(_t1, 0, 0, -_t1, 0, Rr() * _t1).toString() + " cm"), this.setFontSize(this.getFontSize() / _t1), g1 = "n", S1 = x1.ADVANCED;
    }
    function P1() {
        this.restoreGraphicsState(), g1 = "S", S1 = x1.COMPAT;
    }
    var k1 = y1.__private__.combineFontStyleAndFontWeight = function(t, e) {
        if ("bold" == t && "normal" == e || "bold" == t && 400 == e || "normal" == t && "italic" == e || "bold" == t && "italic" == e) throw new Error("Invalid Combination of fontweight and fontstyle");
        return e && (t = 400 == e || "normal" === e ? "italic" === t ? "italic" : "normal" : 700 != e && "bold" !== e || "normal" !== t ? (700 == e ? "bold" : e) + "" + t : "bold"), t;
    };
    y1.advancedAPI = function(t) {
        var e = S1 === x1.COMPAT;
        return e && _1.call(this), "function" != typeof t || (t(this), e && P1.call(this)), this;
    }, y1.compatAPI = function(t) {
        var e = S1 === x1.ADVANCED;
        return e && P1.call(this), "function" != typeof t || (t(this), e && _1.call(this)), this;
    }, y1.isAdvancedAPI = function() {
        return S1 === x1.ADVANCED;
    };
    var O1, q1 = function(t) {
        if (S1 !== x1.ADVANCED) throw new Error(t + " is only available in 'advanced' API mode. You need to call advancedAPI() first.");
    }, D1 = y1.roundToPrecision = y1.__private__.roundToPrecision = function(t, e) {
        var n17 = r3 || e;
        if (isNaN(t) || isNaN(n17)) throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
        return t.toFixed(n17).replace(/0+$/, "");
    };
    O1 = y1.hpf = y1.__private__.hpf = "number" == typeof p2 ? function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
        return D1(t, p2);
    } : "smart" === p2 ? function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
        return D1(t, t > -1 && t < 1 ? 16 : 5);
    } : function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
        return D1(t, 16);
    };
    var R1 = y1.f2 = y1.__private__.f2 = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
        return D1(t, 2);
    }, T1 = y1.__private__.f3 = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f3");
        return D1(t, 3);
    }, U1 = y1.scale = y1.__private__.scale = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.scale");
        return S1 === x1.COMPAT ? t * _t1 : S1 === x1.ADVANCED ? t : void 0;
    }, z1 = function(t) {
        return S1 === x1.COMPAT ? Rr() - t : S1 === x1.ADVANCED ? t : void 0;
    }, H1 = function(t) {
        return U1(z1(t));
    };
    y1.__private__.setPrecision = y1.setPrecision = function(t) {
        "number" == typeof parseInt(t, 10) && (r3 = parseInt(t, 10));
    };
    var W1, V1 = "00000000000000000000000000000000", G1 = y1.__private__.getFileId = function() {
        return V1;
    }, Y1 = y1.__private__.setFileId = function(t) {
        return V1 = void 0 !== t && /^[a-fA-F0-9]{32}$/.test(t) ? t.toUpperCase() : V1.split("").map(function() {
            return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()));
        }).join(""), null !== m1 && (Ye = new I(m1.userPermissions, m1.userPassword, m1.ownerPassword, V1)), V1;
    };
    y1.setFileId = function(t) {
        return Y1(t), this;
    }, y1.getFileId = function() {
        return G1();
    };
    var J1 = y1.__private__.convertDateToPDFDate = function(t) {
        var e = t.getTimezoneOffset(), r = e < 0 ? "+" : "-", n18 = Math.floor(Math.abs(e / 60)), i20 = Math.abs(e % 60), a12 = [
            r,
            Q1(n18),
            "'",
            Q1(i20),
            "'"
        ].join("");
        return [
            "D:",
            t.getFullYear(),
            Q1(t.getMonth() + 1),
            Q1(t.getDate()),
            Q1(t.getHours()),
            Q1(t.getMinutes()),
            Q1(t.getSeconds()),
            a12
        ].join("");
    }, X1 = y1.__private__.convertPDFDateToDate = function(t) {
        var e = parseInt(t.substr(2, 4), 10), r = parseInt(t.substr(6, 2), 10) - 1, n19 = parseInt(t.substr(8, 2), 10), i21 = parseInt(t.substr(10, 2), 10), a13 = parseInt(t.substr(12, 2), 10), o10 = parseInt(t.substr(14, 2), 10);
        return new Date(e, r, n19, i21, a13, o10, 0);
    }, K1 = y1.__private__.setCreationDate = function(t) {
        var e;
        if (void 0 === t && (t = new Date), t instanceof Date) e = J1(t);
        else {
            if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t)) throw new Error("Invalid argument passed to jsPDF.setCreationDate");
            e = t;
        }
        return W1 = e;
    }, Z1 = y1.__private__.getCreationDate = function(t) {
        var e = W1;
        return "jsDate" === t && (e = X1(W1)), e;
    };
    y1.setCreationDate = function(t) {
        return K1(t), this;
    }, y1.getCreationDate = function(t) {
        return Z1(t);
    };
    var $1, Q1 = y1.__private__.padd2 = function(t) {
        return ("0" + parseInt(t)).slice(-2);
    }, tt1 = y1.__private__.padd2Hex = function(t) {
        return ("00" + (t = t.toString())).substr(t.length);
    }, et1 = 0, rt1 = [], nt1 = [], it1 = 0, at1 = [], ot1 = [], st1 = !1, ct1 = nt1, ut1 = function() {
        et1 = 0, it1 = 0, nt1 = [], rt1 = [], at1 = [], Qt1 = Kt1(), te1 = Kt1();
    };
    y1.__private__.setCustomOutputDestination = function(t) {
        st1 = !0, ct1 = t;
    };
    var ht1 = function(t) {
        st1 || (ct1 = t);
    };
    y1.__private__.resetCustomOutputDestination = function() {
        st1 = !1, ct1 = nt1;
    };
    var lt1 = y1.__private__.out = function(t) {
        return t = t.toString(), it1 += t.length + 1, ct1.push(t), ct1;
    }, ft1 = y1.__private__.write = function(t) {
        return lt1(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, " "));
    }, dt1 = y1.__private__.getArrayBuffer = function(t) {
        for(var e = t.length, r = new ArrayBuffer(e), n20 = new Uint8Array(r); e--;)n20[e] = t.charCodeAt(e);
        return r;
    }, pt1 = [
        [
            "Helvetica",
            "helvetica",
            "normal",
            "WinAnsiEncoding"
        ],
        [
            "Helvetica-Bold",
            "helvetica",
            "bold",
            "WinAnsiEncoding"
        ],
        [
            "Helvetica-Oblique",
            "helvetica",
            "italic",
            "WinAnsiEncoding"
        ],
        [
            "Helvetica-BoldOblique",
            "helvetica",
            "bolditalic",
            "WinAnsiEncoding"
        ],
        [
            "Courier",
            "courier",
            "normal",
            "WinAnsiEncoding"
        ],
        [
            "Courier-Bold",
            "courier",
            "bold",
            "WinAnsiEncoding"
        ],
        [
            "Courier-Oblique",
            "courier",
            "italic",
            "WinAnsiEncoding"
        ],
        [
            "Courier-BoldOblique",
            "courier",
            "bolditalic",
            "WinAnsiEncoding"
        ],
        [
            "Times-Roman",
            "times",
            "normal",
            "WinAnsiEncoding"
        ],
        [
            "Times-Bold",
            "times",
            "bold",
            "WinAnsiEncoding"
        ],
        [
            "Times-Italic",
            "times",
            "italic",
            "WinAnsiEncoding"
        ],
        [
            "Times-BoldItalic",
            "times",
            "bolditalic",
            "WinAnsiEncoding"
        ],
        [
            "ZapfDingbats",
            "zapfdingbats",
            "normal",
            null
        ],
        [
            "Symbol",
            "symbol",
            "normal",
            null
        ]
    ];
    y1.__private__.getStandardFonts = function() {
        return pt1;
    };
    var gt1 = e4.fontSize || 16;
    y1.__private__.setFontSize = y1.setFontSize = function(t) {
        return gt1 = S1 === x1.ADVANCED ? t / _t1 : t, this;
    };
    var mt1, vt1 = y1.__private__.getFontSize = y1.getFontSize = function() {
        return S1 === x1.COMPAT ? gt1 : gt1 * _t1;
    }, bt1 = e4.R2L || !1;
    y1.__private__.setR2L = y1.setR2L = function(t) {
        return bt1 = t, this;
    }, y1.__private__.getR2L = y1.getR2L = function() {
        return bt1;
    };
    var yt1, wt1 = y1.__private__.setZoomMode = function(t) {
        var e = [
            void 0,
            null,
            "fullwidth",
            "fullheight",
            "fullpage",
            "original"
        ];
        if (/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t)) mt1 = t;
        else if (isNaN(t)) {
            if (-1 === e.indexOf(t)) throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t + '" is not recognized.');
            mt1 = t;
        } else mt1 = parseInt(t, 10);
    };
    y1.__private__.getZoomMode = function() {
        return mt1;
    };
    var Nt1, Lt1 = y1.__private__.setPageMode = function(t) {
        if (-1 == [
            void 0,
            null,
            "UseNone",
            "UseOutlines",
            "UseThumbs",
            "FullScreen"
        ].indexOf(t)) throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t + '" is not recognized.');
        yt1 = t;
    };
    y1.__private__.getPageMode = function() {
        return yt1;
    };
    var At1 = y1.__private__.setLayoutMode = function(t) {
        if (-1 == [
            void 0,
            null,
            "continuous",
            "single",
            "twoleft",
            "tworight",
            "two"
        ].indexOf(t)) throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t + '" is not recognized.');
        Nt1 = t;
    };
    y1.__private__.getLayoutMode = function() {
        return Nt1;
    }, y1.__private__.setDisplayMode = y1.setDisplayMode = function(t, e, r) {
        return wt1(t), At1(e), Lt1(r), this;
    };
    var xt1 = {
        title: "",
        subject: "",
        author: "",
        keywords: "",
        creator: ""
    };
    y1.__private__.getDocumentProperty = function(t) {
        if (-1 === Object.keys(xt1).indexOf(t)) throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
        return xt1[t];
    }, y1.__private__.getDocumentProperties = function() {
        return xt1;
    }, y1.__private__.setDocumentProperties = y1.setProperties = y1.setDocumentProperties = function(t) {
        for(var e in xt1)xt1.hasOwnProperty(e) && t[e] && (xt1[e] = t[e]);
        return this;
    }, y1.__private__.setDocumentProperty = function(t, e) {
        if (-1 === Object.keys(xt1).indexOf(t)) throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
        return xt1[t] = e;
    };
    var St1, _t1, Pt1, kt1, It1, Ft1 = {}, Ct1 = {}, jt1 = [], Ot1 = {}, Bt1 = {}, Mt1 = {}, Et1 = {}, qt1 = null, Dt1 = 0, Rt1 = [], Tt1 = new C(y1), Ut1 = e4.hotfixes || [], zt1 = {}, Ht1 = {}, Wt1 = [], Vt1 = function t(e, r, n21, i22, a14, o11) {
        if (!(this instanceof t)) return new t(e, r, n21, i22, a14, o11);
        isNaN(e) && (e = 1), isNaN(r) && (r = 0), isNaN(n21) && (n21 = 0), isNaN(i22) && (i22 = 1), isNaN(a14) && (a14 = 0), isNaN(o11) && (o11 = 0), this._matrix = [
            e,
            r,
            n21,
            i22,
            a14,
            o11
        ];
    };
    Object.defineProperty(Vt1.prototype, "sx", {
        get: function() {
            return this._matrix[0];
        },
        set: function(t) {
            this._matrix[0] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "shy", {
        get: function() {
            return this._matrix[1];
        },
        set: function(t) {
            this._matrix[1] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "shx", {
        get: function() {
            return this._matrix[2];
        },
        set: function(t) {
            this._matrix[2] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "sy", {
        get: function() {
            return this._matrix[3];
        },
        set: function(t) {
            this._matrix[3] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "tx", {
        get: function() {
            return this._matrix[4];
        },
        set: function(t) {
            this._matrix[4] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "ty", {
        get: function() {
            return this._matrix[5];
        },
        set: function(t) {
            this._matrix[5] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "a", {
        get: function() {
            return this._matrix[0];
        },
        set: function(t) {
            this._matrix[0] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "b", {
        get: function() {
            return this._matrix[1];
        },
        set: function(t) {
            this._matrix[1] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "c", {
        get: function() {
            return this._matrix[2];
        },
        set: function(t) {
            this._matrix[2] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "d", {
        get: function() {
            return this._matrix[3];
        },
        set: function(t) {
            this._matrix[3] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "e", {
        get: function() {
            return this._matrix[4];
        },
        set: function(t) {
            this._matrix[4] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "f", {
        get: function() {
            return this._matrix[5];
        },
        set: function(t) {
            this._matrix[5] = t;
        }
    }), Object.defineProperty(Vt1.prototype, "rotation", {
        get: function() {
            return Math.atan2(this.shx, this.sx);
        }
    }), Object.defineProperty(Vt1.prototype, "scaleX", {
        get: function() {
            return this.decompose().scale.sx;
        }
    }), Object.defineProperty(Vt1.prototype, "scaleY", {
        get: function() {
            return this.decompose().scale.sy;
        }
    }), Object.defineProperty(Vt1.prototype, "isIdentity", {
        get: function() {
            return 1 === this.sx && 0 === this.shy && 0 === this.shx && 1 === this.sy && 0 === this.tx && 0 === this.ty;
        }
    }), Vt1.prototype.join = function(t) {
        return [
            this.sx,
            this.shy,
            this.shx,
            this.sy,
            this.tx,
            this.ty
        ].map(O1).join(t);
    }, Vt1.prototype.multiply = function(t) {
        var e = t.sx * this.sx + t.shy * this.shx, r = t.sx * this.shy + t.shy * this.sy, n22 = t.shx * this.sx + t.sy * this.shx, i23 = t.shx * this.shy + t.sy * this.sy, a15 = t.tx * this.sx + t.ty * this.shx + this.tx, o12 = t.tx * this.shy + t.ty * this.sy + this.ty;
        return new Vt1(e, r, n22, i23, a15, o12);
    }, Vt1.prototype.decompose = function() {
        var t = this.sx, e = this.shy, r = this.shx, n23 = this.sy, i24 = this.tx, a16 = this.ty, o13 = Math.sqrt(t * t + e * e), s5 = (t /= o13) * r + (e /= o13) * n23;
        r -= t * s5, n23 -= e * s5;
        var c5 = Math.sqrt(r * r + n23 * n23);
        return s5 /= c5, t * (n23 /= c5) < e * (r /= c5) && (t = -t, e = -e, s5 = -s5, o13 = -o13), {
            scale: new Vt1(o13, 0, 0, c5, 0, 0),
            translate: new Vt1(1, 0, 0, 1, i24, a16),
            rotate: new Vt1(t, e, -e, t, 0, 0),
            skew: new Vt1(1, 0, s5, 1, 0, 0)
        };
    }, Vt1.prototype.toString = function(t) {
        return this.join(" ");
    }, Vt1.prototype.inversed = function() {
        var t = this.sx, e = this.shy, r = this.shx, n24 = this.sy, i25 = this.tx, a17 = this.ty, o14 = 1 / (t * n24 - e * r), s6 = n24 * o14, c6 = -e * o14, u4 = -r * o14, h3 = t * o14;
        return new Vt1(s6, c6, u4, h3, -s6 * i25 - u4 * a17, -c6 * i25 - h3 * a17);
    }, Vt1.prototype.applyToPoint = function(t) {
        var e = t.x * this.sx + t.y * this.shx + this.tx, r = t.x * this.shy + t.y * this.sy + this.ty;
        return new Cr(e, r);
    }, Vt1.prototype.applyToRectangle = function(t) {
        var e = this.applyToPoint(t), r = this.applyToPoint(new Cr(t.x + t.w, t.y + t.h));
        return new jr(e.x, e.y, r.x - e.x, r.y - e.y);
    }, Vt1.prototype.clone = function() {
        var t = this.sx, e = this.shy, r = this.shx, n25 = this.sy, i26 = this.tx, a18 = this.ty;
        return new Vt1(t, e, r, n25, i26, a18);
    }, y1.Matrix = Vt1;
    var Gt1 = y1.matrixMult = function(t, e) {
        return e.multiply(t);
    }, Yt1 = new Vt1(1, 0, 0, 1, 0, 0);
    y1.unitMatrix = y1.identityMatrix = Yt1;
    var Jt1 = function(t, e) {
        if (!Bt1[t]) {
            var r = (e instanceof B ? "Sh" : "P") + (Object.keys(Ot1).length + 1).toString(10);
            e.id = r, Bt1[t] = r, Ot1[r] = e, Tt1.publish("addPattern", e);
        }
    };
    y1.ShadingPattern = B, y1.TilingPattern = M, y1.addShadingPattern = function(t, e) {
        return q1("addShadingPattern()"), Jt1(t, e), this;
    }, y1.beginTilingPattern = function(t) {
        q1("beginTilingPattern()"), Br(t.boundingBox[0], t.boundingBox[1], t.boundingBox[2] - t.boundingBox[0], t.boundingBox[3] - t.boundingBox[1], t.matrix);
    }, y1.endTilingPattern = function(t, e) {
        q1("endTilingPattern()"), e.stream = ot1[$1].join("\n"), Jt1(t, e), Tt1.publish("endTilingPattern", e), Wt1.pop().restore();
    };
    var Xt1 = y1.__private__.newObject = function() {
        var t = Kt1();
        return Zt1(t, !0), t;
    }, Kt1 = y1.__private__.newObjectDeferred = function() {
        return et1++, rt1[et1] = function() {
            return it1;
        }, et1;
    }, Zt1 = function(t, e) {
        return e = "boolean" == typeof e && e, rt1[t] = it1, e && lt1(t + " 0 obj"), t;
    }, $t1 = y1.__private__.newAdditionalObject = function() {
        var t = {
            objId: Kt1(),
            content: ""
        };
        return at1.push(t), t;
    }, Qt1 = Kt1(), te1 = Kt1(), ee1 = y1.__private__.decodeColorString = function(t) {
        var e = t.split(" ");
        if (2 !== e.length || "g" !== e[1] && "G" !== e[1]) {
            if (5 === e.length && ("k" === e[4] || "K" === e[4])) e = [
                (1 - e[0]) * (1 - e[3]),
                (1 - e[1]) * (1 - e[3]),
                (1 - e[2]) * (1 - e[3]),
                "r"
            ];
        } else {
            var r = parseFloat(e[0]);
            e = [
                r,
                r,
                r,
                "r"
            ];
        }
        for(var n26 = "#", i27 = 0; i27 < 3; i27++)n26 += ("0" + Math.floor(255 * parseFloat(e[i27])).toString(16)).slice(-2);
        return n26;
    }, re1 = y1.__private__.encodeColorString = function(e) {
        var r;
        "string" == typeof e && (e = {
            ch1: e
        });
        var n27 = e.ch1, i28 = e.ch2, a19 = e.ch3, o15 = e.ch4, s7 = "draw" === e.pdfColorType ? [
            "G",
            "RG",
            "K"
        ] : [
            "g",
            "rg",
            "k"
        ];
        if ("string" == typeof n27 && "#" !== n27.charAt(0)) {
            var c7 = new f(n27);
            if (c7.ok) n27 = c7.toHex();
            else if (!/^\d*\.?\d*$/.test(n27)) throw new Error('Invalid color "' + n27 + '" passed to jsPDF.encodeColorString.');
        }
        if ("string" == typeof n27 && /^#[0-9A-Fa-f]{3}$/.test(n27) && (n27 = "#" + n27[1] + n27[1] + n27[2] + n27[2] + n27[3] + n27[3]), "string" == typeof n27 && /^#[0-9A-Fa-f]{6}$/.test(n27)) {
            var u5 = parseInt(n27.substr(1), 16);
            n27 = u5 >> 16 & 255, i28 = u5 >> 8 & 255, a19 = 255 & u5;
        }
        if (void 0 === i28 || void 0 === o15 && n27 === i28 && i28 === a19) {
            if ("string" == typeof n27) r = n27 + " " + s7[0];
            else switch(e.precision){
                case 2:
                    r = R1(n27 / 255) + " " + s7[0];
                    break;
                case 3:
                default:
                    r = T1(n27 / 255) + " " + s7[0];
            }
        } else if (void 0 === o15 || "object" === _typeofDefault.default(o15)) {
            if (o15 && !isNaN(o15.a) && 0 === o15.a) return r = [
                "1.",
                "1.",
                "1.",
                s7[1]
            ].join(" ");
            if ("string" == typeof n27) r = [
                n27,
                i28,
                a19,
                s7[1]
            ].join(" ");
            else switch(e.precision){
                case 2:
                    r = [
                        R1(n27 / 255),
                        R1(i28 / 255),
                        R1(a19 / 255),
                        s7[1]
                    ].join(" ");
                    break;
                default:
                case 3:
                    r = [
                        T1(n27 / 255),
                        T1(i28 / 255),
                        T1(a19 / 255),
                        s7[1]
                    ].join(" ");
            }
        } else if ("string" == typeof n27) r = [
            n27,
            i28,
            a19,
            o15,
            s7[2]
        ].join(" ");
        else switch(e.precision){
            case 2:
                r = [
                    R1(n27),
                    R1(i28),
                    R1(a19),
                    R1(o15),
                    s7[2]
                ].join(" ");
                break;
            case 3:
            default:
                r = [
                    T1(n27),
                    T1(i28),
                    T1(a19),
                    T1(o15),
                    s7[2]
                ].join(" ");
        }
        return r;
    }, ne1 = y1.__private__.getFilters = function() {
        return u3;
    }, ie1 = y1.__private__.putStream = function(t4) {
        var e = (t4 = t4 || {}).data || "", r = t4.filters || ne1(), n28 = t4.alreadyAppliedFilters || [], i29 = t4.addLength1 || !1, a20 = e.length, o16 = t4.objectId, s8 = function(t) {
            return t;
        };
        if (null !== m1 && void 0 === o16) throw new Error("ObjectId must be passed to putStream for file encryption");
        null !== m1 && (s8 = Ye.encryptor(o16, 0));
        var c8 = {};
        !0 === r && (r = [
            "FlateEncode"
        ]);
        var u6 = t4.additionalKeyValues || [], h4 = (c8 = void 0 !== E.API.processDataByFilters ? E.API.processDataByFilters(e, r) : {
            data: e,
            reverseChain: []
        }).reverseChain + (Array.isArray(n28) ? n28.join(" ") : n28.toString());
        if (0 !== c8.data.length && (u6.push({
            key: "Length",
            value: c8.data.length
        }), !0 === i29 && u6.push({
            key: "Length1",
            value: a20
        })), 0 != h4.length) {
            if (h4.split("/").length - 1 == 1) u6.push({
                key: "Filter",
                value: h4
            });
            else {
                u6.push({
                    key: "Filter",
                    value: "[" + h4 + "]"
                });
                for(var l3 = 0; l3 < u6.length; l3 += 1)if ("DecodeParms" === u6[l3].key) {
                    for(var f3 = [], d3 = 0; d3 < c8.reverseChain.split("/").length - 1; d3 += 1)f3.push("null");
                    f3.push(u6[l3].value), u6[l3].value = "[" + f3.join(" ") + "]";
                }
            }
        }
        lt1("<<");
        for(var p3 = 0; p3 < u6.length; p3++)lt1("/" + u6[p3].key + " " + u6[p3].value);
        lt1(">>"), 0 !== c8.data.length && (lt1("stream"), lt1(s8(c8.data)), lt1("endstream"));
    }, ae1 = y1.__private__.putPage = function(t) {
        var e = t.number, r = t.data, n29 = t.objId, i30 = t.contentsObjId;
        Zt1(n29, !0), lt1("<</Type /Page"), lt1("/Parent " + t.rootDictionaryObjId + " 0 R"), lt1("/Resources " + t.resourceDictionaryObjId + " 0 R"), lt1("/MediaBox [" + parseFloat(O1(t.mediaBox.bottomLeftX)) + " " + parseFloat(O1(t.mediaBox.bottomLeftY)) + " " + O1(t.mediaBox.topRightX) + " " + O1(t.mediaBox.topRightY) + "]"), null !== t.cropBox && lt1("/CropBox [" + O1(t.cropBox.bottomLeftX) + " " + O1(t.cropBox.bottomLeftY) + " " + O1(t.cropBox.topRightX) + " " + O1(t.cropBox.topRightY) + "]"), null !== t.bleedBox && lt1("/BleedBox [" + O1(t.bleedBox.bottomLeftX) + " " + O1(t.bleedBox.bottomLeftY) + " " + O1(t.bleedBox.topRightX) + " " + O1(t.bleedBox.topRightY) + "]"), null !== t.trimBox && lt1("/TrimBox [" + O1(t.trimBox.bottomLeftX) + " " + O1(t.trimBox.bottomLeftY) + " " + O1(t.trimBox.topRightX) + " " + O1(t.trimBox.topRightY) + "]"), null !== t.artBox && lt1("/ArtBox [" + O1(t.artBox.bottomLeftX) + " " + O1(t.artBox.bottomLeftY) + " " + O1(t.artBox.topRightX) + " " + O1(t.artBox.topRightY) + "]"), "number" == typeof t.userUnit && 1 !== t.userUnit && lt1("/UserUnit " + t.userUnit), Tt1.publish("putPage", {
            objId: n29,
            pageContext: Rt1[e],
            pageNumber: e,
            page: r
        }), lt1("/Contents " + i30 + " 0 R"), lt1(">>"), lt1("endobj");
        var a21 = r.join("\n");
        return S1 === x1.ADVANCED && (a21 += "\nQ"), Zt1(i30, !0), ie1({
            data: a21,
            filters: ne1(),
            objectId: i30
        }), lt1("endobj"), n29;
    }, oe1 = y1.__private__.putPages = function() {
        var t, e, r = [];
        for(t = 1; t <= Dt1; t++)Rt1[t].objId = Kt1(), Rt1[t].contentsObjId = Kt1();
        for(t = 1; t <= Dt1; t++)r.push(ae1({
            number: t,
            data: ot1[t],
            objId: Rt1[t].objId,
            contentsObjId: Rt1[t].contentsObjId,
            mediaBox: Rt1[t].mediaBox,
            cropBox: Rt1[t].cropBox,
            bleedBox: Rt1[t].bleedBox,
            trimBox: Rt1[t].trimBox,
            artBox: Rt1[t].artBox,
            userUnit: Rt1[t].userUnit,
            rootDictionaryObjId: Qt1,
            resourceDictionaryObjId: te1
        }));
        Zt1(Qt1, !0), lt1("<</Type /Pages");
        var n30 = "/Kids [";
        for(e = 0; e < Dt1; e++)n30 += r[e] + " 0 R ";
        lt1(n30 + "]"), lt1("/Count " + Dt1), lt1(">>"), lt1("endobj"), Tt1.publish("postPutPages");
    }, se1 = function(t) {
        Tt1.publish("putFont", {
            font: t,
            out: lt1,
            newObject: Xt1,
            putStream: ie1
        }), !0 !== t.isAlreadyPutted && (t.objectNumber = Xt1(), lt1("<<"), lt1("/Type /Font"), lt1("/BaseFont /" + F(t.postScriptName)), lt1("/Subtype /Type1"), "string" == typeof t.encoding && lt1("/Encoding /" + t.encoding), lt1("/FirstChar 32"), lt1("/LastChar 255"), lt1(">>"), lt1("endobj"));
    }, ce1 = function() {
        for(var t in Ft1)Ft1.hasOwnProperty(t) && (!1 === v1 || !0 === v1 && b1.hasOwnProperty(t)) && se1(Ft1[t]);
    }, ue1 = function(t) {
        t.objectNumber = Xt1();
        var e = [];
        e.push({
            key: "Type",
            value: "/XObject"
        }), e.push({
            key: "Subtype",
            value: "/Form"
        }), e.push({
            key: "BBox",
            value: "[" + [
                O1(t.x),
                O1(t.y),
                O1(t.x + t.width),
                O1(t.y + t.height)
            ].join(" ") + "]"
        }), e.push({
            key: "Matrix",
            value: "[" + t.matrix.toString() + "]"
        });
        var r = t.pages[1].join("\n");
        ie1({
            data: r,
            additionalKeyValues: e,
            objectId: t.objectNumber
        }), lt1("endobj");
    }, he1 = function() {
        for(var t in zt1)zt1.hasOwnProperty(t) && ue1(zt1[t]);
    }, le1 = function(t, e) {
        var r, n31 = [], i31 = 1 / (e - 1);
        for(r = 0; r < 1; r += i31)n31.push(r);
        if (n31.push(1), 0 != t[0].offset) {
            var a22 = {
                offset: 0,
                color: t[0].color
            };
            t.unshift(a22);
        }
        if (1 != t[t.length - 1].offset) {
            var o17 = {
                offset: 1,
                color: t[t.length - 1].color
            };
            t.push(o17);
        }
        for(var s9 = "", c9 = 0, u7 = 0; u7 < n31.length; u7++){
            for(r = n31[u7]; r > t[c9 + 1].offset;)c9++;
            var h5 = t[c9].offset, l4 = (r - h5) / (t[c9 + 1].offset - h5), f4 = t[c9].color, d4 = t[c9 + 1].color;
            s9 += tt1(Math.round((1 - l4) * f4[0] + l4 * d4[0]).toString(16)) + tt1(Math.round((1 - l4) * f4[1] + l4 * d4[1]).toString(16)) + tt1(Math.round((1 - l4) * f4[2] + l4 * d4[2]).toString(16));
        }
        return s9.trim();
    }, fe1 = function(t, e) {
        e || (e = 21);
        var r = Xt1(), n32 = le1(t.colors, e), i32 = [];
        i32.push({
            key: "FunctionType",
            value: "0"
        }), i32.push({
            key: "Domain",
            value: "[0.0 1.0]"
        }), i32.push({
            key: "Size",
            value: "[" + e + "]"
        }), i32.push({
            key: "BitsPerSample",
            value: "8"
        }), i32.push({
            key: "Range",
            value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
        }), i32.push({
            key: "Decode",
            value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
        }), ie1({
            data: n32,
            additionalKeyValues: i32,
            alreadyAppliedFilters: [
                "/ASCIIHexDecode"
            ],
            objectId: r
        }), lt1("endobj"), t.objectNumber = Xt1(), lt1("<< /ShadingType " + t.type), lt1("/ColorSpace /DeviceRGB");
        var a23 = "/Coords [" + O1(parseFloat(t.coords[0])) + " " + O1(parseFloat(t.coords[1])) + " ";
        2 === t.type ? a23 += O1(parseFloat(t.coords[2])) + " " + O1(parseFloat(t.coords[3])) : a23 += O1(parseFloat(t.coords[2])) + " " + O1(parseFloat(t.coords[3])) + " " + O1(parseFloat(t.coords[4])) + " " + O1(parseFloat(t.coords[5])), lt1(a23 += "]"), t.matrix && lt1("/Matrix [" + t.matrix.toString() + "]"), lt1("/Function " + r + " 0 R"), lt1("/Extend [true true]"), lt1(">>"), lt1("endobj");
    }, de1 = function(t, e) {
        var r = Kt1(), n33 = Xt1();
        e.push({
            resourcesOid: r,
            objectOid: n33
        }), t.objectNumber = n33;
        var i33 = [];
        i33.push({
            key: "Type",
            value: "/Pattern"
        }), i33.push({
            key: "PatternType",
            value: "1"
        }), i33.push({
            key: "PaintType",
            value: "1"
        }), i33.push({
            key: "TilingType",
            value: "1"
        }), i33.push({
            key: "BBox",
            value: "[" + t.boundingBox.map(O1).join(" ") + "]"
        }), i33.push({
            key: "XStep",
            value: O1(t.xStep)
        }), i33.push({
            key: "YStep",
            value: O1(t.yStep)
        }), i33.push({
            key: "Resources",
            value: r + " 0 R"
        }), t.matrix && i33.push({
            key: "Matrix",
            value: "[" + t.matrix.toString() + "]"
        }), ie1({
            data: t.stream,
            additionalKeyValues: i33,
            objectId: t.objectNumber
        }), lt1("endobj");
    }, pe1 = function(t) {
        var e;
        for(e in Ot1)Ot1.hasOwnProperty(e) && (Ot1[e] instanceof B ? fe1(Ot1[e]) : Ot1[e] instanceof M && de1(Ot1[e], t));
    }, ge1 = function(t) {
        for(var e in t.objectNumber = Xt1(), lt1("<<"), t)switch(e){
            case "opacity":
                lt1("/ca " + R1(t[e]));
                break;
            case "stroke-opacity":
                lt1("/CA " + R1(t[e]));
        }
        lt1(">>"), lt1("endobj");
    }, me1 = function() {
        var t;
        for(t in Mt1)Mt1.hasOwnProperty(t) && ge1(Mt1[t]);
    }, ve1 = function() {
        for(var t in lt1("/XObject <<"), zt1)zt1.hasOwnProperty(t) && zt1[t].objectNumber >= 0 && lt1("/" + t + " " + zt1[t].objectNumber + " 0 R");
        Tt1.publish("putXobjectDict"), lt1(">>");
    }, be1 = function() {
        Ye.oid = Xt1(), lt1("<<"), lt1("/Filter /Standard"), lt1("/V " + Ye.v), lt1("/R " + Ye.r), lt1("/U <" + Ye.toHexString(Ye.U) + ">"), lt1("/O <" + Ye.toHexString(Ye.O) + ">"), lt1("/P " + Ye.P), lt1(">>"), lt1("endobj");
    }, ye1 = function() {
        for(var t in lt1("/Font <<"), Ft1)Ft1.hasOwnProperty(t) && (!1 === v1 || !0 === v1 && b1.hasOwnProperty(t)) && lt1("/" + t + " " + Ft1[t].objectNumber + " 0 R");
        lt1(">>");
    }, we1 = function() {
        if (Object.keys(Ot1).length > 0) {
            for(var t in lt1("/Shading <<"), Ot1)Ot1.hasOwnProperty(t) && Ot1[t] instanceof B && Ot1[t].objectNumber >= 0 && lt1("/" + t + " " + Ot1[t].objectNumber + " 0 R");
            Tt1.publish("putShadingPatternDict"), lt1(">>");
        }
    }, Ne1 = function(t) {
        if (Object.keys(Ot1).length > 0) {
            for(var e in lt1("/Pattern <<"), Ot1)Ot1.hasOwnProperty(e) && Ot1[e] instanceof y1.TilingPattern && Ot1[e].objectNumber >= 0 && Ot1[e].objectNumber < t && lt1("/" + e + " " + Ot1[e].objectNumber + " 0 R");
            Tt1.publish("putTilingPatternDict"), lt1(">>");
        }
    }, Le1 = function() {
        if (Object.keys(Mt1).length > 0) {
            var t;
            for(t in lt1("/ExtGState <<"), Mt1)Mt1.hasOwnProperty(t) && Mt1[t].objectNumber >= 0 && lt1("/" + t + " " + Mt1[t].objectNumber + " 0 R");
            Tt1.publish("putGStateDict"), lt1(">>");
        }
    }, Ae = function(t) {
        Zt1(t.resourcesOid, !0), lt1("<<"), lt1("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"), ye1(), we1(), Ne1(t.objectOid), Le1(), ve1(), lt1(">>"), lt1("endobj");
    }, xe = function() {
        var t = [];
        ce1(), me1(), he1(), pe1(t), Tt1.publish("putResources"), t.forEach(Ae), Ae({
            resourcesOid: te1,
            objectOid: Number.MAX_SAFE_INTEGER
        }), Tt1.publish("postPutResources");
    }, Se = function() {
        Tt1.publish("putAdditionalObjects");
        for(var t = 0; t < at1.length; t++){
            var e = at1[t];
            Zt1(e.objId, !0), lt1(e.content), lt1("endobj");
        }
        Tt1.publish("postPutAdditionalObjects");
    }, _e = function(t) {
        Ct1[t.fontName] = Ct1[t.fontName] || {}, Ct1[t.fontName][t.fontStyle] = t.id;
    }, Pe = function(t, e, r, n34, i34) {
        var a24 = {
            id: "F" + (Object.keys(Ft1).length + 1).toString(10),
            postScriptName: t,
            fontName: e,
            fontStyle: r,
            encoding: n34,
            isStandardFont: i34 || !1,
            metadata: {}
        };
        return Tt1.publish("addFont", {
            font: a24,
            instance: this
        }), Ft1[a24.id] = a24, _e(a24), a24.id;
    }, ke = function(t) {
        for(var e = 0, r = pt1.length; e < r; e++){
            var n35 = Pe.call(this, t[e][0], t[e][1], t[e][2], pt1[e][3], !0);
            !1 === v1 && (b1[n35] = !0);
            var i35 = t[e][0].split("-");
            _e({
                id: n35,
                fontName: i35[0],
                fontStyle: i35[1] || ""
            });
        }
        Tt1.publish("addFonts", {
            fonts: Ft1,
            dictionary: Ct1
        });
    }, Ie = function(t5) {
        return t5.foo = function() {
            try {
                return t5.apply(this, arguments);
            } catch (t) {
                var e = t.stack || "";
                ~e.indexOf(" at ") && (e = e.split(" at ")[1]);
                var r = "Error in function " + e.split("\n")[0].split("<")[0] + ": " + t.message;
                if (!n.console) throw new Error(r);
                n.console.error(r, t), n.alert && alert(r);
            }
        }, t5.foo.bar = t5, t5.foo;
    }, Fe = function(t, e) {
        var r, n36, i36, a25, o18, s10, c10, u8, h6;
        if (i36 = (e = e || {}).sourceEncoding || "Unicode", o18 = e.outputEncoding, (e.autoencode || o18) && Ft1[St1].metadata && Ft1[St1].metadata[i36] && Ft1[St1].metadata[i36].encoding && (a25 = Ft1[St1].metadata[i36].encoding, !o18 && Ft1[St1].encoding && (o18 = Ft1[St1].encoding), !o18 && a25.codePages && (o18 = a25.codePages[0]), "string" == typeof o18 && (o18 = a25[o18]), o18)) {
            for(c10 = !1, s10 = [], r = 0, n36 = t.length; r < n36; r++)(u8 = o18[t.charCodeAt(r)]) ? s10.push(String.fromCharCode(u8)) : s10.push(t[r]), s10[r].charCodeAt(0) >> 8 && (c10 = !0);
            t = s10.join("");
        }
        for(r = t.length; void 0 === c10 && 0 !== r;)t.charCodeAt(r - 1) >> 8 && (c10 = !0), r--;
        if (!c10) return t;
        for(s10 = e.noBOM ? [] : [
            254,
            255
        ], r = 0, n36 = t.length; r < n36; r++){
            if ((h6 = (u8 = t.charCodeAt(r)) >> 8) >> 8) throw new Error("Character at position " + r + " of string '" + t + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
            s10.push(h6), s10.push(u8 - (h6 << 8));
        }
        return String.fromCharCode.apply(void 0, s10);
    }, Ce = y1.__private__.pdfEscape = y1.pdfEscape = function(t, e) {
        return Fe(t, e).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
    }, je = y1.__private__.beginPage = function(t) {
        ot1[++Dt1] = [], Rt1[Dt1] = {
            objId: 0,
            contentsObjId: 0,
            userUnit: Number(d2),
            artBox: null,
            bleedBox: null,
            cropBox: null,
            trimBox: null,
            mediaBox: {
                bottomLeftX: 0,
                bottomLeftY: 0,
                topRightX: Number(t[0]),
                topRightY: Number(t[1])
            }
        }, Me(Dt1), ht1(ot1[$1]);
    }, Oe = function(t, e) {
        var r, n37, o19;
        switch(i19 = e || i19, "string" == typeof t && (r = A1(t.toLowerCase()), Array.isArray(r) && (n37 = r[0], o19 = r[1])), Array.isArray(t) && (n37 = t[0] * _t1, o19 = t[1] * _t1), isNaN(n37) && (n37 = s4[0], o19 = s4[1]), (n37 > 14400 || o19 > 14400) && (a.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"), n37 = Math.min(14400, n37), o19 = Math.min(14400, o19)), s4 = [
            n37,
            o19
        ], i19.substr(0, 1)){
            case "l":
                o19 > n37 && (s4 = [
                    o19,
                    n37
                ]);
                break;
            case "p":
                n37 > o19 && (s4 = [
                    o19,
                    n37
                ]);
        }
        je(s4), pr(fr), lt1(Lr), 0 !== kr && lt1(kr + " J"), 0 !== Ir && lt1(Ir + " j"), Tt1.publish("addPage", {
            pageNumber: Dt1
        });
    }, Be = function(t) {
        t > 0 && t <= Dt1 && (ot1.splice(t, 1), Rt1.splice(t, 1), Dt1--, $1 > Dt1 && ($1 = Dt1), this.setPage($1));
    }, Me = function(t) {
        t > 0 && t <= Dt1 && ($1 = t);
    }, Ee = y1.__private__.getNumberOfPages = y1.getNumberOfPages = function() {
        return ot1.length - 1;
    }, qe = function(t, e, r) {
        var n38, i37 = void 0;
        return r = r || {}, t = void 0 !== t ? t : Ft1[St1].fontName, e = void 0 !== e ? e : Ft1[St1].fontStyle, n38 = t.toLowerCase(), void 0 !== Ct1[n38] && void 0 !== Ct1[n38][e] ? i37 = Ct1[n38][e] : void 0 !== Ct1[t] && void 0 !== Ct1[t][e] ? i37 = Ct1[t][e] : !1 === r.disableWarning && a.warn("Unable to look up font label for font '" + t + "', '" + e + "'. Refer to getFontList() for available fonts."), i37 || r.noFallback || null == (i37 = Ct1.times[e]) && (i37 = Ct1.times.normal), i37;
    }, De = y1.__private__.putInfo = function() {
        var t6 = Xt1(), e = function(t) {
            return t;
        };
        for(var r in null !== m1 && (e = Ye.encryptor(t6, 0)), lt1("<<"), lt1("/Producer (" + Ce(e("jsPDF " + E.version)) + ")"), xt1)xt1.hasOwnProperty(r) && xt1[r] && lt1("/" + r.substr(0, 1).toUpperCase() + r.substr(1) + " (" + Ce(e(xt1[r])) + ")");
        lt1("/CreationDate (" + Ce(e(W1)) + ")"), lt1(">>"), lt1("endobj");
    }, Re = y1.__private__.putCatalog = function(t) {
        var e = (t = t || {}).rootDictionaryObjId || Qt1;
        switch(Xt1(), lt1("<<"), lt1("/Type /Catalog"), lt1("/Pages " + e + " 0 R"), mt1 || (mt1 = "fullwidth"), mt1){
            case "fullwidth":
                lt1("/OpenAction [3 0 R /FitH null]");
                break;
            case "fullheight":
                lt1("/OpenAction [3 0 R /FitV null]");
                break;
            case "fullpage":
                lt1("/OpenAction [3 0 R /Fit]");
                break;
            case "original":
                lt1("/OpenAction [3 0 R /XYZ null null 1]");
                break;
            default:
                var r = "" + mt1;
                "%" === r.substr(r.length - 1) && (mt1 = parseInt(mt1) / 100), "number" == typeof mt1 && lt1("/OpenAction [3 0 R /XYZ null null " + R1(mt1) + "]");
        }
        switch(Nt1 || (Nt1 = "continuous"), Nt1){
            case "continuous":
                lt1("/PageLayout /OneColumn");
                break;
            case "single":
                lt1("/PageLayout /SinglePage");
                break;
            case "two":
            case "twoleft":
                lt1("/PageLayout /TwoColumnLeft");
                break;
            case "tworight":
                lt1("/PageLayout /TwoColumnRight");
        }
        yt1 && lt1("/PageMode /" + yt1), Tt1.publish("putCatalog"), lt1(">>"), lt1("endobj");
    }, Te = y1.__private__.putTrailer = function() {
        lt1("trailer"), lt1("<<"), lt1("/Size " + (et1 + 1)), lt1("/Root " + et1 + " 0 R"), lt1("/Info " + (et1 - 1) + " 0 R"), null !== m1 && lt1("/Encrypt " + Ye.oid + " 0 R"), lt1("/ID [ <" + V1 + "> <" + V1 + "> ]"), lt1(">>");
    }, Ue = y1.__private__.putHeader = function() {
        lt1("%PDF-" + w1), lt1("%ºß¬à");
    }, ze = y1.__private__.putXRef = function() {
        var t = "0000000000";
        lt1("xref"), lt1("0 " + (et1 + 1)), lt1("0000000000 65535 f ");
        for(var e = 1; e <= et1; e++)"function" == typeof rt1[e] ? lt1((t + rt1[e]()).slice(-10) + " 00000 n ") : void 0 !== rt1[e] ? lt1((t + rt1[e]).slice(-10) + " 00000 n ") : lt1("0000000000 00000 n ");
    }, He = y1.__private__.buildDocument = function() {
        ut1(), ht1(nt1), Tt1.publish("buildDocument"), Ue(), oe1(), Se(), xe(), null !== m1 && be1(), De(), Re();
        var t = it1;
        return ze(), Te(), lt1("startxref"), lt1("" + t), lt1("%%EOF"), ht1(ot1[$1]), nt1.join("\n");
    }, We = y1.__private__.getBlob = function(t) {
        return new Blob([
            dt1(t)
        ], {
            type: "application/pdf"
        });
    }, Ve = y1.output = y1.__private__.output = Ie(function(t, e) {
        switch("string" == typeof (e = e || {}) ? e = {
            filename: e
        } : e.filename = e.filename || "generated.pdf", t){
            case void 0:
                return He();
            case "save":
                y1.save(e.filename);
                break;
            case "arraybuffer":
                return dt1(He());
            case "blob":
                return We(He());
            case "bloburi":
            case "bloburl":
                if (void 0 !== n.URL && "function" == typeof n.URL.createObjectURL) return n.URL && n.URL.createObjectURL(We(He())) || void 0;
                a.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
                break;
            case "datauristring":
            case "dataurlstring":
                var r = "", i38 = He();
                try {
                    r = h(i38);
                } catch (t7) {
                    r = h(unescape(encodeURIComponent(i38)));
                }
                return "data:application/pdf;filename=" + e.filename + ";base64," + r;
            case "pdfobjectnewwindow":
                if ("[object Window]" === Object.prototype.toString.call(n)) {
                    var o20 = "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js", s11 = ' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';
                    e.pdfObjectUrl && (o20 = e.pdfObjectUrl, s11 = "");
                    var c11 = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + o20 + '"' + s11 + '><\/script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(e) + ");<\/script></body></html>", u9 = n.open();
                    return null !== u9 && u9.document.write(c11), u9;
                }
                throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");
            case "pdfjsnewwindow":
                if ("[object Window]" === Object.prototype.toString.call(n)) {
                    var l5 = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + (e.pdfJsUrl || "examples/PDF.js/web/viewer.html") + "?file=&downloadName=" + e.filename + '" width="500px" height="400px" /></body></html>', f5 = n.open();
                    if (null !== f5) {
                        f5.document.write(l5);
                        var d5 = this;
                        f5.document.documentElement.querySelector("#pdfViewer").onload = function() {
                            f5.document.title = e.filename, f5.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(d5.output("bloburl"));
                        };
                    }
                    return f5;
                }
                throw new Error("The option pdfjsnewwindow just works in a browser-environment.");
            case "dataurlnewwindow":
                if ("[object Window]" !== Object.prototype.toString.call(n)) throw new Error("The option dataurlnewwindow just works in a browser-environment.");
                var p4 = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", e) + '"></iframe></body></html>', g2 = n.open();
                if (null !== g2 && (g2.document.write(p4), g2.document.title = e.filename), g2 || "undefined" == typeof safari) return g2;
                break;
            case "datauri":
            case "dataurl":
                return n.document.location.href = this.output("datauristring", e);
            default:
                return null;
        }
    }), Ge = function(t) {
        return !0 === Array.isArray(Ut1) && Ut1.indexOf(t) > -1;
    };
    switch(o9){
        case "pt":
            _t1 = 1;
            break;
        case "mm":
            _t1 = 72 / 25.4;
            break;
        case "cm":
            _t1 = 72 / 2.54;
            break;
        case "in":
            _t1 = 72;
            break;
        case "px":
            _t1 = 1 == Ge("px_scaling") ? .75 : 96 / 72;
            break;
        case "pc":
        case "em":
            _t1 = 12;
            break;
        case "ex":
            _t1 = 6;
            break;
        default:
            if ("number" != typeof o9) throw new Error("Invalid unit: " + o9);
            _t1 = o9;
    }
    var Ye = null;
    K1(), Y1();
    var Je = function(t8) {
        return null !== m1 ? Ye.encryptor(t8, 0) : function(t) {
            return t;
        };
    }, Xe = y1.__private__.getPageInfo = y1.getPageInfo = function(t) {
        if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfo");
        return {
            objId: Rt1[t].objId,
            pageNumber: t,
            pageContext: Rt1[t]
        };
    }, Ke = y1.__private__.getPageInfoByObjId = function(t) {
        if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
        for(var e in Rt1)if (Rt1[e].objId === t) break;
        return Xe(e);
    }, Ze = y1.__private__.getCurrentPageInfo = y1.getCurrentPageInfo = function() {
        return {
            objId: Rt1[$1].objId,
            pageNumber: $1,
            pageContext: Rt1[$1]
        };
    };
    y1.addPage = function() {
        return Oe.apply(this, arguments), this;
    }, y1.setPage = function() {
        return Me.apply(this, arguments), ht1.call(this, ot1[$1]), this;
    }, y1.insertPage = function(t) {
        return this.addPage(), this.movePage($1, t), this;
    }, y1.movePage = function(t, e) {
        var r, n39;
        if (t > e) {
            r = ot1[t], n39 = Rt1[t];
            for(var i39 = t; i39 > e; i39--)ot1[i39] = ot1[i39 - 1], Rt1[i39] = Rt1[i39 - 1];
            ot1[e] = r, Rt1[e] = n39, this.setPage(e);
        } else if (t < e) {
            r = ot1[t], n39 = Rt1[t];
            for(var a26 = t; a26 < e; a26++)ot1[a26] = ot1[a26 + 1], Rt1[a26] = Rt1[a26 + 1];
            ot1[e] = r, Rt1[e] = n39, this.setPage(e);
        }
        return this;
    }, y1.deletePage = function() {
        return Be.apply(this, arguments), this;
    }, y1.__private__.text = y1.text = function(e5, r4, n40, i40, a27) {
        var o21, s12, c12, u10, h7, l6, f6, d6, p5, g3 = (i40 = i40 || {}).scope || this;
        if ("number" == typeof e5 && "number" == typeof r4 && ("string" == typeof n40 || Array.isArray(n40))) {
            var m2 = n40;
            n40 = r4, r4 = e5, e5 = m2;
        }
        if (arguments[3] instanceof Vt1 == !1 ? (c12 = arguments[4], u10 = arguments[5], "object" === _typeofDefault.default(f6 = arguments[3]) && null !== f6 || ("string" == typeof c12 && (u10 = c12, c12 = null), "string" == typeof f6 && (u10 = f6, f6 = null), "number" == typeof f6 && (c12 = f6, f6 = null), i40 = {
            flags: f6,
            angle: c12,
            align: u10
        })) : (q1("The transform parameter of text() with a Matrix value"), p5 = a27), isNaN(r4) || isNaN(n40) || null == e5) throw new Error("Invalid arguments passed to jsPDF.text");
        if (0 === e5.length) return g3;
        var v2 = "", y2 = !1, w2 = "number" == typeof i40.lineHeightFactor ? i40.lineHeightFactor : lr, N2 = g3.internal.scaleFactor;
        function L2(t) {
            return t = t.split("\t").join(Array(i40.TabLen || 9).join(" ")), Ce(t, f6);
        }
        function A2(t) {
            for(var e, r = t.concat(), n41 = [], i41 = r.length; i41--;)"string" == typeof (e = r.shift()) ? n41.push(e) : Array.isArray(t) && (1 === e.length || void 0 === e[1] && void 0 === e[2]) ? n41.push(e[0]) : n41.push([
                e[0],
                e[1],
                e[2]
            ]);
            return n41;
        }
        function _2(t, e) {
            var r;
            if ("string" == typeof t) r = e(t)[0];
            else if (Array.isArray(t)) {
                for(var n42, i42, a28 = t.concat(), o22 = [], s13 = a28.length; s13--;)"string" == typeof (n42 = a28.shift()) ? o22.push(e(n42)[0]) : Array.isArray(n42) && "string" == typeof n42[0] && (i42 = e(n42[0], n42[1], n42[2]), o22.push([
                    i42[0],
                    i42[1],
                    i42[2]
                ]));
                r = o22;
            }
            return r;
        }
        var P2 = !1, k2 = !0;
        if ("string" == typeof e5) P2 = !0;
        else if (Array.isArray(e5)) {
            var I1 = e5.concat();
            s12 = [];
            for(var F1, C1 = I1.length; C1--;)("string" != typeof (F1 = I1.shift()) || Array.isArray(F1) && "string" != typeof F1[0]) && (k2 = !1);
            P2 = k2;
        }
        if (!1 === P2) throw new Error('Type of text must be string or Array. "' + e5 + '" is not recognized.');
        "string" == typeof e5 && (e5 = e5.match(/[\r?\n]/) ? e5.split(/\r\n|\r|\n/g) : [
            e5
        ]);
        var j1 = gt1 / g3.internal.scaleFactor, B1 = j1 * (w2 - 1);
        switch(i40.baseline){
            case "bottom":
                n40 -= B1;
                break;
            case "top":
                n40 += j1 - B1;
                break;
            case "hanging":
                n40 += j1 - 2 * B1;
                break;
            case "middle":
                n40 += j1 / 2 - B1;
        }
        if ((l6 = i40.maxWidth || 0) > 0 && ("string" == typeof e5 ? e5 = g3.splitTextToSize(e5, l6) : "[object Array]" === Object.prototype.toString.call(e5) && (e5 = e5.reduce(function(t, e) {
            return t.concat(g3.splitTextToSize(e, l6));
        }, []))), o21 = {
            text: e5,
            x: r4,
            y: n40,
            options: i40,
            mutex: {
                pdfEscape: Ce,
                activeFontKey: St1,
                fonts: Ft1,
                activeFontSize: gt1
            }
        }, Tt1.publish("preProcessText", o21), e5 = o21.text, c12 = (i40 = o21.options).angle, p5 instanceof Vt1 == !1 && c12 && "number" == typeof c12) {
            c12 *= Math.PI / 180, 0 === i40.rotationDirection && (c12 = -c12), S1 === x1.ADVANCED && (c12 = -c12);
            var M1 = Math.cos(c12), E1 = Math.sin(c12);
            p5 = new Vt1(M1, E1, -E1, M1, 0, 0);
        } else c12 && c12 instanceof Vt1 && (p5 = c12);
        S1 !== x1.ADVANCED || p5 || (p5 = Yt1), void 0 !== (h7 = i40.charSpace || _r) && (v2 += O1(U1(h7)) + " Tc\n", this.setCharSpace(this.getCharSpace() || 0)), void 0 !== (d6 = i40.horizontalScale) && (v2 += O1(100 * d6) + " Tz\n");
        i40.lang;
        var D2 = -1, R2 = void 0 !== i40.renderingMode ? i40.renderingMode : i40.stroke, T2 = g3.internal.getCurrentPageInfo().pageContext;
        switch(R2){
            case 0:
            case !1:
            case "fill":
                D2 = 0;
                break;
            case 1:
            case !0:
            case "stroke":
                D2 = 1;
                break;
            case 2:
            case "fillThenStroke":
                D2 = 2;
                break;
            case 3:
            case "invisible":
                D2 = 3;
                break;
            case 4:
            case "fillAndAddForClipping":
                D2 = 4;
                break;
            case 5:
            case "strokeAndAddPathForClipping":
                D2 = 5;
                break;
            case 6:
            case "fillThenStrokeAndAddToPathForClipping":
                D2 = 6;
                break;
            case 7:
            case "addToPathForClipping":
                D2 = 7;
        }
        var z2 = void 0 !== T2.usedRenderingMode ? T2.usedRenderingMode : -1;
        -1 !== D2 ? v2 += D2 + " Tr\n" : -1 !== z2 && (v2 += "0 Tr\n"), -1 !== D2 && (T2.usedRenderingMode = D2), u10 = i40.align || "left";
        var H2, W2 = gt1 * w2, V2 = g3.internal.pageSize.getWidth(), G2 = Ft1[St1];
        h7 = i40.charSpace || _r, l6 = i40.maxWidth || 0, f6 = Object.assign({
            autoencode: !0,
            noBOM: !0
        }, i40.flags);
        var Y2 = [];
        if ("[object Array]" === Object.prototype.toString.call(e5)) {
            var J2;
            s12 = A2(e5), "left" !== u10 && (H2 = s12.map(function(t) {
                return g3.getStringUnitWidth(t, {
                    font: G2,
                    charSpace: h7,
                    fontSize: gt1,
                    doKerning: !1
                }) * gt1 / N2;
            }));
            var X2, K2 = 0;
            if ("right" === u10) {
                r4 -= H2[0], e5 = [], C1 = s12.length;
                for(var Z2 = 0; Z2 < C1; Z2++)0 === Z2 ? (X2 = br(r4), J2 = yr(n40)) : (X2 = U1(K2 - H2[Z2]), J2 = -W2), e5.push([
                    s12[Z2],
                    X2,
                    J2
                ]), K2 = H2[Z2];
            } else if ("center" === u10) {
                r4 -= H2[0] / 2, e5 = [], C1 = s12.length;
                for(var $2 = 0; $2 < C1; $2++)0 === $2 ? (X2 = br(r4), J2 = yr(n40)) : (X2 = U1((K2 - H2[$2]) / 2), J2 = -W2), e5.push([
                    s12[$2],
                    X2,
                    J2
                ]), K2 = H2[$2];
            } else if ("left" === u10) {
                e5 = [], C1 = s12.length;
                for(var Q2 = 0; Q2 < C1; Q2++)e5.push(s12[Q2]);
            } else {
                if ("justify" !== u10) throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
                e5 = [], C1 = s12.length, l6 = 0 !== l6 ? l6 : V2;
                for(var tt2 = 0; tt2 < C1; tt2++)J2 = 0 === tt2 ? yr(n40) : -W2, X2 = 0 === tt2 ? br(r4) : 0, tt2 < C1 - 1 ? Y2.push(O1(U1((l6 - H2[tt2]) / (s12[tt2].split(" ").length - 1)))) : Y2.push(0), e5.push([
                    s12[tt2],
                    X2,
                    J2
                ]);
            }
        }
        var et2 = "boolean" == typeof i40.R2L ? i40.R2L : bt1;
        !0 === et2 && (e5 = _2(e5, function(t, e, r) {
            return [
                t.split("").reverse().join(""),
                e,
                r
            ];
        })), o21 = {
            text: e5,
            x: r4,
            y: n40,
            options: i40,
            mutex: {
                pdfEscape: Ce,
                activeFontKey: St1,
                fonts: Ft1,
                activeFontSize: gt1
            }
        }, Tt1.publish("postProcessText", o21), e5 = o21.text, y2 = o21.mutex.isHex || !1;
        var rt2 = Ft1[St1].encoding;
        "WinAnsiEncoding" !== rt2 && "StandardEncoding" !== rt2 || (e5 = _2(e5, function(t, e, r) {
            return [
                L2(t),
                e,
                r
            ];
        })), s12 = A2(e5), e5 = [];
        for(var nt2, it2, at2, ot2 = 0, st2 = 1, ct2 = Array.isArray(s12[0]) ? st2 : ot2, ut2 = "", ht2 = function(t, e, r) {
            var n43 = "";
            return r instanceof Vt1 ? (r = "number" == typeof i40.angle ? Gt1(r, new Vt1(1, 0, 0, 1, t, e)) : Gt1(new Vt1(1, 0, 0, 1, t, e), r), S1 === x1.ADVANCED && (r = Gt1(new Vt1(1, 0, 0, -1, 0, 0), r)), n43 = r.join(" ") + " Tm\n") : n43 = O1(t) + " " + O1(e) + " Td\n", n43;
        }, ft2 = 0; ft2 < s12.length; ft2++){
            switch(ut2 = "", ct2){
                case st2:
                    at2 = (y2 ? "<" : "(") + s12[ft2][0] + (y2 ? ">" : ")"), nt2 = parseFloat(s12[ft2][1]), it2 = parseFloat(s12[ft2][2]);
                    break;
                case ot2:
                    at2 = (y2 ? "<" : "(") + s12[ft2] + (y2 ? ">" : ")"), nt2 = br(r4), it2 = yr(n40);
            }
            void 0 !== Y2 && void 0 !== Y2[ft2] && (ut2 = Y2[ft2] + " Tw\n"), 0 === ft2 ? e5.push(ut2 + ht2(nt2, it2, p5) + at2) : ct2 === ot2 ? e5.push(ut2 + at2) : ct2 === st2 && e5.push(ut2 + ht2(nt2, it2, p5) + at2);
        }
        e5 = ct2 === ot2 ? e5.join(" Tj\nT* ") : e5.join(" Tj\n"), e5 += " Tj\n";
        var dt2 = "BT\n/";
        return dt2 += St1 + " " + gt1 + " Tf\n", dt2 += O1(gt1 * w2) + " TL\n", dt2 += xr + "\n", dt2 += v2, dt2 += e5, lt1(dt2 += "ET"), b1[St1] = !0, g3;
    };
    var $e = y1.__private__.clip = y1.clip = function(t) {
        return lt1("evenodd" === t ? "W*" : "W"), this;
    };
    y1.clipEvenOdd = function() {
        return $e("evenodd");
    }, y1.__private__.discardPath = y1.discardPath = function() {
        return lt1("n"), this;
    };
    var Qe = y1.__private__.isValidStyle = function(t) {
        var e = !1;
        return -1 !== [
            void 0,
            null,
            "S",
            "D",
            "F",
            "DF",
            "FD",
            "f",
            "f*",
            "B",
            "B*",
            "n"
        ].indexOf(t) && (e = !0), e;
    };
    y1.__private__.setDefaultPathOperation = y1.setDefaultPathOperation = function(t) {
        return Qe(t) && (g1 = t), this;
    };
    var tr = y1.__private__.getStyle = y1.getStyle = function(t) {
        var e = g1;
        switch(t){
            case "D":
            case "S":
                e = "S";
                break;
            case "F":
                e = "f";
                break;
            case "FD":
            case "DF":
                e = "B";
                break;
            case "f":
            case "f*":
            case "B":
            case "B*":
                e = t;
        }
        return e;
    }, er = y1.close = function() {
        return lt1("h"), this;
    };
    y1.stroke = function() {
        return lt1("S"), this;
    }, y1.fill = function(t) {
        return rr("f", t), this;
    }, y1.fillEvenOdd = function(t) {
        return rr("f*", t), this;
    }, y1.fillStroke = function(t) {
        return rr("B", t), this;
    }, y1.fillStrokeEvenOdd = function(t) {
        return rr("B*", t), this;
    };
    var rr = function(e, r) {
        "object" === _typeofDefault.default(r) ? ar(r, e) : lt1(e);
    }, nr = function(t) {
        null === t || S1 === x1.ADVANCED && void 0 === t || (t = tr(t), lt1(t));
    };
    function ir(t, e, r, n44, i43) {
        var a29 = new M(e || this.boundingBox, r || this.xStep, n44 || this.yStep, this.gState, i43 || this.matrix);
        a29.stream = this.stream;
        var o23 = t + "$$" + this.cloneIndex++ + "$$";
        return Jt1(o23, a29), a29;
    }
    var ar = function(t, e) {
        var r = Bt1[t.key], n45 = Ot1[r];
        if (n45 instanceof B) lt1("q"), lt1(or(e)), n45.gState && y1.setGState(n45.gState), lt1(t.matrix.toString() + " cm"), lt1("/" + r + " sh"), lt1("Q");
        else if (n45 instanceof M) {
            var i44 = new Vt1(1, 0, 0, -1, 0, Rr());
            t.matrix && (i44 = i44.multiply(t.matrix || Yt1), r = ir.call(n45, t.key, t.boundingBox, t.xStep, t.yStep, i44).id), lt1("q"), lt1("/Pattern cs"), lt1("/" + r + " scn"), n45.gState && y1.setGState(n45.gState), lt1(e), lt1("Q");
        }
    }, or = function(t) {
        switch(t){
            case "f":
            case "F":
                return "W n";
            case "f*":
                return "W* n";
            case "B":
                return "W S";
            case "B*":
                return "W* S";
            case "S":
                return "W S";
            case "n":
                return "W n";
        }
    }, sr = y1.moveTo = function(t, e) {
        return lt1(O1(U1(t)) + " " + O1(H1(e)) + " m"), this;
    }, cr = y1.lineTo = function(t, e) {
        return lt1(O1(U1(t)) + " " + O1(H1(e)) + " l"), this;
    }, ur = y1.curveTo = function(t, e, r, n46, i45, a30) {
        return lt1([
            O1(U1(t)),
            O1(H1(e)),
            O1(U1(r)),
            O1(H1(n46)),
            O1(U1(i45)),
            O1(H1(a30)),
            "c"
        ].join(" ")), this;
    };
    y1.__private__.line = y1.line = function(t, e, r, n47, i46) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n47) || !Qe(i46)) throw new Error("Invalid arguments passed to jsPDF.line");
        return S1 === x1.COMPAT ? this.lines([
            [
                r - t,
                n47 - e
            ]
        ], t, e, [
            1,
            1
        ], i46 || "S") : this.lines([
            [
                r - t,
                n47 - e
            ]
        ], t, e, [
            1,
            1
        ]).stroke();
    }, y1.__private__.lines = y1.lines = function(t, e, r, n48, i47, a31) {
        var o24, s14, c13, u11, h8, l7, f7, d7, p6, g4, m3, v3;
        if ("number" == typeof t && (v3 = r, r = e, e = t, t = v3), n48 = n48 || [
            1,
            1
        ], a31 = a31 || !1, isNaN(e) || isNaN(r) || !Array.isArray(t) || !Array.isArray(n48) || !Qe(i47) || "boolean" != typeof a31) throw new Error("Invalid arguments passed to jsPDF.lines");
        for(sr(e, r), o24 = n48[0], s14 = n48[1], u11 = t.length, g4 = e, m3 = r, c13 = 0; c13 < u11; c13++)2 === (h8 = t[c13]).length ? (g4 = h8[0] * o24 + g4, m3 = h8[1] * s14 + m3, cr(g4, m3)) : (l7 = h8[0] * o24 + g4, f7 = h8[1] * s14 + m3, d7 = h8[2] * o24 + g4, p6 = h8[3] * s14 + m3, g4 = h8[4] * o24 + g4, m3 = h8[5] * s14 + m3, ur(l7, f7, d7, p6, g4, m3));
        return a31 && er(), nr(i47), this;
    }, y1.path = function(t) {
        for(var e = 0; e < t.length; e++){
            var r = t[e], n49 = r.c;
            switch(r.op){
                case "m":
                    sr(n49[0], n49[1]);
                    break;
                case "l":
                    cr(n49[0], n49[1]);
                    break;
                case "c":
                    ur.apply(this, n49);
                    break;
                case "h":
                    er();
            }
        }
        return this;
    }, y1.__private__.rect = y1.rect = function(t, e, r, n50, i48) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n50) || !Qe(i48)) throw new Error("Invalid arguments passed to jsPDF.rect");
        return S1 === x1.COMPAT && (n50 = -n50), lt1([
            O1(U1(t)),
            O1(H1(e)),
            O1(U1(r)),
            O1(U1(n50)),
            "re"
        ].join(" ")), nr(i48), this;
    }, y1.__private__.triangle = y1.triangle = function(t, e, r, n51, i49, a32, o25) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n51) || isNaN(i49) || isNaN(a32) || !Qe(o25)) throw new Error("Invalid arguments passed to jsPDF.triangle");
        return this.lines([
            [
                r - t,
                n51 - e
            ],
            [
                i49 - r,
                a32 - n51
            ],
            [
                t - i49,
                e - a32
            ]
        ], t, e, [
            1,
            1
        ], o25, !0), this;
    }, y1.__private__.roundedRect = y1.roundedRect = function(t, e, r, n52, i50, a33, o26) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n52) || isNaN(i50) || isNaN(a33) || !Qe(o26)) throw new Error("Invalid arguments passed to jsPDF.roundedRect");
        var s15 = 4 / 3 * (Math.SQRT2 - 1);
        return i50 = Math.min(i50, .5 * r), a33 = Math.min(a33, .5 * n52), this.lines([
            [
                r - 2 * i50,
                0
            ],
            [
                i50 * s15,
                0,
                i50,
                a33 - a33 * s15,
                i50,
                a33
            ],
            [
                0,
                n52 - 2 * a33
            ],
            [
                0,
                a33 * s15,
                -i50 * s15,
                a33,
                -i50,
                a33
            ],
            [
                2 * i50 - r,
                0
            ],
            [
                -i50 * s15,
                0,
                -i50,
                -a33 * s15,
                -i50,
                -a33
            ],
            [
                0,
                2 * a33 - n52
            ],
            [
                0,
                -a33 * s15,
                i50 * s15,
                -a33,
                i50,
                -a33
            ]
        ], t + i50, e, [
            1,
            1
        ], o26, !0), this;
    }, y1.__private__.ellipse = y1.ellipse = function(t, e, r, n53, i51) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n53) || !Qe(i51)) throw new Error("Invalid arguments passed to jsPDF.ellipse");
        var a34 = 4 / 3 * (Math.SQRT2 - 1) * r, o27 = 4 / 3 * (Math.SQRT2 - 1) * n53;
        return sr(t + r, e), ur(t + r, e - o27, t + a34, e - n53, t, e - n53), ur(t - a34, e - n53, t - r, e - o27, t - r, e), ur(t - r, e + o27, t - a34, e + n53, t, e + n53), ur(t + a34, e + n53, t + r, e + o27, t + r, e), nr(i51), this;
    }, y1.__private__.circle = y1.circle = function(t, e, r, n54) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || !Qe(n54)) throw new Error("Invalid arguments passed to jsPDF.circle");
        return this.ellipse(t, e, r, r, n54);
    }, y1.setFont = function(t, e, r) {
        return r && (e = k1(e, r)), St1 = qe(t, e, {
            disableWarning: !1
        }), this;
    };
    var hr = y1.__private__.getFont = y1.getFont = function() {
        return Ft1[qe.apply(y1, arguments)];
    };
    y1.__private__.getFontList = y1.getFontList = function() {
        var t, e, r = {};
        for(t in Ct1)if (Ct1.hasOwnProperty(t)) for(e in r[t] = [], Ct1[t])Ct1[t].hasOwnProperty(e) && r[t].push(e);
        return r;
    }, y1.addFont = function(t, e, r, n55, i52) {
        var a35 = [
            "StandardEncoding",
            "MacRomanEncoding",
            "Identity-H",
            "WinAnsiEncoding"
        ];
        return arguments[3] && -1 !== a35.indexOf(arguments[3]) ? i52 = arguments[3] : arguments[3] && -1 == a35.indexOf(arguments[3]) && (r = k1(r, n55)), i52 = i52 || "Identity-H", Pe.call(this, t, e, r, i52);
    };
    var lr, fr = e4.lineWidth || .200025, dr = y1.__private__.getLineWidth = y1.getLineWidth = function() {
        return fr;
    }, pr = y1.__private__.setLineWidth = y1.setLineWidth = function(t) {
        return fr = t, lt1(O1(U1(t)) + " w"), this;
    };
    y1.__private__.setLineDash = E.API.setLineDash = E.API.setLineDashPattern = function(t9, e) {
        if (t9 = t9 || [], e = e || 0, isNaN(e) || !Array.isArray(t9)) throw new Error("Invalid arguments passed to jsPDF.setLineDash");
        return t9 = t9.map(function(t) {
            return O1(U1(t));
        }).join(" "), e = O1(U1(e)), lt1("[" + t9 + "] " + e + " d"), this;
    };
    var gr = y1.__private__.getLineHeight = y1.getLineHeight = function() {
        return gt1 * lr;
    };
    y1.__private__.getLineHeight = y1.getLineHeight = function() {
        return gt1 * lr;
    };
    var mr = y1.__private__.setLineHeightFactor = y1.setLineHeightFactor = function(t) {
        return "number" == typeof (t = t || 1.15) && (lr = t), this;
    }, vr = y1.__private__.getLineHeightFactor = y1.getLineHeightFactor = function() {
        return lr;
    };
    mr(e4.lineHeight);
    var br = y1.__private__.getHorizontalCoordinate = function(t) {
        return U1(t);
    }, yr = y1.__private__.getVerticalCoordinate = function(t) {
        return S1 === x1.ADVANCED ? t : Rt1[$1].mediaBox.topRightY - Rt1[$1].mediaBox.bottomLeftY - U1(t);
    }, wr = y1.__private__.getHorizontalCoordinateString = y1.getHorizontalCoordinateString = function(t) {
        return O1(br(t));
    }, Nr = y1.__private__.getVerticalCoordinateString = y1.getVerticalCoordinateString = function(t) {
        return O1(yr(t));
    }, Lr = e4.strokeColor || "0 G";
    y1.__private__.getStrokeColor = y1.getDrawColor = function() {
        return ee1(Lr);
    }, y1.__private__.setStrokeColor = y1.setDrawColor = function(t, e, r, n56) {
        return Lr = re1({
            ch1: t,
            ch2: e,
            ch3: r,
            ch4: n56,
            pdfColorType: "draw",
            precision: 2
        }), lt1(Lr), this;
    };
    var Ar = e4.fillColor || "0 g";
    y1.__private__.getFillColor = y1.getFillColor = function() {
        return ee1(Ar);
    }, y1.__private__.setFillColor = y1.setFillColor = function(t, e, r, n57) {
        return Ar = re1({
            ch1: t,
            ch2: e,
            ch3: r,
            ch4: n57,
            pdfColorType: "fill",
            precision: 2
        }), lt1(Ar), this;
    };
    var xr = e4.textColor || "0 g", Sr = y1.__private__.getTextColor = y1.getTextColor = function() {
        return ee1(xr);
    };
    y1.__private__.setTextColor = y1.setTextColor = function(t, e, r, n58) {
        return xr = re1({
            ch1: t,
            ch2: e,
            ch3: r,
            ch4: n58,
            pdfColorType: "text",
            precision: 3
        }), this;
    };
    var _r = e4.charSpace, Pr = y1.__private__.getCharSpace = y1.getCharSpace = function() {
        return parseFloat(_r || 0);
    };
    y1.__private__.setCharSpace = y1.setCharSpace = function(t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setCharSpace");
        return _r = t, this;
    };
    var kr = 0;
    y1.CapJoinStyles = {
        0: 0,
        butt: 0,
        but: 0,
        miter: 0,
        1: 1,
        round: 1,
        rounded: 1,
        circle: 1,
        2: 2,
        projecting: 2,
        project: 2,
        square: 2,
        bevel: 2
    }, y1.__private__.setLineCap = y1.setLineCap = function(t) {
        var e = y1.CapJoinStyles[t];
        if (void 0 === e) throw new Error("Line cap style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
        return kr = e, lt1(e + " J"), this;
    };
    var Ir = 0;
    y1.__private__.setLineJoin = y1.setLineJoin = function(t) {
        var e = y1.CapJoinStyles[t];
        if (void 0 === e) throw new Error("Line join style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
        return Ir = e, lt1(e + " j"), this;
    }, y1.__private__.setLineMiterLimit = y1.__private__.setMiterLimit = y1.setLineMiterLimit = y1.setMiterLimit = function(t) {
        if (t = t || 0, isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
        return lt1(O1(U1(t)) + " M"), this;
    }, y1.GState = j, y1.setGState = function(t) {
        (t = "string" == typeof t ? Mt1[Et1[t]] : Fr(null, t)).equals(qt1) || (lt1("/" + t.id + " gs"), qt1 = t);
    };
    var Fr = function(t, e) {
        if (!t || !Et1[t]) {
            var r = !1;
            for(var n59 in Mt1)if (Mt1.hasOwnProperty(n59) && Mt1[n59].equals(e)) {
                r = !0;
                break;
            }
            if (r) e = Mt1[n59];
            else {
                var i53 = "GS" + (Object.keys(Mt1).length + 1).toString(10);
                Mt1[i53] = e, e.id = i53;
            }
            return t && (Et1[t] = e.id), Tt1.publish("addGState", e), e;
        }
    };
    y1.addGState = function(t, e) {
        return Fr(t, e), this;
    }, y1.saveGraphicsState = function() {
        return lt1("q"), jt1.push({
            key: St1,
            size: gt1,
            color: xr
        }), this;
    }, y1.restoreGraphicsState = function() {
        lt1("Q");
        var t = jt1.pop();
        return St1 = t.key, gt1 = t.size, xr = t.color, qt1 = null, this;
    }, y1.setCurrentTransformationMatrix = function(t) {
        return lt1(t.toString() + " cm"), this;
    }, y1.comment = function(t) {
        return lt1("#" + t), this;
    };
    var Cr = function(t10, e) {
        var r = t10 || 0;
        Object.defineProperty(this, "x", {
            enumerable: !0,
            get: function() {
                return r;
            },
            set: function(t) {
                isNaN(t) || (r = parseFloat(t));
            }
        });
        var n60 = e || 0;
        Object.defineProperty(this, "y", {
            enumerable: !0,
            get: function() {
                return n60;
            },
            set: function(t) {
                isNaN(t) || (n60 = parseFloat(t));
            }
        });
        var i54 = "pt";
        return Object.defineProperty(this, "type", {
            enumerable: !0,
            get: function() {
                return i54;
            },
            set: function(t) {
                i54 = t.toString();
            }
        }), this;
    }, jr = function(t11, e, r, n61) {
        Cr.call(this, t11, e), this.type = "rect";
        var i55 = r || 0;
        Object.defineProperty(this, "w", {
            enumerable: !0,
            get: function() {
                return i55;
            },
            set: function(t) {
                isNaN(t) || (i55 = parseFloat(t));
            }
        });
        var a36 = n61 || 0;
        return Object.defineProperty(this, "h", {
            enumerable: !0,
            get: function() {
                return a36;
            },
            set: function(t) {
                isNaN(t) || (a36 = parseFloat(t));
            }
        }), this;
    }, Or = function() {
        this.page = Dt1, this.currentPage = $1, this.pages = ot1.slice(0), this.pagesContext = Rt1.slice(0), this.x = Pt1, this.y = kt1, this.matrix = It1, this.width = qr($1), this.height = Rr($1), this.outputDestination = ct1, this.id = "", this.objectNumber = -1;
    };
    Or.prototype.restore = function() {
        Dt1 = this.page, $1 = this.currentPage, Rt1 = this.pagesContext, ot1 = this.pages, Pt1 = this.x, kt1 = this.y, It1 = this.matrix, Dr($1, this.width), Tr($1, this.height), ct1 = this.outputDestination;
    };
    var Br = function(t, e, r, n62, i56) {
        Wt1.push(new Or), Dt1 = $1 = 0, ot1 = [], Pt1 = t, kt1 = e, It1 = i56, je([
            r,
            n62
        ]);
    }, Mr = function(t) {
        if (Ht1[t]) Wt1.pop().restore();
        else {
            var e = new Or, r = "Xo" + (Object.keys(zt1).length + 1).toString(10);
            e.id = r, Ht1[t] = r, zt1[r] = e, Tt1.publish("addFormObject", e), Wt1.pop().restore();
        }
    };
    for(var Er in y1.beginFormObject = function(t, e, r, n63, i57) {
        return Br(t, e, r, n63, i57), this;
    }, y1.endFormObject = function(t) {
        return Mr(t), this;
    }, y1.doFormObject = function(t, e) {
        var r = zt1[Ht1[t]];
        return lt1("q"), lt1(e.toString() + " cm"), lt1("/" + r.id + " Do"), lt1("Q"), this;
    }, y1.getFormObject = function(t) {
        var e = zt1[Ht1[t]];
        return {
            x: e.x,
            y: e.y,
            width: e.width,
            height: e.height,
            matrix: e.matrix
        };
    }, y1.save = function(t12, e6) {
        return t12 = t12 || "generated.pdf", (e6 = e6 || {}).returnPromise = e6.returnPromise || !1, !1 === e6.returnPromise ? (l(We(He()), t12), "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), this) : new Promise(function(e, r) {
            try {
                var i58 = l(We(He()), t12);
                "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), e(i58);
            } catch (t) {
                r(t.message);
            }
        });
    }, E.API)E.API.hasOwnProperty(Er) && ("events" === Er && E.API.events.length ? function(t, e) {
        var r, n64, i59;
        for(i59 = e.length - 1; -1 !== i59; i59--)r = e[i59][0], n64 = e[i59][1], t.subscribe.apply(t, [
            r
        ].concat("function" == typeof n64 ? [
            n64
        ] : n64));
    }(Tt1, E.API.events) : y1[Er] = E.API[Er]);
    var qr = y1.getPageWidth = function(t) {
        return (Rt1[t = t || $1].mediaBox.topRightX - Rt1[t].mediaBox.bottomLeftX) / _t1;
    }, Dr = y1.setPageWidth = function(t, e) {
        Rt1[t].mediaBox.topRightX = e * _t1 + Rt1[t].mediaBox.bottomLeftX;
    }, Rr = y1.getPageHeight = function(t) {
        return (Rt1[t = t || $1].mediaBox.topRightY - Rt1[t].mediaBox.bottomLeftY) / _t1;
    }, Tr = y1.setPageHeight = function(t, e) {
        Rt1[t].mediaBox.topRightY = e * _t1 + Rt1[t].mediaBox.bottomLeftY;
    };
    return y1.internal = {
        pdfEscape: Ce,
        getStyle: tr,
        getFont: hr,
        getFontSize: vt1,
        getCharSpace: Pr,
        getTextColor: Sr,
        getLineHeight: gr,
        getLineHeightFactor: vr,
        getLineWidth: dr,
        write: ft1,
        getHorizontalCoordinate: br,
        getVerticalCoordinate: yr,
        getCoordinateString: wr,
        getVerticalCoordinateString: Nr,
        collections: {},
        newObject: Xt1,
        newAdditionalObject: $t1,
        newObjectDeferred: Kt1,
        newObjectDeferredBegin: Zt1,
        getFilters: ne1,
        putStream: ie1,
        events: Tt1,
        scaleFactor: _t1,
        pageSize: {
            getWidth: function() {
                return qr($1);
            },
            setWidth: function(t) {
                Dr($1, t);
            },
            getHeight: function() {
                return Rr($1);
            },
            setHeight: function(t) {
                Tr($1, t);
            }
        },
        encryptionOptions: m1,
        encryption: Ye,
        getEncryptor: Je,
        output: Ve,
        getNumberOfPages: Ee,
        pages: ot1,
        out: lt1,
        f2: R1,
        f3: T1,
        getPageInfo: Xe,
        getPageInfoByObjId: Ke,
        getCurrentPageInfo: Ze,
        getPDFVersion: N1,
        Point: Cr,
        Rectangle: jr,
        Matrix: Vt1,
        hasHotfix: Ge
    }, Object.defineProperty(y1.internal.pageSize, "width", {
        get: function() {
            return qr($1);
        },
        set: function(t) {
            Dr($1, t);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(y1.internal.pageSize, "height", {
        get: function() {
            return Rr($1);
        },
        set: function(t) {
            Tr($1, t);
        },
        enumerable: !0,
        configurable: !0
    }), ke.call(y1, pt1), St1 = "F1", Oe(s4, i19), Tt1.publish("initialized"), y1;
}
I.prototype.lsbFirstWord = function(t) {
    return String.fromCharCode(t >> 0 & 255, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255);
}, I.prototype.toHexString = function(t13) {
    return t13.split("").map(function(t) {
        return ("0" + (255 & t.charCodeAt(0)).toString(16)).slice(-2);
    }).join("");
}, I.prototype.hexToBytes = function(t) {
    for(var e = [], r = 0; r < t.length; r += 2)e.push(String.fromCharCode(parseInt(t.substr(r, 2), 16)));
    return e.join("");
}, I.prototype.processOwnerPassword = function(t, e) {
    return P(x(e).substr(0, 5), t);
}, I.prototype.encryptor = function(t14, e) {
    var r = x(this.encryptionKey + String.fromCharCode(255 & t14, t14 >> 8 & 255, t14 >> 16 & 255, 255 & e, e >> 8 & 255)).substr(0, 10);
    return function(t) {
        return P(r, t);
    };
}, j.prototype.equals = function(e) {
    var r, n65 = "id,objectNumber,equals";
    if (!e || _typeofDefault.default(e) !== _typeofDefault.default(this)) return !1;
    var i60 = 0;
    for(r in this)if (!(n65.indexOf(r) >= 0)) {
        if (this.hasOwnProperty(r) && !e.hasOwnProperty(r)) return !1;
        if (this[r] !== e[r]) return !1;
        i60++;
    }
    for(r in e)e.hasOwnProperty(r) && n65.indexOf(r) < 0 && i60--;
    return 0 === i60;
}, E.API = {
    events: []
}, E.version = "2.5.1";
var q = E.API, D = 1, R = function(t) {
    return t.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
}, T = function(t) {
    return t.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
}, U = function(t) {
    return t.toFixed(2);
}, z = function(t) {
    return t.toFixed(5);
};
q.__acroform__ = {};
var H = function(t, e) {
    t.prototype = Object.create(e.prototype), t.prototype.constructor = t;
}, W = function(t) {
    return t * D;
}, V = function(t) {
    var e = new ut, r = At.internal.getHeight(t) || 0, n66 = At.internal.getWidth(t) || 0;
    return e.BBox = [
        0,
        0,
        Number(U(n66)),
        Number(U(r))
    ], e;
}, G = q.__acroform__.setBit = function(t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
    return t |= 1 << e;
}, Y = q.__acroform__.clearBit = function(t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
    return t &= ~(1 << e);
}, J = q.__acroform__.getBit = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
    return 0 == (t & 1 << e) ? 0 : 1;
}, X = q.__acroform__.getBitForPdf = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
    return J(t, e - 1);
}, K = q.__acroform__.setBitForPdf = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
    return G(t, e - 1);
}, Z = q.__acroform__.clearBitForPdf = function(t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
    return Y(t, e - 1);
}, $ = q.__acroform__.calculateCoordinates = function(t, e) {
    var r = e.internal.getHorizontalCoordinate, n67 = e.internal.getVerticalCoordinate, i61 = t[0], a37 = t[1], o28 = t[2], s16 = t[3], c14 = {};
    return c14.lowerLeft_X = r(i61) || 0, c14.lowerLeft_Y = n67(a37 + s16) || 0, c14.upperRight_X = r(i61 + o28) || 0, c14.upperRight_Y = n67(a37) || 0, [
        Number(U(c14.lowerLeft_X)),
        Number(U(c14.lowerLeft_Y)),
        Number(U(c14.upperRight_X)),
        Number(U(c14.upperRight_Y))
    ];
}, Q = function(t) {
    if (t.appearanceStreamContent) return t.appearanceStreamContent;
    if (t.V || t.DV) {
        var e = [], r = t._V || t.DV, n68 = tt(t, r), i62 = t.scope.internal.getFont(t.fontName, t.fontStyle).id;
        e.push("/Tx BMC"), e.push("q"), e.push("BT"), e.push(t.scope.__private__.encodeColorString(t.color)), e.push("/" + i62 + " " + U(n68.fontSize) + " Tf"), e.push("1 0 0 1 0 0 Tm"), e.push(n68.text), e.push("ET"), e.push("Q"), e.push("EMC");
        var a38 = V(t);
        return a38.scope = t.scope, a38.stream = e.join("\n"), a38;
    }
}, tt = function(t15, e7) {
    var r5 = 0 === t15.fontSize ? t15.maxFontSize : t15.fontSize, n69 = {
        text: "",
        fontSize: ""
    }, i63 = (e7 = ")" == (e7 = "(" == e7.substr(0, 1) ? e7.substr(1) : e7).substr(e7.length - 1) ? e7.substr(0, e7.length - 1) : e7).split(" ");
    i63 = t15.multiline ? i63.map(function(t) {
        return t.split("\n");
    }) : i63.map(function(t) {
        return [
            t
        ];
    });
    var a39 = r5, o29 = At.internal.getHeight(t15) || 0;
    o29 = o29 < 0 ? -o29 : o29;
    var s17 = At.internal.getWidth(t15) || 0;
    s17 = s17 < 0 ? -s17 : s17;
    var c15 = function(e, r, n70) {
        if (e + 1 < i63.length) {
            var a40 = r + " " + i63[e + 1][0];
            return et(a40, t15, n70).width <= s17 - 4;
        }
        return !1;
    };
    a39++;
    t: for(; a39 > 0;){
        e7 = "", a39--;
        var u12, h9, l8 = et("3", t15, a39).height, f8 = t15.multiline ? o29 - a39 : (o29 - l8) / 2, d8 = f8 += 2, p7 = 0, g5 = 0, m4 = 0;
        if (a39 <= 0) {
            e7 = "(...) Tj\n", e7 += "% Width of Text: " + et(e7, t15, a39 = 12).width + ", FieldWidth:" + s17 + "\n";
            break;
        }
        for(var v4 = "", b2 = 0, y3 = 0; y3 < i63.length; y3++)if (i63.hasOwnProperty(y3)) {
            var w3 = !1;
            if (1 !== i63[y3].length && m4 !== i63[y3].length - 1) {
                if ((l8 + 2) * (b2 + 2) + 2 > o29) continue t;
                v4 += i63[y3][m4], w3 = !0, g5 = y3, y3--;
            } else {
                v4 = " " == (v4 += i63[y3][m4] + " ").substr(v4.length - 1) ? v4.substr(0, v4.length - 1) : v4;
                var N3 = parseInt(y3), L3 = c15(N3, v4, a39), A3 = y3 >= i63.length - 1;
                if (L3 && !A3) {
                    v4 += " ", m4 = 0;
                    continue;
                }
                if (L3 || A3) {
                    if (A3) g5 = N3;
                    else if (t15.multiline && (l8 + 2) * (b2 + 2) + 2 > o29) continue t;
                } else {
                    if (!t15.multiline) continue t;
                    if ((l8 + 2) * (b2 + 2) + 2 > o29) continue t;
                    g5 = N3;
                }
            }
            for(var x2 = "", S2 = p7; S2 <= g5; S2++){
                var _3 = i63[S2];
                if (t15.multiline) {
                    if (S2 === g5) {
                        x2 += _3[m4] + " ", m4 = (m4 + 1) % _3.length;
                        continue;
                    }
                    if (S2 === p7) {
                        x2 += _3[_3.length - 1] + " ";
                        continue;
                    }
                }
                x2 += _3[0] + " ";
            }
            switch(x2 = " " == x2.substr(x2.length - 1) ? x2.substr(0, x2.length - 1) : x2, h9 = et(x2, t15, a39).width, t15.textAlign){
                case "right":
                    u12 = s17 - h9 - 2;
                    break;
                case "center":
                    u12 = (s17 - h9) / 2;
                    break;
                case "left":
                default:
                    u12 = 2;
            }
            e7 += U(u12) + " " + U(d8) + " Td\n", e7 += "(" + R(x2) + ") Tj\n", e7 += -U(u12) + " 0 Td\n", d8 = -(a39 + 2), h9 = 0, p7 = w3 ? g5 : g5 + 1, b2++, v4 = "";
        }
        break;
    }
    return n69.text = e7, n69.fontSize = a39, n69;
}, et = function(t, e, r) {
    var n71 = e.scope.internal.getFont(e.fontName, e.fontStyle), i64 = e.scope.getStringUnitWidth(t, {
        font: n71,
        fontSize: parseFloat(r),
        charSpace: 0
    }) * parseFloat(r);
    return {
        height: e.scope.getStringUnitWidth("3", {
            font: n71,
            fontSize: parseFloat(r),
            charSpace: 0
        }) * parseFloat(r) * 1.5,
        width: i64
    };
}, rt = {
    fields: [],
    xForms: [],
    acroFormDictionaryRoot: null,
    printedOut: !1,
    internal: null,
    isInitialized: !1
}, nt = function(t16, e) {
    var r = {
        type: "reference",
        object: t16
    };
    void 0 === e.internal.getPageInfo(t16.page).pageContext.annotations.find(function(t) {
        return t.type === r.type && t.object === r.object;
    }) && e.internal.getPageInfo(t16.page).pageContext.annotations.push(r);
}, it = function(e, r) {
    for(var n72 in e)if (e.hasOwnProperty(n72)) {
        var i65 = n72, a41 = e[n72];
        r.internal.newObjectDeferredBegin(a41.objId, !0), "object" === _typeofDefault.default(a41) && "function" == typeof a41.putStream && a41.putStream(), delete e[i65];
    }
}, at = function(e8, r6) {
    if (r6.scope = e8, void 0 !== e8.internal && (void 0 === e8.internal.acroformPlugin || !1 === e8.internal.acroformPlugin.isInitialized)) {
        if (lt.FieldNum = 0, e8.internal.acroformPlugin = JSON.parse(JSON.stringify(rt)), e8.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("Exception while creating AcroformDictionary");
        D = e8.internal.scaleFactor, e8.internal.acroformPlugin.acroFormDictionaryRoot = new ht, e8.internal.acroformPlugin.acroFormDictionaryRoot.scope = e8, e8.internal.acroformPlugin.acroFormDictionaryRoot._eventID = e8.internal.events.subscribe("postPutResources", function() {
            !function(t) {
                t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID, t.internal.acroformPlugin.printedOut = !0;
            }(e8);
        }), e8.internal.events.subscribe("buildDocument", function() {
            !function(t) {
                t.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
                var e = t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;
                for(var r in e)if (e.hasOwnProperty(r)) {
                    var n73 = e[r];
                    n73.objId = void 0, n73.hasAnnotation && nt(n73, t);
                }
            }(e8);
        }), e8.internal.events.subscribe("putCatalog", function() {
            !function(t) {
                if (void 0 === t.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("putCatalogCallback: Root missing.");
                t.internal.write("/AcroForm " + t.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
            }(e8);
        }), e8.internal.events.subscribe("postPutPages", function(r7) {
            !function(e, r) {
                var n74 = !e;
                for(var i66 in e || (r.internal.newObjectDeferredBegin(r.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0), r.internal.acroformPlugin.acroFormDictionaryRoot.putStream()), e = e || r.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if (e.hasOwnProperty(i66)) {
                    var a42 = e[i66], o30 = [], s18 = a42.Rect;
                    if (a42.Rect && (a42.Rect = $(a42.Rect, r)), r.internal.newObjectDeferredBegin(a42.objId, !0), a42.DA = At.createDefaultAppearanceStream(a42), "object" === _typeofDefault.default(a42) && "function" == typeof a42.getKeyValueListForStream && (o30 = a42.getKeyValueListForStream()), a42.Rect = s18, a42.hasAppearanceStream && !a42.appearanceStreamContent) {
                        var c16 = Q(a42);
                        o30.push({
                            key: "AP",
                            value: "<</N " + c16 + ">>"
                        }), r.internal.acroformPlugin.xForms.push(c16);
                    }
                    if (a42.appearanceStreamContent) {
                        var u13 = "";
                        for(var h10 in a42.appearanceStreamContent)if (a42.appearanceStreamContent.hasOwnProperty(h10)) {
                            var l9 = a42.appearanceStreamContent[h10];
                            if (u13 += "/" + h10 + " ", u13 += "<<", Object.keys(l9).length >= 1 || Array.isArray(l9)) {
                                for(var i66 in l9)if (l9.hasOwnProperty(i66)) {
                                    var f9 = l9[i66];
                                    "function" == typeof f9 && (f9 = f9.call(r, a42)), u13 += "/" + i66 + " " + f9 + " ", r.internal.acroformPlugin.xForms.indexOf(f9) >= 0 || r.internal.acroformPlugin.xForms.push(f9);
                                }
                            } else "function" == typeof (f9 = l9) && (f9 = f9.call(r, a42)), u13 += "/" + i66 + " " + f9, r.internal.acroformPlugin.xForms.indexOf(f9) >= 0 || r.internal.acroformPlugin.xForms.push(f9);
                            u13 += ">>";
                        }
                        o30.push({
                            key: "AP",
                            value: "<<\n" + u13 + ">>"
                        });
                    }
                    r.internal.putStream({
                        additionalKeyValues: o30,
                        objectId: a42.objId
                    }), r.internal.out("endobj");
                }
                n74 && it(r.internal.acroformPlugin.xForms, r);
            }(r7, e8);
        }), e8.internal.acroformPlugin.isInitialized = !0;
    }
}, ot = q.__acroform__.arrayToPdfArray = function(e, r, n75) {
    var i67 = function(t) {
        return t;
    };
    if (Array.isArray(e)) {
        for(var a43 = "[", o31 = 0; o31 < e.length; o31++)switch(0 !== o31 && (a43 += " "), _typeofDefault.default(e[o31])){
            case "boolean":
            case "number":
            case "object":
                a43 += e[o31].toString();
                break;
            case "string":
                "/" !== e[o31].substr(0, 1) ? (void 0 !== r && n75 && (i67 = n75.internal.getEncryptor(r)), a43 += "(" + R(i67(e[o31].toString())) + ")") : a43 += e[o31].toString();
        }
        return a43 += "]";
    }
    throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
};
var st = function(t17, e, r) {
    var n76 = function(t) {
        return t;
    };
    return void 0 !== e && r && (n76 = r.internal.getEncryptor(e)), (t17 = t17 || "").toString(), t17 = "(" + R(n76(t17)) + ")";
}, ct = function() {
    this._objId = void 0, this._scope = void 0, Object.defineProperty(this, "objId", {
        get: function() {
            if (void 0 === this._objId) {
                if (void 0 === this.scope) return;
                this._objId = this.scope.internal.newObjectDeferred();
            }
            return this._objId;
        },
        set: function(t) {
            this._objId = t;
        }
    }), Object.defineProperty(this, "scope", {
        value: this._scope,
        writable: !0
    });
};
ct.prototype.toString = function() {
    return this.objId + " 0 R";
}, ct.prototype.putStream = function() {
    var t = this.getKeyValueListForStream();
    this.scope.internal.putStream({
        data: this.stream,
        additionalKeyValues: t,
        objectId: this.objId
    }), this.scope.internal.out("endobj");
}, ct.prototype.getKeyValueListForStream = function() {
    var t18 = [], e = Object.getOwnPropertyNames(this).filter(function(t) {
        return "content" != t && "appearanceStreamContent" != t && "scope" != t && "objId" != t && "_" != t.substring(0, 1);
    });
    for(var r in e)if (!1 === Object.getOwnPropertyDescriptor(this, e[r]).configurable) {
        var n77 = e[r], i68 = this[n77];
        i68 && (Array.isArray(i68) ? t18.push({
            key: n77,
            value: ot(i68, this.objId, this.scope)
        }) : i68 instanceof ct ? (i68.scope = this.scope, t18.push({
            key: n77,
            value: i68.objId + " 0 R"
        })) : "function" != typeof i68 && t18.push({
            key: n77,
            value: i68
        }));
    }
    return t18;
};
var ut = function() {
    ct.call(this), Object.defineProperty(this, "Type", {
        value: "/XObject",
        configurable: !1,
        writable: !0
    }), Object.defineProperty(this, "Subtype", {
        value: "/Form",
        configurable: !1,
        writable: !0
    }), Object.defineProperty(this, "FormType", {
        value: 1,
        configurable: !1,
        writable: !0
    });
    var t19, e9 = [];
    Object.defineProperty(this, "BBox", {
        configurable: !1,
        get: function() {
            return e9;
        },
        set: function(t) {
            e9 = t;
        }
    }), Object.defineProperty(this, "Resources", {
        value: "2 0 R",
        configurable: !1,
        writable: !0
    }), Object.defineProperty(this, "stream", {
        enumerable: !1,
        configurable: !0,
        set: function(e) {
            t19 = e.trim();
        },
        get: function() {
            return t19 || null;
        }
    });
};
H(ut, ct);
var ht = function() {
    ct.call(this);
    var t20, e10 = [];
    Object.defineProperty(this, "Kids", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return e10.length > 0 ? e10 : void 0;
        }
    }), Object.defineProperty(this, "Fields", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e10;
        }
    }), Object.defineProperty(this, "DA", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (t20) {
                var e = function(t) {
                    return t;
                };
                return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(t20)) + ")";
            }
        },
        set: function(e) {
            t20 = e;
        }
    });
};
H(ht, ct);
var lt = function t21() {
    ct.call(this);
    var e11 = 4;
    Object.defineProperty(this, "F", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e11;
        },
        set: function(t) {
            if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute F supplied.');
            e11 = t;
        }
    }), Object.defineProperty(this, "showWhenPrinted", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(e11, 3));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.F = K(e11, 3) : this.F = Z(e11, 3);
        }
    });
    var r = 0;
    Object.defineProperty(this, "Ff", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return r;
        },
        set: function(t) {
            if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute Ff supplied.');
            r = t;
        }
    });
    var n78 = [];
    Object.defineProperty(this, "Rect", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (0 !== n78.length) return n78;
        },
        set: function(t) {
            n78 = void 0 !== t ? t : [];
        }
    }), Object.defineProperty(this, "x", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n78 || isNaN(n78[0]) ? 0 : n78[0];
        },
        set: function(t) {
            n78[0] = t;
        }
    }), Object.defineProperty(this, "y", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n78 || isNaN(n78[1]) ? 0 : n78[1];
        },
        set: function(t) {
            n78[1] = t;
        }
    }), Object.defineProperty(this, "width", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n78 || isNaN(n78[2]) ? 0 : n78[2];
        },
        set: function(t) {
            n78[2] = t;
        }
    }), Object.defineProperty(this, "height", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return !n78 || isNaN(n78[3]) ? 0 : n78[3];
        },
        set: function(t) {
            n78[3] = t;
        }
    });
    var i69 = "";
    Object.defineProperty(this, "FT", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return i69;
        },
        set: function(t) {
            switch(t){
                case "/Btn":
                case "/Tx":
                case "/Ch":
                case "/Sig":
                    i69 = t;
                    break;
                default:
                    throw new Error('Invalid value "' + t + '" for attribute FT supplied.');
            }
        }
    });
    var a44 = null;
    Object.defineProperty(this, "T", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            if (!a44 || a44.length < 1) {
                if (this instanceof yt) return;
                a44 = "FieldObject" + t21.FieldNum++;
            }
            var e = function(t) {
                return t;
            };
            return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(a44)) + ")";
        },
        set: function(t) {
            a44 = t.toString();
        }
    }), Object.defineProperty(this, "fieldName", {
        configurable: !0,
        enumerable: !0,
        get: function() {
            return a44;
        },
        set: function(t) {
            a44 = t;
        }
    });
    var o32 = "helvetica";
    Object.defineProperty(this, "fontName", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return o32;
        },
        set: function(t) {
            o32 = t;
        }
    });
    var s19 = "normal";
    Object.defineProperty(this, "fontStyle", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return s19;
        },
        set: function(t) {
            s19 = t;
        }
    });
    var c17 = 0;
    Object.defineProperty(this, "fontSize", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return c17;
        },
        set: function(t) {
            c17 = t;
        }
    });
    var u14 = void 0;
    Object.defineProperty(this, "maxFontSize", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return void 0 === u14 ? 50 / D : u14;
        },
        set: function(t) {
            u14 = t;
        }
    });
    var h11 = "black";
    Object.defineProperty(this, "color", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return h11;
        },
        set: function(t) {
            h11 = t;
        }
    });
    var l10 = "/F1 0 Tf 0 g";
    Object.defineProperty(this, "DA", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            if (!(!l10 || this instanceof yt || this instanceof Nt)) return st(l10, this.objId, this.scope);
        },
        set: function(t) {
            t = t.toString(), l10 = t;
        }
    });
    var f10 = null;
    Object.defineProperty(this, "DV", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (f10) return this instanceof mt == !1 ? st(f10, this.objId, this.scope) : f10;
        },
        set: function(t) {
            t = t.toString(), f10 = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
        }
    }), Object.defineProperty(this, "defaultValue", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this instanceof mt == !0 ? T(f10.substr(1, f10.length - 1)) : f10;
        },
        set: function(t) {
            t = t.toString(), f10 = this instanceof mt == !0 ? "/" + t : t;
        }
    });
    var d9 = null;
    Object.defineProperty(this, "_V", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (d9) return d9;
        },
        set: function(t) {
            this.V = t;
        }
    }), Object.defineProperty(this, "V", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            if (d9) return this instanceof mt == !1 ? st(d9, this.objId, this.scope) : d9;
        },
        set: function(t) {
            t = t.toString(), d9 = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
        }
    }), Object.defineProperty(this, "value", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this instanceof mt == !0 ? T(d9.substr(1, d9.length - 1)) : d9;
        },
        set: function(t) {
            t = t.toString(), d9 = this instanceof mt == !0 ? "/" + t : t;
        }
    }), Object.defineProperty(this, "hasAnnotation", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this.Rect;
        }
    }), Object.defineProperty(this, "Type", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return this.hasAnnotation ? "/Annot" : null;
        }
    }), Object.defineProperty(this, "Subtype", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return this.hasAnnotation ? "/Widget" : null;
        }
    });
    var p8, g6 = !1;
    Object.defineProperty(this, "hasAppearanceStream", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return g6;
        },
        set: function(t) {
            t = Boolean(t), g6 = t;
        }
    }), Object.defineProperty(this, "page", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            if (p8) return p8;
        },
        set: function(t) {
            p8 = t;
        }
    }), Object.defineProperty(this, "readOnly", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 1));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 1) : this.Ff = Z(this.Ff, 1);
        }
    }), Object.defineProperty(this, "required", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 2));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 2) : this.Ff = Z(this.Ff, 2);
        }
    }), Object.defineProperty(this, "noExport", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 3));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 3) : this.Ff = Z(this.Ff, 3);
        }
    });
    var m5 = null;
    Object.defineProperty(this, "Q", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            if (null !== m5) return m5;
        },
        set: function(t) {
            if (-1 === [
                0,
                1,
                2
            ].indexOf(t)) throw new Error('Invalid value "' + t + '" for attribute Q supplied.');
            m5 = t;
        }
    }), Object.defineProperty(this, "textAlign", {
        get: function() {
            var t;
            switch(m5){
                case 0:
                default:
                    t = "left";
                    break;
                case 1:
                    t = "center";
                    break;
                case 2:
                    t = "right";
            }
            return t;
        },
        configurable: !0,
        enumerable: !0,
        set: function(t) {
            switch(t){
                case "right":
                case 2:
                    m5 = 2;
                    break;
                case "center":
                case 1:
                    m5 = 1;
                    break;
                case "left":
                case 0:
                default:
                    m5 = 0;
            }
        }
    });
};
H(lt, ct);
var ft = function() {
    lt.call(this), this.FT = "/Ch", this.V = "()", this.fontName = "zapfdingbats";
    var t22 = 0;
    Object.defineProperty(this, "TI", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return t22;
        },
        set: function(e) {
            t22 = e;
        }
    }), Object.defineProperty(this, "topIndex", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return t22;
        },
        set: function(e) {
            t22 = e;
        }
    });
    var e12 = [];
    Object.defineProperty(this, "Opt", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return ot(e12, this.objId, this.scope);
        },
        set: function(t23) {
            var r8, n79;
            n79 = [], "string" == typeof (r8 = t23) && (n79 = function(t, e, r) {
                r || (r = 1);
                for(var n80, i70 = []; n80 = e.exec(t);)i70.push(n80[r]);
                return i70;
            }(r8, /\((.*?)\)/g)), e12 = n79;
        }
    }), this.getOptions = function() {
        return e12;
    }, this.setOptions = function(t) {
        e12 = t, this.sort && e12.sort();
    }, this.addOption = function(t) {
        t = (t = t || "").toString(), e12.push(t), this.sort && e12.sort();
    }, this.removeOption = function(t, r) {
        for(r = r || !1, t = (t = t || "").toString(); -1 !== e12.indexOf(t) && (e12.splice(e12.indexOf(t), 1), !1 !== r););
    }, Object.defineProperty(this, "combo", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 18));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 18) : this.Ff = Z(this.Ff, 18);
        }
    }), Object.defineProperty(this, "edit", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 19));
        },
        set: function(t) {
            !0 === this.combo && (!0 === Boolean(t) ? this.Ff = K(this.Ff, 19) : this.Ff = Z(this.Ff, 19));
        }
    }), Object.defineProperty(this, "sort", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 20));
        },
        set: function(t) {
            !0 === Boolean(t) ? (this.Ff = K(this.Ff, 20), e12.sort()) : this.Ff = Z(this.Ff, 20);
        }
    }), Object.defineProperty(this, "multiSelect", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 22));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 22) : this.Ff = Z(this.Ff, 22);
        }
    }), Object.defineProperty(this, "doNotSpellCheck", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 23));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
        }
    }), Object.defineProperty(this, "commitOnSelChange", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 27));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 27) : this.Ff = Z(this.Ff, 27);
        }
    }), this.hasAppearanceStream = !1;
};
H(ft, lt);
var dt = function() {
    ft.call(this), this.fontName = "helvetica", this.combo = !1;
};
H(dt, ft);
var pt = function() {
    dt.call(this), this.combo = !0;
};
H(pt, dt);
var gt = function() {
    pt.call(this), this.edit = !0;
};
H(gt, pt);
var mt = function() {
    lt.call(this), this.FT = "/Btn", Object.defineProperty(this, "noToggleToOff", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 15));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 15) : this.Ff = Z(this.Ff, 15);
        }
    }), Object.defineProperty(this, "radio", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 16));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 16) : this.Ff = Z(this.Ff, 16);
        }
    }), Object.defineProperty(this, "pushButton", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 17));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 17) : this.Ff = Z(this.Ff, 17);
        }
    }), Object.defineProperty(this, "radioIsUnison", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 26));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
        }
    });
    var e13, r = {};
    Object.defineProperty(this, "MK", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            var t24 = function(t) {
                return t;
            };
            if (this.scope && (t24 = this.scope.internal.getEncryptor(this.objId)), 0 !== Object.keys(r).length) {
                var e, n81 = [];
                for(e in n81.push("<<"), r)n81.push("/" + e + " (" + R(t24(r[e])) + ")");
                return n81.push(">>"), n81.join("\n");
            }
        },
        set: function(e) {
            "object" === _typeofDefault.default(e) && (r = e);
        }
    }), Object.defineProperty(this, "caption", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return r.CA || "";
        },
        set: function(t) {
            "string" == typeof t && (r.CA = t);
        }
    }), Object.defineProperty(this, "AS", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e13;
        },
        set: function(t) {
            e13 = t;
        }
    }), Object.defineProperty(this, "appearanceState", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return e13.substr(1, e13.length - 1);
        },
        set: function(t) {
            e13 = "/" + t;
        }
    });
};
H(mt, lt);
var vt = function() {
    mt.call(this), this.pushButton = !0;
};
H(vt, mt);
var bt = function() {
    mt.call(this), this.radio = !0, this.pushButton = !1;
    var t = [];
    Object.defineProperty(this, "Kids", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return t;
        },
        set: function(e) {
            t = void 0 !== e ? e : [];
        }
    });
};
H(bt, mt);
var yt = function() {
    var e14, r9;
    lt.call(this), Object.defineProperty(this, "Parent", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return e14;
        },
        set: function(t) {
            e14 = t;
        }
    }), Object.defineProperty(this, "optionName", {
        enumerable: !1,
        configurable: !0,
        get: function() {
            return r9;
        },
        set: function(t) {
            r9 = t;
        }
    });
    var n82, i71 = {};
    Object.defineProperty(this, "MK", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            var t25 = function(t) {
                return t;
            };
            this.scope && (t25 = this.scope.internal.getEncryptor(this.objId));
            var e, r = [];
            for(e in r.push("<<"), i71)r.push("/" + e + " (" + R(t25(i71[e])) + ")");
            return r.push(">>"), r.join("\n");
        },
        set: function(e) {
            "object" === _typeofDefault.default(e) && (i71 = e);
        }
    }), Object.defineProperty(this, "caption", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return i71.CA || "";
        },
        set: function(t) {
            "string" == typeof t && (i71.CA = t);
        }
    }), Object.defineProperty(this, "AS", {
        enumerable: !1,
        configurable: !1,
        get: function() {
            return n82;
        },
        set: function(t) {
            n82 = t;
        }
    }), Object.defineProperty(this, "appearanceState", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return n82.substr(1, n82.length - 1);
        },
        set: function(t) {
            n82 = "/" + t;
        }
    }), this.caption = "l", this.appearanceState = "Off", this._AppearanceType = At.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);
};
H(yt, lt), bt.prototype.setAppearance = function(t) {
    if (!("createAppearanceStream" in t) || !("getCA" in t)) throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");
    for(var e in this.Kids)if (this.Kids.hasOwnProperty(e)) {
        var r = this.Kids[e];
        r.appearanceStreamContent = t.createAppearanceStream(r.optionName), r.caption = t.getCA();
    }
}, bt.prototype.createOption = function(t) {
    var e = new yt;
    return e.Parent = this, e.optionName = t, this.Kids.push(e), xt.call(this.scope, e), e;
};
var wt = function() {
    mt.call(this), this.fontName = "zapfdingbats", this.caption = "3", this.appearanceState = "On", this.value = "On", this.textAlign = "center", this.appearanceStreamContent = At.CheckBox.createAppearanceStream();
};
H(wt, mt);
var Nt = function() {
    lt.call(this), this.FT = "/Tx", Object.defineProperty(this, "multiline", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 13));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 13) : this.Ff = Z(this.Ff, 13);
        }
    }), Object.defineProperty(this, "fileSelect", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 21));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 21) : this.Ff = Z(this.Ff, 21);
        }
    }), Object.defineProperty(this, "doNotSpellCheck", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 23));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
        }
    }), Object.defineProperty(this, "doNotScroll", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 24));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 24) : this.Ff = Z(this.Ff, 24);
        }
    }), Object.defineProperty(this, "comb", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 25));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 25) : this.Ff = Z(this.Ff, 25);
        }
    }), Object.defineProperty(this, "richText", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 26));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
        }
    });
    var t26 = null;
    Object.defineProperty(this, "MaxLen", {
        enumerable: !0,
        configurable: !1,
        get: function() {
            return t26;
        },
        set: function(e) {
            t26 = e;
        }
    }), Object.defineProperty(this, "maxLength", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return t26;
        },
        set: function(e) {
            Number.isInteger(e) && (t26 = e);
        }
    }), Object.defineProperty(this, "hasAppearanceStream", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return this.V || this.DV;
        }
    });
};
H(Nt, lt);
var Lt = function() {
    Nt.call(this), Object.defineProperty(this, "password", {
        enumerable: !0,
        configurable: !0,
        get: function() {
            return Boolean(X(this.Ff, 14));
        },
        set: function(t) {
            !0 === Boolean(t) ? this.Ff = K(this.Ff, 14) : this.Ff = Z(this.Ff, 14);
        }
    }), this.password = !0;
};
H(Lt, Nt);
var At = {
    CheckBox: {
        createAppearanceStream: function() {
            return {
                N: {
                    On: At.CheckBox.YesNormal
                },
                D: {
                    On: At.CheckBox.YesPushDown,
                    Off: At.CheckBox.OffPushDown
                }
            };
        },
        YesPushDown: function(t) {
            var e = V(t);
            e.scope = t.scope;
            var r = [], n83 = t.scope.internal.getFont(t.fontName, t.fontStyle).id, i72 = t.scope.__private__.encodeColorString(t.color), a45 = tt(t, t.caption);
            return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), r.push("BMC"), r.push("q"), r.push("0 0 1 rg"), r.push("/" + n83 + " " + U(a45.fontSize) + " Tf " + i72), r.push("BT"), r.push(a45.text), r.push("ET"), r.push("Q"), r.push("EMC"), e.stream = r.join("\n"), e;
        },
        YesNormal: function(t) {
            var e = V(t);
            e.scope = t.scope;
            var r = t.scope.internal.getFont(t.fontName, t.fontStyle).id, n84 = t.scope.__private__.encodeColorString(t.color), i73 = [], a46 = At.internal.getHeight(t), o33 = At.internal.getWidth(t), s20 = tt(t, t.caption);
            return i73.push("1 g"), i73.push("0 0 " + U(o33) + " " + U(a46) + " re"), i73.push("f"), i73.push("q"), i73.push("0 0 1 rg"), i73.push("0 0 " + U(o33 - 1) + " " + U(a46 - 1) + " re"), i73.push("W"), i73.push("n"), i73.push("0 g"), i73.push("BT"), i73.push("/" + r + " " + U(s20.fontSize) + " Tf " + n84), i73.push(s20.text), i73.push("ET"), i73.push("Q"), e.stream = i73.join("\n"), e;
        },
        OffPushDown: function(t) {
            var e = V(t);
            e.scope = t.scope;
            var r = [];
            return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
        }
    },
    RadioButton: {
        Circle: {
            createAppearanceStream: function(t) {
                var e = {
                    D: {
                        Off: At.RadioButton.Circle.OffPushDown
                    },
                    N: {}
                };
                return e.N[t] = At.RadioButton.Circle.YesNormal, e.D[t] = At.RadioButton.Circle.YesPushDown, e;
            },
            getCA: function() {
                return "l";
            },
            YesNormal: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n85 = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
                n85 = Number((.9 * n85).toFixed(5));
                var i74 = At.internal.Bezier_C, a47 = Number((n85 * i74).toFixed(5));
                return r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n85 + " 0 m"), r.push(n85 + " " + a47 + " " + a47 + " " + n85 + " 0 " + n85 + " c"), r.push("-" + a47 + " " + n85 + " -" + n85 + " " + a47 + " -" + n85 + " 0 c"), r.push("-" + n85 + " -" + a47 + " -" + a47 + " -" + n85 + " 0 -" + n85 + " c"), r.push(a47 + " -" + n85 + " " + n85 + " -" + a47 + " " + n85 + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
            },
            YesPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n86 = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
                n86 = Number((.9 * n86).toFixed(5));
                var i75 = Number((2 * n86).toFixed(5)), a48 = Number((i75 * At.internal.Bezier_C).toFixed(5)), o34 = Number((n86 * At.internal.Bezier_C).toFixed(5));
                return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i75 + " 0 m"), r.push(i75 + " " + a48 + " " + a48 + " " + i75 + " 0 " + i75 + " c"), r.push("-" + a48 + " " + i75 + " -" + i75 + " " + a48 + " -" + i75 + " 0 c"), r.push("-" + i75 + " -" + a48 + " -" + a48 + " -" + i75 + " 0 -" + i75 + " c"), r.push(a48 + " -" + i75 + " " + i75 + " -" + a48 + " " + i75 + " 0 c"), r.push("f"), r.push("Q"), r.push("0 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n86 + " 0 m"), r.push(n86 + " " + o34 + " " + o34 + " " + n86 + " 0 " + n86 + " c"), r.push("-" + o34 + " " + n86 + " -" + n86 + " " + o34 + " -" + n86 + " 0 c"), r.push("-" + n86 + " -" + o34 + " -" + o34 + " -" + n86 + " 0 -" + n86 + " c"), r.push(o34 + " -" + n86 + " " + n86 + " -" + o34 + " " + n86 + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
            },
            OffPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n87 = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
                n87 = Number((.9 * n87).toFixed(5));
                var i76 = Number((2 * n87).toFixed(5)), a49 = Number((i76 * At.internal.Bezier_C).toFixed(5));
                return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i76 + " 0 m"), r.push(i76 + " " + a49 + " " + a49 + " " + i76 + " 0 " + i76 + " c"), r.push("-" + a49 + " " + i76 + " -" + i76 + " " + a49 + " -" + i76 + " 0 c"), r.push("-" + i76 + " -" + a49 + " -" + a49 + " -" + i76 + " 0 -" + i76 + " c"), r.push(a49 + " -" + i76 + " " + i76 + " -" + a49 + " " + i76 + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
            }
        },
        Cross: {
            createAppearanceStream: function(t) {
                var e = {
                    D: {
                        Off: At.RadioButton.Cross.OffPushDown
                    },
                    N: {}
                };
                return e.N[t] = At.RadioButton.Cross.YesNormal, e.D[t] = At.RadioButton.Cross.YesPushDown, e;
            },
            getCA: function() {
                return "8";
            },
            YesNormal: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [], n88 = At.internal.calculateCross(t);
                return r.push("q"), r.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), r.push("W"), r.push("n"), r.push(U(n88.x1.x) + " " + U(n88.x1.y) + " m"), r.push(U(n88.x2.x) + " " + U(n88.x2.y) + " l"), r.push(U(n88.x4.x) + " " + U(n88.x4.y) + " m"), r.push(U(n88.x3.x) + " " + U(n88.x3.y) + " l"), r.push("s"), r.push("Q"), e.stream = r.join("\n"), e;
            },
            YesPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = At.internal.calculateCross(t), n89 = [];
                return n89.push("0.749023 g"), n89.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), n89.push("f"), n89.push("q"), n89.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), n89.push("W"), n89.push("n"), n89.push(U(r.x1.x) + " " + U(r.x1.y) + " m"), n89.push(U(r.x2.x) + " " + U(r.x2.y) + " l"), n89.push(U(r.x4.x) + " " + U(r.x4.y) + " m"), n89.push(U(r.x3.x) + " " + U(r.x3.y) + " l"), n89.push("s"), n89.push("Q"), e.stream = n89.join("\n"), e;
            },
            OffPushDown: function(t) {
                var e = V(t);
                e.scope = t.scope;
                var r = [];
                return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
            }
        }
    },
    createDefaultAppearanceStream: function(t) {
        var e = t.scope.internal.getFont(t.fontName, t.fontStyle).id, r = t.scope.__private__.encodeColorString(t.color);
        return "/" + e + " " + t.fontSize + " Tf " + r;
    }
};
At.internal = {
    Bezier_C: .551915024494,
    calculateCross: function(t) {
        var e = At.internal.getWidth(t), r = At.internal.getHeight(t), n90 = Math.min(e, r);
        return {
            x1: {
                x: (e - n90) / 2,
                y: (r - n90) / 2 + n90
            },
            x2: {
                x: (e - n90) / 2 + n90,
                y: (r - n90) / 2
            },
            x3: {
                x: (e - n90) / 2,
                y: (r - n90) / 2
            },
            x4: {
                x: (e - n90) / 2 + n90,
                y: (r - n90) / 2 + n90
            }
        };
    }
}, At.internal.getWidth = function(e) {
    var r = 0;
    return "object" === _typeofDefault.default(e) && (r = W(e.Rect[2])), r;
}, At.internal.getHeight = function(e) {
    var r = 0;
    return "object" === _typeofDefault.default(e) && (r = W(e.Rect[3])), r;
};
var xt = q.addField = function(t) {
    if (at(this, t), !(t instanceof lt)) throw new Error("Invalid argument passed to jsPDF.addField.");
    var e;
    return (e = t).scope.internal.acroformPlugin.printedOut && (e.scope.internal.acroformPlugin.printedOut = !1, e.scope.internal.acroformPlugin.acroFormDictionaryRoot = null), e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e), t.page = t.scope.internal.getCurrentPageInfo().pageNumber, this;
};
q.AcroFormChoiceField = ft, q.AcroFormListBox = dt, q.AcroFormComboBox = pt, q.AcroFormEditBox = gt, q.AcroFormButton = mt, q.AcroFormPushButton = vt, q.AcroFormRadioButton = bt, q.AcroFormCheckBox = wt, q.AcroFormTextField = Nt, q.AcroFormPasswordField = Lt, q.AcroFormAppearance = At, q.AcroForm = {
    ChoiceField: ft,
    ListBox: dt,
    ComboBox: pt,
    EditBox: gt,
    Button: mt,
    PushButton: vt,
    RadioButton: bt,
    CheckBox: wt,
    TextField: Nt,
    PasswordField: Lt,
    Appearance: At
}, E.AcroForm = {
    ChoiceField: ft,
    ListBox: dt,
    ComboBox: pt,
    EditBox: gt,
    Button: mt,
    PushButton: vt,
    RadioButton: bt,
    CheckBox: wt,
    TextField: Nt,
    PasswordField: Lt,
    Appearance: At
};
var St = E.AcroForm;
function _t(t27) {
    return t27.reduce(function(t, e, r) {
        return t[e] = r, t;
    }, {});
}
!function(e15) {
    e15.__addimage__ = {};
    var r10 = "UNKNOWN", n91 = {
        PNG: [
            [
                137,
                80,
                78,
                71
            ]
        ],
        TIFF: [
            [
                77,
                77,
                0,
                42
            ],
            [
                73,
                73,
                42,
                0
            ]
        ],
        JPEG: [
            [
                255,
                216,
                255,
                224,
                void 0,
                void 0,
                74,
                70,
                73,
                70,
                0
            ],
            [
                255,
                216,
                255,
                225,
                void 0,
                void 0,
                69,
                120,
                105,
                102,
                0,
                0
            ],
            [
                255,
                216,
                255,
                219
            ],
            [
                255,
                216,
                255,
                238
            ]
        ],
        JPEG2000: [
            [
                0,
                0,
                0,
                12,
                106,
                80,
                32,
                32
            ]
        ],
        GIF87a: [
            [
                71,
                73,
                70,
                56,
                55,
                97
            ]
        ],
        GIF89a: [
            [
                71,
                73,
                70,
                56,
                57,
                97
            ]
        ],
        WEBP: [
            [
                82,
                73,
                70,
                70,
                void 0,
                void 0,
                void 0,
                void 0,
                87,
                69,
                66,
                80
            ]
        ],
        BMP: [
            [
                66,
                77
            ],
            [
                66,
                65
            ],
            [
                67,
                73
            ],
            [
                67,
                80
            ],
            [
                73,
                67
            ],
            [
                80,
                84
            ]
        ]
    }, i77 = e15.__addimage__.getImageFileTypeByImageData = function(t, e) {
        var i78, a51, o36, s22, c19, u15 = r10;
        if ("RGBA" === (e = e || r10) || void 0 !== t.data && t.data instanceof Uint8ClampedArray && "height" in t && "width" in t) return "RGBA";
        if (x3(t)) for(c19 in n91)for(o36 = n91[c19], i78 = 0; i78 < o36.length; i78 += 1){
            for(s22 = !0, a51 = 0; a51 < o36[i78].length; a51 += 1)if (void 0 !== o36[i78][a51] && o36[i78][a51] !== t[a51]) {
                s22 = !1;
                break;
            }
            if (!0 === s22) {
                u15 = c19;
                break;
            }
        }
        else for(c19 in n91)for(o36 = n91[c19], i78 = 0; i78 < o36.length; i78 += 1){
            for(s22 = !0, a51 = 0; a51 < o36[i78].length; a51 += 1)if (void 0 !== o36[i78][a51] && o36[i78][a51] !== t.charCodeAt(a51)) {
                s22 = !1;
                break;
            }
            if (!0 === s22) {
                u15 = c19;
                break;
            }
        }
        return u15 === r10 && e !== r10 && (u15 = e), u15;
    }, a50 = function t(e) {
        for(var r = this.internal.write, n92 = this.internal.putStream, i79 = (0, this.internal.getFilters)(); -1 !== i79.indexOf("FlateEncode");)i79.splice(i79.indexOf("FlateEncode"), 1);
        e.objectId = this.internal.newObject();
        var a52 = [];
        if (a52.push({
            key: "Type",
            value: "/XObject"
        }), a52.push({
            key: "Subtype",
            value: "/Image"
        }), a52.push({
            key: "Width",
            value: e.width
        }), a52.push({
            key: "Height",
            value: e.height
        }), e.colorSpace === b3.INDEXED ? a52.push({
            key: "ColorSpace",
            value: "[/Indexed /DeviceRGB " + (e.palette.length / 3 - 1) + " " + ("sMask" in e && void 0 !== e.sMask ? e.objectId + 2 : e.objectId + 1) + " 0 R]"
        }) : (a52.push({
            key: "ColorSpace",
            value: "/" + e.colorSpace
        }), e.colorSpace === b3.DEVICE_CMYK && a52.push({
            key: "Decode",
            value: "[1 0 1 0 1 0 1 0]"
        })), a52.push({
            key: "BitsPerComponent",
            value: e.bitsPerComponent
        }), "decodeParameters" in e && void 0 !== e.decodeParameters && a52.push({
            key: "DecodeParms",
            value: "<<" + e.decodeParameters + ">>"
        }), "transparency" in e && Array.isArray(e.transparency)) {
            for(var o37 = "", s23 = 0, c20 = e.transparency.length; s23 < c20; s23++)o37 += e.transparency[s23] + " " + e.transparency[s23] + " ";
            a52.push({
                key: "Mask",
                value: "[" + o37 + "]"
            });
        }
        void 0 !== e.sMask && a52.push({
            key: "SMask",
            value: e.objectId + 1 + " 0 R"
        });
        var u16 = void 0 !== e.filter ? [
            "/" + e.filter
        ] : void 0;
        if (n92({
            data: e.data,
            additionalKeyValues: a52,
            alreadyAppliedFilters: u16,
            objectId: e.objectId
        }), r("endobj"), "sMask" in e && void 0 !== e.sMask) {
            var h13 = "/Predictor " + e.predictor + " /Colors 1 /BitsPerComponent " + e.bitsPerComponent + " /Columns " + e.width, l12 = {
                width: e.width,
                height: e.height,
                colorSpace: "DeviceGray",
                bitsPerComponent: e.bitsPerComponent,
                decodeParameters: h13,
                data: e.sMask
            };
            "filter" in e && (l12.filter = e.filter), t.call(this, l12);
        }
        if (e.colorSpace === b3.INDEXED) {
            var f12 = this.internal.newObject();
            n92({
                data: _4(new Uint8Array(e.palette)),
                objectId: f12
            }), r("endobj");
        }
    }, o35 = function() {
        var t = this.internal.collections.addImage_images;
        for(var e in t)a50.call(this, t[e]);
    }, s21 = function() {
        var t, e = this.internal.collections.addImage_images, r = this.internal.write;
        for(var n93 in e)r("/I" + (t = e[n93]).index, t.objectId, "0", "R");
    }, c18 = function() {
        this.internal.collections.addImage_images || (this.internal.collections.addImage_images = {}, this.internal.events.subscribe("putResources", o35), this.internal.events.subscribe("putXobjectDict", s21));
    }, h12 = function() {
        var t = this.internal.collections.addImage_images;
        return c18.call(this), t;
    }, l11 = function() {
        return Object.keys(this.internal.collections.addImage_images).length;
    }, f11 = function(t) {
        return "function" == typeof e15["process" + t.toUpperCase()];
    }, d10 = function(e) {
        return "object" === _typeofDefault.default(e) && 1 === e.nodeType;
    }, p10 = function(t, r) {
        if ("IMG" === t.nodeName && t.hasAttribute("src")) {
            var n94 = "" + t.getAttribute("src");
            if (0 === n94.indexOf("data:image/")) return u(unescape(n94).split("base64,").pop());
            var i80 = e15.loadFile(n94, !0);
            if (void 0 !== i80) return i80;
        }
        if ("CANVAS" === t.nodeName) {
            if (0 === t.width || 0 === t.height) throw new Error("Given canvas must have data. Canvas width: " + t.width + ", height: " + t.height);
            var a53;
            switch(r){
                case "PNG":
                    a53 = "image/png";
                    break;
                case "WEBP":
                    a53 = "image/webp";
                    break;
                case "JPEG":
                case "JPG":
                default:
                    a53 = "image/jpeg";
            }
            return u(t.toDataURL(a53, 1).split("base64,").pop());
        }
    }, g7 = function(t) {
        var e = this.internal.collections.addImage_images;
        if (e) {
            for(var r in e)if (t === e[r].alias) return e[r];
        }
    }, m6 = function(t, e, r) {
        return t || e || (t = -96, e = -96), t < 0 && (t = -1 * r.width * 72 / t / this.internal.scaleFactor), e < 0 && (e = -1 * r.height * 72 / e / this.internal.scaleFactor), 0 === t && (t = e * r.width / r.height), 0 === e && (e = t * r.height / r.width), [
            t,
            e
        ];
    }, v5 = function(t28, e, r, n95, i81, a54) {
        var o38 = m6.call(this, r, n95, i81), s24 = this.internal.getCoordinateString, c21 = this.internal.getVerticalCoordinateString, u17 = h12.call(this);
        if (r = o38[0], n95 = o38[1], u17[i81.index] = i81, a54) {
            a54 *= Math.PI / 180;
            var l13 = Math.cos(a54), f13 = Math.sin(a54), d11 = function(t) {
                return t.toFixed(4);
            }, p = [
                d11(l13),
                d11(f13),
                d11(-1 * f13),
                d11(l13),
                0,
                0,
                "cm"
            ];
        }
        this.internal.write("q"), a54 ? (this.internal.write([
            1,
            "0",
            "0",
            1,
            s24(t28),
            c21(e + n95),
            "cm"
        ].join(" ")), this.internal.write(p.join(" ")), this.internal.write([
            s24(r),
            "0",
            "0",
            s24(n95),
            "0",
            "0",
            "cm"
        ].join(" "))) : this.internal.write([
            s24(r),
            "0",
            "0",
            s24(n95),
            s24(t28),
            c21(e + n95),
            "cm"
        ].join(" ")), this.isAdvancedAPI() && this.internal.write([
            1,
            0,
            0,
            -1,
            0,
            0,
            "cm"
        ].join(" ")), this.internal.write("/I" + i81.index + " Do"), this.internal.write("Q");
    }, b3 = e15.color_spaces = {
        DEVICE_RGB: "DeviceRGB",
        DEVICE_GRAY: "DeviceGray",
        DEVICE_CMYK: "DeviceCMYK",
        CAL_GREY: "CalGray",
        CAL_RGB: "CalRGB",
        LAB: "Lab",
        ICC_BASED: "ICCBased",
        INDEXED: "Indexed",
        PATTERN: "Pattern",
        SEPARATION: "Separation",
        DEVICE_N: "DeviceN"
    };
    e15.decode = {
        DCT_DECODE: "DCTDecode",
        FLATE_DECODE: "FlateDecode",
        LZW_DECODE: "LZWDecode",
        JPX_DECODE: "JPXDecode",
        JBIG2_DECODE: "JBIG2Decode",
        ASCII85_DECODE: "ASCII85Decode",
        ASCII_HEX_DECODE: "ASCIIHexDecode",
        RUN_LENGTH_DECODE: "RunLengthDecode",
        CCITT_FAX_DECODE: "CCITTFaxDecode"
    };
    var y4 = e15.image_compression = {
        NONE: "NONE",
        FAST: "FAST",
        MEDIUM: "MEDIUM",
        SLOW: "SLOW"
    }, w4 = e15.__addimage__.sHashCode = function(t) {
        var e, r, n96 = 0;
        if ("string" == typeof t) for(r = t.length, e = 0; e < r; e++)n96 = (n96 << 5) - n96 + t.charCodeAt(e), n96 |= 0;
        else if (x3(t)) for(r = t.byteLength / 2, e = 0; e < r; e++)n96 = (n96 << 5) - n96 + t[e], n96 |= 0;
        return n96;
    }, N4 = e15.__addimage__.validateStringAsBase64 = function(t) {
        (t = t || "").toString().trim();
        var e = !0;
        return 0 === t.length && (e = !1), t.length % 4 != 0 && (e = !1), !1 === /^[A-Za-z0-9+/]+$/.test(t.substr(0, t.length - 2)) && (e = !1), !1 === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2)) && (e = !1), e;
    }, L4 = e15.__addimage__.extractImageFromDataUrl = function(t) {
        var e = (t = t || "").split("base64,"), r = null;
        if (2 === e.length) {
            var n97 = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);
            Array.isArray(n97) && (r = {
                mimeType: n97[1],
                charset: n97[2],
                data: e[1]
            });
        }
        return r;
    }, A4 = e15.__addimage__.supportsArrayBuffer = function() {
        return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array;
    };
    e15.__addimage__.isArrayBuffer = function(t) {
        return A4() && t instanceof ArrayBuffer;
    };
    var x3 = e15.__addimage__.isArrayBufferView = function(t) {
        return A4() && "undefined" != typeof Uint32Array && (t instanceof Int8Array || t instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array);
    }, S3 = e15.__addimage__.binaryStringToUint8Array = function(t) {
        for(var e = t.length, r = new Uint8Array(e), n98 = 0; n98 < e; n98++)r[n98] = t.charCodeAt(n98);
        return r;
    }, _4 = e15.__addimage__.arrayBufferToBinaryString = function(t) {
        for(var e = "", r = x3(t) ? t : new Uint8Array(t), n99 = 0; n99 < r.length; n99 += 8192)e += String.fromCharCode.apply(null, r.subarray(n99, n99 + 8192));
        return e;
    };
    e15.addImage = function() {
        var e, n100, i82, a55, o39, s25, u18, h14, l14;
        if ("number" == typeof arguments[1] ? (n100 = r10, i82 = arguments[1], a55 = arguments[2], o39 = arguments[3], s25 = arguments[4], u18 = arguments[5], h14 = arguments[6], l14 = arguments[7]) : (n100 = arguments[1], i82 = arguments[2], a55 = arguments[3], o39 = arguments[4], s25 = arguments[5], u18 = arguments[6], h14 = arguments[7], l14 = arguments[8]), "object" === _typeofDefault.default(e = arguments[0]) && !d10(e) && "imageData" in e) {
            var f14 = e;
            e = f14.imageData, n100 = f14.format || n100 || r10, i82 = f14.x || i82 || 0, a55 = f14.y || a55 || 0, o39 = f14.w || f14.width || o39, s25 = f14.h || f14.height || s25, u18 = f14.alias || u18, h14 = f14.compression || h14, l14 = f14.rotation || f14.angle || l14;
        }
        var p = this.internal.getFilters();
        if (void 0 === h14 && -1 !== p.indexOf("FlateEncode") && (h14 = "SLOW"), isNaN(i82) || isNaN(a55)) throw new Error("Invalid coordinates passed to jsPDF.addImage");
        c18.call(this);
        var g8 = P3.call(this, e, n100, u18, h14);
        return v5.call(this, i82, a55, o39, s25, g8, l14), this;
    };
    var P3 = function(t29, n101, a56, o40) {
        var s26, c22, u19;
        if ("string" == typeof t29 && i77(t29) === r10) {
            t29 = unescape(t29);
            var h15 = k3(t29, !1);
            ("" !== h15 || void 0 !== (h15 = e15.loadFile(t29, !0))) && (t29 = h15);
        }
        if (d10(t29) && (t29 = p10(t29, n101)), n101 = i77(t29, n101), !f11(n101)) throw new Error("addImage does not support files of type '" + n101 + "', please ensure that a plugin for '" + n101 + "' support is added.");
        if ((null == (u19 = a56) || 0 === u19.length) && (a56 = function(t) {
            return "string" == typeof t || x3(t) ? w4(t) : x3(t.data) ? w4(t.data) : null;
        }(t29)), (s26 = g7.call(this, a56)) || (A4() && (t29 instanceof Uint8Array || "RGBA" === n101 || (c22 = t29, t29 = S3(t29))), s26 = this["process" + n101.toUpperCase()](t29, l11.call(this), a56, function(t) {
            return t && "string" == typeof t && (t = t.toUpperCase()), t in e15.image_compression ? t : y4.NONE;
        }(o40), c22)), !s26) throw new Error("An unknown error occurred whilst processing the image.");
        return s26;
    }, k3 = e15.__addimage__.convertBase64ToBinaryString = function(t, e) {
        var r;
        e = "boolean" != typeof e || e;
        var n102, i83 = "";
        if ("string" == typeof t) {
            n102 = null !== (r = L4(t)) ? r.data : t;
            try {
                i83 = u(n102);
            } catch (t) {
                if (e) throw N4(n102) ? new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + t.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ");
            }
        }
        return i83;
    };
    e15.getImageProperties = function(t) {
        var n103, a57, o41 = "";
        if (d10(t) && (t = p10(t)), "string" == typeof t && i77(t) === r10 && ("" === (o41 = k3(t, !1)) && (o41 = e15.loadFile(t) || ""), t = o41), a57 = i77(t), !f11(a57)) throw new Error("addImage does not support files of type '" + a57 + "', please ensure that a plugin for '" + a57 + "' support is added.");
        if (!A4() || t instanceof Uint8Array || (t = S3(t)), !(n103 = this["process" + a57.toUpperCase()](t))) throw new Error("An unknown error occurred whilst processing the image");
        return n103.fileType = a57, n103;
    };
}(E.API), /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t30) {
    var e16 = function(t) {
        if (void 0 !== t && "" != t) return !0;
    };
    E.API.events.push([
        "addPage",
        function(t) {
            this.internal.getPageInfo(t.pageNumber).pageContext.annotations = [];
        }
    ]), t30.events.push([
        "putPage",
        function(t) {
            for(var r, n104, i84, a58 = this.internal.getCoordinateString, o42 = this.internal.getVerticalCoordinateString, s27 = this.internal.getPageInfoByObjId(t.objId), c23 = t.pageContext.annotations, u20 = !1, h16 = 0; h16 < c23.length && !u20; h16++)switch((r = c23[h16]).type){
                case "link":
                    (e16(r.options.url) || e16(r.options.pageNumber)) && (u20 = !0);
                    break;
                case "reference":
                case "text":
                case "freetext":
                    u20 = !0;
            }
            if (0 != u20) {
                this.internal.write("/Annots [");
                for(var l15 = 0; l15 < c23.length; l15++){
                    r = c23[l15];
                    var f15 = this.internal.pdfEscape, d12 = this.internal.getEncryptor(t.objId);
                    switch(r.type){
                        case "reference":
                            this.internal.write(" " + r.object.objId + " 0 R ");
                            break;
                        case "text":
                            var p = this.internal.newAdditionalObject(), g9 = this.internal.newAdditionalObject(), m7 = this.internal.getEncryptor(p.objId), v6 = r.title || "Note";
                            i84 = "<</Type /Annot /Subtype /Text " + (n104 = "/Rect [" + a58(r.bounds.x) + " " + o42(r.bounds.y + r.bounds.h) + " " + a58(r.bounds.x + r.bounds.w) + " " + o42(r.bounds.y) + "] ") + "/Contents (" + f15(m7(r.contents)) + ")", i84 += " /Popup " + g9.objId + " 0 R", i84 += " /P " + s27.objId + " 0 R", i84 += " /T (" + f15(m7(v6)) + ") >>", p.content = i84;
                            var b4 = p.objId + " 0 R";
                            i84 = "<</Type /Annot /Subtype /Popup " + (n104 = "/Rect [" + a58(r.bounds.x + 30) + " " + o42(r.bounds.y + r.bounds.h) + " " + a58(r.bounds.x + r.bounds.w + 30) + " " + o42(r.bounds.y) + "] ") + " /Parent " + b4, r.open && (i84 += " /Open true"), i84 += " >>", g9.content = i84, this.internal.write(p.objId, "0 R", g9.objId, "0 R");
                            break;
                        case "freetext":
                            n104 = "/Rect [" + a58(r.bounds.x) + " " + o42(r.bounds.y) + " " + a58(r.bounds.x + r.bounds.w) + " " + o42(r.bounds.y + r.bounds.h) + "] ";
                            var y5 = r.color || "#000000";
                            i84 = "<</Type /Annot /Subtype /FreeText " + n104 + "/Contents (" + f15(d12(r.contents)) + ")", i84 += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + y5 + ")", i84 += " /Border [0 0 0]", i84 += " >>", this.internal.write(i84);
                            break;
                        case "link":
                            if (r.options.name) {
                                var w5 = this.annotations._nameMap[r.options.name];
                                r.options.pageNumber = w5.page, r.options.top = w5.y;
                            } else r.options.top || (r.options.top = 0);
                            if (n104 = "/Rect [" + r.finalBounds.x + " " + r.finalBounds.y + " " + r.finalBounds.w + " " + r.finalBounds.h + "] ", i84 = "", r.options.url) i84 = "<</Type /Annot /Subtype /Link " + n104 + "/Border [0 0 0] /A <</S /URI /URI (" + f15(d12(r.options.url)) + ") >>";
                            else if (r.options.pageNumber) switch(i84 = "<</Type /Annot /Subtype /Link " + n104 + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(r.options.pageNumber).objId + " 0 R", r.options.magFactor = r.options.magFactor || "XYZ", r.options.magFactor){
                                case "Fit":
                                    i84 += " /Fit]";
                                    break;
                                case "FitH":
                                    i84 += " /FitH " + r.options.top + "]";
                                    break;
                                case "FitV":
                                    r.options.left = r.options.left || 0, i84 += " /FitV " + r.options.left + "]";
                                    break;
                                case "XYZ":
                                default:
                                    var N5 = o42(r.options.top);
                                    r.options.left = r.options.left || 0, void 0 === r.options.zoom && (r.options.zoom = 0), i84 += " /XYZ " + r.options.left + " " + N5 + " " + r.options.zoom + "]";
                            }
                            "" != i84 && (i84 += " >>", this.internal.write(i84));
                    }
                }
                this.internal.write("]");
            }
        }
    ]), t30.createAnnotation = function(t) {
        var e = this.internal.getCurrentPageInfo();
        switch(t.type){
            case "link":
                this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);
                break;
            case "text":
            case "freetext":
                e.pageContext.annotations.push(t);
        }
    }, t30.link = function(t, e, r, n105, i85) {
        var a59 = this.internal.getCurrentPageInfo(), o43 = this.internal.getCoordinateString, s28 = this.internal.getVerticalCoordinateString;
        a59.pageContext.annotations.push({
            finalBounds: {
                x: o43(t),
                y: s28(e),
                w: o43(t + r),
                h: s28(e + n105)
            },
            options: i85,
            type: "link"
        });
    }, t30.textWithLink = function(t, e, r, n106) {
        var i86, a60, o44 = this.getTextWidth(t), s29 = this.internal.getLineHeight() / this.internal.scaleFactor;
        if (void 0 !== n106.maxWidth) {
            a60 = n106.maxWidth;
            var c24 = this.splitTextToSize(t, a60).length;
            i86 = Math.ceil(s29 * c24);
        } else a60 = o44, i86 = s29;
        return this.text(t, e, r, n106), r += .2 * s29, "center" === n106.align && (e -= o44 / 2), "right" === n106.align && (e -= o44), this.link(e, r - s29, a60, i86, n106), o44;
    }, t30.getTextWidth = function(t) {
        var e = this.internal.getFontSize();
        return this.getStringUnitWidth(t) * e / this.internal.scaleFactor;
    };
}(E.API), /**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t31) {
    var e17 = {
        1569: [
            65152
        ],
        1570: [
            65153,
            65154
        ],
        1571: [
            65155,
            65156
        ],
        1572: [
            65157,
            65158
        ],
        1573: [
            65159,
            65160
        ],
        1574: [
            65161,
            65162,
            65163,
            65164
        ],
        1575: [
            65165,
            65166
        ],
        1576: [
            65167,
            65168,
            65169,
            65170
        ],
        1577: [
            65171,
            65172
        ],
        1578: [
            65173,
            65174,
            65175,
            65176
        ],
        1579: [
            65177,
            65178,
            65179,
            65180
        ],
        1580: [
            65181,
            65182,
            65183,
            65184
        ],
        1581: [
            65185,
            65186,
            65187,
            65188
        ],
        1582: [
            65189,
            65190,
            65191,
            65192
        ],
        1583: [
            65193,
            65194
        ],
        1584: [
            65195,
            65196
        ],
        1585: [
            65197,
            65198
        ],
        1586: [
            65199,
            65200
        ],
        1587: [
            65201,
            65202,
            65203,
            65204
        ],
        1588: [
            65205,
            65206,
            65207,
            65208
        ],
        1589: [
            65209,
            65210,
            65211,
            65212
        ],
        1590: [
            65213,
            65214,
            65215,
            65216
        ],
        1591: [
            65217,
            65218,
            65219,
            65220
        ],
        1592: [
            65221,
            65222,
            65223,
            65224
        ],
        1593: [
            65225,
            65226,
            65227,
            65228
        ],
        1594: [
            65229,
            65230,
            65231,
            65232
        ],
        1601: [
            65233,
            65234,
            65235,
            65236
        ],
        1602: [
            65237,
            65238,
            65239,
            65240
        ],
        1603: [
            65241,
            65242,
            65243,
            65244
        ],
        1604: [
            65245,
            65246,
            65247,
            65248
        ],
        1605: [
            65249,
            65250,
            65251,
            65252
        ],
        1606: [
            65253,
            65254,
            65255,
            65256
        ],
        1607: [
            65257,
            65258,
            65259,
            65260
        ],
        1608: [
            65261,
            65262
        ],
        1609: [
            65263,
            65264,
            64488,
            64489
        ],
        1610: [
            65265,
            65266,
            65267,
            65268
        ],
        1649: [
            64336,
            64337
        ],
        1655: [
            64477
        ],
        1657: [
            64358,
            64359,
            64360,
            64361
        ],
        1658: [
            64350,
            64351,
            64352,
            64353
        ],
        1659: [
            64338,
            64339,
            64340,
            64341
        ],
        1662: [
            64342,
            64343,
            64344,
            64345
        ],
        1663: [
            64354,
            64355,
            64356,
            64357
        ],
        1664: [
            64346,
            64347,
            64348,
            64349
        ],
        1667: [
            64374,
            64375,
            64376,
            64377
        ],
        1668: [
            64370,
            64371,
            64372,
            64373
        ],
        1670: [
            64378,
            64379,
            64380,
            64381
        ],
        1671: [
            64382,
            64383,
            64384,
            64385
        ],
        1672: [
            64392,
            64393
        ],
        1676: [
            64388,
            64389
        ],
        1677: [
            64386,
            64387
        ],
        1678: [
            64390,
            64391
        ],
        1681: [
            64396,
            64397
        ],
        1688: [
            64394,
            64395
        ],
        1700: [
            64362,
            64363,
            64364,
            64365
        ],
        1702: [
            64366,
            64367,
            64368,
            64369
        ],
        1705: [
            64398,
            64399,
            64400,
            64401
        ],
        1709: [
            64467,
            64468,
            64469,
            64470
        ],
        1711: [
            64402,
            64403,
            64404,
            64405
        ],
        1713: [
            64410,
            64411,
            64412,
            64413
        ],
        1715: [
            64406,
            64407,
            64408,
            64409
        ],
        1722: [
            64414,
            64415
        ],
        1723: [
            64416,
            64417,
            64418,
            64419
        ],
        1726: [
            64426,
            64427,
            64428,
            64429
        ],
        1728: [
            64420,
            64421
        ],
        1729: [
            64422,
            64423,
            64424,
            64425
        ],
        1733: [
            64480,
            64481
        ],
        1734: [
            64473,
            64474
        ],
        1735: [
            64471,
            64472
        ],
        1736: [
            64475,
            64476
        ],
        1737: [
            64482,
            64483
        ],
        1739: [
            64478,
            64479
        ],
        1740: [
            64508,
            64509,
            64510,
            64511
        ],
        1744: [
            64484,
            64485,
            64486,
            64487
        ],
        1746: [
            64430,
            64431
        ],
        1747: [
            64432,
            64433
        ]
    }, r11 = {
        65247: {
            65154: 65269,
            65156: 65271,
            65160: 65273,
            65166: 65275
        },
        65248: {
            65154: 65270,
            65156: 65272,
            65160: 65274,
            65166: 65276
        },
        65165: {
            65247: {
                65248: {
                    65258: 65010
                }
            }
        },
        1617: {
            1612: 64606,
            1613: 64607,
            1614: 64608,
            1615: 64609,
            1616: 64610
        }
    }, n107 = {
        1612: 64606,
        1613: 64607,
        1614: 64608,
        1615: 64609,
        1616: 64610
    }, i87 = [
        1570,
        1571,
        1573,
        1575
    ];
    t31.__arabicParser__ = {};
    var a61 = t31.__arabicParser__.isInArabicSubstitutionA = function(t) {
        return void 0 !== e17[t.charCodeAt(0)];
    }, o45 = t31.__arabicParser__.isArabicLetter = function(t) {
        return "string" == typeof t && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t);
    }, s30 = t31.__arabicParser__.isArabicEndLetter = function(t) {
        return o45(t) && a61(t) && e17[t.charCodeAt(0)].length <= 2;
    }, c25 = t31.__arabicParser__.isArabicAlfLetter = function(t) {
        return o45(t) && i87.indexOf(t.charCodeAt(0)) >= 0;
    };
    t31.__arabicParser__.arabicLetterHasIsolatedForm = function(t) {
        return o45(t) && a61(t) && e17[t.charCodeAt(0)].length >= 1;
    };
    var u21 = t31.__arabicParser__.arabicLetterHasFinalForm = function(t) {
        return o45(t) && a61(t) && e17[t.charCodeAt(0)].length >= 2;
    };
    t31.__arabicParser__.arabicLetterHasInitialForm = function(t) {
        return o45(t) && a61(t) && e17[t.charCodeAt(0)].length >= 3;
    };
    var h17 = t31.__arabicParser__.arabicLetterHasMedialForm = function(t) {
        return o45(t) && a61(t) && 4 == e17[t.charCodeAt(0)].length;
    }, l16 = t31.__arabicParser__.resolveLigatures = function(t) {
        var e = 0, n108 = r11, i88 = "", a62 = 0;
        for(e = 0; e < t.length; e += 1)void 0 !== n108[t.charCodeAt(e)] ? (a62++, "number" == typeof (n108 = n108[t.charCodeAt(e)]) && (i88 += String.fromCharCode(n108), n108 = r11, a62 = 0), e === t.length - 1 && (n108 = r11, i88 += t.charAt(e - (a62 - 1)), e -= a62 - 1, a62 = 0)) : (n108 = r11, i88 += t.charAt(e - a62), e -= a62, a62 = 0);
        return i88;
    };
    t31.__arabicParser__.isArabicDiacritic = function(t) {
        return void 0 !== t && void 0 !== n107[t.charCodeAt(0)];
    };
    var f16 = t31.__arabicParser__.getCorrectForm = function(t, e, r) {
        return o45(t) ? !1 === a61(t) ? -1 : !u21(t) || !o45(e) && !o45(r) || !o45(r) && s30(e) || s30(t) && !o45(e) || s30(t) && c25(e) || s30(t) && s30(e) ? 0 : h17(t) && o45(e) && !s30(e) && o45(r) && u21(r) ? 3 : s30(t) || !o45(r) ? 1 : 2 : -1;
    }, d13 = function(t) {
        var r = 0, n109 = 0, i89 = 0, a63 = "", s31 = "", c26 = "", u22 = (t = t || "").split("\\s+"), h18 = [];
        for(r = 0; r < u22.length; r += 1){
            for(h18.push(""), n109 = 0; n109 < u22[r].length; n109 += 1)a63 = u22[r][n109], s31 = u22[r][n109 - 1], c26 = u22[r][n109 + 1], o45(a63) ? (i89 = f16(a63, s31, c26), h18[r] += -1 !== i89 ? String.fromCharCode(e17[a63.charCodeAt(0)][i89]) : a63) : h18[r] += a63;
            h18[r] = l16(h18[r]);
        }
        return h18.join(" ");
    }, p = t31.__arabicParser__.processArabic = t31.processArabic = function() {
        var t, e = "string" == typeof arguments[0] ? arguments[0] : arguments[0].text, r = [];
        if (Array.isArray(e)) {
            var n110 = 0;
            for(r = [], n110 = 0; n110 < e.length; n110 += 1)Array.isArray(e[n110]) ? r.push([
                d13(e[n110][0]),
                e[n110][1],
                e[n110][2]
            ]) : r.push([
                d13(e[n110])
            ]);
            t = r;
        } else t = d13(e);
        return "string" == typeof arguments[0] ? t : (arguments[0].text = t, arguments[0]);
    };
    t31.events.push([
        "preProcessText",
        p
    ]);
}(E.API), E.API.autoPrint = function(t) {
    var e;
    switch((t = t || {}).variant = t.variant || "non-conform", t.variant){
        case "javascript":
            this.addJS("print({});");
            break;
        case "non-conform":
        default:
            this.internal.events.subscribe("postPutResources", function() {
                e = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /Named"), this.internal.out("/Type /Action"), this.internal.out("/N /Print"), this.internal.out(">>"), this.internal.out("endobj");
            }), this.internal.events.subscribe("putCatalog", function() {
                this.internal.out("/OpenAction " + e + " 0 R");
            });
    }
    return this;
}, /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t32) {
    var e18 = function() {
        var t33 = void 0;
        Object.defineProperty(this, "pdf", {
            get: function() {
                return t33;
            },
            set: function(e) {
                t33 = e;
            }
        });
        var e19 = 150;
        Object.defineProperty(this, "width", {
            get: function() {
                return e19;
            },
            set: function(t) {
                e19 = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t, this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = e19 + 1);
            }
        });
        var r = 300;
        Object.defineProperty(this, "height", {
            get: function() {
                return r;
            },
            set: function(t) {
                r = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t, this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r + 1);
            }
        });
        var n111 = [];
        Object.defineProperty(this, "childNodes", {
            get: function() {
                return n111;
            },
            set: function(t) {
                n111 = t;
            }
        });
        var i90 = {};
        Object.defineProperty(this, "style", {
            get: function() {
                return i90;
            },
            set: function(t) {
                i90 = t;
            }
        }), Object.defineProperty(this, "parentNode", {});
    };
    e18.prototype.getContext = function(t, e) {
        var r;
        if ("2d" !== (t = t || "2d")) return null;
        for(r in e)this.pdf.context2d.hasOwnProperty(r) && (this.pdf.context2d[r] = e[r]);
        return this.pdf.context2d._canvas = this, this.pdf.context2d;
    }, e18.prototype.toDataURL = function() {
        throw new Error("toDataURL is not implemented.");
    }, t32.events.push([
        "initialized",
        function() {
            this.canvas = new e18, this.canvas.pdf = this;
        }
    ]);
}(E.API), function(e20) {
    var r12 = {
        left: 0,
        top: 0,
        bottom: 0,
        right: 0
    }, n112 = !1, i91 = function() {
        void 0 === this.internal.__cell__ && (this.internal.__cell__ = {}, this.internal.__cell__.padding = 3, this.internal.__cell__.headerFunction = void 0, this.internal.__cell__.margins = Object.assign({}, r12), this.internal.__cell__.margins.width = this.getPageWidth(), a64.call(this));
    }, a64 = function() {
        this.internal.__cell__.lastCell = new o46, this.internal.__cell__.pages = 1;
    }, o46 = function() {
        var t34 = arguments[0];
        Object.defineProperty(this, "x", {
            enumerable: !0,
            get: function() {
                return t34;
            },
            set: function(e) {
                t34 = e;
            }
        });
        var e21 = arguments[1];
        Object.defineProperty(this, "y", {
            enumerable: !0,
            get: function() {
                return e21;
            },
            set: function(t) {
                e21 = t;
            }
        });
        var r = arguments[2];
        Object.defineProperty(this, "width", {
            enumerable: !0,
            get: function() {
                return r;
            },
            set: function(t) {
                r = t;
            }
        });
        var n113 = arguments[3];
        Object.defineProperty(this, "height", {
            enumerable: !0,
            get: function() {
                return n113;
            },
            set: function(t) {
                n113 = t;
            }
        });
        var i92 = arguments[4];
        Object.defineProperty(this, "text", {
            enumerable: !0,
            get: function() {
                return i92;
            },
            set: function(t) {
                i92 = t;
            }
        });
        var a65 = arguments[5];
        Object.defineProperty(this, "lineNumber", {
            enumerable: !0,
            get: function() {
                return a65;
            },
            set: function(t) {
                a65 = t;
            }
        });
        var o47 = arguments[6];
        return Object.defineProperty(this, "align", {
            enumerable: !0,
            get: function() {
                return o47;
            },
            set: function(t) {
                o47 = t;
            }
        }), this;
    };
    o46.prototype.clone = function() {
        return new o46(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
    }, o46.prototype.toArray = function() {
        return [
            this.x,
            this.y,
            this.width,
            this.height,
            this.text,
            this.lineNumber,
            this.align
        ];
    }, e20.setHeaderFunction = function(t) {
        return i91.call(this), this.internal.__cell__.headerFunction = "function" == typeof t ? t : void 0, this;
    }, e20.getTextDimensions = function(t35, e22) {
        i91.call(this);
        var r = (e22 = e22 || {}).fontSize || this.getFontSize(), n114 = e22.font || this.getFont(), a66 = e22.scaleFactor || this.internal.scaleFactor, o48 = 0, s33 = 0, c28 = 0, u23 = this;
        if (!Array.isArray(t35) && "string" != typeof t35) {
            if ("number" != typeof t35) throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
            t35 = String(t35);
        }
        var h19 = e22.maxWidth;
        h19 > 0 ? "string" == typeof t35 ? t35 = this.splitTextToSize(t35, h19) : "[object Array]" === Object.prototype.toString.call(t35) && (t35 = t35.reduce(function(t, e) {
            return t.concat(u23.splitTextToSize(e, h19));
        }, [])) : t35 = Array.isArray(t35) ? t35 : [
            t35
        ];
        for(var l17 = 0; l17 < t35.length; l17++)o48 < (c28 = this.getStringUnitWidth(t35[l17], {
            font: n114
        }) * r) && (o48 = c28);
        return 0 !== o48 && (s33 = t35.length), {
            w: o48 /= a66,
            h: Math.max((s33 * r * this.getLineHeightFactor() - r * (this.getLineHeightFactor() - 1)) / a66, 0)
        };
    }, e20.cellAddPage = function() {
        i91.call(this), this.addPage();
        var t = this.internal.__cell__.margins || r12;
        return this.internal.__cell__.lastCell = new o46(t.left, t.top, void 0, void 0), this.internal.__cell__.pages += 1, this;
    };
    var s32 = e20.cell = function() {
        var t;
        t = arguments[0] instanceof o46 ? arguments[0] : new o46(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]), i91.call(this);
        var e = this.internal.__cell__.lastCell, a67 = this.internal.__cell__.padding, s34 = this.internal.__cell__.margins || r12, c29 = this.internal.__cell__.tableHeaderRow, u24 = this.internal.__cell__.printHeaders;
        return void 0 !== e.lineNumber && (e.lineNumber === t.lineNumber ? (t.x = (e.x || 0) + (e.width || 0), t.y = e.y || 0) : e.y + e.height + t.height + s34.bottom > this.getPageHeight() ? (this.cellAddPage(), t.y = s34.top, u24 && c29 && (this.printHeaderRow(t.lineNumber, !0), t.y += c29[0].height)) : t.y = e.y + e.height || t.y), void 0 !== t.text[0] && (this.rect(t.x, t.y, t.width, t.height, !0 === n112 ? "FD" : void 0), "right" === t.align ? this.text(t.text, t.x + t.width - a67, t.y + a67, {
            align: "right",
            baseline: "top"
        }) : "center" === t.align ? this.text(t.text, t.x + t.width / 2, t.y + a67, {
            align: "center",
            baseline: "top",
            maxWidth: t.width - a67 - a67
        }) : this.text(t.text, t.x + a67, t.y + a67, {
            align: "left",
            baseline: "top",
            maxWidth: t.width - a67 - a67
        })), this.internal.__cell__.lastCell = t, this;
    };
    e20.table = function(e23, n115, u25, h20, l18) {
        if (i91.call(this), !u25) throw new Error("No data for PDF table.");
        var f17, d14, p, g10, m8 = [], v7 = [], b5 = [], y6 = {}, w6 = {}, N6 = [], L5 = [], A5 = (l18 = l18 || {}).autoSize || !1, x4 = !1 !== l18.printHeaders, S4 = l18.css && void 0 !== l18.css["font-size"] ? 16 * l18.css["font-size"] : l18.fontSize || 12, _5 = l18.margins || Object.assign({
            width: this.getPageWidth()
        }, r12), P4 = "number" == typeof l18.padding ? l18.padding : 3, k4 = l18.headerBackgroundColor || "#c8c8c8", I2 = l18.headerTextColor || "#000";
        if (a64.call(this), this.internal.__cell__.printHeaders = x4, this.internal.__cell__.margins = _5, this.internal.__cell__.table_font_size = S4, this.internal.__cell__.padding = P4, this.internal.__cell__.headerBackgroundColor = k4, this.internal.__cell__.headerTextColor = I2, this.setFontSize(S4), null == h20) v7 = m8 = Object.keys(u25[0]), b5 = m8.map(function() {
            return "left";
        });
        else if (Array.isArray(h20) && "object" === _typeofDefault.default(h20[0])) for(m8 = h20.map(function(t) {
            return t.name;
        }), v7 = h20.map(function(t) {
            return t.prompt || t.name || "";
        }), b5 = h20.map(function(t) {
            return t.align || "left";
        }), f17 = 0; f17 < h20.length; f17 += 1)w6[h20[f17].name] = h20[f17].width * (19.049976 / 25.4);
        else Array.isArray(h20) && "string" == typeof h20[0] && (v7 = m8 = h20, b5 = m8.map(function() {
            return "left";
        }));
        if (A5 || Array.isArray(h20) && "string" == typeof h20[0]) for(f17 = 0; f17 < m8.length; f17 += 1){
            for(y6[g10 = m8[f17]] = u25.map(function(t) {
                return t[g10];
            }), this.setFont(void 0, "bold"), N6.push(this.getTextDimensions(v7[f17], {
                fontSize: this.internal.__cell__.table_font_size,
                scaleFactor: this.internal.scaleFactor
            }).w), d14 = y6[g10], this.setFont(void 0, "normal"), p = 0; p < d14.length; p += 1)N6.push(this.getTextDimensions(d14[p], {
                fontSize: this.internal.__cell__.table_font_size,
                scaleFactor: this.internal.scaleFactor
            }).w);
            w6[g10] = Math.max.apply(null, N6) + P4 + P4, N6 = [];
        }
        if (x4) {
            var F2 = {};
            for(f17 = 0; f17 < m8.length; f17 += 1)F2[m8[f17]] = {}, F2[m8[f17]].text = v7[f17], F2[m8[f17]].align = b5[f17];
            var C2 = c27.call(this, F2, w6);
            L5 = m8.map(function(t) {
                return new o46(e23, n115, w6[t], C2, F2[t].text, void 0, F2[t].align);
            }), this.setTableHeaderRow(L5), this.printHeaderRow(1, !1);
        }
        var j2 = h20.reduce(function(t, e) {
            return t[e.name] = e.align, t;
        }, {});
        for(f17 = 0; f17 < u25.length; f17 += 1){
            "rowStart" in l18 && l18.rowStart instanceof Function && l18.rowStart({
                row: f17,
                data: u25[f17]
            }, this);
            var O2 = c27.call(this, u25[f17], w6);
            for(p = 0; p < m8.length; p += 1){
                var B2 = u25[f17][m8[p]];
                "cellStart" in l18 && l18.cellStart instanceof Function && l18.cellStart({
                    row: f17,
                    col: p,
                    data: B2
                }, this), s32.call(this, new o46(e23, n115, w6[m8[p]], O2, B2, f17 + 2, j2[m8[p]]));
            }
        }
        return this.internal.__cell__.table_x = e23, this.internal.__cell__.table_y = n115, this;
    };
    var c27 = function(t36, e24) {
        var r = this.internal.__cell__.padding, n116 = this.internal.__cell__.table_font_size, i93 = this.internal.scaleFactor;
        return Object.keys(t36).map(function(n117) {
            var i94 = t36[n117];
            return this.splitTextToSize(i94.hasOwnProperty("text") ? i94.text : i94, e24[n117] - r - r);
        }, this).map(function(t) {
            return this.getLineHeightFactor() * t.length * n116 / i93 + r + r;
        }, this).reduce(function(t, e) {
            return Math.max(t, e);
        }, 0);
    };
    e20.setTableHeaderRow = function(t) {
        i91.call(this), this.internal.__cell__.tableHeaderRow = t;
    }, e20.printHeaderRow = function(t, e) {
        if (i91.call(this), !this.internal.__cell__.tableHeaderRow) throw new Error("Property tableHeaderRow does not exist.");
        var r;
        if (n112 = !0, "function" == typeof this.internal.__cell__.headerFunction) {
            var a68 = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
            this.internal.__cell__.lastCell = new o46(a68[0], a68[1], a68[2], a68[3], void 0, -1);
        }
        this.setFont(void 0, "bold");
        for(var c30 = [], u26 = 0; u26 < this.internal.__cell__.tableHeaderRow.length; u26 += 1){
            r = this.internal.__cell__.tableHeaderRow[u26].clone(), e && (r.y = this.internal.__cell__.margins.top || 0, c30.push(r)), r.lineNumber = t;
            var h21 = this.getTextColor();
            this.setTextColor(this.internal.__cell__.headerTextColor), this.setFillColor(this.internal.__cell__.headerBackgroundColor), s32.call(this, r), this.setTextColor(h21);
        }
        c30.length > 0 && this.setTableHeaderRow(c30), this.setFont(void 0, "normal"), n112 = !1;
    };
}(E.API);
var Pt = {
    italic: [
        "italic",
        "oblique",
        "normal"
    ],
    oblique: [
        "oblique",
        "italic",
        "normal"
    ],
    normal: [
        "normal",
        "oblique",
        "italic"
    ]
}, kt = [
    "ultra-condensed",
    "extra-condensed",
    "condensed",
    "semi-condensed",
    "normal",
    "semi-expanded",
    "expanded",
    "extra-expanded",
    "ultra-expanded"
], It = _t(kt), Ft = [
    100,
    200,
    300,
    400,
    500,
    600,
    700,
    800,
    900
], Ct = _t(Ft);
function jt(t37) {
    var e = t37.family.replace(/"|'/g, "").toLowerCase(), r = function(t) {
        return Pt[t = t || "normal"] ? t : "normal";
    }(t37.style), n118 = function(t) {
        if (!t) return 400;
        if ("number" == typeof t) return t >= 100 && t <= 900 && t % 100 == 0 ? t : 400;
        if (/^\d00$/.test(t)) return parseInt(t);
        switch(t){
            case "bold":
                return 700;
            case "normal":
            default:
                return 400;
        }
    }(t37.weight), i95 = function(t) {
        return "number" == typeof It[t = t || "normal"] ? t : "normal";
    }(t37.stretch);
    return {
        family: e,
        style: r,
        weight: n118,
        stretch: i95,
        src: t37.src || [],
        ref: t37.ref || {
            name: e,
            style: [
                i95,
                r,
                n118
            ].join(" ")
        }
    };
}
function Ot(t, e, r, n119) {
    var i96;
    for(i96 = r; i96 >= 0 && i96 < e.length; i96 += n119)if (t[e[i96]]) return t[e[i96]];
    for(i96 = r; i96 >= 0 && i96 < e.length; i96 -= n119)if (t[e[i96]]) return t[e[i96]];
}
var Bt = {
    "sans-serif": "helvetica",
    fixed: "courier",
    monospace: "courier",
    terminal: "courier",
    cursive: "times",
    fantasy: "times",
    serif: "times"
}, Mt = {
    caption: "times",
    icon: "times",
    menu: "times",
    "message-box": "times",
    "small-caption": "times",
    "status-bar": "times"
};
function Et(t) {
    return [
        t.stretch,
        t.style,
        t.weight,
        t.family
    ].join(" ");
}
function qt(t38, e25, r13) {
    for(var n120 = (r13 = r13 || {}).defaultFontFamily || "times", i97 = Object.assign({}, Bt, r13.genericFontFamilies || {}), a69 = null, o49 = null, s35 = 0; s35 < e25.length; ++s35)if (i97[(a69 = jt(e25[s35])).family] && (a69.family = i97[a69.family]), t38.hasOwnProperty(a69.family)) {
        o49 = t38[a69.family];
        break;
    }
    if (!(o49 = o49 || t38[n120])) throw new Error("Could not find a font-family for the rule '" + Et(a69) + "' and default family '" + n120 + "'.");
    if (o49 = function(t, e) {
        if (e[t]) return e[t];
        var r = It[t], n121 = r <= It.normal ? -1 : 1, i98 = Ot(e, kt, r, n121);
        if (!i98) throw new Error("Could not find a matching font-stretch value for " + t);
        return i98;
    }(a69.stretch, o49), o49 = function(t, e) {
        if (e[t]) return e[t];
        for(var r = Pt[t], n122 = 0; n122 < r.length; ++n122)if (e[r[n122]]) return e[r[n122]];
        throw new Error("Could not find a matching font-style for " + t);
    }(a69.style, o49), !(o49 = function(t, e) {
        if (e[t]) return e[t];
        if (400 === t && e[500]) return e[500];
        if (500 === t && e[400]) return e[400];
        var r = Ct[t], n123 = Ot(e, Ft, r, t < 400 ? -1 : 1);
        if (!n123) throw new Error("Could not find a matching font-weight for value " + t);
        return n123;
    }(a69.weight, o49))) throw new Error("Failed to resolve a font for the rule '" + Et(a69) + "'.");
    return o49;
}
function Dt2(t) {
    return t.trimLeft();
}
function Rt(t, e) {
    for(var r = 0; r < t.length;){
        if (t.charAt(r) === e) return [
            t.substring(0, r),
            t.substring(r + 1)
        ];
        r += 1;
    }
    return null;
}
function Tt(t) {
    var e = t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
    return null === e ? null : [
        e[0],
        t.substring(e[0].length)
    ];
}
var Ut2, zt, Ht, Wt = [
    "times"
];
!function(e26) {
    var r14, n124, i99, o50, s36, c31, u27, h22, l19, d15 = function(t) {
        return t = t || {}, this.isStrokeTransparent = t.isStrokeTransparent || !1, this.strokeOpacity = t.strokeOpacity || 1, this.strokeStyle = t.strokeStyle || "#000000", this.fillStyle = t.fillStyle || "#000000", this.isFillTransparent = t.isFillTransparent || !1, this.fillOpacity = t.fillOpacity || 1, this.font = t.font || "10px sans-serif", this.textBaseline = t.textBaseline || "alphabetic", this.textAlign = t.textAlign || "left", this.lineWidth = t.lineWidth || 1, this.lineJoin = t.lineJoin || "miter", this.lineCap = t.lineCap || "butt", this.path = t.path || [], this.transform = void 0 !== t.transform ? t.transform.clone() : new h22, this.globalCompositeOperation = t.globalCompositeOperation || "normal", this.globalAlpha = t.globalAlpha || 1, this.clip_path = t.clip_path || [], this.currentPoint = t.currentPoint || new c31, this.miterLimit = t.miterLimit || 10, this.lastPoint = t.lastPoint || new c31, this.lineDashOffset = t.lineDashOffset || 0, this.lineDash = t.lineDash || [], this.margin = t.margin || [
            0,
            0,
            0,
            0
        ], this.prevPageLastElemOffset = t.prevPageLastElemOffset || 0, this.ignoreClearRect = "boolean" != typeof t.ignoreClearRect || t.ignoreClearRect, this;
    };
    e26.events.push([
        "initialized",
        function() {
            this.context2d = new p11(this), r14 = this.internal.f2, n124 = this.internal.getCoordinateString, i99 = this.internal.getVerticalCoordinateString, o50 = this.internal.getHorizontalCoordinate, s36 = this.internal.getVerticalCoordinate, c31 = this.internal.Point, u27 = this.internal.Rectangle, h22 = this.internal.Matrix, l19 = new d15;
        }
    ]);
    var p11 = function(t39) {
        Object.defineProperty(this, "canvas", {
            get: function() {
                return {
                    parentNode: !1,
                    style: !1
                };
            }
        });
        var e27 = t39;
        Object.defineProperty(this, "pdf", {
            get: function() {
                return e27;
            }
        });
        var r15 = !1;
        Object.defineProperty(this, "pageWrapXEnabled", {
            get: function() {
                return r15;
            },
            set: function(t) {
                r15 = Boolean(t);
            }
        });
        var n125 = !1;
        Object.defineProperty(this, "pageWrapYEnabled", {
            get: function() {
                return n125;
            },
            set: function(t) {
                n125 = Boolean(t);
            }
        });
        var i100 = 0;
        Object.defineProperty(this, "posX", {
            get: function() {
                return i100;
            },
            set: function(t) {
                isNaN(t) || (i100 = t);
            }
        });
        var a70 = 0;
        Object.defineProperty(this, "posY", {
            get: function() {
                return a70;
            },
            set: function(t) {
                isNaN(t) || (a70 = t);
            }
        }), Object.defineProperty(this, "margin", {
            get: function() {
                return l19.margin;
            },
            set: function(t) {
                var e;
                "number" == typeof t ? e = [
                    t,
                    t,
                    t,
                    t
                ] : ((e = new Array(4))[0] = t[0], e[1] = t.length >= 2 ? t[1] : e[0], e[2] = t.length >= 3 ? t[2] : e[0], e[3] = t.length >= 4 ? t[3] : e[1]), l19.margin = e;
            }
        });
        var o51 = !1;
        Object.defineProperty(this, "autoPaging", {
            get: function() {
                return o51;
            },
            set: function(t) {
                o51 = t;
            }
        });
        var s37 = 0;
        Object.defineProperty(this, "lastBreak", {
            get: function() {
                return s37;
            },
            set: function(t) {
                s37 = t;
            }
        });
        var c32 = [];
        Object.defineProperty(this, "pageBreaks", {
            get: function() {
                return c32;
            },
            set: function(t) {
                c32 = t;
            }
        }), Object.defineProperty(this, "ctx", {
            get: function() {
                return l19;
            },
            set: function(t) {
                t instanceof d15 && (l19 = t);
            }
        }), Object.defineProperty(this, "path", {
            get: function() {
                return l19.path;
            },
            set: function(t) {
                l19.path = t;
            }
        });
        var u28 = [];
        Object.defineProperty(this, "ctxStack", {
            get: function() {
                return u28;
            },
            set: function(t) {
                u28 = t;
            }
        }), Object.defineProperty(this, "fillStyle", {
            get: function() {
                return this.ctx.fillStyle;
            },
            set: function(t) {
                var e;
                e = g11(t), this.ctx.fillStyle = e.style, this.ctx.isFillTransparent = 0 === e.a, this.ctx.fillOpacity = e.a, this.pdf.setFillColor(e.r, e.g, e.b, {
                    a: e.a
                }), this.pdf.setTextColor(e.r, e.g, e.b, {
                    a: e.a
                });
            }
        }), Object.defineProperty(this, "strokeStyle", {
            get: function() {
                return this.ctx.strokeStyle;
            },
            set: function(t) {
                var e = g11(t);
                this.ctx.strokeStyle = e.style, this.ctx.isStrokeTransparent = 0 === e.a, this.ctx.strokeOpacity = e.a, 0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a, this.pdf.setDrawColor(e.r, e.g, e.b));
            }
        }), Object.defineProperty(this, "lineCap", {
            get: function() {
                return this.ctx.lineCap;
            },
            set: function(t) {
                -1 !== [
                    "butt",
                    "round",
                    "square"
                ].indexOf(t) && (this.ctx.lineCap = t, this.pdf.setLineCap(t));
            }
        }), Object.defineProperty(this, "lineWidth", {
            get: function() {
                return this.ctx.lineWidth;
            },
            set: function(t) {
                isNaN(t) || (this.ctx.lineWidth = t, this.pdf.setLineWidth(t));
            }
        }), Object.defineProperty(this, "lineJoin", {
            get: function() {
                return this.ctx.lineJoin;
            },
            set: function(t) {
                -1 !== [
                    "bevel",
                    "round",
                    "miter"
                ].indexOf(t) && (this.ctx.lineJoin = t, this.pdf.setLineJoin(t));
            }
        }), Object.defineProperty(this, "miterLimit", {
            get: function() {
                return this.ctx.miterLimit;
            },
            set: function(t) {
                isNaN(t) || (this.ctx.miterLimit = t, this.pdf.setMiterLimit(t));
            }
        }), Object.defineProperty(this, "textBaseline", {
            get: function() {
                return this.ctx.textBaseline;
            },
            set: function(t) {
                this.ctx.textBaseline = t;
            }
        }), Object.defineProperty(this, "textAlign", {
            get: function() {
                return this.ctx.textAlign;
            },
            set: function(t) {
                -1 !== [
                    "right",
                    "end",
                    "center",
                    "left",
                    "start"
                ].indexOf(t) && (this.ctx.textAlign = t);
            }
        });
        var h23 = null;
        function f18(t40, e28) {
            if (null === h23) {
                var r16 = function(t41) {
                    var e = [];
                    return Object.keys(t41).forEach(function(r) {
                        t41[r].forEach(function(t) {
                            var n126 = null;
                            switch(t){
                                case "bold":
                                    n126 = {
                                        family: r,
                                        weight: "bold"
                                    };
                                    break;
                                case "italic":
                                    n126 = {
                                        family: r,
                                        style: "italic"
                                    };
                                    break;
                                case "bolditalic":
                                    n126 = {
                                        family: r,
                                        weight: "bold",
                                        style: "italic"
                                    };
                                    break;
                                case "":
                                case "normal":
                                    n126 = {
                                        family: r
                                    };
                            }
                            null !== n126 && (n126.ref = {
                                name: r,
                                style: t
                            }, e.push(n126));
                        });
                    }), e;
                }(t40.getFontList());
                h23 = function(t) {
                    for(var e = {}, r = 0; r < t.length; ++r){
                        var n127 = jt(t[r]), i101 = n127.family, a71 = n127.stretch, o52 = n127.style, s38 = n127.weight;
                        e[i101] = e[i101] || {}, e[i101][a71] = e[i101][a71] || {}, e[i101][a71][o52] = e[i101][a71][o52] || {}, e[i101][a71][o52][s38] = n127;
                    }
                    return e;
                }(r16.concat(e28));
            }
            return h23;
        }
        var p12 = null;
        Object.defineProperty(this, "fontFaces", {
            get: function() {
                return p12;
            },
            set: function(t) {
                h23 = null, p12 = t;
            }
        }), Object.defineProperty(this, "font", {
            get: function() {
                return this.ctx.font;
            },
            set: function(t42) {
                var e29;
                if (this.ctx.font = t42, null !== (e29 = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t42))) {
                    var r18 = e29[1], n128 = (e29[2], e29[3]), i102 = e29[4], a72 = (e29[5], e29[6]), o53 = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i102)[2];
                    i102 = "px" === o53 ? Math.floor(parseFloat(i102) * this.pdf.internal.scaleFactor) : "em" === o53 ? Math.floor(parseFloat(i102) * this.pdf.getFontSize()) : Math.floor(parseFloat(i102) * this.pdf.internal.scaleFactor), this.pdf.setFontSize(i102);
                    var s39 = function(t) {
                        var e, r, n130 = [], i103 = t.trim();
                        if ("" === i103) return Wt;
                        if (i103 in Mt) return [
                            Mt[i103]
                        ];
                        for(; "" !== i103;){
                            switch(r = null, e = (i103 = Dt2(i103)).charAt(0)){
                                case '"':
                                case "'":
                                    r = Rt(i103.substring(1), e);
                                    break;
                                default:
                                    r = Tt(i103);
                            }
                            if (null === r) return Wt;
                            if (n130.push(r[0]), "" !== (i103 = Dt2(r[1])) && "," !== i103.charAt(0)) return Wt;
                            i103 = i103.replace(/^,/, "");
                        }
                        return n130;
                    }(a72);
                    if (this.fontFaces) {
                        var c33 = qt(f18(this.pdf, this.fontFaces), s39.map(function(t) {
                            return {
                                family: t,
                                stretch: "normal",
                                weight: n128,
                                style: r18
                            };
                        }));
                        this.pdf.setFont(c33.ref.name, c33.ref.style);
                    } else {
                        var u29 = "";
                        ("bold" === n128 || parseInt(n128, 10) >= 700 || "bold" === r18) && (u29 = "bold"), "italic" === r18 && (u29 += "italic"), 0 === u29.length && (u29 = "normal");
                        for(var h24 = "", l20 = {
                            arial: "Helvetica",
                            Arial: "Helvetica",
                            verdana: "Helvetica",
                            Verdana: "Helvetica",
                            helvetica: "Helvetica",
                            Helvetica: "Helvetica",
                            "sans-serif": "Helvetica",
                            fixed: "Courier",
                            monospace: "Courier",
                            terminal: "Courier",
                            cursive: "Times",
                            fantasy: "Times",
                            serif: "Times"
                        }, d16 = 0; d16 < s39.length; d16++){
                            if (void 0 !== this.pdf.internal.getFont(s39[d16], u29, {
                                noFallback: !0,
                                disableWarning: !0
                            })) {
                                h24 = s39[d16];
                                break;
                            }
                            if ("bolditalic" === u29 && void 0 !== this.pdf.internal.getFont(s39[d16], "bold", {
                                noFallback: !0,
                                disableWarning: !0
                            })) h24 = s39[d16], u29 = "bold";
                            else if (void 0 !== this.pdf.internal.getFont(s39[d16], "normal", {
                                noFallback: !0,
                                disableWarning: !0
                            })) {
                                h24 = s39[d16], u29 = "normal";
                                break;
                            }
                        }
                        if ("" === h24) {
                            for(var p = 0; p < s39.length; p++)if (l20[s39[p]]) {
                                h24 = l20[s39[p]];
                                break;
                            }
                        }
                        h24 = "" === h24 ? "Times" : h24, this.pdf.setFont(h24, u29);
                    }
                }
            }
        }), Object.defineProperty(this, "globalCompositeOperation", {
            get: function() {
                return this.ctx.globalCompositeOperation;
            },
            set: function(t) {
                this.ctx.globalCompositeOperation = t;
            }
        }), Object.defineProperty(this, "globalAlpha", {
            get: function() {
                return this.ctx.globalAlpha;
            },
            set: function(t) {
                this.ctx.globalAlpha = t;
            }
        }), Object.defineProperty(this, "lineDashOffset", {
            get: function() {
                return this.ctx.lineDashOffset;
            },
            set: function(t) {
                this.ctx.lineDashOffset = t, T3.call(this);
            }
        }), Object.defineProperty(this, "lineDash", {
            get: function() {
                return this.ctx.lineDash;
            },
            set: function(t) {
                this.ctx.lineDash = t, T3.call(this);
            }
        }), Object.defineProperty(this, "ignoreClearRect", {
            get: function() {
                return this.ctx.ignoreClearRect;
            },
            set: function(t) {
                this.ctx.ignoreClearRect = Boolean(t);
            }
        });
    };
    p11.prototype.setLineDash = function(t) {
        this.lineDash = t;
    }, p11.prototype.getLineDash = function() {
        return this.lineDash.length % 2 ? this.lineDash.concat(this.lineDash) : this.lineDash.slice();
    }, p11.prototype.fill = function() {
        A6.call(this, "fill", !1);
    }, p11.prototype.stroke = function() {
        A6.call(this, "stroke", !1);
    }, p11.prototype.beginPath = function() {
        this.path = [
            {
                type: "begin"
            }
        ];
    }, p11.prototype.moveTo = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.moveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
        var r = this.ctx.transform.applyToPoint(new c31(t, e));
        this.path.push({
            type: "mt",
            x: r.x,
            y: r.y
        }), this.ctx.lastPoint = new c31(t, e);
    }, p11.prototype.closePath = function() {
        var e = new c31(0, 0), r = 0;
        for(r = this.path.length - 1; -1 !== r; r--)if ("begin" === this.path[r].type && "object" === _typeofDefault.default(this.path[r + 1]) && "number" == typeof this.path[r + 1].x) {
            e = new c31(this.path[r + 1].x, this.path[r + 1].y);
            break;
        }
        this.path.push({
            type: "close"
        }), this.ctx.lastPoint = new c31(e.x, e.y);
    }, p11.prototype.lineTo = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.lineTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
        var r = this.ctx.transform.applyToPoint(new c31(t, e));
        this.path.push({
            type: "lt",
            x: r.x,
            y: r.y
        }), this.ctx.lastPoint = new c31(r.x, r.y);
    }, p11.prototype.clip = function() {
        this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), A6.call(this, null, !0);
    }, p11.prototype.quadraticCurveTo = function(t, e, r, n131) {
        if (isNaN(r) || isNaN(n131) || isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
        var i104 = this.ctx.transform.applyToPoint(new c31(r, n131)), o54 = this.ctx.transform.applyToPoint(new c31(t, e));
        this.path.push({
            type: "qct",
            x1: o54.x,
            y1: o54.y,
            x: i104.x,
            y: i104.y
        }), this.ctx.lastPoint = new c31(i104.x, i104.y);
    }, p11.prototype.bezierCurveTo = function(t, e, r, n132, i105, o55) {
        if (isNaN(i105) || isNaN(o55) || isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n132)) throw a.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
        var s40 = this.ctx.transform.applyToPoint(new c31(i105, o55)), u30 = this.ctx.transform.applyToPoint(new c31(t, e)), h25 = this.ctx.transform.applyToPoint(new c31(r, n132));
        this.path.push({
            type: "bct",
            x1: u30.x,
            y1: u30.y,
            x2: h25.x,
            y2: h25.y,
            x: s40.x,
            y: s40.y
        }), this.ctx.lastPoint = new c31(s40.x, s40.y);
    }, p11.prototype.arc = function(t, e, r, n133, i106, o56) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n133) || isNaN(i106)) throw a.error("jsPDF.context2d.arc: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.arc");
        if (o56 = Boolean(o56), !this.ctx.transform.isIdentity) {
            var s41 = this.ctx.transform.applyToPoint(new c31(t, e));
            t = s41.x, e = s41.y;
            var u31 = this.ctx.transform.applyToPoint(new c31(0, r)), h26 = this.ctx.transform.applyToPoint(new c31(0, 0));
            r = Math.sqrt(Math.pow(u31.x - h26.x, 2) + Math.pow(u31.y - h26.y, 2));
        }
        Math.abs(i106 - n133) >= 2 * Math.PI && (n133 = 0, i106 = 2 * Math.PI), this.path.push({
            type: "arc",
            x: t,
            y: e,
            radius: r,
            startAngle: n133,
            endAngle: i106,
            counterclockwise: o56
        });
    }, p11.prototype.arcTo = function(t, e, r, n, i) {
        throw new Error("arcTo not implemented.");
    }, p11.prototype.rect = function(t, e, r, n134) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n134)) throw a.error("jsPDF.context2d.rect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rect");
        this.moveTo(t, e), this.lineTo(t + r, e), this.lineTo(t + r, e + n134), this.lineTo(t, e + n134), this.lineTo(t, e), this.lineTo(t + r, e), this.lineTo(t, e);
    }, p11.prototype.fillRect = function(t, e, r, n135) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n135)) throw a.error("jsPDF.context2d.fillRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillRect");
        if (!m9.call(this)) {
            var i107 = {};
            "butt" !== this.lineCap && (i107.lineCap = this.lineCap, this.lineCap = "butt"), "miter" !== this.lineJoin && (i107.lineJoin = this.lineJoin, this.lineJoin = "miter"), this.beginPath(), this.rect(t, e, r, n135), this.fill(), i107.hasOwnProperty("lineCap") && (this.lineCap = i107.lineCap), i107.hasOwnProperty("lineJoin") && (this.lineJoin = i107.lineJoin);
        }
    }, p11.prototype.strokeRect = function(t, e, r, n136) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n136)) throw a.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
        v8.call(this) || (this.beginPath(), this.rect(t, e, r, n136), this.stroke());
    }, p11.prototype.clearRect = function(t, e, r, n137) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n137)) throw a.error("jsPDF.context2d.clearRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
        this.ignoreClearRect || (this.fillStyle = "#ffffff", this.fillRect(t, e, r, n137));
    }, p11.prototype.save = function(t) {
        t = "boolean" != typeof t || t;
        for(var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++)this.pdf.setPage(r + 1), this.pdf.internal.out("q");
        if (this.pdf.setPage(e), t) {
            this.ctx.fontSize = this.pdf.internal.getFontSize();
            var n138 = new d15(this.ctx);
            this.ctxStack.push(this.ctx), this.ctx = n138;
        }
    }, p11.prototype.restore = function(t) {
        t = "boolean" != typeof t || t;
        for(var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++)this.pdf.setPage(r + 1), this.pdf.internal.out("Q");
        this.pdf.setPage(e), t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin, this.lineDash = this.ctx.lineDash, this.lineDashOffset = this.ctx.lineDashOffset);
    }, p11.prototype.toDataURL = function() {
        throw new Error("toDataUrl not implemented.");
    };
    var g11 = function(t) {
        var e, r, n139, i108;
        if (!0 === t.isCanvasGradient && (t = t.getColor()), !t) return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            style: t
        };
        if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t)) e = 0, r = 0, n139 = 0, i108 = 0;
        else {
            var a73 = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);
            if (null !== a73) e = parseInt(a73[1]), r = parseInt(a73[2]), n139 = parseInt(a73[3]), i108 = 1;
            else if (null !== (a73 = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t))) e = parseInt(a73[1]), r = parseInt(a73[2]), n139 = parseInt(a73[3]), i108 = parseFloat(a73[4]);
            else {
                if (i108 = 1, "string" == typeof t && "#" !== t.charAt(0)) {
                    var o57 = new f(t);
                    t = o57.ok ? o57.toHex() : "#000000";
                }
                4 === t.length ? (e = t.substring(1, 2), e += e, r = t.substring(2, 3), r += r, n139 = t.substring(3, 4), n139 += n139) : (e = t.substring(1, 3), r = t.substring(3, 5), n139 = t.substring(5, 7)), e = parseInt(e, 16), r = parseInt(r, 16), n139 = parseInt(n139, 16);
            }
        }
        return {
            r: e,
            g: r,
            b: n139,
            a: i108,
            style: t
        };
    }, m9 = function() {
        return this.ctx.isFillTransparent || 0 == this.globalAlpha;
    }, v8 = function() {
        return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);
    };
    p11.prototype.fillText = function(t, e, r, n140) {
        if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.fillText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillText");
        if (n140 = isNaN(n140) ? void 0 : n140, !m9.call(this)) {
            var i109 = q2(this.ctx.transform.rotation), o58 = this.ctx.transform.scaleX;
            C3.call(this, {
                text: t,
                x: e,
                y: r,
                scale: o58,
                angle: i109,
                align: this.textAlign,
                maxWidth: n140
            });
        }
    }, p11.prototype.strokeText = function(t, e, r, n141) {
        if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.strokeText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeText");
        if (!v8.call(this)) {
            n141 = isNaN(n141) ? void 0 : n141;
            var i110 = q2(this.ctx.transform.rotation), o59 = this.ctx.transform.scaleX;
            C3.call(this, {
                text: t,
                x: e,
                y: r,
                scale: o59,
                renderingMode: "stroke",
                angle: i110,
                align: this.textAlign,
                maxWidth: n141
            });
        }
    }, p11.prototype.measureText = function(t43) {
        if ("string" != typeof t43) throw a.error("jsPDF.context2d.measureText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.measureText");
        var e30 = this.pdf, r = this.pdf.internal.scaleFactor, n142 = e30.internal.getFontSize(), i111 = e30.getStringUnitWidth(t43) * n142 / e30.internal.scaleFactor, o60 = function(t) {
            var e = (t = t || {}).width || 0;
            return Object.defineProperty(this, "width", {
                get: function() {
                    return e;
                }
            }), this;
        };
        return new o60({
            width: i111 *= Math.round(96 * r / 72 * 1e4) / 1e4
        });
    }, p11.prototype.scale = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.scale: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.scale");
        var r = new h22(t, 0, 0, e, 0, 0);
        this.ctx.transform = this.ctx.transform.multiply(r);
    }, p11.prototype.rotate = function(t) {
        if (isNaN(t)) throw a.error("jsPDF.context2d.rotate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rotate");
        var e = new h22(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0);
        this.ctx.transform = this.ctx.transform.multiply(e);
    }, p11.prototype.translate = function(t, e) {
        if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.translate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.translate");
        var r = new h22(1, 0, 0, 1, t, e);
        this.ctx.transform = this.ctx.transform.multiply(r);
    }, p11.prototype.transform = function(t, e, r, n143, i112, o61) {
        if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n143) || isNaN(i112) || isNaN(o61)) throw a.error("jsPDF.context2d.transform: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.transform");
        var s42 = new h22(t, e, r, n143, i112, o61);
        this.ctx.transform = this.ctx.transform.multiply(s42);
    }, p11.prototype.setTransform = function(t, e, r, n144, i113, a74) {
        t = isNaN(t) ? 1 : t, e = isNaN(e) ? 0 : e, r = isNaN(r) ? 0 : r, n144 = isNaN(n144) ? 1 : n144, i113 = isNaN(i113) ? 0 : i113, a74 = isNaN(a74) ? 0 : a74, this.ctx.transform = new h22(t, e, r, n144, i113, a74);
    };
    var b6 = function() {
        return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0;
    };
    p11.prototype.drawImage = function(t, e, r, n145, i114, a75, o62, s43, c34) {
        var l21 = this.pdf.getImageProperties(t), f19 = 1, d17 = 1, p = 1, g12 = 1;
        void 0 !== n145 && void 0 !== s43 && (p = s43 / n145, g12 = c34 / i114, f19 = l21.width / n145 * s43 / n145, d17 = l21.height / i114 * c34 / i114), void 0 === a75 && (a75 = e, o62 = r, e = 0, r = 0), void 0 !== n145 && void 0 === s43 && (s43 = n145, c34 = i114), void 0 === n145 && void 0 === s43 && (s43 = l21.width, c34 = l21.height);
        for(var m10, v9 = this.ctx.transform.decompose(), w8 = q2(v9.rotate.shx), A7 = new h22, S6 = (A7 = (A7 = (A7 = A7.multiply(v9.translate)).multiply(v9.skew)).multiply(v9.scale)).applyToRectangle(new u27(a75 - e * p, o62 - r * g12, n145 * f19, i114 * d17)), _7 = y7.call(this, S6), P6 = [], k6 = 0; k6 < _7.length; k6 += 1)-1 === P6.indexOf(_7[k6]) && P6.push(_7[k6]);
        if (L6(P6), this.autoPaging) for(var I4 = P6[0], F4 = P6[P6.length - 1], C4 = I4; C4 < F4 + 1; C4++){
            this.pdf.setPage(C4);
            var j4 = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], O4 = 1 === C4 ? this.posY + this.margin[0] : this.margin[0], B4 = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], M3 = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], E3 = 1 === C4 ? 0 : B4 + (C4 - 2) * M3;
            if (0 !== this.ctx.clip_path.length) {
                var D4 = this.path;
                m10 = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N7(m10, this.posX + this.margin[3], -E3 + O4 + this.ctx.prevPageLastElemOffset), x5.call(this, "fill", !0), this.path = D4;
            }
            var R4 = JSON.parse(JSON.stringify(S6));
            R4 = N7([
                R4
            ], this.posX + this.margin[3], -E3 + O4 + this.ctx.prevPageLastElemOffset)[0];
            var T4 = (C4 > I4 || C4 < F4) && b6.call(this);
            T4 && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], j4, M3, null).clip().discardPath()), this.pdf.addImage(t, "JPEG", R4.x, R4.y, R4.w, R4.h, null, null, w8), T4 && this.pdf.restoreGraphicsState();
        }
        else this.pdf.addImage(t, "JPEG", S6.x, S6.y, S6.w, S6.h, null, null, w8);
    };
    var y7 = function(t, e, r) {
        var n146 = [];
        e = e || this.pdf.internal.pageSize.width, r = r || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
        var i115 = this.posY + this.ctx.prevPageLastElemOffset;
        switch(t.type){
            default:
            case "mt":
            case "lt":
                n146.push(Math.floor((t.y + i115) / r) + 1);
                break;
            case "arc":
                n146.push(Math.floor((t.y + i115 - t.radius) / r) + 1), n146.push(Math.floor((t.y + i115 + t.radius) / r) + 1);
                break;
            case "qct":
                var a76 = D3(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);
                n146.push(Math.floor((a76.y + i115) / r) + 1), n146.push(Math.floor((a76.y + a76.h + i115) / r) + 1);
                break;
            case "bct":
                var o63 = R3(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);
                n146.push(Math.floor((o63.y + i115) / r) + 1), n146.push(Math.floor((o63.y + o63.h + i115) / r) + 1);
                break;
            case "rect":
                n146.push(Math.floor((t.y + i115) / r) + 1), n146.push(Math.floor((t.y + t.h + i115) / r) + 1);
        }
        for(var s44 = 0; s44 < n146.length; s44 += 1)for(; this.pdf.internal.getNumberOfPages() < n146[s44];)w7.call(this);
        return n146;
    }, w7 = function() {
        var t = this.fillStyle, e = this.strokeStyle, r = this.font, n147 = this.lineCap, i116 = this.lineWidth, a77 = this.lineJoin;
        this.pdf.addPage(), this.fillStyle = t, this.strokeStyle = e, this.font = r, this.lineCap = n147, this.lineWidth = i116, this.lineJoin = a77;
    }, N7 = function(t, e, r) {
        for(var n148 = 0; n148 < t.length; n148++)switch(t[n148].type){
            case "bct":
                t[n148].x2 += e, t[n148].y2 += r;
            case "qct":
                t[n148].x1 += e, t[n148].y1 += r;
            case "mt":
            case "lt":
            case "arc":
            default:
                t[n148].x += e, t[n148].y += r;
        }
        return t;
    }, L6 = function(t44) {
        return t44.sort(function(t, e) {
            return t - e;
        });
    }, A6 = function(t, e) {
        for(var r, n149, i117 = this.fillStyle, a78 = this.strokeStyle, o64 = this.lineCap, s45 = this.lineWidth, c35 = Math.abs(s45 * this.ctx.transform.scaleX), u32 = this.lineJoin, h27 = JSON.parse(JSON.stringify(this.path)), l22 = JSON.parse(JSON.stringify(this.path)), f20 = [], d18 = 0; d18 < l22.length; d18++)if (void 0 !== l22[d18].x) for(var p = y7.call(this, l22[d18]), g13 = 0; g13 < p.length; g13 += 1)-1 === f20.indexOf(p[g13]) && f20.push(p[g13]);
        for(var m11 = 0; m11 < f20.length; m11++)for(; this.pdf.internal.getNumberOfPages() < f20[m11];)w7.call(this);
        if (L6(f20), this.autoPaging) for(var v10 = f20[0], A8 = f20[f20.length - 1], S7 = v10; S7 < A8 + 1; S7++){
            this.pdf.setPage(S7), this.fillStyle = i117, this.strokeStyle = a78, this.lineCap = o64, this.lineWidth = c35, this.lineJoin = u32;
            var _8 = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1], P7 = 1 === S7 ? this.posY + this.margin[0] : this.margin[0], k7 = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], I5 = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2], F5 = 1 === S7 ? 0 : k7 + (S7 - 2) * I5;
            if (0 !== this.ctx.clip_path.length) {
                var C5 = this.path;
                r = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N7(r, this.posX + this.margin[3], -F5 + P7 + this.ctx.prevPageLastElemOffset), x5.call(this, t, !0), this.path = C5;
            }
            if (n149 = JSON.parse(JSON.stringify(h27)), this.path = N7(n149, this.posX + this.margin[3], -F5 + P7 + this.ctx.prevPageLastElemOffset), !1 === e || 0 === S7) {
                var j5 = (S7 > v10 || S7 < A8) && b6.call(this);
                j5 && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], _8, I5, null).clip().discardPath()), x5.call(this, t, e), j5 && this.pdf.restoreGraphicsState();
            }
            this.lineWidth = s45;
        }
        else this.lineWidth = c35, x5.call(this, t, e), this.lineWidth = s45;
        this.path = h27;
    }, x5 = function(t, e) {
        if (("stroke" !== t || e || !v8.call(this)) && ("stroke" === t || e || !m9.call(this))) {
            for(var r, n150, i118 = [], a79 = this.path, o65 = 0; o65 < a79.length; o65++){
                var s46 = a79[o65];
                switch(s46.type){
                    case "begin":
                        i118.push({
                            begin: !0
                        });
                        break;
                    case "close":
                        i118.push({
                            close: !0
                        });
                        break;
                    case "mt":
                        i118.push({
                            start: s46,
                            deltas: [],
                            abs: []
                        });
                        break;
                    case "lt":
                        var c36 = i118.length;
                        if (a79[o65 - 1] && !isNaN(a79[o65 - 1].x) && (r = [
                            s46.x - a79[o65 - 1].x,
                            s46.y - a79[o65 - 1].y
                        ], c36 > 0)) {
                            for(; c36 >= 0; c36--)if (!0 !== i118[c36 - 1].close && !0 !== i118[c36 - 1].begin) {
                                i118[c36 - 1].deltas.push(r), i118[c36 - 1].abs.push(s46);
                                break;
                            }
                        }
                        break;
                    case "bct":
                        r = [
                            s46.x1 - a79[o65 - 1].x,
                            s46.y1 - a79[o65 - 1].y,
                            s46.x2 - a79[o65 - 1].x,
                            s46.y2 - a79[o65 - 1].y,
                            s46.x - a79[o65 - 1].x,
                            s46.y - a79[o65 - 1].y
                        ], i118[i118.length - 1].deltas.push(r);
                        break;
                    case "qct":
                        var u33 = a79[o65 - 1].x + 2 / 3 * (s46.x1 - a79[o65 - 1].x), h28 = a79[o65 - 1].y + 2 / 3 * (s46.y1 - a79[o65 - 1].y), l23 = s46.x + 2 / 3 * (s46.x1 - s46.x), f21 = s46.y + 2 / 3 * (s46.y1 - s46.y), d19 = s46.x, p = s46.y;
                        r = [
                            u33 - a79[o65 - 1].x,
                            h28 - a79[o65 - 1].y,
                            l23 - a79[o65 - 1].x,
                            f21 - a79[o65 - 1].y,
                            d19 - a79[o65 - 1].x,
                            p - a79[o65 - 1].y
                        ], i118[i118.length - 1].deltas.push(r);
                        break;
                    case "arc":
                        i118.push({
                            deltas: [],
                            abs: [],
                            arc: !0
                        }), Array.isArray(i118[i118.length - 1].abs) && i118[i118.length - 1].abs.push(s46);
                }
            }
            n150 = e ? null : "stroke" === t ? "stroke" : "fill";
            for(var g14 = !1, b7 = 0; b7 < i118.length; b7++)if (i118[b7].arc) for(var y8 = i118[b7].abs, w9 = 0; w9 < y8.length; w9++){
                var N8 = y8[w9];
                "arc" === N8.type ? P5.call(this, N8.x, N8.y, N8.radius, N8.startAngle, N8.endAngle, N8.counterclockwise, void 0, e, !g14) : j3.call(this, N8.x, N8.y), g14 = !0;
            }
            else if (!0 === i118[b7].close) this.pdf.internal.out("h"), g14 = !1;
            else if (!0 !== i118[b7].begin) {
                var L7 = i118[b7].start.x, A9 = i118[b7].start.y;
                O3.call(this, i118[b7].deltas, L7, A9), g14 = !0;
            }
            n150 && k5.call(this, n150), e && I3.call(this);
        }
    }, S5 = function(t) {
        var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor, r = e * (this.pdf.internal.getLineHeightFactor() - 1);
        switch(this.ctx.textBaseline){
            case "bottom":
                return t - r;
            case "top":
                return t + e - r;
            case "hanging":
                return t + e - 2 * r;
            case "middle":
                return t + e / 2 - r;
            case "ideographic":
                return t;
            case "alphabetic":
            default:
                return t;
        }
    }, _6 = function(t) {
        return t + this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor * (this.pdf.internal.getLineHeightFactor() - 1);
    };
    p11.prototype.createLinearGradient = function() {
        var t45 = function() {};
        return t45.colorStops = [], t45.addColorStop = function(t, e) {
            this.colorStops.push([
                t,
                e
            ]);
        }, t45.getColor = function() {
            return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1];
        }, t45.isCanvasGradient = !0, t45;
    }, p11.prototype.createPattern = function() {
        return this.createLinearGradient();
    }, p11.prototype.createRadialGradient = function() {
        return this.createLinearGradient();
    };
    var P5 = function(t, e, r, n151, i119, a80, o66, s47, c37) {
        for(var u34 = M2.call(this, r, n151, i119, a80), h29 = 0; h29 < u34.length; h29++){
            var l24 = u34[h29];
            0 === h29 && (c37 ? F3.call(this, l24.x1 + t, l24.y1 + e) : j3.call(this, l24.x1 + t, l24.y1 + e)), B3.call(this, t, e, l24.x2, l24.y2, l24.x3, l24.y3, l24.x4, l24.y4);
        }
        s47 ? I3.call(this) : k5.call(this, o66);
    }, k5 = function(t) {
        switch(t){
            case "stroke":
                this.pdf.internal.out("S");
                break;
            case "fill":
                this.pdf.internal.out("f");
        }
    }, I3 = function() {
        this.pdf.clip(), this.pdf.discardPath();
    }, F3 = function(t, e) {
        this.pdf.internal.out(n124(t) + " " + i99(e) + " m");
    }, C3 = function(t) {
        var e;
        switch(t.align){
            case "right":
            case "end":
                e = "right";
                break;
            case "center":
                e = "center";
                break;
            case "left":
            case "start":
            default:
                e = "left";
        }
        var r = this.pdf.getTextDimensions(t.text), n152 = S5.call(this, t.y), i120 = _6.call(this, n152) - r.h, a81 = this.ctx.transform.applyToPoint(new c31(t.x, n152)), o67 = this.ctx.transform.decompose(), s48 = new h22;
        s48 = (s48 = (s48 = s48.multiply(o67.translate)).multiply(o67.skew)).multiply(o67.scale);
        for(var l25, f22, d20, p = this.ctx.transform.applyToRectangle(new u27(t.x, n152, r.w, r.h)), g15 = s48.applyToRectangle(new u27(t.x, i120, r.w, r.h)), m12 = y7.call(this, g15), v11 = [], w10 = 0; w10 < m12.length; w10 += 1)-1 === v11.indexOf(m12[w10]) && v11.push(m12[w10]);
        if (L6(v11), this.autoPaging) for(var A10 = v11[0], P8 = v11[v11.length - 1], k8 = A10; k8 < P8 + 1; k8++){
            this.pdf.setPage(k8);
            var I6 = 1 === k8 ? this.posY + this.margin[0] : this.margin[0], F6 = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2], C6 = this.pdf.internal.pageSize.height - this.margin[2], j6 = C6 - this.margin[0], O5 = this.pdf.internal.pageSize.width - this.margin[1], B5 = O5 - this.margin[3], M4 = 1 === k8 ? 0 : F6 + (k8 - 2) * j6;
            if (0 !== this.ctx.clip_path.length) {
                var E4 = this.path;
                l25 = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N7(l25, this.posX + this.margin[3], -1 * M4 + I6), x5.call(this, "fill", !0), this.path = E4;
            }
            var q3 = N7([
                JSON.parse(JSON.stringify(g15))
            ], this.posX + this.margin[3], -M4 + I6 + this.ctx.prevPageLastElemOffset)[0];
            t.scale >= .01 && (f22 = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f22 * t.scale), d20 = this.lineWidth, this.lineWidth = d20 * t.scale);
            var D5 = "text" !== this.autoPaging;
            if (D5 || q3.y + q3.h <= C6) {
                if (D5 || q3.y >= I6 && q3.x <= O5) {
                    var R5 = D5 ? t.text : this.pdf.splitTextToSize(t.text, t.maxWidth || O5 - q3.x)[0], T5 = N7([
                        JSON.parse(JSON.stringify(p))
                    ], this.posX + this.margin[3], -M4 + I6 + this.ctx.prevPageLastElemOffset)[0], U2 = D5 && (k8 > A10 || k8 < P8) && b6.call(this);
                    U2 && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], B5, j6, null).clip().discardPath()), this.pdf.text(R5, T5.x, T5.y, {
                        angle: t.angle,
                        align: e,
                        renderingMode: t.renderingMode
                    }), U2 && this.pdf.restoreGraphicsState();
                }
            } else q3.y < C6 && (this.ctx.prevPageLastElemOffset += C6 - q3.y);
            t.scale >= .01 && (this.pdf.setFontSize(f22), this.lineWidth = d20);
        }
        else t.scale >= .01 && (f22 = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f22 * t.scale), d20 = this.lineWidth, this.lineWidth = d20 * t.scale), this.pdf.text(t.text, a81.x + this.posX, a81.y + this.posY, {
            angle: t.angle,
            align: e,
            renderingMode: t.renderingMode,
            maxWidth: t.maxWidth
        }), t.scale >= .01 && (this.pdf.setFontSize(f22), this.lineWidth = d20);
    }, j3 = function(t, e, r, a82) {
        r = r || 0, a82 = a82 || 0, this.pdf.internal.out(n124(t + r) + " " + i99(e + a82) + " l");
    }, O3 = function(t, e, r) {
        return this.pdf.lines(t, e, r, null, null);
    }, B3 = function(t, e, n153, i121, a83, c38, u35, h30) {
        this.pdf.internal.out([
            r14(o50(n153 + t)),
            r14(s36(i121 + e)),
            r14(o50(a83 + t)),
            r14(s36(c38 + e)),
            r14(o50(u35 + t)),
            r14(s36(h30 + e)),
            "c"
        ].join(" "));
    }, M2 = function(t, e, r, n154) {
        for(var i122 = 2 * Math.PI, a84 = Math.PI / 2; e > r;)e -= i122;
        var o68 = Math.abs(r - e);
        o68 < i122 && n154 && (o68 = i122 - o68);
        for(var s49 = [], c39 = n154 ? -1 : 1, u36 = e; o68 > 1e-5;){
            var h31 = u36 + c39 * Math.min(o68, a84);
            s49.push(E2.call(this, t, u36, h31)), o68 -= Math.abs(h31 - u36), u36 = h31;
        }
        return s49;
    }, E2 = function(t, e, r) {
        var n155 = (r - e) / 2, i123 = t * Math.cos(n155), a85 = t * Math.sin(n155), o69 = i123, s50 = -a85, c40 = o69 * o69 + s50 * s50, u37 = c40 + o69 * i123 + s50 * a85, h32 = 4 / 3 * (Math.sqrt(2 * c40 * u37) - u37) / (o69 * a85 - s50 * i123), l26 = o69 - h32 * s50, f23 = s50 + h32 * o69, d21 = l26, p = -f23, g16 = n155 + e, m13 = Math.cos(g16), v12 = Math.sin(g16);
        return {
            x1: t * Math.cos(e),
            y1: t * Math.sin(e),
            x2: l26 * m13 - f23 * v12,
            y2: l26 * v12 + f23 * m13,
            x3: d21 * m13 - p * v12,
            y3: d21 * v12 + p * m13,
            x4: t * Math.cos(r),
            y4: t * Math.sin(r)
        };
    }, q2 = function(t) {
        return 180 * t / Math.PI;
    }, D3 = function(t, e, r, n156, i124, a86) {
        var o70 = t + .5 * (r - t), s51 = e + .5 * (n156 - e), c41 = i124 + .5 * (r - i124), h33 = a86 + .5 * (n156 - a86), l27 = Math.min(t, i124, o70, c41), f24 = Math.max(t, i124, o70, c41), d22 = Math.min(e, a86, s51, h33), p = Math.max(e, a86, s51, h33);
        return new u27(l27, d22, f24 - l27, p - d22);
    }, R3 = function(t, e, r, n157, i125, a87, o71, s52) {
        var c42, h34, l28, f25, d23, p, g17, m14, v13, b8, y9, w11, N9, L8, A11 = r - t, x6 = n157 - e, S8 = i125 - r, _9 = a87 - n157, P9 = o71 - i125, k9 = s52 - a87;
        for(h34 = 0; h34 < 41; h34++)v13 = (g17 = (l28 = t + (c42 = h34 / 40) * A11) + c42 * ((d23 = r + c42 * S8) - l28)) + c42 * (d23 + c42 * (i125 + c42 * P9 - d23) - g17), b8 = (m14 = (f25 = e + c42 * x6) + c42 * ((p = n157 + c42 * _9) - f25)) + c42 * (p + c42 * (a87 + c42 * k9 - p) - m14), 0 == h34 ? (y9 = v13, w11 = b8, N9 = v13, L8 = b8) : (y9 = Math.min(y9, v13), w11 = Math.min(w11, b8), N9 = Math.max(N9, v13), L8 = Math.max(L8, b8));
        return new u27(Math.round(y9), Math.round(w11), Math.round(N9 - y9), Math.round(L8 - w11));
    }, T3 = function() {
        if (this.prevLineDash || this.ctx.lineDash.length || this.ctx.lineDashOffset) {
            var t, e, r = (t = this.ctx.lineDash, e = this.ctx.lineDashOffset, JSON.stringify({
                lineDash: t,
                lineDashOffset: e
            }));
            this.prevLineDash !== r && (this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset), this.prevLineDash = r);
        }
    };
}(E.API), /**
 * @license
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t46) {
    var r20 = function(t47) {
        var e31, r21, n159, i127, a89, o72, s53, c43, u38, h35;
        for(/[^\x00-\xFF]/.test(t47), r21 = [], n159 = 0, i127 = (t47 += e31 = "\0\0\0\0".slice(t47.length % 4 || 4)).length; i127 > n159; n159 += 4)0 !== (a89 = (t47.charCodeAt(n159) << 24) + (t47.charCodeAt(n159 + 1) << 16) + (t47.charCodeAt(n159 + 2) << 8) + t47.charCodeAt(n159 + 3)) ? (o72 = (a89 = ((a89 = ((a89 = ((a89 = (a89 - (h35 = a89 % 85)) / 85) - (u38 = a89 % 85)) / 85) - (c43 = a89 % 85)) / 85) - (s53 = a89 % 85)) / 85) % 85, r21.push(o72 + 33, s53 + 33, c43 + 33, u38 + 33, h35 + 33)) : r21.push(122);
        return function(t, e) {
            for(var r = e; r > 0; r--)t.pop();
        }(r21, e31.length), String.fromCharCode.apply(String, r21) + "~>";
    }, n158 = function(t48) {
        var e32, r22, n160, i128, a90, o73 = String, s54 = "length", c44 = 255, u39 = "charCodeAt", h36 = "slice", l29 = "replace";
        for(t48[h36](-2), t48 = t48[h36](0, -2)[l29](/\s/g, "")[l29]("z", "!!!!!"), n160 = [], i128 = 0, a90 = (t48 += e32 = "uuuuu"[h36](t48[s54] % 5 || 5))[s54]; a90 > i128; i128 += 5)r22 = 52200625 * (t48[u39](i128) - 33) + 614125 * (t48[u39](i128 + 1) - 33) + 7225 * (t48[u39](i128 + 2) - 33) + 85 * (t48[u39](i128 + 3) - 33) + (t48[u39](i128 + 4) - 33), n160.push(c44 & r22 >> 24, c44 & r22 >> 16, c44 & r22 >> 8, c44 & r22);
        return function(t, e) {
            for(var r = e; r > 0; r--)t.pop();
        }(n160, e32[s54]), o73.fromCharCode.apply(o73, n160);
    }, i126 = function(t) {
        var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);
        if (-1 !== (t = t.replace(/\s/g, "")).indexOf(">") && (t = t.substr(0, t.indexOf(">"))), t.length % 2 && (t += "0"), !1 === e.test(t)) return "";
        for(var r = "", n161 = 0; n161 < t.length; n161 += 2)r += String.fromCharCode("0x" + (t[n161] + t[n161 + 1]));
        return r;
    }, a88 = function(t49) {
        for(var r = new Uint8Array(t49.length), n162 = t49.length; n162--;)r[n162] = t49.charCodeAt(n162);
        return t49 = (r = _fflate.zlibSync(r)).reduce(function(t, e) {
            return t + String.fromCharCode(e);
        }, "");
    };
    t46.processDataByFilters = function(t50, e) {
        var o74 = 0, s55 = t50 || "", c45 = [];
        for("string" == typeof (e = e || []) && (e = [
            e
        ]), o74 = 0; o74 < e.length; o74 += 1)switch(e[o74]){
            case "ASCII85Decode":
            case "/ASCII85Decode":
                s55 = n158(s55), c45.push("/ASCII85Encode");
                break;
            case "ASCII85Encode":
            case "/ASCII85Encode":
                s55 = r20(s55), c45.push("/ASCII85Decode");
                break;
            case "ASCIIHexDecode":
            case "/ASCIIHexDecode":
                s55 = i126(s55), c45.push("/ASCIIHexEncode");
                break;
            case "ASCIIHexEncode":
            case "/ASCIIHexEncode":
                s55 = s55.split("").map(function(t) {
                    return ("0" + t.charCodeAt().toString(16)).slice(-2);
                }).join("") + ">", c45.push("/ASCIIHexDecode");
                break;
            case "FlateEncode":
            case "/FlateEncode":
                s55 = a88(s55), c45.push("/FlateDecode");
                break;
            default:
                throw new Error('The filter: "' + e[o74] + '" is not implemented');
        }
        return {
            data: s55,
            reverseChain: c45.reverse().join(" ")
        };
    };
}(E.API), /**
 * @license
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t51) {
    t51.loadFile = function(t52, e33, r23) {
        return function(t53, e34, r24) {
            e34 = !1 !== e34, r24 = "function" == typeof r24 ? r24 : function() {};
            var n163 = void 0;
            try {
                n163 = function(t54, e35, r25) {
                    var n164 = new XMLHttpRequest, i129 = 0, a91 = function(t) {
                        var e = t.length, r = [], n165 = String.fromCharCode;
                        for(i129 = 0; i129 < e; i129 += 1)r.push(n165(255 & t.charCodeAt(i129)));
                        return r.join("");
                    };
                    if (n164.open("GET", t54, !e35), n164.overrideMimeType("text/plain; charset=x-user-defined"), !1 === e35 && (n164.onload = function() {
                        200 === n164.status ? r25(a91(this.responseText)) : r25(void 0);
                    }), n164.send(null), e35 && 200 === n164.status) return a91(n164.responseText);
                }(t53, e34, r24);
            } catch (t) {}
            return n163;
        }(t52, e33, r23);
    }, t51.loadImageFile = t51.loadFile;
}(E.API), function(e36) {
    function r26() {
        return (n.html2canvas ? Promise.resolve(n.html2canvas) : require("f4c3b48e1b8c7c37")).catch(function(t) {
            return Promise.reject(new Error("Could not load html2canvas: " + t));
        }).then(function(t) {
            return t.default ? t.default : t;
        });
    }
    function i130() {
        return (n.DOMPurify ? Promise.resolve(n.DOMPurify) : require("dda6c17c09594b43")).catch(function(t) {
            return Promise.reject(new Error("Could not load dompurify: " + t));
        }).then(function(t) {
            return t.default ? t.default : t;
        });
    }
    var a92 = function(e) {
        var r = _typeofDefault.default(e);
        return "undefined" === r ? "undefined" : "string" === r || e instanceof String ? "string" : "number" === r || e instanceof Number ? "number" : "function" === r || e instanceof Function ? "function" : e && e.constructor === Array ? "array" : e && 1 === e.nodeType ? "element" : "object" === r ? "object" : "unknown";
    }, o75 = function(t, e) {
        var r = document.createElement(t);
        for(var n166 in e.className && (r.className = e.className), e.innerHTML && e.dompurify && (r.innerHTML = e.dompurify.sanitize(e.innerHTML)), e.style)r.style[n166] = e.style[n166];
        return r;
    }, s56 = function t(e) {
        var r = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template))), n167 = t.convert(Promise.resolve(), r);
        return n167 = (n167 = n167.setProgress(1, t, 1, [
            t
        ])).set(e);
    };
    (s56.prototype = Object.create(Promise.prototype)).constructor = s56, s56.convert = function(t, e) {
        return t.__proto__ = e || s56.prototype, t;
    }, s56.template = {
        prop: {
            src: null,
            container: null,
            overlay: null,
            canvas: null,
            img: null,
            pdf: null,
            pageSize: null,
            callback: function() {}
        },
        progress: {
            val: 0,
            state: null,
            n: 0,
            stack: []
        },
        opt: {
            filename: "file.pdf",
            margin: [
                0,
                0,
                0,
                0
            ],
            enableLinks: !0,
            x: 0,
            y: 0,
            html2canvas: {},
            jsPDF: {},
            backgroundColor: "transparent"
        }
    }, s56.prototype.from = function(t55, e37) {
        return this.then(function() {
            switch(e37 = e37 || function(t) {
                switch(a92(t)){
                    case "string":
                        return "string";
                    case "element":
                        return "canvas" === t.nodeName.toLowerCase() ? "canvas" : "element";
                    default:
                        return "unknown";
                }
            }(t55)){
                case "string":
                    return this.then(i130).then(function(e) {
                        return this.set({
                            src: o75("div", {
                                innerHTML: t55,
                                dompurify: e
                            })
                        });
                    });
                case "element":
                    return this.set({
                        src: t55
                    });
                case "canvas":
                    return this.set({
                        canvas: t55
                    });
                case "img":
                    return this.set({
                        img: t55
                    });
                default:
                    return this.error("Unknown source type.");
            }
        });
    }, s56.prototype.to = function(t) {
        switch(t){
            case "container":
                return this.toContainer();
            case "canvas":
                return this.toCanvas();
            case "img":
                return this.toImg();
            case "pdf":
                return this.toPdf();
            default:
                return this.error("Invalid target.");
        }
    }, s56.prototype.toContainer = function() {
        return this.thenList([
            function() {
                return this.prop.src || this.error("Cannot duplicate - no source HTML.");
            },
            function() {
                return this.prop.pageSize || this.setPageSize();
            }
        ]).then(function() {
            var t56 = {
                position: "relative",
                display: "inline-block",
                width: ("number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) : this.opt.windowWidth) + "px",
                left: 0,
                right: 0,
                top: 0,
                margin: "auto",
                backgroundColor: this.opt.backgroundColor
            }, e38 = function t(e, r) {
                for(var n168 = 3 === e.nodeType ? document.createTextNode(e.nodeValue) : e.cloneNode(!1), i131 = e.firstChild; i131; i131 = i131.nextSibling)!0 !== r && 1 === i131.nodeType && "SCRIPT" === i131.nodeName || n168.appendChild(t(i131, r));
                return 1 === e.nodeType && ("CANVAS" === e.nodeName ? (n168.width = e.width, n168.height = e.height, n168.getContext("2d").drawImage(e, 0, 0)) : "TEXTAREA" !== e.nodeName && "SELECT" !== e.nodeName || (n168.value = e.value), n168.addEventListener("load", function() {
                    n168.scrollTop = e.scrollTop, n168.scrollLeft = e.scrollLeft;
                }, !0)), n168;
            }(this.prop.src, this.opt.html2canvas.javascriptEnabled);
            "BODY" === e38.tagName && (t56.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"), this.prop.overlay = o75("div", {
                className: "html2pdf__overlay",
                style: {
                    position: "fixed",
                    overflow: "hidden",
                    zIndex: 1e3,
                    left: "-100000px",
                    right: 0,
                    bottom: 0,
                    top: 0
                }
            }), this.prop.container = o75("div", {
                className: "html2pdf__container",
                style: t56
            }), this.prop.container.appendChild(e38), this.prop.container.firstChild.appendChild(o75("div", {
                style: {
                    clear: "both",
                    border: "0 none transparent",
                    margin: 0,
                    padding: 0,
                    height: 0
                }
            })), this.prop.container.style.float = "none", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = "relative", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
        });
    }, s56.prototype.toCanvas = function() {
        var t57 = [
            function() {
                return document.body.contains(this.prop.container) || this.toContainer();
            }
        ];
        return this.thenList(t57).then(r26).then(function(t) {
            var e = Object.assign({}, this.opt.html2canvas);
            return delete e.onrendered, t(this.prop.container, e);
        }).then(function(t) {
            (this.opt.html2canvas.onrendered || function() {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
        });
    }, s56.prototype.toContext2d = function() {
        var t58 = [
            function() {
                return document.body.contains(this.prop.container) || this.toContainer();
            }
        ];
        return this.thenList(t58).then(r26).then(function(t59) {
            var e = this.opt.jsPDF, r = this.opt.fontFaces, n169 = "number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? 1 : this.opt.width / this.opt.windowWidth, i132 = Object.assign({
                async: !0,
                allowTaint: !0,
                scale: n169,
                scrollX: this.opt.scrollX || 0,
                scrollY: this.opt.scrollY || 0,
                backgroundColor: "#ffffff",
                imageTimeout: 15e3,
                logging: !0,
                proxy: null,
                removeContainer: !0,
                foreignObjectRendering: !1,
                useCORS: !1
            }, this.opt.html2canvas);
            if (delete i132.onrendered, e.context2d.autoPaging = void 0 === this.opt.autoPaging || this.opt.autoPaging, e.context2d.posX = this.opt.x, e.context2d.posY = this.opt.y, e.context2d.margin = this.opt.margin, e.context2d.fontFaces = r, r) for(var a93 = 0; a93 < r.length; ++a93){
                var o76 = r[a93], s57 = o76.src.find(function(t) {
                    return "truetype" === t.format;
                });
                s57 && e.addFont(s57.url, o76.ref.name, o76.ref.style);
            }
            return i132.windowHeight = i132.windowHeight || 0, i132.windowHeight = 0 == i132.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : i132.windowHeight, e.context2d.save(!0), t59(this.prop.container, i132);
        }).then(function(t) {
            this.opt.jsPDF.context2d.restore(!0), (this.opt.html2canvas.onrendered || function() {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
        });
    }, s56.prototype.toImg = function() {
        return this.thenList([
            function() {
                return this.prop.canvas || this.toCanvas();
            }
        ]).then(function() {
            var t = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
            this.prop.img = document.createElement("img"), this.prop.img.src = t;
        });
    }, s56.prototype.toPdf = function() {
        return this.thenList([
            function() {
                return this.toContext2d();
            }
        ]).then(function() {
            this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
        });
    }, s56.prototype.output = function(t, e, r) {
        return "img" === (r = r || "pdf").toLowerCase() || "image" === r.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e);
    }, s56.prototype.outputPdf = function(t, e) {
        return this.thenList([
            function() {
                return this.prop.pdf || this.toPdf();
            }
        ]).then(function() {
            return this.prop.pdf.output(t, e);
        });
    }, s56.prototype.outputImg = function(t) {
        return this.thenList([
            function() {
                return this.prop.img || this.toImg();
            }
        ]).then(function() {
            switch(t){
                case void 0:
                case "img":
                    return this.prop.img;
                case "datauristring":
                case "dataurlstring":
                    return this.prop.img.src;
                case "datauri":
                case "dataurl":
                    return document.location.href = this.prop.img.src;
                default:
                    throw 'Image output type "' + t + '" is not supported.';
            }
        });
    }, s56.prototype.save = function(t) {
        return this.thenList([
            function() {
                return this.prop.pdf || this.toPdf();
            }
        ]).set(t ? {
            filename: t
        } : null).then(function() {
            this.prop.pdf.save(this.opt.filename);
        });
    }, s56.prototype.doCallback = function() {
        return this.thenList([
            function() {
                return this.prop.pdf || this.toPdf();
            }
        ]).then(function() {
            this.prop.callback(this.prop.pdf);
        });
    }, s56.prototype.set = function(t) {
        if ("object" !== a92(t)) return this;
        var e39 = Object.keys(t || {}).map(function(e) {
            if (e in s56.template.prop) return function() {
                this.prop[e] = t[e];
            };
            switch(e){
                case "margin":
                    return this.setMargin.bind(this, t.margin);
                case "jsPDF":
                    return function() {
                        return this.opt.jsPDF = t.jsPDF, this.setPageSize();
                    };
                case "pageSize":
                    return this.setPageSize.bind(this, t.pageSize);
                default:
                    return function() {
                        this.opt[e] = t[e];
                    };
            }
        }, this);
        return this.then(function() {
            return this.thenList(e39);
        });
    }, s56.prototype.get = function(t, e) {
        return this.then(function() {
            var r = t in s56.template.prop ? this.prop[t] : this.opt[t];
            return e ? e(r) : r;
        });
    }, s56.prototype.setMargin = function(t) {
        return this.then(function() {
            switch(a92(t)){
                case "number":
                    t = [
                        t,
                        t,
                        t,
                        t
                    ];
                case "array":
                    if (2 === t.length && (t = [
                        t[0],
                        t[1],
                        t[0],
                        t[1]
                    ]), 4 === t.length) break;
                default:
                    return this.error("Invalid margin array.");
            }
            this.opt.margin = t;
        }).then(this.setPageSize);
    }, s56.prototype.setPageSize = function(t60) {
        function e40(t, e) {
            return Math.floor(t * e / 72 * 96);
        }
        return this.then(function() {
            (t60 = t60 || E.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t60.inner = {
                width: t60.width - this.opt.margin[1] - this.opt.margin[3],
                height: t60.height - this.opt.margin[0] - this.opt.margin[2]
            }, t60.inner.px = {
                width: e40(t60.inner.width, t60.k),
                height: e40(t60.inner.height, t60.k)
            }, t60.inner.ratio = t60.inner.height / t60.inner.width), this.prop.pageSize = t60;
        });
    }, s56.prototype.setProgress = function(t, e, r, n170) {
        return null != t && (this.progress.val = t), null != e && (this.progress.state = e), null != r && (this.progress.n = r), null != n170 && (this.progress.stack = n170), this.progress.ratio = this.progress.val / this.progress.state, this;
    }, s56.prototype.updateProgress = function(t, e, r, n171) {
        return this.setProgress(t ? this.progress.val + t : null, e || null, r ? this.progress.n + r : null, n171 ? this.progress.stack.concat(n171) : null);
    }, s56.prototype.then = function(t61, e41) {
        var r = this;
        return this.thenCore(t61, e41, function(t62, e42) {
            return r.updateProgress(null, null, 1, [
                t62
            ]), Promise.prototype.then.call(this, function(e) {
                return r.updateProgress(null, t62), e;
            }).then(t62, e42).then(function(t) {
                return r.updateProgress(1), t;
            });
        });
    }, s56.prototype.thenCore = function(t, e, r) {
        r = r || Promise.prototype.then;
        t && (t = t.bind(this)), e && (e = e.bind(this));
        var n172 = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? this : s56.convert(Object.assign({}, this), Promise.prototype), i133 = r.call(n172, t, e);
        return s56.convert(i133, this.__proto__);
    }, s56.prototype.thenExternal = function(t, e) {
        return Promise.prototype.then.call(this, t, e);
    }, s56.prototype.thenList = function(t63) {
        var e = this;
        return t63.forEach(function(t) {
            e = e.thenCore(t);
        }), e;
    }, s56.prototype.catch = function(t) {
        t && (t = t.bind(this));
        var e = Promise.prototype.catch.call(this, t);
        return s56.convert(e, this);
    }, s56.prototype.catchExternal = function(t) {
        return Promise.prototype.catch.call(this, t);
    }, s56.prototype.error = function(t) {
        return this.then(function() {
            throw new Error(t);
        });
    }, s56.prototype.using = s56.prototype.set, s56.prototype.saveAs = s56.prototype.save, s56.prototype.export = s56.prototype.output, s56.prototype.run = s56.prototype.then, E.getPageSize = function(e, r, n173) {
        if ("object" === _typeofDefault.default(e)) {
            var i134 = e;
            e = i134.orientation, r = i134.unit || r, n173 = i134.format || n173;
        }
        r = r || "mm", n173 = n173 || "a4", e = ("" + (e || "P")).toLowerCase();
        var a94, o77 = ("" + n173).toLowerCase(), s58 = {
            a0: [
                2383.94,
                3370.39
            ],
            a1: [
                1683.78,
                2383.94
            ],
            a2: [
                1190.55,
                1683.78
            ],
            a3: [
                841.89,
                1190.55
            ],
            a4: [
                595.28,
                841.89
            ],
            a5: [
                419.53,
                595.28
            ],
            a6: [
                297.64,
                419.53
            ],
            a7: [
                209.76,
                297.64
            ],
            a8: [
                147.4,
                209.76
            ],
            a9: [
                104.88,
                147.4
            ],
            a10: [
                73.7,
                104.88
            ],
            b0: [
                2834.65,
                4008.19
            ],
            b1: [
                2004.09,
                2834.65
            ],
            b2: [
                1417.32,
                2004.09
            ],
            b3: [
                1000.63,
                1417.32
            ],
            b4: [
                708.66,
                1000.63
            ],
            b5: [
                498.9,
                708.66
            ],
            b6: [
                354.33,
                498.9
            ],
            b7: [
                249.45,
                354.33
            ],
            b8: [
                175.75,
                249.45
            ],
            b9: [
                124.72,
                175.75
            ],
            b10: [
                87.87,
                124.72
            ],
            c0: [
                2599.37,
                3676.54
            ],
            c1: [
                1836.85,
                2599.37
            ],
            c2: [
                1298.27,
                1836.85
            ],
            c3: [
                918.43,
                1298.27
            ],
            c4: [
                649.13,
                918.43
            ],
            c5: [
                459.21,
                649.13
            ],
            c6: [
                323.15,
                459.21
            ],
            c7: [
                229.61,
                323.15
            ],
            c8: [
                161.57,
                229.61
            ],
            c9: [
                113.39,
                161.57
            ],
            c10: [
                79.37,
                113.39
            ],
            dl: [
                311.81,
                623.62
            ],
            letter: [
                612,
                792
            ],
            "government-letter": [
                576,
                756
            ],
            legal: [
                612,
                1008
            ],
            "junior-legal": [
                576,
                360
            ],
            ledger: [
                1224,
                792
            ],
            tabloid: [
                792,
                1224
            ],
            "credit-card": [
                153,
                243
            ]
        };
        switch(r){
            case "pt":
                a94 = 1;
                break;
            case "mm":
                a94 = 72 / 25.4;
                break;
            case "cm":
                a94 = 72 / 2.54;
                break;
            case "in":
                a94 = 72;
                break;
            case "px":
                a94 = .75;
                break;
            case "pc":
            case "em":
                a94 = 12;
                break;
            case "ex":
                a94 = 6;
                break;
            default:
                throw "Invalid unit: " + r;
        }
        var c46, u40 = 0, h37 = 0;
        if (s58.hasOwnProperty(o77)) u40 = s58[o77][1] / a94, h37 = s58[o77][0] / a94;
        else try {
            u40 = n173[1], h37 = n173[0];
        } catch (t) {
            throw new Error("Invalid format: " + n173);
        }
        if ("p" === e || "portrait" === e) e = "p", h37 > u40 && (c46 = h37, h37 = u40, u40 = c46);
        else {
            if ("l" !== e && "landscape" !== e) throw "Invalid orientation: " + e;
            e = "l", u40 > h37 && (c46 = h37, h37 = u40, u40 = c46);
        }
        return {
            width: h37,
            height: u40,
            unit: r,
            k: a94,
            orientation: e
        };
    }, e36.html = function(t, e) {
        (e = e || {}).callback = e.callback || function() {}, e.html2canvas = e.html2canvas || {}, e.html2canvas.canvas = e.html2canvas.canvas || this.canvas, e.jsPDF = e.jsPDF || this, e.fontFaces = e.fontFaces ? e.fontFaces.map(jt) : null;
        var r = new s56(e);
        return e.worker ? r : r.from(t).doCallback();
    };
}(E.API), E.API.addJS = function(t) {
    return Ht = t, this.internal.events.subscribe("postPutResources", function() {
        Ut2 = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/Names [(EmbeddedJS) " + (Ut2 + 1) + " 0 R]"), this.internal.out(">>"), this.internal.out("endobj"), zt = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /JavaScript"), this.internal.out("/JS (" + Ht + ")"), this.internal.out(">>"), this.internal.out("endobj");
    }), this.internal.events.subscribe("putCatalog", function() {
        void 0 !== Ut2 && void 0 !== zt && this.internal.out("/Names <</JavaScript " + Ut2 + " 0 R>>");
    }), this;
}, /**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t64) {
    var e43;
    t64.events.push([
        "postPutResources",
        function() {
            var t = this, r = /^(\d+) 0 obj$/;
            if (this.outline.root.children.length > 0) for(var n174 = t.outline.render().split(/\r\n/), i135 = 0; i135 < n174.length; i135++){
                var a95 = n174[i135], o78 = r.exec(a95);
                if (null != o78) {
                    var s59 = o78[1];
                    t.internal.newObjectDeferredBegin(s59, !1);
                }
                t.internal.write(a95);
            }
            if (this.outline.createNamedDestinations) {
                var c47 = this.internal.pages.length, u41 = [];
                for(i135 = 0; i135 < c47; i135++){
                    var h38 = t.internal.newObject();
                    u41.push(h38);
                    var l30 = t.internal.getPageInfo(i135 + 1);
                    t.internal.write("<< /D[" + l30.objId + " 0 R /XYZ null null null]>> endobj");
                }
                var f26 = t.internal.newObject();
                t.internal.write("<< /Names [ ");
                for(i135 = 0; i135 < u41.length; i135++)t.internal.write("(page_" + (i135 + 1) + ")" + u41[i135] + " 0 R");
                t.internal.write(" ] >>", "endobj"), e43 = t.internal.newObject(), t.internal.write("<< /Dests " + f26 + " 0 R"), t.internal.write(">>", "endobj");
            }
        }
    ]), t64.events.push([
        "putCatalog",
        function() {
            this.outline.root.children.length > 0 && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && this.internal.write("/Names " + e43 + " 0 R"));
        }
    ]), t64.events.push([
        "initialized",
        function() {
            var t65 = this;
            t65.outline = {
                createNamedDestinations: !1,
                root: {
                    children: []
                }
            }, t65.outline.add = function(t, e, r) {
                var n175 = {
                    title: e,
                    options: r,
                    children: []
                };
                return null == t && (t = this.root), t.children.push(n175), n175;
            }, t65.outline.render = function() {
                return this.ctx = {}, this.ctx.val = "", this.ctx.pdf = t65, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;
            }, t65.outline.genIds_r = function(e) {
                e.id = t65.internal.newObjectDeferred();
                for(var r = 0; r < e.children.length; r++)this.genIds_r(e.children[r]);
            }, t65.outline.renderRoot = function(t) {
                this.objStart(t), this.line("/Type /Outlines"), t.children.length > 0 && (this.line("/First " + this.makeRef(t.children[0])), this.line("/Last " + this.makeRef(t.children[t.children.length - 1]))), this.line("/Count " + this.count_r({
                    count: 0
                }, t)), this.objEnd();
            }, t65.outline.renderItems = function(e) {
                for(var r = this.ctx.pdf.internal.getVerticalCoordinateString, n176 = 0; n176 < e.children.length; n176++){
                    var i136 = e.children[n176];
                    this.objStart(i136), this.line("/Title " + this.makeString(i136.title)), this.line("/Parent " + this.makeRef(e)), n176 > 0 && this.line("/Prev " + this.makeRef(e.children[n176 - 1])), n176 < e.children.length - 1 && this.line("/Next " + this.makeRef(e.children[n176 + 1])), i136.children.length > 0 && (this.line("/First " + this.makeRef(i136.children[0])), this.line("/Last " + this.makeRef(i136.children[i136.children.length - 1])));
                    var a96 = this.count = this.count_r({
                        count: 0
                    }, i136);
                    if (a96 > 0 && this.line("/Count " + a96), i136.options && i136.options.pageNumber) {
                        var o79 = t65.internal.getPageInfo(i136.options.pageNumber);
                        this.line("/Dest [" + o79.objId + " 0 R /XYZ 0 " + r(0) + " 0]");
                    }
                    this.objEnd();
                }
                for(var s60 = 0; s60 < e.children.length; s60++)this.renderItems(e.children[s60]);
            }, t65.outline.line = function(t) {
                this.ctx.val += t + "\r\n";
            }, t65.outline.makeRef = function(t) {
                return t.id + " 0 R";
            }, t65.outline.makeString = function(e) {
                return "(" + t65.internal.pdfEscape(e) + ")";
            }, t65.outline.objStart = function(t) {
                this.ctx.val += "\r\n" + t.id + " 0 obj\r\n<<\r\n";
            }, t65.outline.objEnd = function() {
                this.ctx.val += ">> \r\nendobj\r\n";
            }, t65.outline.count_r = function(t, e) {
                for(var r = 0; r < e.children.length; r++)t.count++, this.count_r(t, e.children[r]);
                return t.count;
            };
        }
    ]);
}(E.API), /**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t66) {
    var e = [
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199
    ];
    t66.processJPEG = function(t67, r27, n177, i137, a97, o80) {
        var s61, c48 = this.decode.DCT_DECODE, u42 = null;
        if ("string" == typeof t67 || this.__addimage__.isArrayBuffer(t67) || this.__addimage__.isArrayBufferView(t67)) {
            switch(t67 = a97 || t67, t67 = this.__addimage__.isArrayBuffer(t67) ? new Uint8Array(t67) : t67, (s61 = function(t) {
                for(var r, n178 = 256 * t.charCodeAt(4) + t.charCodeAt(5), i138 = t.length, a98 = {
                    width: 0,
                    height: 0,
                    numcomponents: 1
                }, o81 = 4; o81 < i138; o81 += 2){
                    if (o81 += n178, -1 !== e.indexOf(t.charCodeAt(o81 + 1))) {
                        r = 256 * t.charCodeAt(o81 + 5) + t.charCodeAt(o81 + 6), a98 = {
                            width: 256 * t.charCodeAt(o81 + 7) + t.charCodeAt(o81 + 8),
                            height: r,
                            numcomponents: t.charCodeAt(o81 + 9)
                        };
                        break;
                    }
                    n178 = 256 * t.charCodeAt(o81 + 2) + t.charCodeAt(o81 + 3);
                }
                return a98;
            }(t67 = this.__addimage__.isArrayBufferView(t67) ? this.__addimage__.arrayBufferToBinaryString(t67) : t67)).numcomponents){
                case 1:
                    o80 = this.color_spaces.DEVICE_GRAY;
                    break;
                case 4:
                    o80 = this.color_spaces.DEVICE_CMYK;
                    break;
                case 3:
                    o80 = this.color_spaces.DEVICE_RGB;
            }
            u42 = {
                data: t67,
                width: s61.width,
                height: s61.height,
                colorSpace: o80,
                bitsPerComponent: 8,
                filter: c48,
                index: r27,
                alias: n177
            };
        }
        return u42;
    };
}(E.API);
var Vt, Gt, Yt, Jt, Xt, Kt = function() {
    var t68, e44, i139;
    function a99(t69) {
        var e45, r, n179, i140, a100, o83, s62, c49, u43, h39, l31, f27, d24, p;
        for(this.data = t69, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, o83 = null;;){
            switch(e45 = this.readUInt32(), u43 = (function() {
                var t, e;
                for(e = [], t = 0; t < 4; ++t)e.push(String.fromCharCode(this.data[this.pos++]));
                return e;
            }).call(this).join("")){
                case "IHDR":
                    this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
                    break;
                case "acTL":
                    this.animation = {
                        numFrames: this.readUInt32(),
                        numPlays: this.readUInt32() || 1 / 0,
                        frames: []
                    };
                    break;
                case "PLTE":
                    this.palette = this.read(e45);
                    break;
                case "fcTL":
                    o83 && this.animation.frames.push(o83), this.pos += 4, o83 = {
                        width: this.readUInt32(),
                        height: this.readUInt32(),
                        xOffset: this.readUInt32(),
                        yOffset: this.readUInt32()
                    }, a100 = this.readUInt16(), i140 = this.readUInt16() || 100, o83.delay = 1e3 * a100 / i140, o83.disposeOp = this.data[this.pos++], o83.blendOp = this.data[this.pos++], o83.data = [];
                    break;
                case "IDAT":
                case "fdAT":
                    for("fdAT" === u43 && (this.pos += 4, e45 -= 4), t69 = (null != o83 ? o83.data : void 0) || this.imgData, f27 = 0; 0 <= e45 ? f27 < e45 : f27 > e45; 0 <= e45 ? ++f27 : --f27)t69.push(this.data[this.pos++]);
                    break;
                case "tRNS":
                    switch(this.transparency = {}, this.colorType){
                        case 3:
                            if (n179 = this.palette.length / 3, this.transparency.indexed = this.read(e45), this.transparency.indexed.length > n179) throw new Error("More transparent colors than palette size");
                            if ((h39 = n179 - this.transparency.indexed.length) > 0) for(d24 = 0; 0 <= h39 ? d24 < h39 : d24 > h39; 0 <= h39 ? ++d24 : --d24)this.transparency.indexed.push(255);
                            break;
                        case 0:
                            this.transparency.grayscale = this.read(e45)[0];
                            break;
                        case 2:
                            this.transparency.rgb = this.read(e45);
                    }
                    break;
                case "tEXt":
                    s62 = (l31 = this.read(e45)).indexOf(0), c49 = String.fromCharCode.apply(String, l31.slice(0, s62)), this.text[c49] = String.fromCharCode.apply(String, l31.slice(s62 + 1));
                    break;
                case "IEND":
                    return o83 && this.animation.frames.push(o83), this.colors = (function() {
                        switch(this.colorType){
                            case 0:
                            case 3:
                            case 4:
                                return 1;
                            case 2:
                            case 6:
                                return 3;
                        }
                    }).call(this), this.hasAlphaChannel = 4 === (p = this.colorType) || 6 === p, r = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * r, this.colorSpace = (function() {
                        switch(this.colors){
                            case 1:
                                return "DeviceGray";
                            case 3:
                                return "DeviceRGB";
                        }
                    }).call(this), void (this.imgData = new Uint8Array(this.imgData));
                default:
                    this.pos += e45;
            }
            if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
        }
    }
    a99.prototype.read = function(t) {
        var e, r;
        for(r = [], e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e)r.push(this.data[this.pos++]);
        return r;
    }, a99.prototype.readUInt32 = function() {
        return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a99.prototype.readUInt16 = function() {
        return this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a99.prototype.decodePixels = function(t) {
        var e = this.pixelBitlength / 8, n180 = new Uint8Array(this.width * this.height * e), i141 = 0, a101 = this;
        if (null == t && (t = this.imgData), 0 === t.length) return new Uint8Array(0);
        function o84(r, o85, s63, c50) {
            var u44, h40, l32, f28, d25, p, g18, m15, v14, b9, y10, w12, N10, L9, A12, x7, S9, _10, P10, k10, I7, F7 = Math.ceil((a101.width - r) / s63), C7 = Math.ceil((a101.height - o85) / c50), j7 = a101.width == F7 && a101.height == C7;
            for(L9 = e * F7, w12 = j7 ? n180 : new Uint8Array(L9 * C7), p = t.length, N10 = 0, h40 = 0; N10 < C7 && i141 < p;){
                switch(t[i141++]){
                    case 0:
                        for(f28 = S9 = 0; S9 < L9; f28 = S9 += 1)w12[h40++] = t[i141++];
                        break;
                    case 1:
                        for(f28 = _10 = 0; _10 < L9; f28 = _10 += 1)u44 = t[i141++], d25 = f28 < e ? 0 : w12[h40 - e], w12[h40++] = (u44 + d25) % 256;
                        break;
                    case 2:
                        for(f28 = P10 = 0; P10 < L9; f28 = P10 += 1)u44 = t[i141++], l32 = (f28 - f28 % e) / e, A12 = N10 && w12[(N10 - 1) * L9 + l32 * e + f28 % e], w12[h40++] = (A12 + u44) % 256;
                        break;
                    case 3:
                        for(f28 = k10 = 0; k10 < L9; f28 = k10 += 1)u44 = t[i141++], l32 = (f28 - f28 % e) / e, d25 = f28 < e ? 0 : w12[h40 - e], A12 = N10 && w12[(N10 - 1) * L9 + l32 * e + f28 % e], w12[h40++] = (u44 + Math.floor((d25 + A12) / 2)) % 256;
                        break;
                    case 4:
                        for(f28 = I7 = 0; I7 < L9; f28 = I7 += 1)u44 = t[i141++], l32 = (f28 - f28 % e) / e, d25 = f28 < e ? 0 : w12[h40 - e], 0 === N10 ? A12 = x7 = 0 : (A12 = w12[(N10 - 1) * L9 + l32 * e + f28 % e], x7 = l32 && w12[(N10 - 1) * L9 + (l32 - 1) * e + f28 % e]), g18 = d25 + A12 - x7, m15 = Math.abs(g18 - d25), b9 = Math.abs(g18 - A12), y10 = Math.abs(g18 - x7), v14 = m15 <= b9 && m15 <= y10 ? d25 : b9 <= y10 ? A12 : x7, w12[h40++] = (u44 + v14) % 256;
                        break;
                    default:
                        throw new Error("Invalid filter algorithm: " + t[i141 - 1]);
                }
                if (!j7) {
                    var O6 = ((o85 + N10 * c50) * a101.width + r) * e, B6 = N10 * L9;
                    for(f28 = 0; f28 < F7; f28 += 1){
                        for(var M5 = 0; M5 < e; M5 += 1)n180[O6++] = w12[B6++];
                        O6 += (s63 - 1) * e;
                    }
                }
                N10++;
            }
        }
        return t = _fflate.unzlibSync(t), 1 == a101.interlaceMethod ? (o84(0, 0, 8, 8), o84(4, 0, 8, 8), o84(0, 4, 4, 8), o84(2, 0, 4, 4), o84(0, 2, 2, 4), o84(1, 0, 2, 2), o84(0, 1, 1, 2)) : o84(0, 0, 1, 1), n180;
    }, a99.prototype.decodePalette = function() {
        var t, e, r, n181, i142, a102, o86, s64, c51;
        for(r = this.palette, a102 = this.transparency.indexed || [], i142 = new Uint8Array((a102.length || 0) + r.length), n181 = 0, t = 0, e = o86 = 0, s64 = r.length; o86 < s64; e = o86 += 3)i142[n181++] = r[e], i142[n181++] = r[e + 1], i142[n181++] = r[e + 2], i142[n181++] = null != (c51 = a102[t++]) ? c51 : 255;
        return i142;
    }, a99.prototype.copyToImageData = function(t, e) {
        var r, n182, i143, a103, o87, s65, c52, u45, h41, l33, f29;
        if (n182 = this.colors, h41 = null, r = this.hasAlphaChannel, this.palette.length && (h41 = null != (f29 = this._decodedPalette) ? f29 : this._decodedPalette = this.decodePalette(), n182 = 4, r = !0), u45 = (i143 = t.data || t).length, o87 = h41 || e, a103 = s65 = 0, 1 === n182) for(; a103 < u45;)c52 = h41 ? 4 * e[a103 / 4] : s65, l33 = o87[c52++], i143[a103++] = l33, i143[a103++] = l33, i143[a103++] = l33, i143[a103++] = r ? o87[c52++] : 255, s65 = c52;
        else for(; a103 < u45;)c52 = h41 ? 4 * e[a103 / 4] : s65, i143[a103++] = o87[c52++], i143[a103++] = o87[c52++], i143[a103++] = o87[c52++], i143[a103++] = r ? o87[c52++] : 255, s65 = c52;
    }, a99.prototype.decode = function() {
        var t;
        return t = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t, this.decodePixels()), t;
    };
    var o82 = function() {
        if ("[object Window]" === Object.prototype.toString.call(n)) {
            try {
                e44 = n.document.createElement("canvas"), i139 = e44.getContext("2d");
            } catch (t) {
                return !1;
            }
            return !0;
        }
        return !1;
    };
    return o82(), t68 = function(t) {
        var r;
        if (!0 === o82()) return i139.width = t.width, i139.height = t.height, i139.clearRect(0, 0, t.width, t.height), i139.putImageData(t, 0, 0), (r = new Image).src = e44.toDataURL(), r;
        throw new Error("This method requires a Browser with Canvas-capability.");
    }, a99.prototype.decodeFrames = function(e) {
        var r, n183, i144, a104, o88, s66, c53, u46;
        if (this.animation) {
            for(u46 = [], n183 = o88 = 0, s66 = (c53 = this.animation.frames).length; o88 < s66; n183 = ++o88)r = c53[n183], i144 = e.createImageData(r.width, r.height), a104 = this.decodePixels(new Uint8Array(r.data)), this.copyToImageData(i144, a104), r.imageData = i144, u46.push(r.image = t68(i144));
            return u46;
        }
    }, a99.prototype.renderFrame = function(t, e) {
        var r, n184, i145;
        return r = (n184 = this.animation.frames)[e], i145 = n184[e - 1], 0 === e && t.clearRect(0, 0, this.width, this.height), 1 === (null != i145 ? i145.disposeOp : void 0) ? t.clearRect(i145.xOffset, i145.yOffset, i145.width, i145.height) : 2 === (null != i145 ? i145.disposeOp : void 0) && t.putImageData(i145.imageData, i145.xOffset, i145.yOffset), 0 === r.blendOp && t.clearRect(r.xOffset, r.yOffset, r.width, r.height), t.drawImage(r.image, r.xOffset, r.yOffset);
    }, a99.prototype.animate = function(t) {
        var e, r, n185, i146, a105, o89, s67 = this;
        return r = 0, o89 = this.animation, i146 = o89.numFrames, n185 = o89.frames, a105 = o89.numPlays, (e = function() {
            var o90, c54;
            if (o90 = (r++) % i146, c54 = n185[o90], s67.renderFrame(t, o90), i146 > 1 && r / i146 < a105) return s67.animation._timeout = setTimeout(e, c54.delay);
        })();
    }, a99.prototype.stopAnimation = function() {
        var t;
        return clearTimeout(null != (t = this.animation) ? t._timeout : void 0);
    }, a99.prototype.render = function(t) {
        var e, r;
        return t._png && t._png.stopAnimation(), t._png = this, t.width = this.width, t.height = this.height, e = t.getContext("2d"), this.animation ? (this.decodeFrames(e), this.animate(e)) : (r = e.createImageData(this.width, this.height), this.copyToImageData(r, this.decodePixels()), e.putImageData(r, 0, 0));
    }, a99;
}();
/**
 * @license
 *
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */ /**
 * @license
 * (c) Dean McNamee <dean@gmail.com>, 2013.
 *
 * https://github.com/deanm/omggif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
 * including animation and compression.  It does not rely on any specific
 * underlying system, so should run in the browser, Node, or Plask.
 */ function Zt(t70) {
    var e46 = 0;
    if (71 !== t70[e46++] || 73 !== t70[e46++] || 70 !== t70[e46++] || 56 !== t70[e46++] || 56 != (t70[e46++] + 1 & 253) || 97 !== t70[e46++]) throw new Error("Invalid GIF 87a/89a header.");
    var r = t70[e46++] | t70[e46++] << 8, n186 = t70[e46++] | t70[e46++] << 8, i147 = t70[e46++], a106 = i147 >> 7, o91 = 1 << (7 & i147) + 1;
    t70[e46++];
    t70[e46++];
    var s68 = null, c55 = null;
    a106 && (s68 = e46, c55 = o91, e46 += 3 * o91);
    var u47 = !0, h42 = [], l34 = 0, f30 = null, d26 = 0, p13 = null;
    for(this.width = r, this.height = n186; u47 && e46 < t70.length;)switch(t70[e46++]){
        case 33:
            switch(t70[e46++]){
                case 255:
                    if (11 !== t70[e46] || 78 == t70[e46 + 1] && 69 == t70[e46 + 2] && 84 == t70[e46 + 3] && 83 == t70[e46 + 4] && 67 == t70[e46 + 5] && 65 == t70[e46 + 6] && 80 == t70[e46 + 7] && 69 == t70[e46 + 8] && 50 == t70[e46 + 9] && 46 == t70[e46 + 10] && 48 == t70[e46 + 11] && 3 == t70[e46 + 12] && 1 == t70[e46 + 13] && 0 == t70[e46 + 16]) e46 += 14, p13 = t70[e46++] | t70[e46++] << 8, e46++;
                    else for(e46 += 12;;){
                        if (!((P11 = t70[e46++]) >= 0)) throw Error("Invalid block size");
                        if (0 === P11) break;
                        e46 += P11;
                    }
                    break;
                case 249:
                    if (4 !== t70[e46++] || 0 !== t70[e46 + 4]) throw new Error("Invalid graphics extension block.");
                    var g19 = t70[e46++];
                    l34 = t70[e46++] | t70[e46++] << 8, f30 = t70[e46++], 0 == (1 & g19) && (f30 = null), d26 = g19 >> 2 & 7, e46++;
                    break;
                case 254:
                    for(;;){
                        if (!((P11 = t70[e46++]) >= 0)) throw Error("Invalid block size");
                        if (0 === P11) break;
                        e46 += P11;
                    }
                    break;
                default:
                    throw new Error("Unknown graphic control label: 0x" + t70[e46 - 1].toString(16));
            }
            break;
        case 44:
            var m16 = t70[e46++] | t70[e46++] << 8, v15 = t70[e46++] | t70[e46++] << 8, b10 = t70[e46++] | t70[e46++] << 8, y11 = t70[e46++] | t70[e46++] << 8, w13 = t70[e46++], N11 = w13 >> 6 & 1, L10 = 1 << (7 & w13) + 1, A13 = s68, x8 = c55, S10 = !1;
            if (w13 >> 7) {
                S10 = !0;
                A13 = e46, x8 = L10, e46 += 3 * L10;
            }
            var _11 = e46;
            for(e46++;;){
                var P11;
                if (!((P11 = t70[e46++]) >= 0)) throw Error("Invalid block size");
                if (0 === P11) break;
                e46 += P11;
            }
            h42.push({
                x: m16,
                y: v15,
                width: b10,
                height: y11,
                has_local_palette: S10,
                palette_offset: A13,
                palette_size: x8,
                data_offset: _11,
                data_length: e46 - _11,
                transparent_index: f30,
                interlaced: !!N11,
                delay: l34,
                disposal: d26
            });
            break;
        case 59:
            u47 = !1;
            break;
        default:
            throw new Error("Unknown gif block: 0x" + t70[e46 - 1].toString(16));
    }
    this.numFrames = function() {
        return h42.length;
    }, this.loopCount = function() {
        return p13;
    }, this.frameInfo = function(t) {
        if (t < 0 || t >= h42.length) throw new Error("Frame index out of range.");
        return h42[t];
    }, this.decodeAndBlitFrameBGRA = function(e, n187) {
        var i148 = this.frameInfo(e), a107 = i148.width * i148.height, o92 = new Uint8Array(a107);
        $t(t70, i148.data_offset, o92, a107);
        var s69 = i148.palette_offset, c56 = i148.transparent_index;
        null === c56 && (c56 = 256);
        var u48 = i148.width, h43 = r - u48, l35 = u48, f31 = 4 * (i148.y * r + i148.x), d27 = 4 * ((i148.y + i148.height) * r + i148.x), p = f31, g20 = 4 * h43;
        !0 === i148.interlaced && (g20 += 4 * r * 7);
        for(var m17 = 8, v16 = 0, b11 = o92.length; v16 < b11; ++v16){
            var y12 = o92[v16];
            if (0 === l35 && (l35 = u48, (p += g20) >= d27 && (g20 = 4 * h43 + 4 * r * (m17 - 1), p = f31 + (u48 + h43) * (m17 << 1), m17 >>= 1)), y12 === c56) p += 4;
            else {
                var w14 = t70[s69 + 3 * y12], N12 = t70[s69 + 3 * y12 + 1], L11 = t70[s69 + 3 * y12 + 2];
                n187[p++] = L11, n187[p++] = N12, n187[p++] = w14, n187[p++] = 255;
            }
            --l35;
        }
    }, this.decodeAndBlitFrameRGBA = function(e, n188) {
        var i149 = this.frameInfo(e), a108 = i149.width * i149.height, o93 = new Uint8Array(a108);
        $t(t70, i149.data_offset, o93, a108);
        var s70 = i149.palette_offset, c57 = i149.transparent_index;
        null === c57 && (c57 = 256);
        var u49 = i149.width, h44 = r - u49, l36 = u49, f32 = 4 * (i149.y * r + i149.x), d28 = 4 * ((i149.y + i149.height) * r + i149.x), p = f32, g21 = 4 * h44;
        !0 === i149.interlaced && (g21 += 4 * r * 7);
        for(var m18 = 8, v17 = 0, b12 = o93.length; v17 < b12; ++v17){
            var y13 = o93[v17];
            if (0 === l36 && (l36 = u49, (p += g21) >= d28 && (g21 = 4 * h44 + 4 * r * (m18 - 1), p = f32 + (u49 + h44) * (m18 << 1), m18 >>= 1)), y13 === c57) p += 4;
            else {
                var w15 = t70[s70 + 3 * y13], N13 = t70[s70 + 3 * y13 + 1], L12 = t70[s70 + 3 * y13 + 2];
                n188[p++] = w15, n188[p++] = N13, n188[p++] = L12, n188[p++] = 255;
            }
            --l36;
        }
    };
}
function $t(t, e, r, n189) {
    for(var i150 = t[e++], o94 = 1 << i150, s71 = o94 + 1, c58 = s71 + 1, u50 = i150 + 1, h45 = (1 << u50) - 1, l37 = 0, f33 = 0, d29 = 0, p = t[e++], g22 = new Int32Array(4096), m19 = null;;){
        for(; l37 < 16 && 0 !== p;)f33 |= t[e++] << l37, l37 += 8, 1 === p ? p = t[e++] : --p;
        if (l37 < u50) break;
        var v18 = f33 & h45;
        if (f33 >>= u50, l37 -= u50, v18 !== o94) {
            if (v18 === s71) break;
            for(var b13 = v18 < c58 ? v18 : m19, y14 = 0, w16 = b13; w16 > o94;)w16 = g22[w16] >> 8, ++y14;
            var N14 = w16;
            if (d29 + y14 + (b13 !== v18 ? 1 : 0) > n189) return void a.log("Warning, gif stream longer than expected.");
            r[d29++] = N14;
            var L13 = d29 += y14;
            for(b13 !== v18 && (r[d29++] = N14), w16 = b13; y14--;)w16 = g22[w16], r[--L13] = 255 & w16, w16 >>= 8;
            null !== m19 && c58 < 4096 && (g22[c58++] = m19 << 8 | N14, c58 >= h45 + 1 && u50 < 12 && (++u50, h45 = h45 << 1 | 1)), m19 = v18;
        } else c58 = s71 + 1, h45 = (1 << (u50 = i150 + 1)) - 1, m19 = null;
    }
    return d29 !== n189 && a.log("Warning, gif stream shorter than expected."), r;
}
/**
 * @license
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ function Qt(t71) {
    var e47, r28, n190, i151, a109, o95 = Math.floor, s72 = new Array(64), c59 = new Array(64), u51 = new Array(64), h46 = new Array(64), l38 = new Array(65535), f34 = new Array(65535), d30 = new Array(64), p14 = new Array(64), g23 = [], m20 = 0, v19 = 7, b14 = new Array(64), y15 = new Array(64), w17 = new Array(64), N15 = new Array(256), L14 = new Array(2048), A14 = [
        0,
        1,
        5,
        6,
        14,
        15,
        27,
        28,
        2,
        4,
        7,
        13,
        16,
        26,
        29,
        42,
        3,
        8,
        12,
        17,
        25,
        30,
        41,
        43,
        9,
        11,
        18,
        24,
        31,
        40,
        44,
        53,
        10,
        19,
        23,
        32,
        39,
        45,
        52,
        54,
        20,
        22,
        33,
        38,
        46,
        51,
        55,
        60,
        21,
        34,
        37,
        47,
        50,
        56,
        59,
        61,
        35,
        36,
        48,
        49,
        57,
        58,
        62,
        63
    ], x9 = [
        0,
        0,
        1,
        5,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ], S11 = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
    ], _12 = [
        0,
        0,
        2,
        1,
        3,
        3,
        2,
        4,
        3,
        5,
        5,
        4,
        4,
        0,
        0,
        1,
        125
    ], P12 = [
        1,
        2,
        3,
        0,
        4,
        17,
        5,
        18,
        33,
        49,
        65,
        6,
        19,
        81,
        97,
        7,
        34,
        113,
        20,
        50,
        129,
        145,
        161,
        8,
        35,
        66,
        177,
        193,
        21,
        82,
        209,
        240,
        36,
        51,
        98,
        114,
        130,
        9,
        10,
        22,
        23,
        24,
        25,
        26,
        37,
        38,
        39,
        40,
        41,
        42,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250
    ], k11 = [
        0,
        0,
        3,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0
    ], I8 = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
    ], F8 = [
        0,
        0,
        2,
        1,
        2,
        4,
        4,
        3,
        4,
        7,
        5,
        4,
        4,
        0,
        1,
        2,
        119
    ], C8 = [
        0,
        1,
        2,
        3,
        17,
        4,
        5,
        33,
        49,
        6,
        18,
        65,
        81,
        7,
        97,
        113,
        19,
        34,
        50,
        129,
        8,
        20,
        66,
        145,
        161,
        177,
        193,
        9,
        35,
        51,
        82,
        240,
        21,
        98,
        114,
        209,
        10,
        22,
        36,
        52,
        225,
        37,
        241,
        23,
        24,
        25,
        26,
        38,
        39,
        40,
        41,
        42,
        53,
        54,
        55,
        56,
        57,
        58,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250
    ];
    function j8(t, e) {
        for(var r = 0, n191 = 0, i152 = new Array, a110 = 1; a110 <= 16; a110++){
            for(var o96 = 1; o96 <= t[a110]; o96++)i152[e[n191]] = [], i152[e[n191]][0] = r, i152[e[n191]][1] = a110, n191++, r++;
            r *= 2;
        }
        return i152;
    }
    function O7(t) {
        for(var e = t[0], r = t[1] - 1; r >= 0;)e & 1 << r && (m20 |= 1 << v19), r--, --v19 < 0 && (255 == m20 ? (B7(255), B7(0)) : B7(m20), v19 = 7, m20 = 0);
    }
    function B7(t) {
        g23.push(t);
    }
    function M6(t) {
        B7(t >> 8 & 255), B7(255 & t);
    }
    function E5(t72, e48, r29, n192, i153) {
        for(var a111, o97 = i153[0], s73 = i153[240], c60 = function(t, e) {
            var r, n193, i154, a112, o98, s74, c61, u53, h48, l39, f35 = 0;
            for(h48 = 0; h48 < 8; ++h48){
                r = t[f35], n193 = t[f35 + 1], i154 = t[f35 + 2], a112 = t[f35 + 3], o98 = t[f35 + 4], s74 = t[f35 + 5], c61 = t[f35 + 6];
                var p = r + (u53 = t[f35 + 7]), g25 = r - u53, m22 = n193 + c61, v21 = n193 - c61, b16 = i154 + s74, y17 = i154 - s74, w19 = a112 + o98, N16 = a112 - o98, L15 = p + w19, A15 = p - w19, x10 = m22 + b16, S12 = m22 - b16;
                t[f35] = L15 + x10, t[f35 + 4] = L15 - x10;
                var _13 = .707106781 * (S12 + A15);
                t[f35 + 2] = A15 + _13, t[f35 + 6] = A15 - _13;
                var P13 = .382683433 * ((L15 = N16 + y17) - (S12 = v21 + g25)), k12 = .5411961 * L15 + P13, I9 = 1.306562965 * S12 + P13, F9 = .707106781 * (x10 = y17 + v21), C9 = g25 + F9, j9 = g25 - F9;
                t[f35 + 5] = j9 + k12, t[f35 + 3] = j9 - k12, t[f35 + 1] = C9 + I9, t[f35 + 7] = C9 - I9, f35 += 8;
            }
            for(f35 = 0, h48 = 0; h48 < 8; ++h48){
                r = t[f35], n193 = t[f35 + 8], i154 = t[f35 + 16], a112 = t[f35 + 24], o98 = t[f35 + 32], s74 = t[f35 + 40], c61 = t[f35 + 48];
                var O8 = r + (u53 = t[f35 + 56]), B8 = r - u53, M7 = n193 + c61, E6 = n193 - c61, q5 = i154 + s74, D6 = i154 - s74, R6 = a112 + o98, T6 = a112 - o98, U3 = O8 + R6, z3 = O8 - R6, H3 = M7 + q5, W3 = M7 - q5;
                t[f35] = U3 + H3, t[f35 + 32] = U3 - H3;
                var V3 = .707106781 * (W3 + z3);
                t[f35 + 16] = z3 + V3, t[f35 + 48] = z3 - V3;
                var G3 = .382683433 * ((U3 = T6 + D6) - (W3 = E6 + B8)), Y3 = .5411961 * U3 + G3, J3 = 1.306562965 * W3 + G3, X3 = .707106781 * (H3 = D6 + E6), K3 = B8 + X3, Z3 = B8 - X3;
                t[f35 + 40] = Z3 + Y3, t[f35 + 24] = Z3 - Y3, t[f35 + 8] = K3 + J3, t[f35 + 56] = K3 - J3, f35++;
            }
            for(h48 = 0; h48 < 64; ++h48)l39 = t[h48] * e[h48], d30[h48] = l39 > 0 ? l39 + .5 | 0 : l39 - .5 | 0;
            return d30;
        }(t72, e48), u52 = 0; u52 < 64; ++u52)p14[A14[u52]] = c60[u52];
        var h47 = p14[0] - r29;
        r29 = p14[0], 0 == h47 ? O7(n192[0]) : (O7(n192[f34[a111 = 32767 + h47]]), O7(l38[a111]));
        for(var g24 = 63; g24 > 0 && 0 == p14[g24];)g24--;
        if (0 == g24) return O7(o97), r29;
        for(var m21, v20 = 1; v20 <= g24;){
            for(var b15 = v20; 0 == p14[v20] && v20 <= g24;)++v20;
            var y16 = v20 - b15;
            if (y16 >= 16) {
                m21 = y16 >> 4;
                for(var w18 = 1; w18 <= m21; ++w18)O7(s73);
                y16 &= 15;
            }
            a111 = 32767 + p14[v20], O7(i153[(y16 << 4) + f34[a111]]), O7(l38[a111]), v20++;
        }
        return 63 != g24 && O7(o97), r29;
    }
    function q4(t73) {
        (t73 = Math.min(Math.max(t73, 1), 100), a109 != t73) && (!function(t) {
            for(var e = [
                16,
                11,
                10,
                16,
                24,
                40,
                51,
                61,
                12,
                12,
                14,
                19,
                26,
                58,
                60,
                55,
                14,
                13,
                16,
                24,
                40,
                57,
                69,
                56,
                14,
                17,
                22,
                29,
                51,
                87,
                80,
                62,
                18,
                22,
                37,
                56,
                68,
                109,
                103,
                77,
                24,
                35,
                55,
                64,
                81,
                104,
                113,
                92,
                49,
                64,
                78,
                87,
                103,
                121,
                120,
                101,
                72,
                92,
                95,
                98,
                112,
                100,
                103,
                99
            ], r = 0; r < 64; r++){
                var n194 = o95((e[r] * t + 50) / 100);
                n194 = Math.min(Math.max(n194, 1), 255), s72[A14[r]] = n194;
            }
            for(var i155 = [
                17,
                18,
                24,
                47,
                99,
                99,
                99,
                99,
                18,
                21,
                26,
                66,
                99,
                99,
                99,
                99,
                24,
                26,
                56,
                99,
                99,
                99,
                99,
                99,
                47,
                66,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99,
                99
            ], a113 = 0; a113 < 64; a113++){
                var l40 = o95((i155[a113] * t + 50) / 100);
                l40 = Math.min(Math.max(l40, 1), 255), c59[A14[a113]] = l40;
            }
            for(var f36 = [
                1,
                1.387039845,
                1.306562965,
                1.175875602,
                1,
                .785694958,
                .5411961,
                .275899379
            ], d31 = 0, p = 0; p < 8; p++)for(var g26 = 0; g26 < 8; g26++)u51[d31] = 1 / (s72[A14[d31]] * f36[p] * f36[g26] * 8), h46[d31] = 1 / (c59[A14[d31]] * f36[p] * f36[g26] * 8), d31++;
        }(t73 < 50 ? Math.floor(5e3 / t73) : Math.floor(200 - 2 * t73)), a109 = t73);
    }
    this.encode = function(t74, a114) {
        a114 && q4(a114), g23 = new Array, m20 = 0, v19 = 7, M6(65496), M6(65504), M6(16), B7(74), B7(70), B7(73), B7(70), B7(0), B7(1), B7(1), B7(0), M6(1), M6(1), B7(0), B7(0), function() {
            M6(65499), M6(132), B7(0);
            for(var t = 0; t < 64; t++)B7(s72[t]);
            B7(1);
            for(var e = 0; e < 64; e++)B7(c59[e]);
        }(), function(t, e) {
            M6(65472), M6(17), B7(8), M6(e), M6(t), B7(3), B7(1), B7(17), B7(0), B7(2), B7(17), B7(1), B7(3), B7(17), B7(1);
        }(t74.width, t74.height), function() {
            M6(65476), M6(418), B7(0);
            for(var t = 0; t < 16; t++)B7(x9[t + 1]);
            for(var e = 0; e <= 11; e++)B7(S11[e]);
            B7(16);
            for(var r = 0; r < 16; r++)B7(_12[r + 1]);
            for(var n195 = 0; n195 <= 161; n195++)B7(P12[n195]);
            B7(1);
            for(var i156 = 0; i156 < 16; i156++)B7(k11[i156 + 1]);
            for(var a115 = 0; a115 <= 11; a115++)B7(I8[a115]);
            B7(17);
            for(var o100 = 0; o100 < 16; o100++)B7(F8[o100 + 1]);
            for(var s75 = 0; s75 <= 161; s75++)B7(C8[s75]);
        }(), M6(65498), M6(12), B7(3), B7(1), B7(0), B7(2), B7(17), B7(3), B7(17), B7(0), B7(63), B7(0);
        var o99 = 0, l41 = 0, f37 = 0;
        m20 = 0, v19 = 7, this.encode.displayName = "_encode_";
        for(var d32, p, N17, A16, j10, D7, R7, T7, U4, z4 = t74.data, H4 = t74.width, W4 = t74.height, V4 = 4 * H4, G4 = 0; G4 < W4;){
            for(d32 = 0; d32 < V4;){
                for(j10 = V4 * G4 + d32, R7 = -1, T7 = 0, U4 = 0; U4 < 64; U4++)D7 = j10 + (T7 = U4 >> 3) * V4 + (R7 = 4 * (7 & U4)), G4 + T7 >= W4 && (D7 -= V4 * (G4 + 1 + T7 - W4)), d32 + R7 >= V4 && (D7 -= d32 + R7 - V4 + 4), p = z4[D7++], N17 = z4[D7++], A16 = z4[D7++], b14[U4] = (L14[p] + L14[N17 + 256 >> 0] + L14[A16 + 512 >> 0] >> 16) - 128, y15[U4] = (L14[p + 768 >> 0] + L14[N17 + 1024 >> 0] + L14[A16 + 1280 >> 0] >> 16) - 128, w17[U4] = (L14[p + 1280 >> 0] + L14[N17 + 1536 >> 0] + L14[A16 + 1792 >> 0] >> 16) - 128;
                o99 = E5(b14, u51, o99, e47, n190), l41 = E5(y15, h46, l41, r28, i151), f37 = E5(w17, h46, f37, r28, i151), d32 += 32;
            }
            G4 += 8;
        }
        if (v19 >= 0) {
            var Y4 = [];
            Y4[1] = v19 + 1, Y4[0] = (1 << v19 + 1) - 1, O7(Y4);
        }
        return M6(65497), new Uint8Array(g23);
    }, t71 = t71 || 50, function() {
        for(var t = String.fromCharCode, e = 0; e < 256; e++)N15[e] = t(e);
    }(), e47 = j8(x9, S11), r28 = j8(k11, I8), n190 = j8(_12, P12), i151 = j8(F8, C8), function() {
        for(var t = 1, e = 2, r = 1; r <= 15; r++){
            for(var n196 = t; n196 < e; n196++)f34[32767 + n196] = r, l38[32767 + n196] = [], l38[32767 + n196][1] = r, l38[32767 + n196][0] = n196;
            for(var i157 = -(e - 1); i157 <= -t; i157++)f34[32767 + i157] = r, l38[32767 + i157] = [], l38[32767 + i157][1] = r, l38[32767 + i157][0] = e - 1 + i157;
            t <<= 1, e <<= 1;
        }
    }(), function() {
        for(var t = 0; t < 256; t++)L14[t] = 19595 * t, L14[t + 256 >> 0] = 38470 * t, L14[t + 512 >> 0] = 7471 * t + 32768, L14[t + 768 >> 0] = -11059 * t, L14[t + 1024 >> 0] = -21709 * t, L14[t + 1280 >> 0] = 32768 * t + 8421375, L14[t + 1536 >> 0] = -27439 * t, L14[t + 1792 >> 0] = -5329 * t;
    }(), q4(t71);
}
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function te(t, e) {
    if (this.pos = 0, this.buffer = t, this.datav = new DataView(t.buffer), this.is_with_alpha = !!e, this.bottom_up = !0, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === [
        "BM",
        "BA",
        "CI",
        "CP",
        "IC",
        "PT"
    ].indexOf(this.flag)) throw new Error("Invalid BMP File");
    this.parseHeader(), this.parseBGR();
}
function ee(t75) {
    function e49(t) {
        if (!t) throw Error("assert :P");
    }
    function r30(t, e, r) {
        for(var n198 = 0; 4 > n198; n198++)if (t[e + n198] != r.charCodeAt(n198)) return !0;
        return !1;
    }
    function n197(t, e, r, n199, i159) {
        for(var a117 = 0; a117 < i159; a117++)t[e + a117] = r[n199 + a117];
    }
    function i158(t, e, r, n200) {
        for(var i160 = 0; i160 < n200; i160++)t[e + i160] = r;
    }
    function a116(t) {
        return new Int32Array(t);
    }
    function o101(t, e) {
        for(var r = [], n201 = 0; n201 < t; n201++)r.push(new e);
        return r;
    }
    function s76(t76, e) {
        var r31 = [];
        return function t(r, n202, i161) {
            for(var a118 = i161[n202], o102 = 0; o102 < a118 && (r.push(i161.length > n202 + 1 ? [] : new e), !(i161.length < n202 + 1)); o102++)t(r[o102], n202 + 1, i161);
        }(r31, 0, t76), r31;
    }
    var c62 = function() {
        var t77 = this;
        function c63(t, e) {
            for(var r = 1 << e - 1 >>> 0; t & r;)r >>>= 1;
            return r ? (t & r - 1) + r : t;
        }
        function u55(t, r, n203, i162, a119) {
            e49(!(i162 % n203));
            do t[r + (i162 -= n203)] = a119;
            while (0 < i162)
        }
        function h50(t78, r32, n204, i163, o103) {
            if (e49(2328 >= o103), 512 >= o103) var s77 = a116(512);
            else if (null == (s77 = a116(o103))) return 0;
            return function(t, r, n205, i164, o104, s78) {
                var h51, f40, d35 = r, p = 1 << n205, g29 = a116(16), m25 = a116(16);
                for(e49(0 != o104), e49(null != i164), e49(null != t), e49(0 < n205), f40 = 0; f40 < o104; ++f40){
                    if (15 < i164[f40]) return 0;
                    ++g29[i164[f40]];
                }
                if (g29[0] == o104) return 0;
                for(m25[1] = 0, h51 = 1; 15 > h51; ++h51){
                    if (g29[h51] > 1 << h51) return 0;
                    m25[h51 + 1] = m25[h51] + g29[h51];
                }
                for(f40 = 0; f40 < o104; ++f40)h51 = i164[f40], 0 < i164[f40] && (s78[m25[h51]++] = f40);
                if (1 == m25[15]) return (i164 = new l43).g = 0, i164.value = s78[0], u55(t, d35, 1, p, i164), p;
                var v24, b19 = -1, y20 = p - 1, w22 = 0, N20 = 1, L18 = 1, A19 = 1 << n205;
                for(f40 = 0, h51 = 1, o104 = 2; h51 <= n205; ++h51, o104 <<= 1){
                    if (N20 += L18 <<= 1, 0 > (L18 -= g29[h51])) return 0;
                    for(; 0 < g29[h51]; --g29[h51])(i164 = new l43).g = h51, i164.value = s78[f40++], u55(t, d35 + w22, o104, A19, i164), w22 = c63(w22, h51);
                }
                for(h51 = n205 + 1, o104 = 2; 15 >= h51; ++h51, o104 <<= 1){
                    if (N20 += L18 <<= 1, 0 > (L18 -= g29[h51])) return 0;
                    for(; 0 < g29[h51]; --g29[h51]){
                        if (i164 = new l43, (w22 & y20) != b19) {
                            for(d35 += A19, v24 = 1 << (b19 = h51) - n205; 15 > b19 && !(0 >= (v24 -= g29[b19]));)++b19, v24 <<= 1;
                            p += A19 = 1 << (v24 = b19 - n205), t[r + (b19 = w22 & y20)].g = v24 + n205, t[r + b19].value = d35 - r - b19;
                        }
                        i164.g = h51 - n205, i164.value = s78[f40++], u55(t, d35 + (w22 >> n205), o104, A19, i164), w22 = c63(w22, h51);
                    }
                }
                return N20 != 2 * m25[15] - 1 ? 0 : p;
            }(t78, r32, n204, i163, o103, s77);
        }
        function l43() {
            this.value = this.g = 0;
        }
        function f39() {
            this.value = this.g = 0;
        }
        function d34() {
            this.G = o101(5, l43), this.H = a116(5), this.jc = this.Qb = this.qb = this.nd = 0, this.pd = o101(Dr, f39);
        }
        function p16(t, r, n206, i165) {
            e49(null != t), e49(null != r), e49(2147483648 > i165), t.Ca = 254, t.I = 0, t.b = -8, t.Ka = 0, t.oa = r, t.pa = n206, t.Jd = r, t.Yc = n206 + i165, t.Zc = 4 <= i165 ? n206 + i165 - 4 + 1 : n206, _14(t);
        }
        function g28(t, e) {
            for(var r = 0; 0 < e--;)r |= k13(t, 128) << e;
            return r;
        }
        function m24(t, e) {
            var r = g28(t, e);
            return P14(t) ? -r : r;
        }
        function v23(t, r, n207, i166) {
            var a120, o105 = 0;
            for(e49(null != t), e49(null != r), e49(4294967288 > i166), t.Sb = i166, t.Ra = 0, t.u = 0, t.h = 0, 4 < i166 && (i166 = 4), a120 = 0; a120 < i166; ++a120)o105 += r[n207 + a120] << 8 * a120;
            t.Ra = o105, t.bb = i166, t.oa = r, t.pa = n207;
        }
        function b18(t) {
            for(; 8 <= t.u && t.bb < t.Sb;)t.Ra >>>= 8, t.Ra += t.oa[t.pa + t.bb] << Ur - 8 >>> 0, ++t.bb, t.u -= 8;
            A18(t) && (t.h = 1, t.u = 0);
        }
        function y19(t, r) {
            if (e49(0 <= r), !t.h && r <= Tr) {
                var n208 = L17(t) & Rr[r];
                return t.u += r, b18(t), n208;
            }
            return t.h = 1, t.u = 0;
        }
        function w21() {
            this.b = this.Ca = this.I = 0, this.oa = [], this.pa = 0, this.Jd = [], this.Yc = 0, this.Zc = [], this.Ka = 0;
        }
        function N19() {
            this.Ra = 0, this.oa = [], this.h = this.u = this.bb = this.Sb = this.pa = 0;
        }
        function L17(t) {
            return t.Ra >>> (t.u & Ur - 1) >>> 0;
        }
        function A18(t) {
            return e49(t.bb <= t.Sb), t.h || t.bb == t.Sb && t.u > Ur;
        }
        function x11(t, e) {
            t.u = e, t.h = A18(t);
        }
        function S13(t) {
            t.u >= zr && (e49(t.u >= zr), b18(t));
        }
        function _14(t) {
            e49(null != t && null != t.oa), t.pa < t.Zc ? (t.I = (t.oa[t.pa++] | t.I << 8) >>> 0, t.b += 8) : (e49(null != t && null != t.oa), t.pa < t.Yc ? (t.b += 8, t.I = t.oa[t.pa++] | t.I << 8) : t.Ka ? t.b = 0 : (t.I <<= 8, t.b += 8, t.Ka = 1));
        }
        function P14(t) {
            return g28(t, 1);
        }
        function k13(t, e) {
            var r = t.Ca;
            0 > t.b && _14(t);
            var n209 = t.b, i167 = r * e >>> 8, a121 = (t.I >>> n209 > i167) + 0;
            for(a121 ? (r -= i167, t.I -= i167 + 1 << n209 >>> 0) : r = i167 + 1, n209 = r, i167 = 0; 256 <= n209;)i167 += 8, n209 >>= 8;
            return n209 = 7 ^ i167 + Hr[n209], t.b -= n209, t.Ca = (r << n209) - 1, a121;
        }
        function I10(t, e, r) {
            t[e + 0] = r >> 24 & 255, t[e + 1] = r >> 16 & 255, t[e + 2] = r >> 8 & 255, t[e + 3] = r >> 0 & 255;
        }
        function F10(t, e) {
            return t[e + 0] << 0 | t[e + 1] << 8;
        }
        function C10(t, e) {
            return F10(t, e) | t[e + 2] << 16;
        }
        function j11(t, e) {
            return F10(t, e) | F10(t, e + 2) << 16;
        }
        function O9(t, r) {
            var n210 = 1 << r;
            return e49(null != t), e49(0 < r), t.X = a116(n210), null == t.X ? 0 : (t.Mb = 32 - r, t.Xa = r, 1);
        }
        function B9(t, r) {
            e49(null != t), e49(null != r), e49(t.Xa == r.Xa), n197(r.X, 0, t.X, 0, 1 << r.Xa);
        }
        function M8() {
            this.X = [], this.Xa = this.Mb = 0;
        }
        function E7(t, r, n211, i168) {
            e49(null != n211), e49(null != i168);
            var a122 = n211[0], o106 = i168[0];
            return 0 == a122 && (a122 = (t * o106 + r / 2) / r), 0 == o106 && (o106 = (r * a122 + t / 2) / t), 0 >= a122 || 0 >= o106 ? 0 : (n211[0] = a122, i168[0] = o106, 1);
        }
        function q6(t, e) {
            return t + (1 << e) - 1 >>> e;
        }
        function D8(t, e) {
            return ((4278255360 & t) + (4278255360 & e) >>> 0 & 4278255360) + ((16711935 & t) + (16711935 & e) >>> 0 & 16711935) >>> 0;
        }
        function R8(e, r33) {
            t77[r33] = function(r, n212, i169, a123, o107, s79, c64) {
                var u56;
                for(u56 = 0; u56 < o107; ++u56){
                    var h52 = t77[e](s79[c64 + u56 - 1], i169, a123 + u56);
                    s79[c64 + u56] = D8(r[n212 + u56], h52);
                }
            };
        }
        function T8() {
            this.ud = this.hd = this.jd = 0;
        }
        function U5(t, e) {
            return ((4278124286 & (t ^ e)) >>> 1) + (t & e) >>> 0;
        }
        function z5(t) {
            return 0 <= t && 256 > t ? t : 0 > t ? 0 : 255 < t ? 255 : void 0;
        }
        function H5(t, e) {
            return z5(t + (t - e + .5 >> 1));
        }
        function W5(t, e, r) {
            return Math.abs(e - r) - Math.abs(t - r);
        }
        function V5(t, e, r, n213, i170, a124, o108) {
            for(n213 = a124[o108 - 1], r = 0; r < i170; ++r)a124[o108 + r] = n213 = D8(t[e + r], n213);
        }
        function G5(t, e, r, n214, i171) {
            var a125;
            for(a125 = 0; a125 < r; ++a125){
                var o109 = t[e + a125], s80 = o109 >> 8 & 255, c65 = 16711935 & (c65 = (c65 = 16711935 & o109) + ((s80 << 16) + s80));
                n214[i171 + a125] = (4278255360 & o109) + c65 >>> 0;
            }
        }
        function Y5(t, e) {
            e.jd = t >> 0 & 255, e.hd = t >> 8 & 255, e.ud = t >> 16 & 255;
        }
        function J4(t, e, r, n215, i172, a126) {
            var o110;
            for(o110 = 0; o110 < n215; ++o110){
                var s81 = e[r + o110], c66 = s81 >>> 8, u57 = s81, h53 = 255 & (h53 = (h53 = s81 >>> 16) + ((t.jd << 24 >> 24) * (c66 << 24 >> 24) >>> 5));
                u57 = 255 & (u57 = (u57 = u57 + ((t.hd << 24 >> 24) * (c66 << 24 >> 24) >>> 5)) + ((t.ud << 24 >> 24) * (h53 << 24 >> 24) >>> 5));
                i172[a126 + o110] = (4278255360 & s81) + (h53 << 16) + u57;
            }
        }
        function X4(e50, r34, n216, i173, a127) {
            t77[r34] = function(t, e, r, n217, o111, s82, c67, u58, h54) {
                for(n217 = c67; n217 < u58; ++n217)for(c67 = 0; c67 < h54; ++c67)o111[s82++] = a127(r[i173(t[e++])]);
            }, t77[e50] = function(e, r, o112, s83, c68, u59, h55) {
                var l44 = 8 >> e.b, f41 = e.Ea, d36 = e.K[0], p = e.w;
                if (8 > l44) for(e = (1 << e.b) - 1, p = (1 << l44) - 1; r < o112; ++r){
                    var g30, m26 = 0;
                    for(g30 = 0; g30 < f41; ++g30)g30 & e || (m26 = i173(s83[c68++])), u59[h55++] = a127(d36[m26 & p]), m26 >>= l44;
                }
                else t77["VP8LMapColor" + n216](s83, c68, d36, p, u59, h55, r, o112, f41);
            };
        }
        function K4(t, e, r, n218, i174) {
            for(r = e + r; e < r;){
                var a128 = t[e++];
                n218[i174++] = a128 >> 16 & 255, n218[i174++] = a128 >> 8 & 255, n218[i174++] = a128 >> 0 & 255;
            }
        }
        function Z4(t, e, r, n219, i175) {
            for(r = e + r; e < r;){
                var a129 = t[e++];
                n219[i175++] = a129 >> 16 & 255, n219[i175++] = a129 >> 8 & 255, n219[i175++] = a129 >> 0 & 255, n219[i175++] = a129 >> 24 & 255;
            }
        }
        function $3(t, e, r, n220, i176) {
            for(r = e + r; e < r;){
                var a130 = (o113 = t[e++]) >> 16 & 240 | o113 >> 12 & 15, o113 = o113 >> 0 & 240 | o113 >> 28 & 15;
                n220[i176++] = a130, n220[i176++] = o113;
            }
        }
        function Q3(t, e, r, n221, i177) {
            for(r = e + r; e < r;){
                var a131 = (o114 = t[e++]) >> 16 & 248 | o114 >> 13 & 7, o114 = o114 >> 5 & 224 | o114 >> 3 & 31;
                n221[i177++] = a131, n221[i177++] = o114;
            }
        }
        function tt3(t, e, r, n222, i178) {
            for(r = e + r; e < r;){
                var a132 = t[e++];
                n222[i178++] = a132 >> 0 & 255, n222[i178++] = a132 >> 8 & 255, n222[i178++] = a132 >> 16 & 255;
            }
        }
        function et3(t, e, r, i179, a133, o115) {
            if (0 == o115) for(r = e + r; e < r;)I10(i179, ((o115 = t[e++])[0] >> 24 | o115[1] >> 8 & 65280 | o115[2] << 8 & 16711680 | o115[3] << 24) >>> 0), a133 += 32;
            else n197(i179, a133, t, e, r);
        }
        function rt3(e, r) {
            t77[r][0] = t77[e + "0"], t77[r][1] = t77[e + "1"], t77[r][2] = t77[e + "2"], t77[r][3] = t77[e + "3"], t77[r][4] = t77[e + "4"], t77[r][5] = t77[e + "5"], t77[r][6] = t77[e + "6"], t77[r][7] = t77[e + "7"], t77[r][8] = t77[e + "8"], t77[r][9] = t77[e + "9"], t77[r][10] = t77[e + "10"], t77[r][11] = t77[e + "11"], t77[r][12] = t77[e + "12"], t77[r][13] = t77[e + "13"], t77[r][14] = t77[e + "0"], t77[r][15] = t77[e + "0"];
        }
        function nt3(t) {
            return t == Hn || t == Wn || t == Vn || t == Gn;
        }
        function it3() {
            this.eb = [], this.size = this.A = this.fb = 0;
        }
        function at3() {
            this.y = [], this.f = [], this.ea = [], this.F = [], this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
        }
        function ot3() {
            this.Rd = this.height = this.width = this.S = 0, this.f = {}, this.f.RGBA = new it3, this.f.kb = new at3, this.sd = null;
        }
        function st3() {
            this.width = [
                0
            ], this.height = [
                0
            ], this.Pd = [
                0
            ], this.Qd = [
                0
            ], this.format = [
                0
            ];
        }
        function ct3() {
            this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
        }
        function ut3(t) {
            return alert("todo:WebPSamplerProcessPlane"), t.T;
        }
        function ht3(t, e) {
            var r = t.T, i180 = e.ba.f.RGBA, a134 = i180.eb, o116 = i180.fb + t.ka * i180.A, s84 = vi[e.ba.S], c69 = t.y, u60 = t.O, h56 = t.f, l45 = t.N, f42 = t.ea, d37 = t.W, p = e.cc, g31 = e.dc, m27 = e.Mc, v25 = e.Nc, b20 = t.ka, y21 = t.ka + t.T, w23 = t.U, N21 = w23 + 1 >> 1;
            for(0 == b20 ? s84(c69, u60, null, null, h56, l45, f42, d37, h56, l45, f42, d37, a134, o116, null, null, w23) : (s84(e.ec, e.fc, c69, u60, p, g31, m27, v25, h56, l45, f42, d37, a134, o116 - i180.A, a134, o116, w23), ++r); b20 + 2 < y21; b20 += 2)p = h56, g31 = l45, m27 = f42, v25 = d37, l45 += t.Rc, d37 += t.Rc, o116 += 2 * i180.A, s84(c69, (u60 += 2 * t.fa) - t.fa, c69, u60, p, g31, m27, v25, h56, l45, f42, d37, a134, o116 - i180.A, a134, o116, w23);
            return u60 += t.fa, t.j + y21 < t.o ? (n197(e.ec, e.fc, c69, u60, w23), n197(e.cc, e.dc, h56, l45, N21), n197(e.Mc, e.Nc, f42, d37, N21), r--) : 1 & y21 || s84(c69, u60, null, null, h56, l45, f42, d37, h56, l45, f42, d37, a134, o116 + i180.A, null, null, w23), r;
        }
        function lt2(t, r, n223) {
            var i181 = t.F, a135 = [
                t.J
            ];
            if (null != i181) {
                var o117 = t.U, s85 = r.ba.S, c70 = s85 == Tn || s85 == Vn;
                r = r.ba.f.RGBA;
                var u61 = [
                    0
                ], h57 = t.ka;
                u61[0] = t.T, t.Kb && (0 == h57 ? --u61[0] : (--h57, a135[0] -= t.width), t.j + t.ka + t.T == t.o && (u61[0] = t.o - t.j - h57));
                var l46 = r.eb;
                h57 = r.fb + h57 * r.A;
                t = Sn(i181, a135[0], t.width, o117, u61, l46, h57 + (c70 ? 0 : 3), r.A), e49(n223 == u61), t && nt3(s85) && An(l46, h57, c70, o117, u61, r.A);
            }
            return 0;
        }
        function ft3(t) {
            var e = t.ma, r = e.ba.S, n224 = 11 > r, i182 = r == qn || r == Rn || r == Tn || r == Un || 12 == r || nt3(r);
            if (e.memory = null, e.Ib = null, e.Jb = null, e.Nd = null, !Mr(e.Oa, t, i182 ? 11 : 12)) return 0;
            if (i182 && nt3(r) && br(), t.da) alert("todo:use_scaling");
            else {
                if (n224) {
                    if (e.Ib = ut3, t.Kb) {
                        if (r = t.U + 1 >> 1, e.memory = a116(t.U + 2 * r), null == e.memory) return 0;
                        e.ec = e.memory, e.fc = 0, e.cc = e.ec, e.dc = e.fc + t.U, e.Mc = e.cc, e.Nc = e.dc + r, e.Ib = ht3, br();
                    }
                } else alert("todo:EmitYUV");
                i182 && (e.Jb = lt2, n224 && mr());
            }
            if (n224 && !Ci) {
                for(t = 0; 256 > t; ++t)ji[t] = 89858 * (t - 128) + _i >> Si, Mi[t] = -22014 * (t - 128) + _i, Bi[t] = -45773 * (t - 128), Oi[t] = 113618 * (t - 128) + _i >> Si;
                for(t = Pi; t < ki; ++t)e = 76283 * (t - 16) + _i >> Si, Ei[t - Pi] = Vt2(e, 255), qi[t - Pi] = Vt2(e + 8 >> 4, 15);
                Ci = 1;
            }
            return 1;
        }
        function dt3(t) {
            var r = t.ma, n225 = t.U, i183 = t.T;
            return e49(!(1 & t.ka)), 0 >= n225 || 0 >= i183 ? 0 : (n225 = r.Ib(t, r), null != r.Jb && r.Jb(t, r, n225), r.Dc += n225, 1);
        }
        function pt2(t) {
            t.ma.memory = null;
        }
        function gt2(t, e, r, n226) {
            return 47 != y19(t, 8) ? 0 : (e[0] = y19(t, 14) + 1, r[0] = y19(t, 14) + 1, n226[0] = y19(t, 1), 0 != y19(t, 3) ? 0 : !t.h);
        }
        function mt2(t, e) {
            if (4 > t) return t + 1;
            var r = t - 2 >> 1;
            return (2 + (1 & t) << r) + y19(e, r) + 1;
        }
        function vt2(t, e) {
            var r;
            return 120 < e ? e - 120 : 1 <= (r = ((r = $n[e - 1]) >> 4) * t + (8 - (15 & r))) ? r : 1;
        }
        function bt2(t, e, r) {
            var n227 = L17(r), i184 = t[e += 255 & n227].g - 8;
            return 0 < i184 && (x11(r, r.u + 8), n227 = L17(r), e += t[e].value, e += n227 & (1 << i184) - 1), x11(r, r.u + t[e].g), t[e].value;
        }
        function yt2(t, r, n228) {
            return n228.g += t.g, n228.value += t.value << r >>> 0, e49(8 >= n228.g), t.g;
        }
        function wt2(t, r, n229) {
            var i185 = t.xc;
            return e49((r = 0 == i185 ? 0 : t.vc[t.md * (n229 >> i185) + (r >> i185)]) < t.Wb), t.Ya[r];
        }
        function Nt2(t, r, i186, a136) {
            var o118 = t.ab, s86 = t.c * r, c71 = t.C;
            r = c71 + r;
            var u62 = i186, h58 = a136;
            for(a136 = t.Ta, i186 = t.Ua; 0 < o118--;){
                var l47 = t.gc[o118], f43 = c71, d38 = r, p = u62, g32 = h58, m28 = (h58 = a136, u62 = i186, l47.Ea);
                switch(e49(f43 < d38), e49(d38 <= l47.nc), l47.hc){
                    case 2:
                        Gr(p, g32, (d38 - f43) * m28, h58, u62);
                        break;
                    case 0:
                        var v26 = f43, b21 = d38, y22 = h58, w24 = u62, N22 = (_15 = l47).Ea;
                        0 == v26 && (Wr(p, g32, null, null, 1, y22, w24), V5(p, g32 + 1, 0, 0, N22 - 1, y22, w24 + 1), g32 += N22, w24 += N22, ++v26);
                        for(var L19 = 1 << _15.b, A20 = L19 - 1, x12 = q6(N22, _15.b), S14 = _15.K, _15 = _15.w + (v26 >> _15.b) * x12; v26 < b21;){
                            var P15 = S14, k14 = _15, I11 = 1;
                            for(Vr(p, g32, y22, w24 - N22, 1, y22, w24); I11 < N22;){
                                var F11 = (I11 & ~A20) + L19;
                                F11 > N22 && (F11 = N22), (0, Zr[P15[k14++] >> 8 & 15])(p, g32 + +I11, y22, w24 + I11 - N22, F11 - I11, y22, w24 + I11), I11 = F11;
                            }
                            g32 += N22, w24 += N22, ++v26 & A20 || (_15 += x12);
                        }
                        d38 != l47.nc && n197(h58, u62 - m28, h58, u62 + (d38 - f43 - 1) * m28, m28);
                        break;
                    case 1:
                        for(m28 = p, b21 = g32, N22 = (p = l47.Ea) - (w24 = p & ~(y22 = (g32 = 1 << l47.b) - 1)), v26 = q6(p, l47.b), L19 = l47.K, l47 = l47.w + (f43 >> l47.b) * v26; f43 < d38;){
                            for(A20 = L19, x12 = l47, S14 = new T8, _15 = b21 + w24, P15 = b21 + p; b21 < _15;)Y5(A20[x12++], S14), $r(S14, m28, b21, g32, h58, u62), b21 += g32, u62 += g32;
                            b21 < P15 && (Y5(A20[x12++], S14), $r(S14, m28, b21, N22, h58, u62), b21 += N22, u62 += N22), ++f43 & y22 || (l47 += v26);
                        }
                        break;
                    case 3:
                        if (p == h58 && g32 == u62 && 0 < l47.b) {
                            for(b21 = h58, p = m28 = u62 + (d38 - f43) * m28 - (w24 = (d38 - f43) * q6(l47.Ea, l47.b)), g32 = h58, y22 = u62, v26 = [], w24 = (N22 = w24) - 1; 0 <= w24; --w24)v26[w24] = g32[y22 + w24];
                            for(w24 = N22 - 1; 0 <= w24; --w24)b21[p + w24] = v26[w24];
                            Yr(l47, f43, d38, h58, m28, h58, u62);
                        } else Yr(l47, f43, d38, p, g32, h58, u62);
                }
                u62 = a136, h58 = i186;
            }
            h58 != i186 && n197(a136, i186, u62, h58, s86);
        }
        function Lt2(t, r) {
            var n230 = t.V, i187 = t.Ba + t.c * t.C, a137 = r - t.C;
            if (e49(r <= t.l.o), e49(16 >= a137), 0 < a137) {
                var o119 = t.l, s87 = t.Ta, c72 = t.Ua, u63 = o119.width;
                if (Nt2(t, a137, n230, i187), a137 = c72 = [
                    c72
                ], e49((n230 = t.C) < (i187 = r)), e49(o119.v < o119.va), i187 > o119.o && (i187 = o119.o), n230 < o119.j) {
                    var h59 = o119.j - n230;
                    n230 = o119.j;
                    a137[0] += h59 * u63;
                }
                if (n230 >= i187 ? n230 = 0 : (a137[0] += 4 * o119.v, o119.ka = n230 - o119.j, o119.U = o119.va - o119.v, o119.T = i187 - n230, n230 = 1), n230) {
                    if (c72 = c72[0], 11 > (n230 = t.ca).S) {
                        var l48 = n230.f.RGBA, f44 = (i187 = n230.S, a137 = o119.U, o119 = o119.T, h59 = l48.eb, l48.A), d39 = o119;
                        for(l48 = l48.fb + t.Ma * l48.A; 0 < d39--;){
                            var p = s87, g33 = c72, m29 = a137, v27 = h59, b22 = l48;
                            switch(i187){
                                case En:
                                    Qr(p, g33, m29, v27, b22);
                                    break;
                                case qn:
                                    tn(p, g33, m29, v27, b22);
                                    break;
                                case Hn:
                                    tn(p, g33, m29, v27, b22), An(v27, b22, 0, m29, 1, 0);
                                    break;
                                case Dn:
                                    nn(p, g33, m29, v27, b22);
                                    break;
                                case Rn:
                                    et3(p, g33, m29, v27, b22, 1);
                                    break;
                                case Wn:
                                    et3(p, g33, m29, v27, b22, 1), An(v27, b22, 0, m29, 1, 0);
                                    break;
                                case Tn:
                                    et3(p, g33, m29, v27, b22, 0);
                                    break;
                                case Vn:
                                    et3(p, g33, m29, v27, b22, 0), An(v27, b22, 1, m29, 1, 0);
                                    break;
                                case Un:
                                    en(p, g33, m29, v27, b22);
                                    break;
                                case Gn:
                                    en(p, g33, m29, v27, b22), xn(v27, b22, m29, 1, 0);
                                    break;
                                case zn:
                                    rn(p, g33, m29, v27, b22);
                                    break;
                                default:
                                    e49(0);
                            }
                            c72 += u63, l48 += f44;
                        }
                        t.Ma += o119;
                    } else alert("todo:EmitRescaledRowsYUVA");
                    e49(t.Ma <= n230.height);
                }
            }
            t.C = r, e49(t.C <= t.i);
        }
        function At2(t) {
            var e;
            if (0 < t.ua) return 0;
            for(e = 0; e < t.Wb; ++e){
                var r = t.Ya[e].G, n231 = t.Ya[e].H;
                if (0 < r[1][n231[1] + 0].g || 0 < r[2][n231[2] + 0].g || 0 < r[3][n231[3] + 0].g) return 0;
            }
            return 1;
        }
        function xt2(t, r, n232, i188, a138, o120) {
            if (0 != t.Z) {
                var s88 = t.qd, c73 = t.rd;
                for(e49(null != mi[t.Z]); r < n232; ++r)mi[t.Z](s88, c73, i188, a138, i188, a138, o120), s88 = i188, c73 = a138, a138 += o120;
                t.qd = s88, t.rd = c73;
            }
        }
        function St2(t, r) {
            var n233 = t.l.ma, i189 = 0 == n233.Z || 1 == n233.Z ? t.l.j : t.C;
            i189 = t.C < i189 ? i189 : t.C;
            if (e49(r <= t.l.o), r > i189) {
                var a139 = t.l.width, o121 = n233.ca, s89 = n233.tb + a139 * i189, c74 = t.V, u64 = t.Ba + t.c * i189, h60 = t.gc;
                e49(1 == t.ab), e49(3 == h60[0].hc), Xr(h60[0], i189, r, c74, u64, o121, s89), xt2(n233, i189, r, o121, s89, a139);
            }
            t.C = t.Ma = r;
        }
        function _t2(t, r, n234, i190, a140, o122, s90) {
            var c75 = t.$ / i190, u65 = t.$ % i190, h61 = t.m, l49 = t.s, f45 = n234 + t.$, d40 = f45;
            a140 = n234 + i190 * a140;
            var p = n234 + i190 * o122, g34 = 280 + l49.ua, m30 = t.Pb ? c75 : 16777216, v28 = 0 < l49.ua ? l49.Wa : null, b23 = l49.wc, y23 = f45 < p ? wt2(l49, u65, c75) : null;
            e49(t.C < o122), e49(p <= a140);
            var w25 = !1;
            t: for(;;){
                for(; w25 || f45 < p;){
                    var N23 = 0;
                    if (c75 >= m30) {
                        var _16 = f45 - n234;
                        e49((m30 = t).Pb), m30.wd = m30.m, m30.xd = _16, 0 < m30.s.ua && B9(m30.s.Wa, m30.s.vb), m30 = c75 + ti;
                    }
                    if (u65 & b23 || (y23 = wt2(l49, u65, c75)), e49(null != y23), y23.Qb && (r[f45] = y23.qb, w25 = !0), !w25) {
                        if (S13(h61), y23.jc) {
                            N23 = h61, _16 = r;
                            var P16 = f45, k15 = y23.pd[L17(N23) & Dr - 1];
                            e49(y23.jc), 256 > k15.g ? (x11(N23, N23.u + k15.g), _16[P16] = k15.value, N23 = 0) : (x11(N23, N23.u + k15.g - 256), e49(256 <= k15.value), N23 = k15.value), 0 == N23 && (w25 = !0);
                        } else N23 = bt2(y23.G[0], y23.H[0], h61);
                    }
                    if (h61.h) break;
                    if (w25 || 256 > N23) {
                        if (!w25) {
                            if (y23.nd) r[f45] = (y23.qb | N23 << 8) >>> 0;
                            else {
                                if (S13(h61), w25 = bt2(y23.G[1], y23.H[1], h61), S13(h61), _16 = bt2(y23.G[2], y23.H[2], h61), P16 = bt2(y23.G[3], y23.H[3], h61), h61.h) break;
                                r[f45] = (P16 << 24 | w25 << 16 | N23 << 8 | _16) >>> 0;
                            }
                        }
                        if (w25 = !1, ++f45, ++u65 >= i190 && (u65 = 0, ++c75, null != s90 && c75 <= o122 && !(c75 % 16) && s90(t, c75), null != v28)) for(; d40 < f45;)N23 = r[d40++], v28.X[(506832829 * N23 & 4294967295) >>> v28.Mb] = N23;
                    } else if (280 > N23) {
                        if (N23 = mt2(N23 - 256, h61), _16 = bt2(y23.G[4], y23.H[4], h61), S13(h61), _16 = vt2(i190, _16 = mt2(_16, h61)), h61.h) break;
                        if (f45 - n234 < _16 || a140 - f45 < N23) break t;
                        for(P16 = 0; P16 < N23; ++P16)r[f45 + P16] = r[f45 + P16 - _16];
                        for(f45 += N23, u65 += N23; u65 >= i190;)u65 -= i190, ++c75, null != s90 && c75 <= o122 && !(c75 % 16) && s90(t, c75);
                        if (e49(f45 <= a140), u65 & b23 && (y23 = wt2(l49, u65, c75)), null != v28) for(; d40 < f45;)N23 = r[d40++], v28.X[(506832829 * N23 & 4294967295) >>> v28.Mb] = N23;
                    } else {
                        if (!(N23 < g34)) break t;
                        for(w25 = N23 - 280, e49(null != v28); d40 < f45;)N23 = r[d40++], v28.X[(506832829 * N23 & 4294967295) >>> v28.Mb] = N23;
                        N23 = f45, e49(!(w25 >>> (_16 = v28).Xa)), r[N23] = _16.X[w25], w25 = !0;
                    }
                    w25 || e49(h61.h == A18(h61));
                }
                if (t.Pb && h61.h && f45 < a140) e49(t.m.h), t.a = 5, t.m = t.wd, t.$ = t.xd, 0 < t.s.ua && B9(t.s.vb, t.s.Wa);
                else {
                    if (h61.h) break t;
                    null != s90 && s90(t, c75 > o122 ? o122 : c75), t.a = 0, t.$ = f45 - n234;
                }
                return 1;
            }
            return t.a = 3, 0;
        }
        function Pt2(t) {
            e49(null != t), t.vc = null, t.yc = null, t.Ya = null;
            var r = t.Wa;
            null != r && (r.X = null), t.vb = null, e49(null != t);
        }
        function kt2() {
            var e = new or;
            return null == e ? null : (e.a = 0, e.xb = gi, rt3("Predictor", "VP8LPredictors"), rt3("Predictor", "VP8LPredictors_C"), rt3("PredictorAdd", "VP8LPredictorsAdd"), rt3("PredictorAdd", "VP8LPredictorsAdd_C"), Gr = G5, $r = J4, Qr = K4, tn = Z4, en = $3, rn = Q3, nn = tt3, t77.VP8LMapColor32b = Jr, t77.VP8LMapColor8b = Kr, e);
        }
        function It2(t, r, n235, s91, c76) {
            var u66 = 1, f46 = [
                t
            ], p = [
                r
            ], g35 = s91.m, m31 = s91.s, v29 = null, b24 = 0;
            t: for(;;){
                if (n235) for(; u66 && y19(g35, 1);){
                    var w26 = f46, N24 = p, A21 = s91, _17 = 1, P17 = A21.m, k16 = A21.gc[A21.ab], I12 = y19(P17, 2);
                    if (A21.Oc & 1 << I12) u66 = 0;
                    else {
                        switch(A21.Oc |= 1 << I12, k16.hc = I12, k16.Ea = w26[0], k16.nc = N24[0], k16.K = [
                            null
                        ], ++A21.ab, e49(4 >= A21.ab), I12){
                            case 0:
                            case 1:
                                k16.b = y19(P17, 3) + 2, _17 = It2(q6(k16.Ea, k16.b), q6(k16.nc, k16.b), 0, A21, k16.K), k16.K = k16.K[0];
                                break;
                            case 3:
                                var F12, C11 = y19(P17, 8) + 1, j12 = 16 < C11 ? 0 : 4 < C11 ? 1 : 2 < C11 ? 2 : 3;
                                if (w26[0] = q6(k16.Ea, j12), k16.b = j12, F12 = _17 = It2(C11, 1, 0, A21, k16.K)) {
                                    var B10, M9 = C11, E8 = k16, R9 = 1 << (8 >> E8.b), T9 = a116(R9);
                                    if (null == T9) F12 = 0;
                                    else {
                                        var U6 = E8.K[0], z6 = E8.w;
                                        for(T9[0] = E8.K[0][0], B10 = 1; B10 < 1 * M9; ++B10)T9[B10] = D8(U6[z6 + B10], T9[B10 - 1]);
                                        for(; B10 < 4 * R9; ++B10)T9[B10] = 0;
                                        E8.K[0] = null, E8.K[0] = T9, F12 = 1;
                                    }
                                }
                                _17 = F12;
                                break;
                            case 2:
                                break;
                            default:
                                e49(0);
                        }
                        u66 = _17;
                    }
                }
                if (f46 = f46[0], p = p[0], u66 && y19(g35, 1) && !(u66 = 1 <= (b24 = y19(g35, 4)) && 11 >= b24)) {
                    s91.a = 3;
                    break t;
                }
                var H6;
                if (H6 = u66) e: {
                    var W6, V6, G6, Y6 = s91, J5 = f46, X5 = p, K5 = b24, Z5 = n235, $4 = Y6.m, Q4 = Y6.s, tt4 = [
                        null
                    ], et4 = 1, rt4 = 0, nt4 = Qn[K5];
                    r: for(;;){
                        if (Z5 && y19($4, 1)) {
                            var it4 = y19($4, 3) + 2, at4 = q6(J5, it4), ot4 = q6(X5, it4), st4 = at4 * ot4;
                            if (!It2(at4, ot4, 0, Y6, tt4)) break r;
                            for(tt4 = tt4[0], Q4.xc = it4, W6 = 0; W6 < st4; ++W6){
                                var ct4 = tt4[W6] >> 8 & 65535;
                                tt4[W6] = ct4, ct4 >= et4 && (et4 = ct4 + 1);
                            }
                        }
                        if ($4.h) break r;
                        for(V6 = 0; 5 > V6; ++V6){
                            var ut4 = Xn[V6];
                            !V6 && 0 < K5 && (ut4 += 1 << K5), rt4 < ut4 && (rt4 = ut4);
                        }
                        var ht4 = o101(et4 * nt4, l43), lt3 = et4, ft4 = o101(lt3, d34);
                        if (null == ft4) var dt4 = null;
                        else e49(65536 >= lt3), dt4 = ft4;
                        var pt3 = a116(rt4);
                        if (null == dt4 || null == pt3 || null == ht4) {
                            Y6.a = 1;
                            break r;
                        }
                        var gt3 = ht4;
                        for(W6 = G6 = 0; W6 < et4; ++W6){
                            var mt3 = dt4[W6], vt3 = mt3.G, bt3 = mt3.H, wt3 = 0, Nt3 = 1, Lt3 = 0;
                            for(V6 = 0; 5 > V6; ++V6){
                                ut4 = Xn[V6], vt3[V6] = gt3, bt3[V6] = G6, !V6 && 0 < K5 && (ut4 += 1 << K5);
                                n: {
                                    var At3, xt3 = ut4, St3 = Y6, kt3 = pt3, Ft3 = gt3, Ct3 = G6, jt3 = 0, Ot3 = St3.m, Bt3 = y19(Ot3, 1);
                                    if (i158(kt3, 0, 0, xt3), Bt3) {
                                        var Mt3 = y19(Ot3, 1) + 1, Et3 = y19(Ot3, 1), qt3 = y19(Ot3, 0 == Et3 ? 1 : 8);
                                        kt3[qt3] = 1, 2 == Mt3 && (kt3[qt3 = y19(Ot3, 8)] = 1);
                                        var Dt = 1;
                                    } else {
                                        var Rt3 = a116(19), Tt3 = y19(Ot3, 4) + 4;
                                        if (19 < Tt3) {
                                            St3.a = 3;
                                            var Ut = 0;
                                            break n;
                                        }
                                        for(At3 = 0; At3 < Tt3; ++At3)Rt3[Zn[At3]] = y19(Ot3, 3);
                                        var zt3 = void 0, Ht3 = void 0, Wt3 = St3, Vt3 = Rt3, Gt3 = xt3, Yt3 = kt3, Jt3 = 0, Xt3 = Wt3.m, Kt3 = 8, Zt3 = o101(128, l43);
                                        i: for(; h50(Zt3, 0, 7, Vt3, 19);){
                                            if (y19(Xt3, 1)) {
                                                var $t3 = 2 + 2 * y19(Xt3, 3);
                                                if ((zt3 = 2 + y19(Xt3, $t3)) > Gt3) break i;
                                            } else zt3 = Gt3;
                                            for(Ht3 = 0; Ht3 < Gt3 && zt3--;){
                                                S13(Xt3);
                                                var Qt3 = Zt3[0 + (127 & L17(Xt3))];
                                                x11(Xt3, Xt3.u + Qt3.g);
                                                var te3 = Qt3.value;
                                                if (16 > te3) Yt3[Ht3++] = te3, 0 != te3 && (Kt3 = te3);
                                                else {
                                                    var ee3 = 16 == te3, re3 = te3 - 16, ne3 = Jn[re3], ie3 = y19(Xt3, Yn[re3]) + ne3;
                                                    if (Ht3 + ie3 > Gt3) break i;
                                                    for(var ae3 = ee3 ? Kt3 : 0; 0 < ie3--;)Yt3[Ht3++] = ae3;
                                                }
                                            }
                                            Jt3 = 1;
                                            break i;
                                        }
                                        Jt3 || (Wt3.a = 3), Dt = Jt3;
                                    }
                                    (Dt = Dt && !Ot3.h) && (jt3 = h50(Ft3, Ct3, 8, kt3, xt3)), Dt && 0 != jt3 ? Ut = jt3 : (St3.a = 3, Ut = 0);
                                }
                                if (0 == Ut) break r;
                                if (Nt3 && 1 == Kn[V6] && (Nt3 = 0 == gt3[G6].g), wt3 += gt3[G6].g, G6 += Ut, 3 >= V6) {
                                    var oe3, se3 = pt3[0];
                                    for(oe3 = 1; oe3 < ut4; ++oe3)pt3[oe3] > se3 && (se3 = pt3[oe3]);
                                    Lt3 += se3;
                                }
                            }
                            if (mt3.nd = Nt3, mt3.Qb = 0, Nt3 && (mt3.qb = (vt3[3][bt3[3] + 0].value << 24 | vt3[1][bt3[1] + 0].value << 16 | vt3[2][bt3[2] + 0].value) >>> 0, 0 == wt3 && 256 > vt3[0][bt3[0] + 0].value && (mt3.Qb = 1, mt3.qb += vt3[0][bt3[0] + 0].value << 8)), mt3.jc = !mt3.Qb && 6 > Lt3, mt3.jc) {
                                var ce3, ue3 = mt3;
                                for(ce3 = 0; ce3 < Dr; ++ce3){
                                    var he3 = ce3, le3 = ue3.pd[he3], fe3 = ue3.G[0][ue3.H[0] + he3];
                                    256 <= fe3.value ? (le3.g = fe3.g + 256, le3.value = fe3.value) : (le3.g = 0, le3.value = 0, he3 >>= yt2(fe3, 8, le3), he3 >>= yt2(ue3.G[1][ue3.H[1] + he3], 16, le3), he3 >>= yt2(ue3.G[2][ue3.H[2] + he3], 0, le3), yt2(ue3.G[3][ue3.H[3] + he3], 24, le3));
                                }
                            }
                        }
                        Q4.vc = tt4, Q4.Wb = et4, Q4.Ya = dt4, Q4.yc = ht4, H6 = 1;
                        break e;
                    }
                    H6 = 0;
                }
                if (!(u66 = H6)) {
                    s91.a = 3;
                    break t;
                }
                if (0 < b24) {
                    if (m31.ua = 1 << b24, !O9(m31.Wa, b24)) {
                        s91.a = 1, u66 = 0;
                        break t;
                    }
                } else m31.ua = 0;
                var de3 = s91, pe3 = f46, ge3 = p, me3 = de3.s, ve3 = me3.xc;
                if (de3.c = pe3, de3.i = ge3, me3.md = q6(pe3, ve3), me3.wc = 0 == ve3 ? -1 : (1 << ve3) - 1, n235) {
                    s91.xb = pi;
                    break t;
                }
                if (null == (v29 = a116(f46 * p))) {
                    s91.a = 1, u66 = 0;
                    break t;
                }
                u66 = (u66 = _t2(s91, v29, 0, f46, p, p, null)) && !g35.h;
                break t;
            }
            return u66 ? (null != c76 ? c76[0] = v29 : (e49(null == v29), e49(n235)), s91.$ = 0, n235 || Pt2(m31)) : Pt2(m31), u66;
        }
        function Ft2(t, r) {
            var n236 = t.c * t.i, i191 = n236 + r + 16 * r;
            return e49(t.c <= r), t.V = a116(i191), null == t.V ? (t.Ta = null, t.Ua = 0, t.a = 1, 0) : (t.Ta = t.V, t.Ua = t.Ba + n236 + r, 1);
        }
        function Ct2(t, r) {
            var n237 = t.C, i192 = r - n237, a141 = t.V, o123 = t.Ba + t.c * n237;
            for(e49(r <= t.l.o); 0 < i192;){
                var s92 = 16 < i192 ? 16 : i192, c77 = t.l.ma, u67 = t.l.width, h62 = u67 * s92, l50 = c77.ca, f47 = c77.tb + u67 * n237, d41 = t.Ta, p = t.Ua;
                Nt2(t, s92, a141, o123), _n(d41, p, l50, f47, h62), xt2(c77, n237, n237 + s92, l50, f47, u67), i192 -= s92, a141 += s92 * t.c, n237 += s92;
            }
            e49(n237 == r), t.C = t.Ma = r;
        }
        function jt2() {
            this.ub = this.yd = this.td = this.Rb = 0;
        }
        function Ot2() {
            this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
        }
        function Bt2() {
            this.Fb = this.Bb = this.Cb = 0, this.Zb = a116(4), this.Lb = a116(4);
        }
        function Mt2() {
            this.Yb = function() {
                var t79 = [];
                return function t(e, r, n238) {
                    for(var i193 = n238[r], a142 = 0; a142 < i193 && (e.push(n238.length > r + 1 ? [] : 0), !(n238.length < r + 1)); a142++)t(e[a142], r + 1, n238);
                }(t79, 0, [
                    3,
                    11
                ]), t79;
            }();
        }
        function Et2() {
            this.jb = a116(3), this.Wc = s76([
                4,
                8
            ], Mt2), this.Xc = s76([
                4,
                17
            ], Mt2);
        }
        function qt2() {
            this.Pc = this.wb = this.Tb = this.zd = 0, this.vd = new a116(4), this.od = new a116(4);
        }
        function Dt3() {
            this.ld = this.La = this.dd = this.tc = 0;
        }
        function Rt2() {
            this.Na = this.la = 0;
        }
        function Tt2() {
            this.Sc = [
                0,
                0
            ], this.Eb = [
                0,
                0
            ], this.Qc = [
                0,
                0
            ], this.ia = this.lc = 0;
        }
        function Ut3() {
            this.ad = a116(384), this.Za = 0, this.Ob = a116(16), this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
        }
        function zt2() {
            this.uc = this.M = this.Nb = 0, this.wa = Array(new Dt3), this.Y = 0, this.ya = Array(new Ut3), this.aa = 0, this.l = new Gt2;
        }
        function Ht2() {
            this.y = a116(16), this.f = a116(8), this.ea = a116(8);
        }
        function Wt2() {
            this.cb = this.a = 0, this.sc = "", this.m = new w21, this.Od = new jt2, this.Kc = new Ot2, this.ed = new qt2, this.Qa = new Bt2, this.Ic = this.$c = this.Aa = 0, this.D = new zt2, this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0, this.Jc = o101(8, w21), this.ia = 0, this.pb = o101(4, Tt2), this.Pa = new Et2, this.Bd = this.kc = 0, this.Ac = [], this.Bc = 0, this.zc = [
                0,
                0,
                0,
                0
            ], this.Gd = Array(new Ht2), this.Hd = 0, this.rb = Array(new Rt2), this.sb = 0, this.wa = Array(new Dt3), this.Y = 0, this.oc = [], this.pc = 0, this.sa = [], this.ta = 0, this.qa = [], this.ra = 0, this.Ha = [], this.B = this.R = this.Ia = 0, this.Ec = [], this.M = this.ja = this.Vb = this.Fc = 0, this.ya = Array(new Ut3), this.L = this.aa = 0, this.gd = s76([
                4,
                2
            ], Dt3), this.ga = null, this.Fa = [], this.Cc = this.qc = this.P = 0, this.Gb = [], this.Uc = 0, this.mb = [], this.nb = 0, this.rc = [], this.Ga = this.Vc = 0;
        }
        function Vt2(t, e) {
            return 0 > t ? 0 : t > e ? e : t;
        }
        function Gt2() {
            this.T = this.U = this.ka = this.height = this.width = 0, this.y = [], this.f = [], this.ea = [], this.Rc = this.fa = this.W = this.N = this.O = 0, this.ma = "void", this.put = "VP8IoPutHook", this.ac = "VP8IoSetupHook", this.bc = "VP8IoTeardownHook", this.ha = this.Kb = 0, this.data = [], this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0, this.F = [], this.J = 0;
        }
        function Yt2() {
            var t = new Wt2;
            return null != t && (t.a = 0, t.sc = "OK", t.cb = 0, t.Xb = 0, ni || (ni = Zt2)), t;
        }
        function Jt2(t, e, r) {
            return 0 == t.a && (t.a = e, t.sc = r, t.cb = 0), 0;
        }
        function Xt2(t, e, r) {
            return 3 <= r && 157 == t[e + 0] && 1 == t[e + 1] && 42 == t[e + 2];
        }
        function Kt2(t, r) {
            if (null == t) return 0;
            if (t.a = 0, t.sc = "OK", null == r) return Jt2(t, 2, "null VP8Io passed to VP8GetHeaders()");
            var n239 = r.data, a143 = r.w, o124 = r.ha;
            if (4 > o124) return Jt2(t, 7, "Truncated header.");
            var s93 = n239[a143 + 0] | n239[a143 + 1] << 8 | n239[a143 + 2] << 16, c78 = t.Od;
            if (c78.Rb = !(1 & s93), c78.td = s93 >> 1 & 7, c78.yd = s93 >> 4 & 1, c78.ub = s93 >> 5, 3 < c78.td) return Jt2(t, 3, "Incorrect keyframe parameters.");
            if (!c78.yd) return Jt2(t, 4, "Frame not displayable.");
            a143 += 3, o124 -= 3;
            var u68 = t.Kc;
            if (c78.Rb) {
                if (7 > o124) return Jt2(t, 7, "cannot parse picture header");
                if (!Xt2(n239, a143, o124)) return Jt2(t, 3, "Bad code word");
                u68.c = 16383 & (n239[a143 + 4] << 8 | n239[a143 + 3]), u68.Td = n239[a143 + 4] >> 6, u68.i = 16383 & (n239[a143 + 6] << 8 | n239[a143 + 5]), u68.Ud = n239[a143 + 6] >> 6, a143 += 7, o124 -= 7, t.za = u68.c + 15 >> 4, t.Ub = u68.i + 15 >> 4, r.width = u68.c, r.height = u68.i, r.Da = 0, r.j = 0, r.v = 0, r.va = r.width, r.o = r.height, r.da = 0, r.ib = r.width, r.hb = r.height, r.U = r.width, r.T = r.height, i158((s93 = t.Pa).jb, 0, 255, s93.jb.length), e49(null != (s93 = t.Qa)), s93.Cb = 0, s93.Bb = 0, s93.Fb = 1, i158(s93.Zb, 0, 0, s93.Zb.length), i158(s93.Lb, 0, 0, s93.Lb);
            }
            if (c78.ub > o124) return Jt2(t, 7, "bad partition length");
            p16(s93 = t.m, n239, a143, c78.ub), a143 += c78.ub, o124 -= c78.ub, c78.Rb && (u68.Ld = P14(s93), u68.Kd = P14(s93)), u68 = t.Qa;
            var h63, l51 = t.Pa;
            if (e49(null != s93), e49(null != u68), u68.Cb = P14(s93), u68.Cb) {
                if (u68.Bb = P14(s93), P14(s93)) {
                    for(u68.Fb = P14(s93), h63 = 0; 4 > h63; ++h63)u68.Zb[h63] = P14(s93) ? m24(s93, 7) : 0;
                    for(h63 = 0; 4 > h63; ++h63)u68.Lb[h63] = P14(s93) ? m24(s93, 6) : 0;
                }
                if (u68.Bb) for(h63 = 0; 3 > h63; ++h63)l51.jb[h63] = P14(s93) ? g28(s93, 8) : 255;
            } else u68.Bb = 0;
            if (s93.Ka) return Jt2(t, 3, "cannot parse segment header");
            if ((u68 = t.ed).zd = P14(s93), u68.Tb = g28(s93, 6), u68.wb = g28(s93, 3), u68.Pc = P14(s93), u68.Pc && P14(s93)) {
                for(l51 = 0; 4 > l51; ++l51)P14(s93) && (u68.vd[l51] = m24(s93, 6));
                for(l51 = 0; 4 > l51; ++l51)P14(s93) && (u68.od[l51] = m24(s93, 6));
            }
            if (t.L = 0 == u68.Tb ? 0 : u68.zd ? 1 : 2, s93.Ka) return Jt2(t, 3, "cannot parse filter header");
            var f48 = o124;
            if (o124 = h63 = a143, a143 = h63 + f48, u68 = f48, t.Xb = (1 << g28(t.m, 2)) - 1, f48 < 3 * (l51 = t.Xb)) n239 = 7;
            else {
                for(h63 += 3 * l51, u68 -= 3 * l51, f48 = 0; f48 < l51; ++f48){
                    var d42 = n239[o124 + 0] | n239[o124 + 1] << 8 | n239[o124 + 2] << 16;
                    d42 > u68 && (d42 = u68), p16(t.Jc[+f48], n239, h63, d42), h63 += d42, u68 -= d42, o124 += 3;
                }
                p16(t.Jc[+l51], n239, h63, u68), n239 = h63 < a143 ? 0 : 5;
            }
            if (0 != n239) return Jt2(t, n239, "cannot parse partitions");
            for(n239 = g28(h63 = t.m, 7), o124 = P14(h63) ? m24(h63, 4) : 0, a143 = P14(h63) ? m24(h63, 4) : 0, u68 = P14(h63) ? m24(h63, 4) : 0, l51 = P14(h63) ? m24(h63, 4) : 0, h63 = P14(h63) ? m24(h63, 4) : 0, f48 = t.Qa, d42 = 0; 4 > d42; ++d42){
                if (f48.Cb) {
                    var v30 = f48.Zb[d42];
                    f48.Fb || (v30 += n239);
                } else {
                    if (0 < d42) {
                        t.pb[d42] = t.pb[0];
                        continue;
                    }
                    v30 = n239;
                }
                var b25 = t.pb[d42];
                b25.Sc[0] = ei[Vt2(v30 + o124, 127)], b25.Sc[1] = ri[Vt2(v30 + 0, 127)], b25.Eb[0] = 2 * ei[Vt2(v30 + a143, 127)], b25.Eb[1] = 101581 * ri[Vt2(v30 + u68, 127)] >> 16, 8 > b25.Eb[1] && (b25.Eb[1] = 8), b25.Qc[0] = ei[Vt2(v30 + l51, 117)], b25.Qc[1] = ri[Vt2(v30 + h63, 127)], b25.lc = v30 + h63;
            }
            if (!c78.Rb) return Jt2(t, 4, "Not a key frame.");
            for(P14(s93), c78 = t.Pa, n239 = 0; 4 > n239; ++n239){
                for(o124 = 0; 8 > o124; ++o124)for(a143 = 0; 3 > a143; ++a143)for(u68 = 0; 11 > u68; ++u68)l51 = k13(s93, ui[n239][o124][a143][u68]) ? g28(s93, 8) : si[n239][o124][a143][u68], c78.Wc[n239][o124].Yb[a143][u68] = l51;
                for(o124 = 0; 17 > o124; ++o124)c78.Xc[n239][o124] = c78.Wc[n239][hi[o124]];
            }
            return t.kc = P14(s93), t.kc && (t.Bd = g28(s93, 8)), t.cb = 1;
        }
        function Zt2(t, e, r, n240, i194, a144, o125) {
            var s94 = e[i194].Yb[r];
            for(r = 0; 16 > i194; ++i194){
                if (!k13(t, s94[r + 0])) return i194;
                for(; !k13(t, s94[r + 1]);)if (s94 = e[++i194].Yb[0], r = 0, 16 == i194) return 16;
                var c79 = e[i194 + 1].Yb;
                if (k13(t, s94[r + 2])) {
                    var u69 = t, h64 = 0;
                    if (k13(u69, (f49 = s94)[(l52 = r) + 3])) {
                        if (k13(u69, f49[l52 + 6])) {
                            for(s94 = 0, l52 = 2 * (h64 = k13(u69, f49[l52 + 8])) + (f49 = k13(u69, f49[l52 + 9 + h64])), h64 = 0, f49 = ii[l52]; f49[s94]; ++s94)h64 += h64 + k13(u69, f49[s94]);
                            h64 += 3 + (8 << l52);
                        } else k13(u69, f49[l52 + 7]) ? (h64 = 7 + 2 * k13(u69, 165), h64 += k13(u69, 145)) : h64 = 5 + k13(u69, 159);
                    } else h64 = k13(u69, f49[l52 + 4]) ? 3 + k13(u69, f49[l52 + 5]) : 2;
                    s94 = c79[2];
                } else h64 = 1, s94 = c79[1];
                c79 = o125 + ai[i194], 0 > (u69 = t).b && _14(u69);
                var l52, f49 = u69.b, d43 = (l52 = u69.Ca >> 1) - (u69.I >> f49) >> 31;
                --u69.b, u69.Ca += d43, u69.Ca |= 1, u69.I -= (l52 + 1 & d43) << f49, a144[c79] = ((h64 ^ d43) - d43) * n240[(0 < i194) + 0];
            }
            return 16;
        }
        function $t2(t) {
            var e = t.rb[t.sb - 1];
            e.la = 0, e.Na = 0, i158(t.zc, 0, 0, t.zc.length), t.ja = 0;
        }
        function Qt2(t80, r35) {
            if (null == t80) return 0;
            if (null == r35) return Jt2(t80, 2, "NULL VP8Io parameter in VP8Decode().");
            if (!t80.cb && !Kt2(t80, r35)) return 0;
            if (e49(t80.cb), null == r35.ac || r35.ac(r35)) {
                r35.ob && (t80.L = 0);
                var s95 = Ri[t80.L];
                if (2 == t80.L ? (t80.yb = 0, t80.zb = 0) : (t80.yb = r35.v - s95 >> 4, t80.zb = r35.j - s95 >> 4, 0 > t80.yb && (t80.yb = 0), 0 > t80.zb && (t80.zb = 0)), t80.Va = r35.o + 15 + s95 >> 4, t80.Hb = r35.va + 15 + s95 >> 4, t80.Hb > t80.za && (t80.Hb = t80.za), t80.Va > t80.Ub && (t80.Va = t80.Ub), 0 < t80.L) {
                    var c80 = t80.ed;
                    for(s95 = 0; 4 > s95; ++s95){
                        var u70;
                        if (t80.Qa.Cb) {
                            var h65 = t80.Qa.Lb[s95];
                            t80.Qa.Fb || (h65 += c80.Tb);
                        } else h65 = c80.Tb;
                        for(u70 = 0; 1 >= u70; ++u70){
                            var l53 = t80.gd[s95][u70], f50 = h65;
                            if (c80.Pc && (f50 += c80.vd[0], u70 && (f50 += c80.od[0])), 0 < (f50 = 0 > f50 ? 0 : 63 < f50 ? 63 : f50)) {
                                var d44 = f50;
                                0 < c80.wb && (d44 = 4 < c80.wb ? d44 >> 2 : d44 >> 1) > 9 - c80.wb && (d44 = 9 - c80.wb), 1 > d44 && (d44 = 1), l53.dd = d44, l53.tc = 2 * f50 + d44, l53.ld = 40 <= f50 ? 2 : 15 <= f50 ? 1 : 0;
                            } else l53.tc = 0;
                            l53.La = u70;
                        }
                    }
                }
                s95 = 0;
            } else Jt2(t80, 6, "Frame setup failed"), s95 = t80.a;
            if (s95 = 0 == s95) {
                if (s95) {
                    t80.$c = 0, 0 < t80.Aa || (t80.Ic = Ui);
                    t: {
                        s95 = t80.Ic;
                        c80 = 4 * (d44 = t80.za);
                        var p = 32 * d44, g36 = d44 + 1, m32 = 0 < t80.L ? d44 * (0 < t80.Aa ? 2 : 1) : 0, v31 = (2 == t80.Aa ? 2 : 1) * d44;
                        if ((l53 = c80 + 832 + (u70 = 3 * (16 * s95 + Ri[t80.L]) / 2 * p) + (h65 = null != t80.Fa && 0 < t80.Fa.length ? t80.Kc.c * t80.Kc.i : 0)) != l53) s95 = 0;
                        else {
                            if (l53 > t80.Vb) {
                                if (t80.Vb = 0, t80.Ec = a116(l53), t80.Fc = 0, null == t80.Ec) {
                                    s95 = Jt2(t80, 1, "no memory during frame initialization.");
                                    break t;
                                }
                                t80.Vb = l53;
                            }
                            l53 = t80.Ec, f50 = t80.Fc, t80.Ac = l53, t80.Bc = f50, f50 += c80, t80.Gd = o101(p, Ht2), t80.Hd = 0, t80.rb = o101(g36 + 1, Rt2), t80.sb = 1, t80.wa = m32 ? o101(m32, Dt3) : null, t80.Y = 0, t80.D.Nb = 0, t80.D.wa = t80.wa, t80.D.Y = t80.Y, 0 < t80.Aa && (t80.D.Y += d44), e49(!0), t80.oc = l53, t80.pc = f50, f50 += 832, t80.ya = o101(v31, Ut3), t80.aa = 0, t80.D.ya = t80.ya, t80.D.aa = t80.aa, 2 == t80.Aa && (t80.D.aa += d44), t80.R = 16 * d44, t80.B = 8 * d44, d44 = (p = Ri[t80.L]) * t80.R, p = p / 2 * t80.B, t80.sa = l53, t80.ta = f50 + d44, t80.qa = t80.sa, t80.ra = t80.ta + 16 * s95 * t80.R + p, t80.Ha = t80.qa, t80.Ia = t80.ra + 8 * s95 * t80.B + p, t80.$c = 0, f50 += u70, t80.mb = h65 ? l53 : null, t80.nb = h65 ? f50 : null, e49(f50 + h65 <= t80.Fc + t80.Vb), $t2(t80), i158(t80.Ac, t80.Bc, 0, c80), s95 = 1;
                        }
                    }
                    if (s95) {
                        if (r35.ka = 0, r35.y = t80.sa, r35.O = t80.ta, r35.f = t80.qa, r35.N = t80.ra, r35.ea = t80.Ha, r35.Vd = t80.Ia, r35.fa = t80.R, r35.Rc = t80.B, r35.F = null, r35.J = 0, !Cn) {
                            for(s95 = -255; 255 >= s95; ++s95)Pn[255 + s95] = 0 > s95 ? -s95 : s95;
                            for(s95 = -1020; 1020 >= s95; ++s95)kn[1020 + s95] = -128 > s95 ? -128 : 127 < s95 ? 127 : s95;
                            for(s95 = -112; 112 >= s95; ++s95)In[112 + s95] = -16 > s95 ? -16 : 15 < s95 ? 15 : s95;
                            for(s95 = -255; 510 >= s95; ++s95)Fn[255 + s95] = 0 > s95 ? 0 : 255 < s95 ? 255 : s95;
                            Cn = 1;
                        }
                        an = ue2, on = ae2, cn = oe2, un = se2, hn = ce2, sn = ie2, ln = Je, fn = Xe, dn = $e, pn = Qe, gn = Ke, mn = Ze, vn = tr, bn = er, yn = ze, wn = He, Nn = We, Ln = Ve, fi[0] = xe, fi[1] = le2, fi[2] = Le2, fi[3] = Ae, fi[4] = Se, fi[5] = Pe, fi[6] = _e, fi[7] = ke, fi[8] = Fe, fi[9] = Ie, li[0] = ve2, li[1] = de2, li[2] = pe2, li[3] = ge2, li[4] = be2, li[5] = ye2, li[6] = we2, di[0] = Be, di[1] = fe2, di[2] = Ce, di[3] = je, di[4] = Ee, di[5] = Me, di[6] = qe, s95 = 1;
                    } else s95 = 0;
                }
                s95 && (s95 = function(t, r) {
                    for(t.M = 0; t.M < t.Va; ++t.M){
                        var o126, s96 = t.Jc[t.M & t.Xb], c81 = t.m, u71 = t;
                        for(o126 = 0; o126 < u71.za; ++o126){
                            var h66 = c81, l54 = u71, f51 = l54.Ac, d45 = l54.Bc + 4 * o126, p = l54.zc, g37 = l54.ya[l54.aa + o126];
                            if (l54.Qa.Bb ? g37.$b = k13(h66, l54.Pa.jb[0]) ? 2 + k13(h66, l54.Pa.jb[2]) : k13(h66, l54.Pa.jb[1]) : g37.$b = 0, l54.kc && (g37.Ad = k13(h66, l54.Bd)), g37.Za = !k13(h66, 145) + 0, g37.Za) {
                                var m33 = g37.Ob, v32 = 0;
                                for(l54 = 0; 4 > l54; ++l54){
                                    var b26, y24 = p[0 + l54];
                                    for(b26 = 0; 4 > b26; ++b26){
                                        y24 = ci[f51[d45 + b26]][y24];
                                        for(var w27 = oi[k13(h66, y24[0])]; 0 < w27;)w27 = oi[2 * w27 + k13(h66, y24[w27])];
                                        y24 = -w27, f51[d45 + b26] = y24;
                                    }
                                    n197(m33, v32, f51, d45, 4), v32 += 4, p[0 + l54] = y24;
                                }
                            } else y24 = k13(h66, 156) ? k13(h66, 128) ? 1 : 3 : k13(h66, 163) ? 2 : 0, g37.Ob[0] = y24, i158(f51, d45, y24, 4), i158(p, 0, y24, 4);
                            g37.Dd = k13(h66, 142) ? k13(h66, 114) ? k13(h66, 183) ? 1 : 3 : 2 : 0;
                        }
                        if (u71.m.Ka) return Jt2(t, 7, "Premature end-of-partition0 encountered.");
                        for(; t.ja < t.za; ++t.ja){
                            if (u71 = s96, h66 = (c81 = t).rb[c81.sb - 1], f51 = c81.rb[c81.sb + c81.ja], o126 = c81.ya[c81.aa + c81.ja], d45 = c81.kc ? o126.Ad : 0) h66.la = f51.la = 0, o126.Za || (h66.Na = f51.Na = 0), o126.Hc = 0, o126.Gc = 0, o126.ia = 0;
                            else {
                                var N25, L20;
                                h66 = f51, f51 = u71, d45 = c81.Pa.Xc, p = c81.ya[c81.aa + c81.ja], g37 = c81.pb[p.$b];
                                if (l54 = p.ad, m33 = 0, v32 = c81.rb[c81.sb - 1], y24 = b26 = 0, i158(l54, m33, 0, 384), p.Za) var A22 = 0, x13 = d45[3];
                                else {
                                    w27 = a116(16);
                                    var S15 = h66.Na + v32.Na;
                                    if (S15 = ni(f51, d45[1], S15, g37.Eb, 0, w27, 0), h66.Na = v32.Na = (0 < S15) + 0, 1 < S15) an(w27, 0, l54, m33);
                                    else {
                                        var _18 = w27[0] + 3 >> 3;
                                        for(w27 = 0; 256 > w27; w27 += 16)l54[m33 + w27] = _18;
                                    }
                                    A22 = 1, x13 = d45[0];
                                }
                                var P18 = 15 & h66.la, I13 = 15 & v32.la;
                                for(w27 = 0; 4 > w27; ++w27){
                                    var F13 = 1 & I13;
                                    for(_18 = L20 = 0; 4 > _18; ++_18)P18 = P18 >> 1 | (F13 = (S15 = ni(f51, x13, S15 = F13 + (1 & P18), g37.Sc, A22, l54, m33)) > A22) << 7, L20 = L20 << 2 | (3 < S15 ? 3 : 1 < S15 ? 2 : 0 != l54[m33 + 0]), m33 += 16;
                                    P18 >>= 4, I13 = I13 >> 1 | F13 << 7, b26 = (b26 << 8 | L20) >>> 0;
                                }
                                for(x13 = P18, A22 = I13 >> 4, N25 = 0; 4 > N25; N25 += 2){
                                    for(L20 = 0, P18 = h66.la >> 4 + N25, I13 = v32.la >> 4 + N25, w27 = 0; 2 > w27; ++w27){
                                        for(F13 = 1 & I13, _18 = 0; 2 > _18; ++_18)S15 = F13 + (1 & P18), P18 = P18 >> 1 | (F13 = 0 < (S15 = ni(f51, d45[2], S15, g37.Qc, 0, l54, m33))) << 3, L20 = L20 << 2 | (3 < S15 ? 3 : 1 < S15 ? 2 : 0 != l54[m33 + 0]), m33 += 16;
                                        P18 >>= 2, I13 = I13 >> 1 | F13 << 5;
                                    }
                                    y24 |= L20 << 4 * N25, x13 |= P18 << 4 << N25, A22 |= (240 & I13) << N25;
                                }
                                h66.la = x13, v32.la = A22, p.Hc = b26, p.Gc = y24, p.ia = 43690 & y24 ? 0 : g37.ia, d45 = !(b26 | y24);
                            }
                            if (0 < c81.L && (c81.wa[c81.Y + c81.ja] = c81.gd[o126.$b][o126.Za], c81.wa[c81.Y + c81.ja].La |= !d45), u71.Ka) return Jt2(t, 7, "Premature end-of-file encountered.");
                        }
                        if ($t2(t), c81 = r, u71 = 1, o126 = (s96 = t).D, h66 = 0 < s96.L && s96.M >= s96.zb && s96.M <= s96.Va, 0 == s96.Aa) t: {
                            if (o126.M = s96.M, o126.uc = h66, Or(s96, o126), u71 = 1, o126 = (L20 = s96.D).Nb, h66 = (y24 = Ri[s96.L]) * s96.R, f51 = y24 / 2 * s96.B, w27 = 16 * o126 * s96.R, _18 = 8 * o126 * s96.B, d45 = s96.sa, p = s96.ta - h66 + w27, g37 = s96.qa, l54 = s96.ra - f51 + _18, m33 = s96.Ha, v32 = s96.Ia - f51 + _18, I13 = 0 == (P18 = L20.M), b26 = P18 >= s96.Va - 1, 2 == s96.Aa && Or(s96, L20), L20.uc) for(F13 = (S15 = s96).D.M, e49(S15.D.uc), L20 = S15.yb; L20 < S15.Hb; ++L20){
                                A22 = L20, x13 = F13;
                                var C12 = (j13 = (U7 = S15).D).Nb;
                                N25 = U7.R;
                                var j13 = j13.wa[j13.Y + A22], O10 = U7.sa, B11 = U7.ta + 16 * C12 * N25 + 16 * A22, M10 = j13.dd, E9 = j13.tc;
                                if (0 != E9) {
                                    if (e49(3 <= E9), 1 == U7.L) 0 < A22 && wn(O10, B11, N25, E9 + 4), j13.La && Ln(O10, B11, N25, E9), 0 < x13 && yn(O10, B11, N25, E9 + 4), j13.La && Nn(O10, B11, N25, E9);
                                    else {
                                        var q7 = U7.B, D9 = U7.qa, R10 = U7.ra + 8 * C12 * q7 + 8 * A22, T10 = U7.Ha, U7 = U7.Ia + 8 * C12 * q7 + 8 * A22;
                                        C12 = j13.ld;
                                        0 < A22 && (fn(O10, B11, N25, E9 + 4, M10, C12), pn(D9, R10, T10, U7, q7, E9 + 4, M10, C12)), j13.La && (mn(O10, B11, N25, E9, M10, C12), bn(D9, R10, T10, U7, q7, E9, M10, C12)), 0 < x13 && (ln(O10, B11, N25, E9 + 4, M10, C12), dn(D9, R10, T10, U7, q7, E9 + 4, M10, C12)), j13.La && (gn(O10, B11, N25, E9, M10, C12), vn(D9, R10, T10, U7, q7, E9, M10, C12));
                                    }
                                }
                            }
                            if (s96.ia && alert("todo:DitherRow"), null != c81.put) {
                                if (L20 = 16 * P18, P18 = 16 * (P18 + 1), I13 ? (c81.y = s96.sa, c81.O = s96.ta + w27, c81.f = s96.qa, c81.N = s96.ra + _18, c81.ea = s96.Ha, c81.W = s96.Ia + _18) : (L20 -= y24, c81.y = d45, c81.O = p, c81.f = g37, c81.N = l54, c81.ea = m33, c81.W = v32), b26 || (P18 -= y24), P18 > c81.o && (P18 = c81.o), c81.F = null, c81.J = null, null != s96.Fa && 0 < s96.Fa.length && L20 < P18 && (c81.J = lr(s96, c81, L20, P18 - L20), c81.F = s96.mb, null == c81.F && 0 == c81.F.length)) {
                                    u71 = Jt2(s96, 3, "Could not decode alpha data.");
                                    break t;
                                }
                                L20 < c81.j && (y24 = c81.j - L20, L20 = c81.j, e49(!(1 & y24)), c81.O += s96.R * y24, c81.N += s96.B * (y24 >> 1), c81.W += s96.B * (y24 >> 1), null != c81.F && (c81.J += c81.width * y24)), L20 < P18 && (c81.O += c81.v, c81.N += c81.v >> 1, c81.W += c81.v >> 1, null != c81.F && (c81.J += c81.v), c81.ka = L20 - c81.j, c81.U = c81.va - c81.v, c81.T = P18 - L20, u71 = c81.put(c81));
                            }
                            o126 + 1 != s96.Ic || b26 || (n197(s96.sa, s96.ta - h66, d45, p + 16 * s96.R, h66), n197(s96.qa, s96.ra - f51, g37, l54 + 8 * s96.B, f51), n197(s96.Ha, s96.Ia - f51, m33, v32 + 8 * s96.B, f51));
                        }
                        if (!u71) return Jt2(t, 6, "Output aborted.");
                    }
                    return 1;
                }(t80, r35)), null != r35.bc && r35.bc(r35), s95 &= 1;
            }
            return s95 ? (t80.cb = 0, s95) : 0;
        }
        function te2(t, e, r, n241, i195) {
            i195 = t[e + r + 32 * n241] + (i195 >> 3), t[e + r + 32 * n241] = -256 & i195 ? 0 > i195 ? 0 : 255 : i195;
        }
        function ee2(t, e, r, n242, i196, a145) {
            te2(t, e, 0, r, n242 + i196), te2(t, e, 1, r, n242 + a145), te2(t, e, 2, r, n242 - a145), te2(t, e, 3, r, n242 - i196);
        }
        function re2(t) {
            return (20091 * t >> 16) + t;
        }
        function ne2(t, e, r, n243) {
            var i197, o127 = 0, s97 = a116(16);
            for(i197 = 0; 4 > i197; ++i197){
                var c82 = t[e + 0] + t[e + 8], u72 = t[e + 0] - t[e + 8], h67 = (35468 * t[e + 4] >> 16) - re2(t[e + 12]), l55 = re2(t[e + 4]) + (35468 * t[e + 12] >> 16);
                s97[o127 + 0] = c82 + l55, s97[o127 + 1] = u72 + h67, s97[o127 + 2] = u72 - h67, s97[o127 + 3] = c82 - l55, o127 += 4, e++;
            }
            for(i197 = o127 = 0; 4 > i197; ++i197)c82 = (t = s97[o127 + 0] + 4) + s97[o127 + 8], u72 = t - s97[o127 + 8], h67 = (35468 * s97[o127 + 4] >> 16) - re2(s97[o127 + 12]), te2(r, n243, 0, 0, c82 + (l55 = re2(s97[o127 + 4]) + (35468 * s97[o127 + 12] >> 16))), te2(r, n243, 1, 0, u72 + h67), te2(r, n243, 2, 0, u72 - h67), te2(r, n243, 3, 0, c82 - l55), o127++, n243 += 32;
        }
        function ie2(t, e, r, n244) {
            var i198 = t[e + 0] + 4, a146 = 35468 * t[e + 4] >> 16, o128 = re2(t[e + 4]), s98 = 35468 * t[e + 1] >> 16;
            ee2(r, n244, 0, i198 + o128, t = re2(t[e + 1]), s98), ee2(r, n244, 1, i198 + a146, t, s98), ee2(r, n244, 2, i198 - a146, t, s98), ee2(r, n244, 3, i198 - o128, t, s98);
        }
        function ae2(t, e, r, n245, i199) {
            ne2(t, e, r, n245), i199 && ne2(t, e + 16, r, n245 + 4);
        }
        function oe2(t, e, r, n246) {
            on(t, e + 0, r, n246, 1), on(t, e + 32, r, n246 + 128, 1);
        }
        function se2(t, e, r, n247) {
            var i200;
            for(t = t[e + 0] + 4, i200 = 0; 4 > i200; ++i200)for(e = 0; 4 > e; ++e)te2(r, n247, e, i200, t);
        }
        function ce2(t, e, r, n248) {
            t[e + 0] && un(t, e + 0, r, n248), t[e + 16] && un(t, e + 16, r, n248 + 4), t[e + 32] && un(t, e + 32, r, n248 + 128), t[e + 48] && un(t, e + 48, r, n248 + 128 + 4);
        }
        function ue2(t, e, r, n249) {
            var i201, o129 = a116(16);
            for(i201 = 0; 4 > i201; ++i201){
                var s99 = t[e + 0 + i201] + t[e + 12 + i201], c83 = t[e + 4 + i201] + t[e + 8 + i201], u73 = t[e + 4 + i201] - t[e + 8 + i201], h68 = t[e + 0 + i201] - t[e + 12 + i201];
                o129[0 + i201] = s99 + c83, o129[8 + i201] = s99 - c83, o129[4 + i201] = h68 + u73, o129[12 + i201] = h68 - u73;
            }
            for(i201 = 0; 4 > i201; ++i201)s99 = (t = o129[0 + 4 * i201] + 3) + o129[3 + 4 * i201], c83 = o129[1 + 4 * i201] + o129[2 + 4 * i201], u73 = o129[1 + 4 * i201] - o129[2 + 4 * i201], h68 = t - o129[3 + 4 * i201], r[n249 + 0] = s99 + c83 >> 3, r[n249 + 16] = h68 + u73 >> 3, r[n249 + 32] = s99 - c83 >> 3, r[n249 + 48] = h68 - u73 >> 3, n249 += 64;
        }
        function he2(t, e, r) {
            var n250, i202 = e - 32, a147 = Bn, o130 = 255 - t[i202 - 1];
            for(n250 = 0; n250 < r; ++n250){
                var s100, c84 = a147, u74 = o130 + t[e - 1];
                for(s100 = 0; s100 < r; ++s100)t[e + s100] = c84[u74 + t[i202 + s100]];
                e += 32;
            }
        }
        function le2(t, e) {
            he2(t, e, 4);
        }
        function fe2(t, e) {
            he2(t, e, 8);
        }
        function de2(t, e) {
            he2(t, e, 16);
        }
        function pe2(t, e) {
            var r;
            for(r = 0; 16 > r; ++r)n197(t, e + 32 * r, t, e - 32, 16);
        }
        function ge2(t, e) {
            var r;
            for(r = 16; 0 < r; --r)i158(t, e, t[e - 1], 16), e += 32;
        }
        function me2(t, e, r) {
            var n251;
            for(n251 = 0; 16 > n251; ++n251)i158(e, r + 32 * n251, t, 16);
        }
        function ve2(t, e) {
            var r, n252 = 16;
            for(r = 0; 16 > r; ++r)n252 += t[e - 1 + 32 * r] + t[e + r - 32];
            me2(n252 >> 5, t, e);
        }
        function be2(t, e) {
            var r, n253 = 8;
            for(r = 0; 16 > r; ++r)n253 += t[e - 1 + 32 * r];
            me2(n253 >> 4, t, e);
        }
        function ye2(t, e) {
            var r, n254 = 8;
            for(r = 0; 16 > r; ++r)n254 += t[e + r - 32];
            me2(n254 >> 4, t, e);
        }
        function we2(t, e) {
            me2(128, t, e);
        }
        function Ne2(t, e, r) {
            return t + 2 * e + r + 2 >> 2;
        }
        function Le2(t, e) {
            var r, i203 = e - 32;
            i203 = new Uint8Array([
                Ne2(t[i203 - 1], t[i203 + 0], t[i203 + 1]),
                Ne2(t[i203 + 0], t[i203 + 1], t[i203 + 2]),
                Ne2(t[i203 + 1], t[i203 + 2], t[i203 + 3]),
                Ne2(t[i203 + 2], t[i203 + 3], t[i203 + 4])
            ]);
            for(r = 0; 4 > r; ++r)n197(t, e + 32 * r, i203, 0, i203.length);
        }
        function Ae(t, e) {
            var r = t[e - 1], n255 = t[e - 1 + 32], i204 = t[e - 1 + 64], a148 = t[e - 1 + 96];
            I10(t, e + 0, 16843009 * Ne2(t[e - 1 - 32], r, n255)), I10(t, e + 32, 16843009 * Ne2(r, n255, i204)), I10(t, e + 64, 16843009 * Ne2(n255, i204, a148)), I10(t, e + 96, 16843009 * Ne2(i204, a148, a148));
        }
        function xe(t, e) {
            var r, n256 = 4;
            for(r = 0; 4 > r; ++r)n256 += t[e + r - 32] + t[e - 1 + 32 * r];
            for(n256 >>= 3, r = 0; 4 > r; ++r)i158(t, e + 32 * r, n256, 4);
        }
        function Se(t, e) {
            var r = t[e - 1 + 0], n257 = t[e - 1 + 32], i205 = t[e - 1 + 64], a149 = t[e - 1 - 32], o131 = t[e + 0 - 32], s101 = t[e + 1 - 32], c85 = t[e + 2 - 32], u75 = t[e + 3 - 32];
            t[e + 0 + 96] = Ne2(n257, i205, t[e - 1 + 96]), t[e + 1 + 96] = t[e + 0 + 64] = Ne2(r, n257, i205), t[e + 2 + 96] = t[e + 1 + 64] = t[e + 0 + 32] = Ne2(a149, r, n257), t[e + 3 + 96] = t[e + 2 + 64] = t[e + 1 + 32] = t[e + 0 + 0] = Ne2(o131, a149, r), t[e + 3 + 64] = t[e + 2 + 32] = t[e + 1 + 0] = Ne2(s101, o131, a149), t[e + 3 + 32] = t[e + 2 + 0] = Ne2(c85, s101, o131), t[e + 3 + 0] = Ne2(u75, c85, s101);
        }
        function _e(t, e) {
            var r = t[e + 1 - 32], n258 = t[e + 2 - 32], i206 = t[e + 3 - 32], a150 = t[e + 4 - 32], o132 = t[e + 5 - 32], s102 = t[e + 6 - 32], c86 = t[e + 7 - 32];
            t[e + 0 + 0] = Ne2(t[e + 0 - 32], r, n258), t[e + 1 + 0] = t[e + 0 + 32] = Ne2(r, n258, i206), t[e + 2 + 0] = t[e + 1 + 32] = t[e + 0 + 64] = Ne2(n258, i206, a150), t[e + 3 + 0] = t[e + 2 + 32] = t[e + 1 + 64] = t[e + 0 + 96] = Ne2(i206, a150, o132), t[e + 3 + 32] = t[e + 2 + 64] = t[e + 1 + 96] = Ne2(a150, o132, s102), t[e + 3 + 64] = t[e + 2 + 96] = Ne2(o132, s102, c86), t[e + 3 + 96] = Ne2(s102, c86, c86);
        }
        function Pe(t, e) {
            var r = t[e - 1 + 0], n259 = t[e - 1 + 32], i207 = t[e - 1 + 64], a151 = t[e - 1 - 32], o133 = t[e + 0 - 32], s103 = t[e + 1 - 32], c87 = t[e + 2 - 32], u76 = t[e + 3 - 32];
            t[e + 0 + 0] = t[e + 1 + 64] = a151 + o133 + 1 >> 1, t[e + 1 + 0] = t[e + 2 + 64] = o133 + s103 + 1 >> 1, t[e + 2 + 0] = t[e + 3 + 64] = s103 + c87 + 1 >> 1, t[e + 3 + 0] = c87 + u76 + 1 >> 1, t[e + 0 + 96] = Ne2(i207, n259, r), t[e + 0 + 64] = Ne2(n259, r, a151), t[e + 0 + 32] = t[e + 1 + 96] = Ne2(r, a151, o133), t[e + 1 + 32] = t[e + 2 + 96] = Ne2(a151, o133, s103), t[e + 2 + 32] = t[e + 3 + 96] = Ne2(o133, s103, c87), t[e + 3 + 32] = Ne2(s103, c87, u76);
        }
        function ke(t, e) {
            var r = t[e + 0 - 32], n260 = t[e + 1 - 32], i208 = t[e + 2 - 32], a152 = t[e + 3 - 32], o134 = t[e + 4 - 32], s104 = t[e + 5 - 32], c88 = t[e + 6 - 32], u77 = t[e + 7 - 32];
            t[e + 0 + 0] = r + n260 + 1 >> 1, t[e + 1 + 0] = t[e + 0 + 64] = n260 + i208 + 1 >> 1, t[e + 2 + 0] = t[e + 1 + 64] = i208 + a152 + 1 >> 1, t[e + 3 + 0] = t[e + 2 + 64] = a152 + o134 + 1 >> 1, t[e + 0 + 32] = Ne2(r, n260, i208), t[e + 1 + 32] = t[e + 0 + 96] = Ne2(n260, i208, a152), t[e + 2 + 32] = t[e + 1 + 96] = Ne2(i208, a152, o134), t[e + 3 + 32] = t[e + 2 + 96] = Ne2(a152, o134, s104), t[e + 3 + 64] = Ne2(o134, s104, c88), t[e + 3 + 96] = Ne2(s104, c88, u77);
        }
        function Ie(t, e) {
            var r = t[e - 1 + 0], n261 = t[e - 1 + 32], i209 = t[e - 1 + 64], a153 = t[e - 1 + 96];
            t[e + 0 + 0] = r + n261 + 1 >> 1, t[e + 2 + 0] = t[e + 0 + 32] = n261 + i209 + 1 >> 1, t[e + 2 + 32] = t[e + 0 + 64] = i209 + a153 + 1 >> 1, t[e + 1 + 0] = Ne2(r, n261, i209), t[e + 3 + 0] = t[e + 1 + 32] = Ne2(n261, i209, a153), t[e + 3 + 32] = t[e + 1 + 64] = Ne2(i209, a153, a153), t[e + 3 + 64] = t[e + 2 + 64] = t[e + 0 + 96] = t[e + 1 + 96] = t[e + 2 + 96] = t[e + 3 + 96] = a153;
        }
        function Fe(t, e) {
            var r = t[e - 1 + 0], n262 = t[e - 1 + 32], i210 = t[e - 1 + 64], a154 = t[e - 1 + 96], o135 = t[e - 1 - 32], s105 = t[e + 0 - 32], c89 = t[e + 1 - 32], u78 = t[e + 2 - 32];
            t[e + 0 + 0] = t[e + 2 + 32] = r + o135 + 1 >> 1, t[e + 0 + 32] = t[e + 2 + 64] = n262 + r + 1 >> 1, t[e + 0 + 64] = t[e + 2 + 96] = i210 + n262 + 1 >> 1, t[e + 0 + 96] = a154 + i210 + 1 >> 1, t[e + 3 + 0] = Ne2(s105, c89, u78), t[e + 2 + 0] = Ne2(o135, s105, c89), t[e + 1 + 0] = t[e + 3 + 32] = Ne2(r, o135, s105), t[e + 1 + 32] = t[e + 3 + 64] = Ne2(n262, r, o135), t[e + 1 + 64] = t[e + 3 + 96] = Ne2(i210, n262, r), t[e + 1 + 96] = Ne2(a154, i210, n262);
        }
        function Ce(t, e) {
            var r;
            for(r = 0; 8 > r; ++r)n197(t, e + 32 * r, t, e - 32, 8);
        }
        function je(t, e) {
            var r;
            for(r = 0; 8 > r; ++r)i158(t, e, t[e - 1], 8), e += 32;
        }
        function Oe(t, e, r) {
            var n263;
            for(n263 = 0; 8 > n263; ++n263)i158(e, r + 32 * n263, t, 8);
        }
        function Be(t, e) {
            var r, n264 = 8;
            for(r = 0; 8 > r; ++r)n264 += t[e + r - 32] + t[e - 1 + 32 * r];
            Oe(n264 >> 4, t, e);
        }
        function Me(t, e) {
            var r, n265 = 4;
            for(r = 0; 8 > r; ++r)n265 += t[e + r - 32];
            Oe(n265 >> 3, t, e);
        }
        function Ee(t, e) {
            var r, n266 = 4;
            for(r = 0; 8 > r; ++r)n266 += t[e - 1 + 32 * r];
            Oe(n266 >> 3, t, e);
        }
        function qe(t, e) {
            Oe(128, t, e);
        }
        function De(t, e, r) {
            var n267 = t[e - r], i211 = t[e + 0], a155 = 3 * (i211 - n267) + jn[1020 + t[e - 2 * r] - t[e + r]], o136 = On[112 + (a155 + 4 >> 3)];
            t[e - r] = Bn[255 + n267 + On[112 + (a155 + 3 >> 3)]], t[e + 0] = Bn[255 + i211 - o136];
        }
        function Re(t, e, r, n268) {
            var i212 = t[e + 0], a156 = t[e + r];
            return Mn[255 + t[e - 2 * r] - t[e - r]] > n268 || Mn[255 + a156 - i212] > n268;
        }
        function Te(t, e, r, n269) {
            return 4 * Mn[255 + t[e - r] - t[e + 0]] + Mn[255 + t[e - 2 * r] - t[e + r]] <= n269;
        }
        function Ue(t, e, r, n270, i213) {
            var a157 = t[e - 3 * r], o137 = t[e - 2 * r], s106 = t[e - r], c90 = t[e + 0], u79 = t[e + r], h69 = t[e + 2 * r], l56 = t[e + 3 * r];
            return 4 * Mn[255 + s106 - c90] + Mn[255 + o137 - u79] > n270 ? 0 : Mn[255 + t[e - 4 * r] - a157] <= i213 && Mn[255 + a157 - o137] <= i213 && Mn[255 + o137 - s106] <= i213 && Mn[255 + l56 - h69] <= i213 && Mn[255 + h69 - u79] <= i213 && Mn[255 + u79 - c90] <= i213;
        }
        function ze(t, e, r, n271) {
            var i214 = 2 * n271 + 1;
            for(n271 = 0; 16 > n271; ++n271)Te(t, e + n271, r, i214) && De(t, e + n271, r);
        }
        function He(t, e, r, n272) {
            var i215 = 2 * n272 + 1;
            for(n272 = 0; 16 > n272; ++n272)Te(t, e + n272 * r, 1, i215) && De(t, e + n272 * r, 1);
        }
        function We(t, e, r, n273) {
            var i216;
            for(i216 = 3; 0 < i216; --i216)ze(t, e += 4 * r, r, n273);
        }
        function Ve(t, e, r, n274) {
            var i217;
            for(i217 = 3; 0 < i217; --i217)He(t, e += 4, r, n274);
        }
        function Ge(t, e, r, n275, i218, a158, o138, s107) {
            for(a158 = 2 * a158 + 1; 0 < i218--;){
                if (Ue(t, e, r, a158, o138)) {
                    if (Re(t, e, r, s107)) De(t, e, r);
                    else {
                        var c91 = t, u80 = e, h70 = r, l57 = c91[u80 - 2 * h70], f52 = c91[u80 - h70], d46 = c91[u80 + 0], p = c91[u80 + h70], g38 = c91[u80 + 2 * h70], m34 = 27 * (b27 = jn[1020 + 3 * (d46 - f52) + jn[1020 + l57 - p]]) + 63 >> 7, v33 = 18 * b27 + 63 >> 7, b27 = 9 * b27 + 63 >> 7;
                        c91[u80 - 3 * h70] = Bn[255 + c91[u80 - 3 * h70] + b27], c91[u80 - 2 * h70] = Bn[255 + l57 + v33], c91[u80 - h70] = Bn[255 + f52 + m34], c91[u80 + 0] = Bn[255 + d46 - m34], c91[u80 + h70] = Bn[255 + p - v33], c91[u80 + 2 * h70] = Bn[255 + g38 - b27];
                    }
                }
                e += n275;
            }
        }
        function Ye(t, e, r, n276, i219, a159, o139, s108) {
            for(a159 = 2 * a159 + 1; 0 < i219--;){
                if (Ue(t, e, r, a159, o139)) {
                    if (Re(t, e, r, s108)) De(t, e, r);
                    else {
                        var c92 = t, u81 = e, h71 = r, l58 = c92[u81 - h71], f53 = c92[u81 + 0], d47 = c92[u81 + h71], p = On[112 + ((g39 = 3 * (f53 - l58)) + 4 >> 3)], g39 = On[112 + (g39 + 3 >> 3)], m35 = p + 1 >> 1;
                        c92[u81 - 2 * h71] = Bn[255 + c92[u81 - 2 * h71] + m35], c92[u81 - h71] = Bn[255 + l58 + g39], c92[u81 + 0] = Bn[255 + f53 - p], c92[u81 + h71] = Bn[255 + d47 - m35];
                    }
                }
                e += n276;
            }
        }
        function Je(t, e, r, n277, i220, a160) {
            Ge(t, e, r, 1, 16, n277, i220, a160);
        }
        function Xe(t, e, r, n278, i221, a161) {
            Ge(t, e, 1, r, 16, n278, i221, a161);
        }
        function Ke(t, e, r, n279, i222, a162) {
            var o140;
            for(o140 = 3; 0 < o140; --o140)Ye(t, e += 4 * r, r, 1, 16, n279, i222, a162);
        }
        function Ze(t, e, r, n280, i223, a163) {
            var o141;
            for(o141 = 3; 0 < o141; --o141)Ye(t, e += 4, 1, r, 16, n280, i223, a163);
        }
        function $e(t, e, r, n281, i224, a164, o142, s109) {
            Ge(t, e, i224, 1, 8, a164, o142, s109), Ge(r, n281, i224, 1, 8, a164, o142, s109);
        }
        function Qe(t, e, r, n282, i225, a165, o143, s110) {
            Ge(t, e, 1, i225, 8, a165, o143, s110), Ge(r, n282, 1, i225, 8, a165, o143, s110);
        }
        function tr(t, e, r, n283, i226, a166, o144, s111) {
            Ye(t, e + 4 * i226, i226, 1, 8, a166, o144, s111), Ye(r, n283 + 4 * i226, i226, 1, 8, a166, o144, s111);
        }
        function er(t, e, r, n284, i227, a167, o145, s112) {
            Ye(t, e + 4, 1, i227, 8, a167, o145, s112), Ye(r, n284 + 4, 1, i227, 8, a167, o145, s112);
        }
        function rr() {
            this.ba = new ot3, this.ec = [], this.cc = [], this.Mc = [], this.Dc = this.Nc = this.dc = this.fc = 0, this.Oa = new ct3, this.memory = 0, this.Ib = "OutputFunc", this.Jb = "OutputAlphaFunc", this.Nd = "OutputRowFunc";
        }
        function nr() {
            this.data = [], this.offset = this.kd = this.ha = this.w = 0, this.na = [], this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
        }
        function ir() {
            this.nc = this.Ea = this.b = this.hc = 0, this.K = [], this.w = 0;
        }
        function ar() {
            this.ua = 0, this.Wa = new M8, this.vb = new M8, this.md = this.xc = this.wc = 0, this.vc = [], this.Wb = 0, this.Ya = new d34, this.yc = new l43;
        }
        function or() {
            this.xb = this.a = 0, this.l = new Gt2, this.ca = new ot3, this.V = [], this.Ba = 0, this.Ta = [], this.Ua = 0, this.m = new N19, this.Pb = 0, this.wd = new N19, this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0, this.s = new ar, this.ab = 0, this.gc = o101(4, ir), this.Oc = 0;
        }
        function sr() {
            this.Lc = this.Z = this.$a = this.i = this.c = 0, this.l = new Gt2, this.ic = 0, this.ca = [], this.tb = 0, this.qd = null, this.rd = 0;
        }
        function cr(t, e, r, n285, i228, a168, o146) {
            for(t = null == t ? 0 : t[e + 0], e = 0; e < o146; ++e)i228[a168 + e] = t + r[n285 + e] & 255, t = i228[a168 + e];
        }
        function ur(t, e, r, n286, i229, a169, o147) {
            var s113;
            if (null == t) cr(null, null, r, n286, i229, a169, o147);
            else for(s113 = 0; s113 < o147; ++s113)i229[a169 + s113] = t[e + s113] + r[n286 + s113] & 255;
        }
        function hr(t, e, r, n287, i230, a170, o148) {
            if (null == t) cr(null, null, r, n287, i230, a170, o148);
            else {
                var s114, c93 = t[e + 0], u82 = c93, h72 = c93;
                for(s114 = 0; s114 < o148; ++s114)u82 = h72 + (c93 = t[e + s114]) - u82, h72 = r[n287 + s114] + (-256 & u82 ? 0 > u82 ? 0 : 255 : u82) & 255, u82 = c93, i230[a170 + s114] = h72;
            }
        }
        function lr(t, r, i231, o149) {
            var s115 = r.width, c94 = r.o;
            if (e49(null != t && null != r), 0 > i231 || 0 >= o149 || i231 + o149 > c94) return null;
            if (!t.Cc) {
                if (null == t.ga) {
                    var u83;
                    if (t.ga = new sr, (u83 = null == t.ga) || (u83 = r.width * r.o, e49(0 == t.Gb.length), t.Gb = a116(u83), t.Uc = 0, null == t.Gb ? u83 = 0 : (t.mb = t.Gb, t.nb = t.Uc, t.rc = null, u83 = 1), u83 = !u83), !u83) {
                        u83 = t.ga;
                        var h73 = t.Fa, l59 = t.P, f54 = t.qc, d48 = t.mb, p = t.nb, g40 = l59 + 1, m36 = f54 - 1, b28 = u83.l;
                        if (e49(null != h73 && null != d48 && null != r), mi[0] = null, mi[1] = cr, mi[2] = ur, mi[3] = hr, u83.ca = d48, u83.tb = p, u83.c = r.width, u83.i = r.height, e49(0 < u83.c && 0 < u83.i), 1 >= f54) r = 0;
                        else if (u83.$a = h73[l59 + 0] >> 0 & 3, u83.Z = h73[l59 + 0] >> 2 & 3, u83.Lc = h73[l59 + 0] >> 4 & 3, l59 = h73[l59 + 0] >> 6 & 3, 0 > u83.$a || 1 < u83.$a || 4 <= u83.Z || 1 < u83.Lc || l59) r = 0;
                        else if (b28.put = dt3, b28.ac = ft3, b28.bc = pt2, b28.ma = u83, b28.width = r.width, b28.height = r.height, b28.Da = r.Da, b28.v = r.v, b28.va = r.va, b28.j = r.j, b28.o = r.o, u83.$a) t: {
                            e49(1 == u83.$a), r = kt2();
                            e: for(;;){
                                if (null == r) {
                                    r = 0;
                                    break t;
                                }
                                if (e49(null != u83), u83.mc = r, r.c = u83.c, r.i = u83.i, r.l = u83.l, r.l.ma = u83, r.l.width = u83.c, r.l.height = u83.i, r.a = 0, v23(r.m, h73, g40, m36), !It2(u83.c, u83.i, 1, r, null)) break e;
                                if (1 == r.ab && 3 == r.gc[0].hc && At2(r.s) ? (u83.ic = 1, h73 = r.c * r.i, r.Ta = null, r.Ua = 0, r.V = a116(h73), r.Ba = 0, null == r.V ? (r.a = 1, r = 0) : r = 1) : (u83.ic = 0, r = Ft2(r, u83.c)), !r) break e;
                                r = 1;
                                break t;
                            }
                            u83.mc = null, r = 0;
                        }
                        else r = m36 >= u83.c * u83.i;
                        u83 = !r;
                    }
                    if (u83) return null;
                    1 != t.ga.Lc ? t.Ga = 0 : o149 = c94 - i231;
                }
                e49(null != t.ga), e49(i231 + o149 <= c94);
                t: {
                    if (r = (h73 = t.ga).c, c94 = h73.l.o, 0 == h73.$a) {
                        if (g40 = t.rc, m36 = t.Vc, b28 = t.Fa, l59 = t.P + 1 + i231 * r, f54 = t.mb, d48 = t.nb + i231 * r, e49(l59 <= t.P + t.qc), 0 != h73.Z) for(e49(null != mi[h73.Z]), u83 = 0; u83 < o149; ++u83)mi[h73.Z](g40, m36, b28, l59, f54, d48, r), g40 = f54, m36 = d48, d48 += r, l59 += r;
                        else for(u83 = 0; u83 < o149; ++u83)n197(f54, d48, b28, l59, r), g40 = f54, m36 = d48, d48 += r, l59 += r;
                        t.rc = g40, t.Vc = m36;
                    } else {
                        if (e49(null != h73.mc), r = i231 + o149, e49(null != (u83 = h73.mc)), e49(r <= u83.i), u83.C >= r) r = 1;
                        else if (h73.ic || mr(), h73.ic) {
                            h73 = u83.V, g40 = u83.Ba, m36 = u83.c;
                            var y25 = u83.i, w28 = (b28 = 1, l59 = u83.$ / m36, f54 = u83.$ % m36, d48 = u83.m, p = u83.s, u83.$), N26 = m36 * y25, L21 = m36 * r, x14 = p.wc, _19 = w28 < L21 ? wt2(p, f54, l59) : null;
                            e49(w28 <= N26), e49(r <= y25), e49(At2(p));
                            e: for(;;){
                                for(; !d48.h && w28 < L21;){
                                    if (f54 & x14 || (_19 = wt2(p, f54, l59)), e49(null != _19), S13(d48), 256 > (y25 = bt2(_19.G[0], _19.H[0], d48))) h73[g40 + w28] = y25, ++w28, ++f54 >= m36 && (f54 = 0, ++l59 <= r && !(l59 % 16) && St2(u83, l59));
                                    else {
                                        if (!(280 > y25)) {
                                            b28 = 0;
                                            break e;
                                        }
                                        y25 = mt2(y25 - 256, d48);
                                        var P19, k17 = bt2(_19.G[4], _19.H[4], d48);
                                        if (S13(d48), !(w28 >= (k17 = vt2(m36, k17 = mt2(k17, d48))) && N26 - w28 >= y25)) {
                                            b28 = 0;
                                            break e;
                                        }
                                        for(P19 = 0; P19 < y25; ++P19)h73[g40 + w28 + P19] = h73[g40 + w28 + P19 - k17];
                                        for(w28 += y25, f54 += y25; f54 >= m36;)f54 -= m36, ++l59 <= r && !(l59 % 16) && St2(u83, l59);
                                        w28 < L21 && f54 & x14 && (_19 = wt2(p, f54, l59));
                                    }
                                    e49(d48.h == A18(d48));
                                }
                                St2(u83, l59 > r ? r : l59);
                                break e;
                            }
                            !b28 || d48.h && w28 < N26 ? (b28 = 0, u83.a = d48.h ? 5 : 3) : u83.$ = w28, r = b28;
                        } else r = _t2(u83, u83.V, u83.Ba, u83.c, u83.i, r, Ct2);
                        if (!r) {
                            o149 = 0;
                            break t;
                        }
                    }
                    i231 + o149 >= c94 && (t.Cc = 1), o149 = 1;
                }
                if (!o149) return null;
                if (t.Cc && (null != (o149 = t.ga) && (o149.mc = null), t.ga = null, 0 < t.Ga)) return alert("todo:WebPDequantizeLevels"), null;
            }
            return t.nb + i231 * s115;
        }
        function fr(t, e, r, n288, i232, a171) {
            for(; 0 < i232--;){
                var o150, s116 = t, c95 = e + (r ? 1 : 0), u84 = t, h74 = e + (r ? 0 : 3);
                for(o150 = 0; o150 < n288; ++o150){
                    var l60 = u84[h74 + 4 * o150];
                    255 != l60 && (l60 *= 32897, s116[c95 + 4 * o150 + 0] = s116[c95 + 4 * o150 + 0] * l60 >> 23, s116[c95 + 4 * o150 + 1] = s116[c95 + 4 * o150 + 1] * l60 >> 23, s116[c95 + 4 * o150 + 2] = s116[c95 + 4 * o150 + 2] * l60 >> 23);
                }
                e += a171;
            }
        }
        function dr(t, e, r, n289, i233) {
            for(; 0 < n289--;){
                var a172;
                for(a172 = 0; a172 < r; ++a172){
                    var o151 = t[e + 2 * a172 + 0], s117 = 15 & (u85 = t[e + 2 * a172 + 1]), c96 = 4369 * s117, u85 = (240 & u85 | u85 >> 4) * c96 >> 16;
                    t[e + 2 * a172 + 0] = (240 & o151 | o151 >> 4) * c96 >> 16 & 240 | (15 & o151 | o151 << 4) * c96 >> 16 >> 4 & 15, t[e + 2 * a172 + 1] = 240 & u85 | s117;
                }
                e += i233;
            }
        }
        function pr(t, e, r, n290, i234, a173, o152, s118) {
            var c97, u86, h75 = 255;
            for(u86 = 0; u86 < i234; ++u86){
                for(c97 = 0; c97 < n290; ++c97){
                    var l61 = t[e + c97];
                    a173[o152 + 4 * c97] = l61, h75 &= l61;
                }
                e += r, o152 += s118;
            }
            return 255 != h75;
        }
        function gr(t, e, r, n291, i235) {
            var a174;
            for(a174 = 0; a174 < i235; ++a174)r[n291 + a174] = t[e + a174] >> 8;
        }
        function mr() {
            An = fr, xn = dr, Sn = pr, _n = gr;
        }
        function vr(r36, n292, i236) {
            t77[r36] = function(t, r, a175, o153, s119, c98, u87, h76, l62, f55, d49, p, g41, m37, v34, b29, y26) {
                var w29, N27 = y26 - 1 >> 1, L22 = s119[c98 + 0] | u87[h76 + 0] << 16, A23 = l62[f55 + 0] | d49[p + 0] << 16;
                e49(null != t);
                var x15 = 3 * L22 + A23 + 131074 >> 2;
                for(n292(t[r + 0], 255 & x15, x15 >> 16, g41, m37), null != a175 && (x15 = 3 * A23 + L22 + 131074 >> 2, n292(a175[o153 + 0], 255 & x15, x15 >> 16, v34, b29)), w29 = 1; w29 <= N27; ++w29){
                    var S16 = s119[c98 + w29] | u87[h76 + w29] << 16, _20 = l62[f55 + w29] | d49[p + w29] << 16, P20 = L22 + S16 + A23 + _20 + 524296, k18 = P20 + 2 * (S16 + A23) >> 3;
                    x15 = k18 + L22 >> 1, L22 = (P20 = P20 + 2 * (L22 + _20) >> 3) + S16 >> 1, n292(t[r + 2 * w29 - 1], 255 & x15, x15 >> 16, g41, m37 + (2 * w29 - 1) * i236), n292(t[r + 2 * w29 - 0], 255 & L22, L22 >> 16, g41, m37 + (2 * w29 - 0) * i236), null != a175 && (x15 = P20 + A23 >> 1, L22 = k18 + _20 >> 1, n292(a175[o153 + 2 * w29 - 1], 255 & x15, x15 >> 16, v34, b29 + (2 * w29 - 1) * i236), n292(a175[o153 + 2 * w29 + 0], 255 & L22, L22 >> 16, v34, b29 + (2 * w29 + 0) * i236)), L22 = S16, A23 = _20;
                }
                1 & y26 || (x15 = 3 * L22 + A23 + 131074 >> 2, n292(t[r + y26 - 1], 255 & x15, x15 >> 16, g41, m37 + (y26 - 1) * i236), null != a175 && (x15 = 3 * A23 + L22 + 131074 >> 2, n292(a175[o153 + y26 - 1], 255 & x15, x15 >> 16, v34, b29 + (y26 - 1) * i236)));
            };
        }
        function br() {
            vi[En] = bi, vi[qn] = wi, vi[Dn] = yi, vi[Rn] = Ni, vi[Tn] = Li, vi[Un] = Ai, vi[zn] = xi, vi[Hn] = wi, vi[Wn] = Ni, vi[Vn] = Li, vi[Gn] = Ai;
        }
        function yr(t) {
            return t & ~Fi ? 0 > t ? 0 : 255 : t >> Ii;
        }
        function wr(t, e) {
            return yr((19077 * t >> 8) + (26149 * e >> 8) - 14234);
        }
        function Nr(t, e, r) {
            return yr((19077 * t >> 8) - (6419 * e >> 8) - (13320 * r >> 8) + 8708);
        }
        function Lr(t, e) {
            return yr((19077 * t >> 8) + (33050 * e >> 8) - 17685);
        }
        function Ar(t, e, r, n293, i237) {
            n293[i237 + 0] = wr(t, r), n293[i237 + 1] = Nr(t, e, r), n293[i237 + 2] = Lr(t, e);
        }
        function xr(t, e, r, n294, i238) {
            n294[i238 + 0] = Lr(t, e), n294[i238 + 1] = Nr(t, e, r), n294[i238 + 2] = wr(t, r);
        }
        function Sr(t, e, r, n295, i239) {
            var a176 = Nr(t, e, r);
            e = a176 << 3 & 224 | Lr(t, e) >> 3, n295[i239 + 0] = 248 & wr(t, r) | a176 >> 5, n295[i239 + 1] = e;
        }
        function _r(t, e, r, n296, i240) {
            var a177 = 240 & Lr(t, e) | 15;
            n296[i240 + 0] = 240 & wr(t, r) | Nr(t, e, r) >> 4, n296[i240 + 1] = a177;
        }
        function Pr(t, e, r, n297, i241) {
            n297[i241 + 0] = 255, Ar(t, e, r, n297, i241 + 1);
        }
        function kr(t, e, r, n298, i242) {
            xr(t, e, r, n298, i242), n298[i242 + 3] = 255;
        }
        function Ir(t, e, r, n299, i243) {
            Ar(t, e, r, n299, i243), n299[i243 + 3] = 255;
        }
        function Vt2(t, e) {
            return 0 > t ? 0 : t > e ? e : t;
        }
        function Fr(e51, r, n300) {
            t77[e51] = function(t, e, i244, a178, o154, s120, c99, u88, h77) {
                for(var l63 = u88 + (-2 & h77) * n300; u88 != l63;)r(t[e + 0], i244[a178 + 0], o154[s120 + 0], c99, u88), r(t[e + 1], i244[a178 + 0], o154[s120 + 0], c99, u88 + n300), e += 2, ++a178, ++s120, u88 += 2 * n300;
                1 & h77 && r(t[e + 0], i244[a178 + 0], o154[s120 + 0], c99, u88);
            };
        }
        function Cr(t, e, r) {
            return 0 == r ? 0 == t ? 0 == e ? 6 : 5 : 0 == e ? 4 : 0 : r;
        }
        function jr(t, e, r, n301, i245) {
            switch(t >>> 30){
                case 3:
                    on(e, r, n301, i245, 0);
                    break;
                case 2:
                    sn(e, r, n301, i245);
                    break;
                case 1:
                    un(e, r, n301, i245);
            }
        }
        function Or(t, e) {
            var r, a179, o155 = e.M, s121 = e.Nb, c100 = t.oc, u89 = t.pc + 40, h78 = t.oc, l64 = t.pc + 584, f56 = t.oc, d50 = t.pc + 600;
            for(r = 0; 16 > r; ++r)c100[u89 + 32 * r - 1] = 129;
            for(r = 0; 8 > r; ++r)h78[l64 + 32 * r - 1] = 129, f56[d50 + 32 * r - 1] = 129;
            for(0 < o155 ? c100[u89 - 1 - 32] = h78[l64 - 1 - 32] = f56[d50 - 1 - 32] = 129 : (i158(c100, u89 - 32 - 1, 127, 21), i158(h78, l64 - 32 - 1, 127, 9), i158(f56, d50 - 32 - 1, 127, 9)), a179 = 0; a179 < t.za; ++a179){
                var p = e.ya[e.aa + a179];
                if (0 < a179) {
                    for(r = -1; 16 > r; ++r)n197(c100, u89 + 32 * r - 4, c100, u89 + 32 * r + 12, 4);
                    for(r = -1; 8 > r; ++r)n197(h78, l64 + 32 * r - 4, h78, l64 + 32 * r + 4, 4), n197(f56, d50 + 32 * r - 4, f56, d50 + 32 * r + 4, 4);
                }
                var g42 = t.Gd, m38 = t.Hd + a179, v35 = p.ad, b30 = p.Hc;
                if (0 < o155 && (n197(c100, u89 - 32, g42[m38].y, 0, 16), n197(h78, l64 - 32, g42[m38].f, 0, 8), n197(f56, d50 - 32, g42[m38].ea, 0, 8)), p.Za) {
                    var y27 = c100, w30 = u89 - 32 + 16;
                    for(0 < o155 && (a179 >= t.za - 1 ? i158(y27, w30, g42[m38].y[15], 4) : n197(y27, w30, g42[m38 + 1].y, 0, 4)), r = 0; 4 > r; r++)y27[w30 + 128 + r] = y27[w30 + 256 + r] = y27[w30 + 384 + r] = y27[w30 + 0 + r];
                    for(r = 0; 16 > r; ++r, b30 <<= 2)y27 = c100, w30 = u89 + Di[r], fi[p.Ob[r]](y27, w30), jr(b30, v35, 16 * +r, y27, w30);
                } else if (y27 = Cr(a179, o155, p.Ob[0]), li[y27](c100, u89), 0 != b30) for(r = 0; 16 > r; ++r, b30 <<= 2)jr(b30, v35, 16 * +r, c100, u89 + Di[r]);
                for(r = p.Gc, y27 = Cr(a179, o155, p.Dd), di[y27](h78, l64), di[y27](f56, d50), b30 = v35, y27 = h78, w30 = l64, 255 & (p = r >> 0) && (170 & p ? cn(b30, 256, y27, w30) : hn(b30, 256, y27, w30)), p = f56, b30 = d50, 255 & (r >>= 8) && (170 & r ? cn(v35, 320, p, b30) : hn(v35, 320, p, b30)), o155 < t.Ub - 1 && (n197(g42[m38].y, 0, c100, u89 + 480, 16), n197(g42[m38].f, 0, h78, l64 + 224, 8), n197(g42[m38].ea, 0, f56, d50 + 224, 8)), r = 8 * s121 * t.B, g42 = t.sa, m38 = t.ta + 16 * a179 + 16 * s121 * t.R, v35 = t.qa, p = t.ra + 8 * a179 + r, b30 = t.Ha, y27 = t.Ia + 8 * a179 + r, r = 0; 16 > r; ++r)n197(g42, m38 + r * t.R, c100, u89 + 32 * r, 16);
                for(r = 0; 8 > r; ++r)n197(v35, p + r * t.B, h78, l64 + 32 * r, 8), n197(b30, y27 + r * t.B, f56, d50 + 32 * r, 8);
            }
        }
        function Br(t, n302, i246, a180, o156, s122, c101, u90, h79) {
            var l65 = [
                0
            ], f57 = [
                0
            ], d51 = 0, p = null != h79 ? h79.kd : 0, g43 = null != h79 ? h79 : new nr;
            if (null == t || 12 > i246) return 7;
            g43.data = t, g43.w = n302, g43.ha = i246, n302 = [
                n302
            ], i246 = [
                i246
            ], g43.gb = [
                g43.gb
            ];
            t: {
                var m39 = n302, b31 = i246, y28 = g43.gb;
                if (e49(null != t), e49(null != b31), e49(null != y28), y28[0] = 0, 12 <= b31[0] && !r30(t, m39[0], "RIFF")) {
                    if (r30(t, m39[0] + 8, "WEBP")) {
                        y28 = 3;
                        break t;
                    }
                    var w31 = j11(t, m39[0] + 4);
                    if (12 > w31 || 4294967286 < w31) {
                        y28 = 3;
                        break t;
                    }
                    if (p && w31 > b31[0] - 8) {
                        y28 = 7;
                        break t;
                    }
                    y28[0] = w31, m39[0] += 12, b31[0] -= 12;
                }
                y28 = 0;
            }
            if (0 != y28) return y28;
            for(w31 = 0 < g43.gb[0], i246 = i246[0];;){
                t: {
                    var L23 = t;
                    b31 = n302, y28 = i246;
                    var A24 = l65, x16 = f57, S17 = m39 = [
                        0
                    ];
                    if ((k19 = d51 = [
                        d51
                    ])[0] = 0, 8 > y28[0]) y28 = 7;
                    else {
                        if (!r30(L23, b31[0], "VP8X")) {
                            if (10 != j11(L23, b31[0] + 4)) {
                                y28 = 3;
                                break t;
                            }
                            if (18 > y28[0]) {
                                y28 = 7;
                                break t;
                            }
                            var _21 = j11(L23, b31[0] + 8), P21 = 1 + C10(L23, b31[0] + 12);
                            if (2147483648 <= P21 * (L23 = 1 + C10(L23, b31[0] + 15))) {
                                y28 = 3;
                                break t;
                            }
                            null != S17 && (S17[0] = _21), null != A24 && (A24[0] = P21), null != x16 && (x16[0] = L23), b31[0] += 18, y28[0] -= 18, k19[0] = 1;
                        }
                        y28 = 0;
                    }
                }
                if (d51 = d51[0], m39 = m39[0], 0 != y28) return y28;
                if (b31 = !!(2 & m39), !w31 && d51) return 3;
                if (null != s122 && (s122[0] = !!(16 & m39)), null != c101 && (c101[0] = b31), null != u90 && (u90[0] = 0), c101 = l65[0], m39 = f57[0], d51 && b31 && null == h79) {
                    y28 = 0;
                    break;
                }
                if (4 > i246) {
                    y28 = 7;
                    break;
                }
                if (w31 && d51 || !w31 && !d51 && !r30(t, n302[0], "ALPH")) {
                    i246 = [
                        i246
                    ], g43.na = [
                        g43.na
                    ], g43.P = [
                        g43.P
                    ], g43.Sa = [
                        g43.Sa
                    ];
                    t: {
                        _21 = t, y28 = n302, w31 = i246;
                        var k19 = g43.gb;
                        A24 = g43.na, x16 = g43.P, S17 = g43.Sa;
                        P21 = 22, e49(null != _21), e49(null != w31), L23 = y28[0];
                        var I14 = w31[0];
                        for(e49(null != A24), e49(null != S17), A24[0] = null, x16[0] = null, S17[0] = 0;;){
                            if (y28[0] = L23, w31[0] = I14, 8 > I14) {
                                y28 = 7;
                                break t;
                            }
                            var F14 = j11(_21, L23 + 4);
                            if (4294967286 < F14) {
                                y28 = 3;
                                break t;
                            }
                            var O11 = 8 + F14 + 1 & -2;
                            if (P21 += O11, 0 < k19 && P21 > k19) {
                                y28 = 3;
                                break t;
                            }
                            if (!r30(_21, L23, "VP8 ") || !r30(_21, L23, "VP8L")) {
                                y28 = 0;
                                break t;
                            }
                            if (I14[0] < O11) {
                                y28 = 7;
                                break t;
                            }
                            r30(_21, L23, "ALPH") || (A24[0] = _21, x16[0] = L23 + 8, S17[0] = F14), L23 += O11, I14 -= O11;
                        }
                    }
                    if (i246 = i246[0], g43.na = g43.na[0], g43.P = g43.P[0], g43.Sa = g43.Sa[0], 0 != y28) break;
                }
                i246 = [
                    i246
                ], g43.Ja = [
                    g43.Ja
                ], g43.xa = [
                    g43.xa
                ];
                t: if (k19 = t, y28 = n302, w31 = i246, A24 = g43.gb[0], x16 = g43.Ja, S17 = g43.xa, _21 = y28[0], L23 = !r30(k19, _21, "VP8 "), P21 = !r30(k19, _21, "VP8L"), e49(null != k19), e49(null != w31), e49(null != x16), e49(null != S17), 8 > w31[0]) y28 = 7;
                else {
                    if (L23 || P21) {
                        if (k19 = j11(k19, _21 + 4), 12 <= A24 && k19 > A24 - 12) {
                            y28 = 3;
                            break t;
                        }
                        if (p && k19 > w31[0] - 8) {
                            y28 = 7;
                            break t;
                        }
                        x16[0] = k19, y28[0] += 8, w31[0] -= 8, S17[0] = P21;
                    } else S17[0] = 5 <= w31[0] && 47 == k19[_21 + 0] && !(k19[_21 + 4] >> 5), x16[0] = w31[0];
                    y28 = 0;
                }
                if (i246 = i246[0], g43.Ja = g43.Ja[0], g43.xa = g43.xa[0], n302 = n302[0], 0 != y28) break;
                if (4294967286 < g43.Ja) return 3;
                if (null == u90 || b31 || (u90[0] = g43.xa ? 2 : 1), c101 = [
                    c101
                ], m39 = [
                    m39
                ], g43.xa) {
                    if (5 > i246) {
                        y28 = 7;
                        break;
                    }
                    u90 = c101, p = m39, b31 = s122, null == t || 5 > i246 ? t = 0 : 5 <= i246 && 47 == t[n302 + 0] && !(t[n302 + 4] >> 5) ? (w31 = [
                        0
                    ], k19 = [
                        0
                    ], A24 = [
                        0
                    ], v23(x16 = new N19, t, n302, i246), gt2(x16, w31, k19, A24) ? (null != u90 && (u90[0] = w31[0]), null != p && (p[0] = k19[0]), null != b31 && (b31[0] = A24[0]), t = 1) : t = 0) : t = 0;
                } else {
                    if (10 > i246) {
                        y28 = 7;
                        break;
                    }
                    u90 = m39, null == t || 10 > i246 || !Xt2(t, n302 + 3, i246 - 3) ? t = 0 : (p = t[n302 + 0] | t[n302 + 1] << 8 | t[n302 + 2] << 16, b31 = 16383 & (t[n302 + 7] << 8 | t[n302 + 6]), t = 16383 & (t[n302 + 9] << 8 | t[n302 + 8]), 1 & p || 3 < (p >> 1 & 7) || !(p >> 4 & 1) || p >> 5 >= g43.Ja || !b31 || !t ? t = 0 : (c101 && (c101[0] = b31), u90 && (u90[0] = t), t = 1));
                }
                if (!t) return 3;
                if (c101 = c101[0], m39 = m39[0], d51 && (l65[0] != c101 || f57[0] != m39)) return 3;
                null != h79 && (h79[0] = g43, h79.offset = n302 - h79.w, e49(4294967286 > n302 - h79.w), e49(h79.offset == h79.ha - i246));
                break;
            }
            return 0 == y28 || 7 == y28 && d51 && null == h79 ? (null != s122 && (s122[0] |= null != g43.na && 0 < g43.na.length), null != a180 && (a180[0] = c101), null != o156 && (o156[0] = m39), 0) : y28;
        }
        function Mr(t, e, r) {
            var n303 = e.width, i247 = e.height, a181 = 0, o157 = 0, s123 = n303, c102 = i247;
            if (e.Da = null != t && 0 < t.Da, e.Da && (s123 = t.cd, c102 = t.bd, a181 = t.v, o157 = t.j, 11 > r || (a181 &= -2, o157 &= -2), 0 > a181 || 0 > o157 || 0 >= s123 || 0 >= c102 || a181 + s123 > n303 || o157 + c102 > i247)) return 0;
            if (e.v = a181, e.j = o157, e.va = a181 + s123, e.o = o157 + c102, e.U = s123, e.T = c102, e.da = null != t && 0 < t.da, e.da) {
                if (!E7(s123, c102, r = [
                    t.ib
                ], a181 = [
                    t.hb
                ])) return 0;
                e.ib = r[0], e.hb = a181[0];
            }
            return e.ob = null != t && t.ob, e.Kb = null == t || !t.Sd, e.da && (e.ob = e.ib < 3 * n303 / 4 && e.hb < 3 * i247 / 4, e.Kb = 0), 1;
        }
        function Er(t) {
            if (null == t) return 2;
            if (11 > t.S) {
                var e = t.f.RGBA;
                e.fb += (t.height - 1) * e.A, e.A = -e.A;
            } else e = t.f.kb, t = t.height, e.O += (t - 1) * e.fa, e.fa = -e.fa, e.N += (t - 1 >> 1) * e.Ab, e.Ab = -e.Ab, e.W += (t - 1 >> 1) * e.Db, e.Db = -e.Db, null != e.F && (e.J += (t - 1) * e.lb, e.lb = -e.lb);
            return 0;
        }
        function qr(t, e, r, n304) {
            if (null == n304 || 0 >= t || 0 >= e) return 2;
            if (null != r) {
                if (r.Da) {
                    var i248 = r.cd, o158 = r.bd, s124 = -2 & r.v, c103 = -2 & r.j;
                    if (0 > s124 || 0 > c103 || 0 >= i248 || 0 >= o158 || s124 + i248 > t || c103 + o158 > e) return 2;
                    t = i248, e = o158;
                }
                if (r.da) {
                    if (!E7(t, e, i248 = [
                        r.ib
                    ], o158 = [
                        r.hb
                    ])) return 2;
                    t = i248[0], e = o158[0];
                }
            }
            n304.width = t, n304.height = e;
            t: {
                var u91 = n304.width, h80 = n304.height;
                if (t = n304.S, 0 >= u91 || 0 >= h80 || !(t >= En && 13 > t)) t = 2;
                else {
                    if (0 >= n304.Rd && null == n304.sd) {
                        s124 = o158 = i248 = e = 0;
                        var l66 = (c103 = u91 * zi[t]) * h80;
                        if (11 > t || (o158 = (h80 + 1) / 2 * (e = (u91 + 1) / 2), 12 == t && (s124 = (i248 = u91) * h80)), null == (h80 = a116(l66 + 2 * o158 + s124))) {
                            t = 1;
                            break t;
                        }
                        n304.sd = h80, 11 > t ? ((u91 = n304.f.RGBA).eb = h80, u91.fb = 0, u91.A = c103, u91.size = l66) : ((u91 = n304.f.kb).y = h80, u91.O = 0, u91.fa = c103, u91.Fd = l66, u91.f = h80, u91.N = 0 + l66, u91.Ab = e, u91.Cd = o158, u91.ea = h80, u91.W = 0 + l66 + o158, u91.Db = e, u91.Ed = o158, 12 == t && (u91.F = h80, u91.J = 0 + l66 + 2 * o158), u91.Tc = s124, u91.lb = i248);
                    }
                    if (e = 1, i248 = n304.S, o158 = n304.width, s124 = n304.height, i248 >= En && 13 > i248) {
                        if (11 > i248) t = n304.f.RGBA, e &= (c103 = Math.abs(t.A)) * (s124 - 1) + o158 <= t.size, e &= c103 >= o158 * zi[i248], e &= null != t.eb;
                        else {
                            t = n304.f.kb, c103 = (o158 + 1) / 2, l66 = (s124 + 1) / 2, u91 = Math.abs(t.fa);
                            h80 = Math.abs(t.Ab);
                            var f58 = Math.abs(t.Db), d52 = Math.abs(t.lb), p = d52 * (s124 - 1) + o158;
                            e &= u91 * (s124 - 1) + o158 <= t.Fd, e &= h80 * (l66 - 1) + c103 <= t.Cd, e = (e &= f58 * (l66 - 1) + c103 <= t.Ed) & u91 >= o158 & h80 >= c103 & f58 >= c103, e &= null != t.y, e &= null != t.f, e &= null != t.ea, 12 == i248 && (e &= d52 >= o158, e &= p <= t.Tc, e &= null != t.F);
                        }
                    } else e = 0;
                    t = e ? 0 : 2;
                }
            }
            return 0 != t || null != r && r.fd && (t = Er(n304)), t;
        }
        var Dr = 64, Rr = [
            0,
            1,
            3,
            7,
            15,
            31,
            63,
            127,
            255,
            511,
            1023,
            2047,
            4095,
            8191,
            16383,
            32767,
            65535,
            131071,
            262143,
            524287,
            1048575,
            2097151,
            4194303,
            8388607,
            16777215
        ], Tr = 24, Ur = 32, zr = 8, Hr = [
            0,
            0,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7,
            7
        ];
        R8("Predictor0", "PredictorAdd0"), t77.Predictor0 = function() {
            return 4278190080;
        }, t77.Predictor1 = function(t) {
            return t;
        }, t77.Predictor2 = function(t, e, r) {
            return e[r + 0];
        }, t77.Predictor3 = function(t, e, r) {
            return e[r + 1];
        }, t77.Predictor4 = function(t, e, r) {
            return e[r - 1];
        }, t77.Predictor5 = function(t, e, r) {
            return U5(U5(t, e[r + 1]), e[r + 0]);
        }, t77.Predictor6 = function(t, e, r) {
            return U5(t, e[r - 1]);
        }, t77.Predictor7 = function(t, e, r) {
            return U5(t, e[r + 0]);
        }, t77.Predictor8 = function(t, e, r) {
            return U5(e[r - 1], e[r + 0]);
        }, t77.Predictor9 = function(t, e, r) {
            return U5(e[r + 0], e[r + 1]);
        }, t77.Predictor10 = function(t, e, r) {
            return U5(U5(t, e[r - 1]), U5(e[r + 0], e[r + 1]));
        }, t77.Predictor11 = function(t, e, r) {
            var n305 = e[r + 0];
            return 0 >= W5(n305 >> 24 & 255, t >> 24 & 255, (e = e[r - 1]) >> 24 & 255) + W5(n305 >> 16 & 255, t >> 16 & 255, e >> 16 & 255) + W5(n305 >> 8 & 255, t >> 8 & 255, e >> 8 & 255) + W5(255 & n305, 255 & t, 255 & e) ? n305 : t;
        }, t77.Predictor12 = function(t, e, r) {
            var n306 = e[r + 0];
            return (z5((t >> 24 & 255) + (n306 >> 24 & 255) - ((e = e[r - 1]) >> 24 & 255)) << 24 | z5((t >> 16 & 255) + (n306 >> 16 & 255) - (e >> 16 & 255)) << 16 | z5((t >> 8 & 255) + (n306 >> 8 & 255) - (e >> 8 & 255)) << 8 | z5((255 & t) + (255 & n306) - (255 & e))) >>> 0;
        }, t77.Predictor13 = function(t, e, r) {
            var n307 = e[r - 1];
            return (H5((t = U5(t, e[r + 0])) >> 24 & 255, n307 >> 24 & 255) << 24 | H5(t >> 16 & 255, n307 >> 16 & 255) << 16 | H5(t >> 8 & 255, n307 >> 8 & 255) << 8 | H5(t >> 0 & 255, n307 >> 0 & 255)) >>> 0;
        };
        var Wr = t77.PredictorAdd0;
        t77.PredictorAdd1 = V5, R8("Predictor2", "PredictorAdd2"), R8("Predictor3", "PredictorAdd3"), R8("Predictor4", "PredictorAdd4"), R8("Predictor5", "PredictorAdd5"), R8("Predictor6", "PredictorAdd6"), R8("Predictor7", "PredictorAdd7"), R8("Predictor8", "PredictorAdd8"), R8("Predictor9", "PredictorAdd9"), R8("Predictor10", "PredictorAdd10"), R8("Predictor11", "PredictorAdd11"), R8("Predictor12", "PredictorAdd12"), R8("Predictor13", "PredictorAdd13");
        var Vr = t77.PredictorAdd2;
        X4("ColorIndexInverseTransform", "MapARGB", "32b", function(t) {
            return t >> 8 & 255;
        }, function(t) {
            return t;
        }), X4("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function(t) {
            return t;
        }, function(t) {
            return t >> 8 & 255;
        });
        var Gr, Yr = t77.ColorIndexInverseTransform, Jr = t77.MapARGB, Xr = t77.VP8LColorIndexInverseTransformAlpha, Kr = t77.MapAlpha, Zr = t77.VP8LPredictorsAdd = [];
        Zr.length = 16, (t77.VP8LPredictors = []).length = 16, (t77.VP8LPredictorsAdd_C = []).length = 16, (t77.VP8LPredictors_C = []).length = 16;
        var $r, Qr, tn, en, rn, nn, an, on, sn, cn, un, hn, ln, fn, dn, pn, gn, mn, vn, bn, yn, wn, Nn, Ln, An, xn, Sn, _n, Pn = a116(511), kn = a116(2041), In = a116(225), Fn = a116(767), Cn = 0, jn = kn, On = In, Bn = Fn, Mn = Pn, En = 0, qn = 1, Dn = 2, Rn = 3, Tn = 4, Un = 5, zn = 6, Hn = 7, Wn = 8, Vn = 9, Gn = 10, Yn = [
            2,
            3,
            7
        ], Jn = [
            3,
            3,
            11
        ], Xn = [
            280,
            256,
            256,
            256,
            40
        ], Kn = [
            0,
            1,
            1,
            1,
            0
        ], Zn = [
            17,
            18,
            0,
            1,
            2,
            3,
            4,
            5,
            16,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15
        ], $n = [
            24,
            7,
            23,
            25,
            40,
            6,
            39,
            41,
            22,
            26,
            38,
            42,
            56,
            5,
            55,
            57,
            21,
            27,
            54,
            58,
            37,
            43,
            72,
            4,
            71,
            73,
            20,
            28,
            53,
            59,
            70,
            74,
            36,
            44,
            88,
            69,
            75,
            52,
            60,
            3,
            87,
            89,
            19,
            29,
            86,
            90,
            35,
            45,
            68,
            76,
            85,
            91,
            51,
            61,
            104,
            2,
            103,
            105,
            18,
            30,
            102,
            106,
            34,
            46,
            84,
            92,
            67,
            77,
            101,
            107,
            50,
            62,
            120,
            1,
            119,
            121,
            83,
            93,
            17,
            31,
            100,
            108,
            66,
            78,
            118,
            122,
            33,
            47,
            117,
            123,
            49,
            63,
            99,
            109,
            82,
            94,
            0,
            116,
            124,
            65,
            79,
            16,
            32,
            98,
            110,
            48,
            115,
            125,
            81,
            95,
            64,
            114,
            126,
            97,
            111,
            80,
            113,
            127,
            96,
            112
        ], Qn = [
            2954,
            2956,
            2958,
            2962,
            2970,
            2986,
            3018,
            3082,
            3212,
            3468,
            3980,
            5004
        ], ti = 8, ei = [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            17,
            18,
            19,
            20,
            20,
            21,
            21,
            22,
            22,
            23,
            23,
            24,
            25,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            91,
            93,
            95,
            96,
            98,
            100,
            101,
            102,
            104,
            106,
            108,
            110,
            112,
            114,
            116,
            118,
            122,
            124,
            126,
            128,
            130,
            132,
            134,
            136,
            138,
            140,
            143,
            145,
            148,
            151,
            154,
            157
        ], ri = [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            60,
            62,
            64,
            66,
            68,
            70,
            72,
            74,
            76,
            78,
            80,
            82,
            84,
            86,
            88,
            90,
            92,
            94,
            96,
            98,
            100,
            102,
            104,
            106,
            108,
            110,
            112,
            114,
            116,
            119,
            122,
            125,
            128,
            131,
            134,
            137,
            140,
            143,
            146,
            149,
            152,
            155,
            158,
            161,
            164,
            167,
            170,
            173,
            177,
            181,
            185,
            189,
            193,
            197,
            201,
            205,
            209,
            213,
            217,
            221,
            225,
            229,
            234,
            239,
            245,
            249,
            254,
            259,
            264,
            269,
            274,
            279,
            284
        ], ni = null, ii = [
            [
                173,
                148,
                140,
                0
            ],
            [
                176,
                155,
                140,
                135,
                0
            ],
            [
                180,
                157,
                141,
                134,
                130,
                0
            ],
            [
                254,
                254,
                243,
                230,
                196,
                177,
                153,
                140,
                133,
                130,
                129,
                0
            ]
        ], ai = [
            0,
            1,
            4,
            8,
            5,
            2,
            3,
            6,
            9,
            12,
            13,
            10,
            7,
            11,
            14,
            15
        ], oi = [
            -0,
            1,
            -1,
            2,
            -2,
            3,
            4,
            6,
            -3,
            5,
            -4,
            -5,
            -6,
            7,
            -7,
            8,
            -8,
            -9
        ], si = [
            [
                [
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        253,
                        136,
                        254,
                        255,
                        228,
                        219,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        189,
                        129,
                        242,
                        255,
                        227,
                        213,
                        255,
                        219,
                        128,
                        128,
                        128
                    ],
                    [
                        106,
                        126,
                        227,
                        252,
                        214,
                        209,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        98,
                        248,
                        255,
                        236,
                        226,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        181,
                        133,
                        238,
                        254,
                        221,
                        234,
                        255,
                        154,
                        128,
                        128,
                        128
                    ],
                    [
                        78,
                        134,
                        202,
                        247,
                        198,
                        180,
                        255,
                        219,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        185,
                        249,
                        255,
                        243,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        184,
                        150,
                        247,
                        255,
                        236,
                        224,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        77,
                        110,
                        216,
                        255,
                        236,
                        230,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        101,
                        251,
                        255,
                        241,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        170,
                        139,
                        241,
                        252,
                        236,
                        209,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        37,
                        116,
                        196,
                        243,
                        228,
                        255,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        204,
                        254,
                        255,
                        245,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        207,
                        160,
                        250,
                        255,
                        238,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        102,
                        103,
                        231,
                        255,
                        211,
                        171,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        152,
                        252,
                        255,
                        240,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        177,
                        135,
                        243,
                        255,
                        234,
                        225,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        80,
                        129,
                        211,
                        255,
                        194,
                        224,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        246,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ],
            [
                [
                    [
                        198,
                        35,
                        237,
                        223,
                        193,
                        187,
                        162,
                        160,
                        145,
                        155,
                        62
                    ],
                    [
                        131,
                        45,
                        198,
                        221,
                        172,
                        176,
                        220,
                        157,
                        252,
                        221,
                        1
                    ],
                    [
                        68,
                        47,
                        146,
                        208,
                        149,
                        167,
                        221,
                        162,
                        255,
                        223,
                        128
                    ]
                ],
                [
                    [
                        1,
                        149,
                        241,
                        255,
                        221,
                        224,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        184,
                        141,
                        234,
                        253,
                        222,
                        220,
                        255,
                        199,
                        128,
                        128,
                        128
                    ],
                    [
                        81,
                        99,
                        181,
                        242,
                        176,
                        190,
                        249,
                        202,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        129,
                        232,
                        253,
                        214,
                        197,
                        242,
                        196,
                        255,
                        255,
                        128
                    ],
                    [
                        99,
                        121,
                        210,
                        250,
                        201,
                        198,
                        255,
                        202,
                        128,
                        128,
                        128
                    ],
                    [
                        23,
                        91,
                        163,
                        242,
                        170,
                        187,
                        247,
                        210,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        200,
                        246,
                        255,
                        234,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        109,
                        178,
                        241,
                        255,
                        231,
                        245,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        44,
                        130,
                        201,
                        253,
                        205,
                        192,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        132,
                        239,
                        251,
                        219,
                        209,
                        255,
                        165,
                        128,
                        128,
                        128
                    ],
                    [
                        94,
                        136,
                        225,
                        251,
                        218,
                        190,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        22,
                        100,
                        174,
                        245,
                        186,
                        161,
                        255,
                        199,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        182,
                        249,
                        255,
                        232,
                        235,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        124,
                        143,
                        241,
                        255,
                        227,
                        234,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        35,
                        77,
                        181,
                        251,
                        193,
                        211,
                        255,
                        205,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        157,
                        247,
                        255,
                        236,
                        231,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        121,
                        141,
                        235,
                        255,
                        225,
                        227,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        45,
                        99,
                        188,
                        251,
                        195,
                        217,
                        255,
                        224,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        1,
                        251,
                        255,
                        213,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        203,
                        1,
                        248,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        137,
                        1,
                        177,
                        255,
                        224,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ],
            [
                [
                    [
                        253,
                        9,
                        248,
                        251,
                        207,
                        208,
                        255,
                        192,
                        128,
                        128,
                        128
                    ],
                    [
                        175,
                        13,
                        224,
                        243,
                        193,
                        185,
                        249,
                        198,
                        255,
                        255,
                        128
                    ],
                    [
                        73,
                        17,
                        171,
                        221,
                        161,
                        179,
                        236,
                        167,
                        255,
                        234,
                        128
                    ]
                ],
                [
                    [
                        1,
                        95,
                        247,
                        253,
                        212,
                        183,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        239,
                        90,
                        244,
                        250,
                        211,
                        209,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        155,
                        77,
                        195,
                        248,
                        188,
                        195,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        24,
                        239,
                        251,
                        218,
                        219,
                        255,
                        205,
                        128,
                        128,
                        128
                    ],
                    [
                        201,
                        51,
                        219,
                        255,
                        196,
                        186,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        69,
                        46,
                        190,
                        239,
                        201,
                        218,
                        255,
                        228,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        191,
                        251,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        223,
                        165,
                        249,
                        255,
                        213,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        141,
                        124,
                        248,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        16,
                        248,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        190,
                        36,
                        230,
                        255,
                        236,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        149,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        226,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        247,
                        192,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        240,
                        128,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        134,
                        252,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        213,
                        62,
                        250,
                        255,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        55,
                        93,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ],
            [
                [
                    [
                        202,
                        24,
                        213,
                        235,
                        186,
                        191,
                        220,
                        160,
                        240,
                        175,
                        255
                    ],
                    [
                        126,
                        38,
                        182,
                        232,
                        169,
                        184,
                        228,
                        174,
                        255,
                        187,
                        128
                    ],
                    [
                        61,
                        46,
                        138,
                        219,
                        151,
                        178,
                        240,
                        170,
                        255,
                        216,
                        128
                    ]
                ],
                [
                    [
                        1,
                        112,
                        230,
                        250,
                        199,
                        191,
                        247,
                        159,
                        255,
                        255,
                        128
                    ],
                    [
                        166,
                        109,
                        228,
                        252,
                        211,
                        215,
                        255,
                        174,
                        128,
                        128,
                        128
                    ],
                    [
                        39,
                        77,
                        162,
                        232,
                        172,
                        180,
                        245,
                        178,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        52,
                        220,
                        246,
                        198,
                        199,
                        249,
                        220,
                        255,
                        255,
                        128
                    ],
                    [
                        124,
                        74,
                        191,
                        243,
                        183,
                        193,
                        250,
                        221,
                        255,
                        255,
                        128
                    ],
                    [
                        24,
                        71,
                        130,
                        219,
                        154,
                        170,
                        243,
                        182,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        182,
                        225,
                        249,
                        219,
                        240,
                        255,
                        224,
                        128,
                        128,
                        128
                    ],
                    [
                        149,
                        150,
                        226,
                        252,
                        216,
                        205,
                        255,
                        171,
                        128,
                        128,
                        128
                    ],
                    [
                        28,
                        108,
                        170,
                        242,
                        183,
                        194,
                        254,
                        223,
                        255,
                        255,
                        128
                    ]
                ],
                [
                    [
                        1,
                        81,
                        230,
                        252,
                        204,
                        203,
                        255,
                        192,
                        128,
                        128,
                        128
                    ],
                    [
                        123,
                        102,
                        209,
                        247,
                        188,
                        196,
                        255,
                        233,
                        128,
                        128,
                        128
                    ],
                    [
                        20,
                        95,
                        153,
                        243,
                        164,
                        173,
                        255,
                        203,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        222,
                        248,
                        255,
                        216,
                        213,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        168,
                        175,
                        246,
                        252,
                        235,
                        205,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        47,
                        116,
                        215,
                        255,
                        211,
                        212,
                        255,
                        255,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        121,
                        236,
                        253,
                        212,
                        214,
                        255,
                        255,
                        128,
                        128,
                        128
                    ],
                    [
                        141,
                        84,
                        213,
                        252,
                        201,
                        202,
                        255,
                        219,
                        128,
                        128,
                        128
                    ],
                    [
                        42,
                        80,
                        160,
                        240,
                        162,
                        185,
                        255,
                        205,
                        128,
                        128,
                        128
                    ]
                ],
                [
                    [
                        1,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        244,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ],
                    [
                        238,
                        1,
                        255,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128,
                        128
                    ]
                ]
            ]
        ], ci = [
            [
                [
                    231,
                    120,
                    48,
                    89,
                    115,
                    113,
                    120,
                    152,
                    112
                ],
                [
                    152,
                    179,
                    64,
                    126,
                    170,
                    118,
                    46,
                    70,
                    95
                ],
                [
                    175,
                    69,
                    143,
                    80,
                    85,
                    82,
                    72,
                    155,
                    103
                ],
                [
                    56,
                    58,
                    10,
                    171,
                    218,
                    189,
                    17,
                    13,
                    152
                ],
                [
                    114,
                    26,
                    17,
                    163,
                    44,
                    195,
                    21,
                    10,
                    173
                ],
                [
                    121,
                    24,
                    80,
                    195,
                    26,
                    62,
                    44,
                    64,
                    85
                ],
                [
                    144,
                    71,
                    10,
                    38,
                    171,
                    213,
                    144,
                    34,
                    26
                ],
                [
                    170,
                    46,
                    55,
                    19,
                    136,
                    160,
                    33,
                    206,
                    71
                ],
                [
                    63,
                    20,
                    8,
                    114,
                    114,
                    208,
                    12,
                    9,
                    226
                ],
                [
                    81,
                    40,
                    11,
                    96,
                    182,
                    84,
                    29,
                    16,
                    36
                ]
            ],
            [
                [
                    134,
                    183,
                    89,
                    137,
                    98,
                    101,
                    106,
                    165,
                    148
                ],
                [
                    72,
                    187,
                    100,
                    130,
                    157,
                    111,
                    32,
                    75,
                    80
                ],
                [
                    66,
                    102,
                    167,
                    99,
                    74,
                    62,
                    40,
                    234,
                    128
                ],
                [
                    41,
                    53,
                    9,
                    178,
                    241,
                    141,
                    26,
                    8,
                    107
                ],
                [
                    74,
                    43,
                    26,
                    146,
                    73,
                    166,
                    49,
                    23,
                    157
                ],
                [
                    65,
                    38,
                    105,
                    160,
                    51,
                    52,
                    31,
                    115,
                    128
                ],
                [
                    104,
                    79,
                    12,
                    27,
                    217,
                    255,
                    87,
                    17,
                    7
                ],
                [
                    87,
                    68,
                    71,
                    44,
                    114,
                    51,
                    15,
                    186,
                    23
                ],
                [
                    47,
                    41,
                    14,
                    110,
                    182,
                    183,
                    21,
                    17,
                    194
                ],
                [
                    66,
                    45,
                    25,
                    102,
                    197,
                    189,
                    23,
                    18,
                    22
                ]
            ],
            [
                [
                    88,
                    88,
                    147,
                    150,
                    42,
                    46,
                    45,
                    196,
                    205
                ],
                [
                    43,
                    97,
                    183,
                    117,
                    85,
                    38,
                    35,
                    179,
                    61
                ],
                [
                    39,
                    53,
                    200,
                    87,
                    26,
                    21,
                    43,
                    232,
                    171
                ],
                [
                    56,
                    34,
                    51,
                    104,
                    114,
                    102,
                    29,
                    93,
                    77
                ],
                [
                    39,
                    28,
                    85,
                    171,
                    58,
                    165,
                    90,
                    98,
                    64
                ],
                [
                    34,
                    22,
                    116,
                    206,
                    23,
                    34,
                    43,
                    166,
                    73
                ],
                [
                    107,
                    54,
                    32,
                    26,
                    51,
                    1,
                    81,
                    43,
                    31
                ],
                [
                    68,
                    25,
                    106,
                    22,
                    64,
                    171,
                    36,
                    225,
                    114
                ],
                [
                    34,
                    19,
                    21,
                    102,
                    132,
                    188,
                    16,
                    76,
                    124
                ],
                [
                    62,
                    18,
                    78,
                    95,
                    85,
                    57,
                    50,
                    48,
                    51
                ]
            ],
            [
                [
                    193,
                    101,
                    35,
                    159,
                    215,
                    111,
                    89,
                    46,
                    111
                ],
                [
                    60,
                    148,
                    31,
                    172,
                    219,
                    228,
                    21,
                    18,
                    111
                ],
                [
                    112,
                    113,
                    77,
                    85,
                    179,
                    255,
                    38,
                    120,
                    114
                ],
                [
                    40,
                    42,
                    1,
                    196,
                    245,
                    209,
                    10,
                    25,
                    109
                ],
                [
                    88,
                    43,
                    29,
                    140,
                    166,
                    213,
                    37,
                    43,
                    154
                ],
                [
                    61,
                    63,
                    30,
                    155,
                    67,
                    45,
                    68,
                    1,
                    209
                ],
                [
                    100,
                    80,
                    8,
                    43,
                    154,
                    1,
                    51,
                    26,
                    71
                ],
                [
                    142,
                    78,
                    78,
                    16,
                    255,
                    128,
                    34,
                    197,
                    171
                ],
                [
                    41,
                    40,
                    5,
                    102,
                    211,
                    183,
                    4,
                    1,
                    221
                ],
                [
                    51,
                    50,
                    17,
                    168,
                    209,
                    192,
                    23,
                    25,
                    82
                ]
            ],
            [
                [
                    138,
                    31,
                    36,
                    171,
                    27,
                    166,
                    38,
                    44,
                    229
                ],
                [
                    67,
                    87,
                    58,
                    169,
                    82,
                    115,
                    26,
                    59,
                    179
                ],
                [
                    63,
                    59,
                    90,
                    180,
                    59,
                    166,
                    93,
                    73,
                    154
                ],
                [
                    40,
                    40,
                    21,
                    116,
                    143,
                    209,
                    34,
                    39,
                    175
                ],
                [
                    47,
                    15,
                    16,
                    183,
                    34,
                    223,
                    49,
                    45,
                    183
                ],
                [
                    46,
                    17,
                    33,
                    183,
                    6,
                    98,
                    15,
                    32,
                    183
                ],
                [
                    57,
                    46,
                    22,
                    24,
                    128,
                    1,
                    54,
                    17,
                    37
                ],
                [
                    65,
                    32,
                    73,
                    115,
                    28,
                    128,
                    23,
                    128,
                    205
                ],
                [
                    40,
                    3,
                    9,
                    115,
                    51,
                    192,
                    18,
                    6,
                    223
                ],
                [
                    87,
                    37,
                    9,
                    115,
                    59,
                    77,
                    64,
                    21,
                    47
                ]
            ],
            [
                [
                    104,
                    55,
                    44,
                    218,
                    9,
                    54,
                    53,
                    130,
                    226
                ],
                [
                    64,
                    90,
                    70,
                    205,
                    40,
                    41,
                    23,
                    26,
                    57
                ],
                [
                    54,
                    57,
                    112,
                    184,
                    5,
                    41,
                    38,
                    166,
                    213
                ],
                [
                    30,
                    34,
                    26,
                    133,
                    152,
                    116,
                    10,
                    32,
                    134
                ],
                [
                    39,
                    19,
                    53,
                    221,
                    26,
                    114,
                    32,
                    73,
                    255
                ],
                [
                    31,
                    9,
                    65,
                    234,
                    2,
                    15,
                    1,
                    118,
                    73
                ],
                [
                    75,
                    32,
                    12,
                    51,
                    192,
                    255,
                    160,
                    43,
                    51
                ],
                [
                    88,
                    31,
                    35,
                    67,
                    102,
                    85,
                    55,
                    186,
                    85
                ],
                [
                    56,
                    21,
                    23,
                    111,
                    59,
                    205,
                    45,
                    37,
                    192
                ],
                [
                    55,
                    38,
                    70,
                    124,
                    73,
                    102,
                    1,
                    34,
                    98
                ]
            ],
            [
                [
                    125,
                    98,
                    42,
                    88,
                    104,
                    85,
                    117,
                    175,
                    82
                ],
                [
                    95,
                    84,
                    53,
                    89,
                    128,
                    100,
                    113,
                    101,
                    45
                ],
                [
                    75,
                    79,
                    123,
                    47,
                    51,
                    128,
                    81,
                    171,
                    1
                ],
                [
                    57,
                    17,
                    5,
                    71,
                    102,
                    57,
                    53,
                    41,
                    49
                ],
                [
                    38,
                    33,
                    13,
                    121,
                    57,
                    73,
                    26,
                    1,
                    85
                ],
                [
                    41,
                    10,
                    67,
                    138,
                    77,
                    110,
                    90,
                    47,
                    114
                ],
                [
                    115,
                    21,
                    2,
                    10,
                    102,
                    255,
                    166,
                    23,
                    6
                ],
                [
                    101,
                    29,
                    16,
                    10,
                    85,
                    128,
                    101,
                    196,
                    26
                ],
                [
                    57,
                    18,
                    10,
                    102,
                    102,
                    213,
                    34,
                    20,
                    43
                ],
                [
                    117,
                    20,
                    15,
                    36,
                    163,
                    128,
                    68,
                    1,
                    26
                ]
            ],
            [
                [
                    102,
                    61,
                    71,
                    37,
                    34,
                    53,
                    31,
                    243,
                    192
                ],
                [
                    69,
                    60,
                    71,
                    38,
                    73,
                    119,
                    28,
                    222,
                    37
                ],
                [
                    68,
                    45,
                    128,
                    34,
                    1,
                    47,
                    11,
                    245,
                    171
                ],
                [
                    62,
                    17,
                    19,
                    70,
                    146,
                    85,
                    55,
                    62,
                    70
                ],
                [
                    37,
                    43,
                    37,
                    154,
                    100,
                    163,
                    85,
                    160,
                    1
                ],
                [
                    63,
                    9,
                    92,
                    136,
                    28,
                    64,
                    32,
                    201,
                    85
                ],
                [
                    75,
                    15,
                    9,
                    9,
                    64,
                    255,
                    184,
                    119,
                    16
                ],
                [
                    86,
                    6,
                    28,
                    5,
                    64,
                    255,
                    25,
                    248,
                    1
                ],
                [
                    56,
                    8,
                    17,
                    132,
                    137,
                    255,
                    55,
                    116,
                    128
                ],
                [
                    58,
                    15,
                    20,
                    82,
                    135,
                    57,
                    26,
                    121,
                    40
                ]
            ],
            [
                [
                    164,
                    50,
                    31,
                    137,
                    154,
                    133,
                    25,
                    35,
                    218
                ],
                [
                    51,
                    103,
                    44,
                    131,
                    131,
                    123,
                    31,
                    6,
                    158
                ],
                [
                    86,
                    40,
                    64,
                    135,
                    148,
                    224,
                    45,
                    183,
                    128
                ],
                [
                    22,
                    26,
                    17,
                    131,
                    240,
                    154,
                    14,
                    1,
                    209
                ],
                [
                    45,
                    16,
                    21,
                    91,
                    64,
                    222,
                    7,
                    1,
                    197
                ],
                [
                    56,
                    21,
                    39,
                    155,
                    60,
                    138,
                    23,
                    102,
                    213
                ],
                [
                    83,
                    12,
                    13,
                    54,
                    192,
                    255,
                    68,
                    47,
                    28
                ],
                [
                    85,
                    26,
                    85,
                    85,
                    128,
                    128,
                    32,
                    146,
                    171
                ],
                [
                    18,
                    11,
                    7,
                    63,
                    144,
                    171,
                    4,
                    4,
                    246
                ],
                [
                    35,
                    27,
                    10,
                    146,
                    174,
                    171,
                    12,
                    26,
                    128
                ]
            ],
            [
                [
                    190,
                    80,
                    35,
                    99,
                    180,
                    80,
                    126,
                    54,
                    45
                ],
                [
                    85,
                    126,
                    47,
                    87,
                    176,
                    51,
                    41,
                    20,
                    32
                ],
                [
                    101,
                    75,
                    128,
                    139,
                    118,
                    146,
                    116,
                    128,
                    85
                ],
                [
                    56,
                    41,
                    15,
                    176,
                    236,
                    85,
                    37,
                    9,
                    62
                ],
                [
                    71,
                    30,
                    17,
                    119,
                    118,
                    255,
                    17,
                    18,
                    138
                ],
                [
                    101,
                    38,
                    60,
                    138,
                    55,
                    70,
                    43,
                    26,
                    142
                ],
                [
                    146,
                    36,
                    19,
                    30,
                    171,
                    255,
                    97,
                    27,
                    20
                ],
                [
                    138,
                    45,
                    61,
                    62,
                    219,
                    1,
                    81,
                    188,
                    64
                ],
                [
                    32,
                    41,
                    20,
                    117,
                    151,
                    142,
                    20,
                    21,
                    163
                ],
                [
                    112,
                    19,
                    12,
                    61,
                    195,
                    128,
                    48,
                    4,
                    24
                ]
            ]
        ], ui = [
            [
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        176,
                        246,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        223,
                        241,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        249,
                        253,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        244,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        234,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        246,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        239,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        248,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        253,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        255,
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ],
            [
                [
                    [
                        217,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        225,
                        252,
                        241,
                        253,
                        255,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        234,
                        250,
                        241,
                        250,
                        253,
                        255,
                        253,
                        254,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        223,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        238,
                        253,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        248,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        249,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        247,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ],
            [
                [
                    [
                        186,
                        251,
                        250,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        234,
                        251,
                        244,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        251,
                        243,
                        253,
                        254,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        236,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        251,
                        253,
                        253,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ],
            [
                [
                    [
                        248,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        254,
                        252,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        248,
                        254,
                        249,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        253,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        246,
                        253,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        252,
                        254,
                        251,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        254,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        248,
                        254,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        255,
                        254,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        251,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        245,
                        251,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        253,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        251,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        252,
                        253,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        252,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        249,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        253,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        250,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ],
                [
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        254,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ],
                    [
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255,
                        255
                    ]
                ]
            ]
        ], hi = [
            0,
            1,
            2,
            3,
            6,
            4,
            5,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            7,
            0
        ], li = [], fi = [], di = [], pi = 1, gi = 2, mi = [], vi = [];
        vr("UpsampleRgbLinePair", Ar, 3), vr("UpsampleBgrLinePair", xr, 3), vr("UpsampleRgbaLinePair", Ir, 4), vr("UpsampleBgraLinePair", kr, 4), vr("UpsampleArgbLinePair", Pr, 4), vr("UpsampleRgba4444LinePair", _r, 2), vr("UpsampleRgb565LinePair", Sr, 2);
        var bi = t77.UpsampleRgbLinePair, yi = t77.UpsampleBgrLinePair, wi = t77.UpsampleRgbaLinePair, Ni = t77.UpsampleBgraLinePair, Li = t77.UpsampleArgbLinePair, Ai = t77.UpsampleRgba4444LinePair, xi = t77.UpsampleRgb565LinePair, Si = 16, _i = 1 << Si - 1, Pi = -227, ki = 482, Ii = 6, Fi = (256 << Ii) - 1, Ci = 0, ji = a116(256), Oi = a116(256), Bi = a116(256), Mi = a116(256), Ei = a116(ki - Pi), qi = a116(ki - Pi);
        Fr("YuvToRgbRow", Ar, 3), Fr("YuvToBgrRow", xr, 3), Fr("YuvToRgbaRow", Ir, 4), Fr("YuvToBgraRow", kr, 4), Fr("YuvToArgbRow", Pr, 4), Fr("YuvToRgba4444Row", _r, 2), Fr("YuvToRgb565Row", Sr, 2);
        var Di = [
            0,
            4,
            8,
            12,
            128,
            132,
            136,
            140,
            256,
            260,
            264,
            268,
            384,
            388,
            392,
            396
        ], Ri = [
            0,
            2,
            8
        ], Ti = [
            8,
            7,
            6,
            4,
            4,
            2,
            2,
            2,
            1,
            1,
            1,
            1
        ], Ui = 1;
        this.WebPDecodeRGBA = function(t81, r37, n308, i249, a182) {
            var o159 = qn, s125 = new rr, c104 = new ot3;
            s125.ba = c104, c104.S = o159, c104.width = [
                c104.width
            ], c104.height = [
                c104.height
            ];
            var u92 = c104.width, h81 = c104.height, l67 = new st3;
            if (null == l67 || null == t81) var f59 = 2;
            else e49(null != l67), f59 = Br(t81, r37, n308, l67.width, l67.height, l67.Pd, l67.Qd, l67.format, null);
            if (0 != f59 ? u92 = 0 : (null != u92 && (u92[0] = l67.width[0]), null != h81 && (h81[0] = l67.height[0]), u92 = 1), u92) {
                c104.width = c104.width[0], c104.height = c104.height[0], null != i249 && (i249[0] = c104.width), null != a182 && (a182[0] = c104.height);
                t: {
                    if (i249 = new Gt2, (a182 = new nr).data = t81, a182.w = r37, a182.ha = n308, a182.kd = 1, r37 = [
                        0
                    ], e49(null != a182), (0 == (t81 = Br(a182.data, a182.w, a182.ha, null, null, null, r37, null, a182)) || 7 == t81) && r37[0] && (t81 = 4), 0 == (r37 = t81)) {
                        if (e49(null != s125), i249.data = a182.data, i249.w = a182.w + a182.offset, i249.ha = a182.ha - a182.offset, i249.put = dt3, i249.ac = ft3, i249.bc = pt2, i249.ma = s125, a182.xa) {
                            if (null == (t81 = kt2())) {
                                s125 = 1;
                                break t;
                            }
                            if (function(t, r) {
                                var n309 = [
                                    0
                                ], i250 = [
                                    0
                                ], a183 = [
                                    0
                                ];
                                e: for(;;){
                                    if (null == t) return 0;
                                    if (null == r) return t.a = 2, 0;
                                    if (t.l = r, t.a = 0, v23(t.m, r.data, r.w, r.ha), !gt2(t.m, n309, i250, a183)) {
                                        t.a = 3;
                                        break e;
                                    }
                                    if (t.xb = gi, r.width = n309[0], r.height = i250[0], !It2(n309[0], i250[0], 1, t, null)) break e;
                                    return 1;
                                }
                                return e49(0 != t.a), 0;
                            }(t81, i249)) {
                                if (i249 = 0 == (r37 = qr(i249.width, i249.height, s125.Oa, s125.ba))) {
                                    e: {
                                        i249 = t81;
                                        r: for(;;){
                                            if (null == i249) {
                                                i249 = 0;
                                                break e;
                                            }
                                            if (e49(null != i249.s.yc), e49(null != i249.s.Ya), e49(0 < i249.s.Wb), e49(null != (n308 = i249.l)), e49(null != (a182 = n308.ma)), 0 != i249.xb) {
                                                if (i249.ca = a182.ba, i249.tb = a182.tb, e49(null != i249.ca), !Mr(a182.Oa, n308, Rn)) {
                                                    i249.a = 2;
                                                    break r;
                                                }
                                                if (!Ft2(i249, n308.width)) break r;
                                                if (n308.da) break r;
                                                if ((n308.da || nt3(i249.ca.S)) && mr(), 11 > i249.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != i249.ca.f.kb.F && mr()), i249.Pb && 0 < i249.s.ua && null == i249.s.vb.X && !O9(i249.s.vb, i249.s.Wa.Xa)) {
                                                    i249.a = 1;
                                                    break r;
                                                }
                                                i249.xb = 0;
                                            }
                                            if (!_t2(i249, i249.V, i249.Ba, i249.c, i249.i, n308.o, Lt2)) break r;
                                            a182.Dc = i249.Ma, i249 = 1;
                                            break e;
                                        }
                                        e49(0 != i249.a), i249 = 0;
                                    }
                                    i249 = !i249;
                                }
                                i249 && (r37 = t81.a);
                            } else r37 = t81.a;
                        } else {
                            t81 = new Yt2;
                            if (t81.Fa = a182.na, t81.P = a182.P, t81.qc = a182.Sa, Kt2(t81, i249)) {
                                if (0 == (r37 = qr(i249.width, i249.height, s125.Oa, s125.ba))) {
                                    if (t81.Aa = 0, n308 = s125.Oa, e49(null != (a182 = t81)), null != n308) {
                                        if (0 < (u92 = 0 > (u92 = n308.Md) ? 0 : 100 < u92 ? 255 : 255 * u92 / 100)) {
                                            for(h81 = l67 = 0; 4 > h81; ++h81)12 > (f59 = a182.pb[h81]).lc && (f59.ia = u92 * Ti[0 > f59.lc ? 0 : f59.lc] >> 3), l67 |= f59.ia;
                                            l67 && (alert("todo:VP8InitRandom"), a182.ia = 1);
                                        }
                                        a182.Ga = n308.Id, 100 < a182.Ga ? a182.Ga = 100 : 0 > a182.Ga && (a182.Ga = 0);
                                    }
                                    Qt2(t81, i249) || (r37 = t81.a);
                                }
                            } else r37 = t81.a;
                        }
                        0 == r37 && null != s125.Oa && s125.Oa.fd && (r37 = Er(s125.ba));
                    }
                    s125 = r37;
                }
                o159 = 0 != s125 ? null : 11 > o159 ? c104.f.RGBA.eb : c104.f.kb.y;
            } else o159 = null;
            return o159;
        };
        var zi = [
            3,
            4,
            3,
            4,
            4,
            2,
            2,
            4,
            4,
            4,
            2,
            1,
            1
        ];
    };
    function u54(t, e) {
        for(var r = "", n310 = 0; n310 < 4; n310++)r += String.fromCharCode(t[e++]);
        return r;
    }
    function h49(t, e) {
        return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16) >>> 0;
    }
    function l42(t, e) {
        return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0;
    }
    new c62;
    var f38 = [
        0
    ], d33 = [
        0
    ], p15 = [], g27 = new c62, m23 = t75, v22 = function(t82, e52) {
        var r38 = {}, n311 = 0, i251 = !1, a184 = 0, o160 = 0;
        if (r38.frames = [], !/** @license
   * Copyright (c) 2017 Dominik Homberger
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  https://webpjs.appspot.com
  WebPRiffParser dominikhlbg@gmail.com
  */ function(t, e, r, n312) {
            for(var i252 = 0; i252 < n312; i252++)if (t[e + i252] != r.charCodeAt(i252)) return !0;
            return !1;
        }(t82, e52, "RIFF", 4)) {
            var s126, c105;
            l42(t82, e52 += 4);
            for(e52 += 8; e52 < t82.length;){
                var f60 = u54(t82, e52), d53 = l42(t82, e52 += 4);
                e52 += 4;
                var p = d53 + (1 & d53);
                switch(f60){
                    case "VP8 ":
                    case "VP8L":
                        void 0 === r38.frames[n311] && (r38.frames[n311] = {});
                        (v36 = r38.frames[n311]).src_off = i251 ? o160 : e52 - 8, v36.src_size = a184 + d53 + 8, n311++, i251 && (i251 = !1, a184 = 0, o160 = 0);
                        break;
                    case "VP8X":
                        (v36 = r38.header = {}).feature_flags = t82[e52];
                        var g44 = e52 + 4;
                        v36.canvas_width = 1 + h49(t82, g44);
                        g44 += 3;
                        v36.canvas_height = 1 + h49(t82, g44);
                        g44 += 3;
                        break;
                    case "ALPH":
                        i251 = !0, a184 = p + 8, o160 = e52 - 8;
                        break;
                    case "ANIM":
                        (v36 = r38.header).bgcolor = l42(t82, e52);
                        g44 = e52 + 4;
                        v36.loop_count = (s126 = t82)[(c105 = g44) + 0] << 0 | s126[c105 + 1] << 8;
                        g44 += 2;
                        break;
                    case "ANMF":
                        var m40, v36;
                        (v36 = r38.frames[n311] = {}).offset_x = 2 * h49(t82, e52), e52 += 3, v36.offset_y = 2 * h49(t82, e52), e52 += 3, v36.width = 1 + h49(t82, e52), e52 += 3, v36.height = 1 + h49(t82, e52), e52 += 3, v36.duration = h49(t82, e52), e52 += 3, m40 = t82[e52++], v36.dispose = 1 & m40, v36.blend = m40 >> 1 & 1;
                }
                "ANMF" != f60 && (e52 += p);
            }
            return r38;
        }
    }(m23, 0);
    v22.response = m23, v22.rgbaoutput = !0, v22.dataurl = !1;
    var b17 = v22.header ? v22.header : null, y18 = v22.frames ? v22.frames : null;
    if (b17) {
        b17.loop_counter = b17.loop_count, f38 = [
            b17.canvas_height
        ], d33 = [
            b17.canvas_width
        ];
        for(var w20 = 0; w20 < y18.length && 0 != y18[w20].blend; w20++);
    }
    var N18 = y18[0], L16 = g27.WebPDecodeRGBA(m23, N18.src_off, N18.src_size, d33, f38);
    N18.rgba = L16, N18.imgwidth = d33[0], N18.imgheight = f38[0];
    for(var A17 = 0; A17 < d33[0] * f38[0] * 4; A17++)p15[A17] = L16[A17];
    return this.width = d33, this.height = f38, this.data = p15, this;
}
!function(t83) {
    var r39 = function() {
        return "function" == typeof _fflate.zlibSync;
    }, n313 = function(r, n314, a186, h83) {
        var l69 = 4, f62 = s127;
        switch(h83){
            case t83.image_compression.FAST:
                l69 = 1, f62 = o161;
                break;
            case t83.image_compression.MEDIUM:
                l69 = 6, f62 = c106;
                break;
            case t83.image_compression.SLOW:
                l69 = 9, f62 = u93;
        }
        r = i253(r, n314, a186, f62);
        var d54 = _fflate.zlibSync(r, {
            level: l69
        });
        return t83.__addimage__.arrayBufferToBinaryString(d54);
    }, i253 = function(t, e, r, n315) {
        for(var i254, a187, o162, s128 = t.length / e, c107 = new Uint8Array(t.length + s128), u94 = l68(), h84 = 0; h84 < s128; h84 += 1){
            if (o162 = h84 * e, i254 = t.subarray(o162, o162 + e), n315) c107.set(n315(i254, r, a187), o162 + h84);
            else {
                for(var d55, p = u94.length, g45 = []; d55 < p; d55 += 1)g45[d55] = u94[d55](i254, r, a187);
                var m41 = f61(g45.concat());
                c107.set(g45[m41], o162 + h84);
            }
            a187 = i254;
        }
        return c107;
    }, a185 = function(t) {
        var e = Array.apply([], t);
        return e.unshift(0), e;
    }, o161 = function(t, e) {
        var r, n316 = [], i255 = t.length;
        n316[0] = 1;
        for(var a188 = 0; a188 < i255; a188 += 1)r = t[a188 - e] || 0, n316[a188 + 1] = t[a188] - r + 256 & 255;
        return n316;
    }, s127 = function(t, e, r) {
        var n317, i256 = [], a189 = t.length;
        i256[0] = 2;
        for(var o163 = 0; o163 < a189; o163 += 1)n317 = r && r[o163] || 0, i256[o163 + 1] = t[o163] - n317 + 256 & 255;
        return i256;
    }, c106 = function(t, e, r) {
        var n318, i257, a190 = [], o164 = t.length;
        a190[0] = 3;
        for(var s129 = 0; s129 < o164; s129 += 1)n318 = t[s129 - e] || 0, i257 = r && r[s129] || 0, a190[s129 + 1] = t[s129] + 256 - (n318 + i257 >>> 1) & 255;
        return a190;
    }, u93 = function(t, e, r) {
        var n319, i258, a191, o165, s130 = [], c108 = t.length;
        s130[0] = 4;
        for(var u95 = 0; u95 < c108; u95 += 1)n319 = t[u95 - e] || 0, i258 = r && r[u95] || 0, a191 = r && r[u95 - e] || 0, o165 = h82(n319, i258, a191), s130[u95 + 1] = t[u95] - o165 + 256 & 255;
        return s130;
    }, h82 = function(t, e, r) {
        if (t === e && e === r) return t;
        var n320 = Math.abs(e - r), i259 = Math.abs(t - r), a192 = Math.abs(t + e - r - r);
        return n320 <= i259 && n320 <= a192 ? t : i259 <= a192 ? e : r;
    }, l68 = function() {
        return [
            a185,
            o161,
            s127,
            c106,
            u93
        ];
    }, f61 = function(t84) {
        var e53 = t84.map(function(t85) {
            return t85.reduce(function(t, e) {
                return t + Math.abs(e);
            }, 0);
        });
        return e53.indexOf(Math.min.apply(null, e53));
    };
    t83.processPNG = function(e54, i260, a193, o166) {
        var s131, c109, u96, h85, l70, f63, d56, p, g46, m42, v37, b32, y29, w32, N28, L24 = this.decode.FLATE_DECODE, A25 = "";
        if (this.__addimage__.isArrayBuffer(e54) && (e54 = new Uint8Array(e54)), this.__addimage__.isArrayBufferView(e54)) {
            if (e54 = (u96 = new Kt(e54)).imgData, c109 = u96.bits, s131 = u96.colorSpace, l70 = u96.colors, -1 !== [
                4,
                6
            ].indexOf(u96.colorType)) {
                if (8 === u96.bits) {
                    g46 = (p = 32 == u96.pixelBitlength ? new Uint32Array(u96.decodePixels().buffer) : 16 == u96.pixelBitlength ? new Uint16Array(u96.decodePixels().buffer) : new Uint8Array(u96.decodePixels().buffer)).length, v37 = new Uint8Array(g46 * u96.colors), m42 = new Uint8Array(g46);
                    var x17, S18 = u96.pixelBitlength - u96.bits;
                    for(w32 = 0, N28 = 0; w32 < g46; w32++){
                        for(y29 = p[w32], x17 = 0; x17 < S18;)v37[N28++] = y29 >>> x17 & 255, x17 += u96.bits;
                        m42[w32] = y29 >>> x17 & 255;
                    }
                }
                if (16 === u96.bits) {
                    g46 = (p = new Uint32Array(u96.decodePixels().buffer)).length, v37 = new Uint8Array(g46 * (32 / u96.pixelBitlength) * u96.colors), m42 = new Uint8Array(g46 * (32 / u96.pixelBitlength)), b32 = u96.colors > 1, w32 = 0, N28 = 0;
                    for(var _22 = 0; w32 < g46;)y29 = p[w32++], v37[N28++] = y29 >>> 0 & 255, b32 && (v37[N28++] = y29 >>> 16 & 255, y29 = p[w32++], v37[N28++] = y29 >>> 0 & 255), m42[_22++] = y29 >>> 16 & 255;
                    c109 = 8;
                }
                o166 !== t83.image_compression.NONE && r39() ? (e54 = n313(v37, u96.width * u96.colors, u96.colors, o166), d56 = n313(m42, u96.width, 1, o166)) : (e54 = v37, d56 = m42, L24 = void 0);
            }
            if (3 === u96.colorType && (s131 = this.color_spaces.INDEXED, f63 = u96.palette, u96.transparency.indexed)) {
                var P22 = u96.transparency.indexed, k20 = 0;
                for(w32 = 0, g46 = P22.length; w32 < g46; ++w32)k20 += P22[w32];
                if ((k20 /= 255) === g46 - 1 && -1 !== P22.indexOf(0)) h85 = [
                    P22.indexOf(0)
                ];
                else if (k20 !== g46) {
                    for(p = u96.decodePixels(), m42 = new Uint8Array(p.length), w32 = 0, g46 = p.length; w32 < g46; w32++)m42[w32] = P22[p[w32]];
                    d56 = n313(m42, u96.width, 1);
                }
            }
            var I15 = function(e) {
                var r;
                switch(e){
                    case t83.image_compression.FAST:
                        r = 11;
                        break;
                    case t83.image_compression.MEDIUM:
                        r = 13;
                        break;
                    case t83.image_compression.SLOW:
                        r = 14;
                        break;
                    default:
                        r = 12;
                }
                return r;
            }(o166);
            return L24 === this.decode.FLATE_DECODE && (A25 = "/Predictor " + I15 + " "), A25 += "/Colors " + l70 + " /BitsPerComponent " + c109 + " /Columns " + u96.width, (this.__addimage__.isArrayBuffer(e54) || this.__addimage__.isArrayBufferView(e54)) && (e54 = this.__addimage__.arrayBufferToBinaryString(e54)), (d56 && this.__addimage__.isArrayBuffer(d56) || this.__addimage__.isArrayBufferView(d56)) && (d56 = this.__addimage__.arrayBufferToBinaryString(d56)), {
                alias: a193,
                data: e54,
                index: i260,
                filter: L24,
                decodeParameters: A25,
                transparency: h85,
                palette: f63,
                sMask: d56,
                predictor: I15,
                width: u96.width,
                height: u96.height,
                bitsPerComponent: c109,
                colorSpace: s131
            };
        }
    };
}(E.API), function(t) {
    t.processGIF89A = function(e, r, n321, i261) {
        var a194 = new Zt(e), o167 = a194.width, s132 = a194.height, c110 = [];
        a194.decodeAndBlitFrameRGBA(0, c110);
        var u97 = {
            data: c110,
            width: o167,
            height: s132
        }, h86 = new Qt(100).encode(u97, 100);
        return t.processJPEG.call(this, h86, r, n321, i261);
    }, t.processGIF87A = t.processGIF89A;
}(E.API), te.prototype.parseHeader = function() {
    if (this.fileSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, !0), this.pos += 4, this.offset = this.datav.getUint32(this.pos, !0), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.width = this.datav.getUint32(this.pos, !0), this.pos += 4, this.height = this.datav.getInt32(this.pos, !0), this.pos += 4, this.planes = this.datav.getUint16(this.pos, !0), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, !0), this.pos += 2, this.compress = this.datav.getUint32(this.pos, !0), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.hr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.vr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.colors = this.datav.getUint32(this.pos, !0), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, !0), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {
        var t = 0 === this.colors ? 1 << this.bitPP : this.colors;
        this.palette = new Array(t);
        for(var e = 0; e < t; e++){
            var r = this.datav.getUint8(this.pos++, !0), n322 = this.datav.getUint8(this.pos++, !0), i262 = this.datav.getUint8(this.pos++, !0), a195 = this.datav.getUint8(this.pos++, !0);
            this.palette[e] = {
                red: i262,
                green: n322,
                blue: r,
                quad: a195
            };
        }
    }
    this.height < 0 && (this.height *= -1, this.bottom_up = !1);
}, te.prototype.parseBGR = function() {
    this.pos = this.offset;
    try {
        var t = "bit" + this.bitPP, e = this.width * this.height * 4;
        this.data = new Uint8Array(e), this[t]();
    } catch (t) {
        a.log("bit decode error:" + t);
    }
}, te.prototype.bit1 = function() {
    var t, e = Math.ceil(this.width / 8), r = e % 4;
    for(t = this.height - 1; t >= 0; t--){
        for(var n323 = this.bottom_up ? t : this.height - 1 - t, i263 = 0; i263 < e; i263++)for(var a196 = this.datav.getUint8(this.pos++, !0), o168 = n323 * this.width * 4 + 8 * i263 * 4, s133 = 0; s133 < 8 && 8 * i263 + s133 < this.width; s133++){
            var c111 = this.palette[a196 >> 7 - s133 & 1];
            this.data[o168 + 4 * s133] = c111.blue, this.data[o168 + 4 * s133 + 1] = c111.green, this.data[o168 + 4 * s133 + 2] = c111.red, this.data[o168 + 4 * s133 + 3] = 255;
        }
        0 !== r && (this.pos += 4 - r);
    }
}, te.prototype.bit4 = function() {
    for(var t = Math.ceil(this.width / 2), e = t % 4, r = this.height - 1; r >= 0; r--){
        for(var n324 = this.bottom_up ? r : this.height - 1 - r, i264 = 0; i264 < t; i264++){
            var a197 = this.datav.getUint8(this.pos++, !0), o169 = n324 * this.width * 4 + 2 * i264 * 4, s134 = a197 >> 4, c112 = 15 & a197, u98 = this.palette[s134];
            if (this.data[o169] = u98.blue, this.data[o169 + 1] = u98.green, this.data[o169 + 2] = u98.red, this.data[o169 + 3] = 255, 2 * i264 + 1 >= this.width) break;
            u98 = this.palette[c112], this.data[o169 + 4] = u98.blue, this.data[o169 + 4 + 1] = u98.green, this.data[o169 + 4 + 2] = u98.red, this.data[o169 + 4 + 3] = 255;
        }
        0 !== e && (this.pos += 4 - e);
    }
}, te.prototype.bit8 = function() {
    for(var t = this.width % 4, e = this.height - 1; e >= 0; e--){
        for(var r = this.bottom_up ? e : this.height - 1 - e, n325 = 0; n325 < this.width; n325++){
            var i265 = this.datav.getUint8(this.pos++, !0), a198 = r * this.width * 4 + 4 * n325;
            if (i265 < this.palette.length) {
                var o170 = this.palette[i265];
                this.data[a198] = o170.red, this.data[a198 + 1] = o170.green, this.data[a198 + 2] = o170.blue, this.data[a198 + 3] = 255;
            } else this.data[a198] = 255, this.data[a198 + 1] = 255, this.data[a198 + 2] = 255, this.data[a198 + 3] = 255;
        }
        0 !== t && (this.pos += 4 - t);
    }
}, te.prototype.bit15 = function() {
    for(var t = this.width % 3, e = parseInt("11111", 2), r = this.height - 1; r >= 0; r--){
        for(var n326 = this.bottom_up ? r : this.height - 1 - r, i266 = 0; i266 < this.width; i266++){
            var a199 = this.datav.getUint16(this.pos, !0);
            this.pos += 2;
            var o171 = (a199 & e) / e * 255 | 0, s135 = (a199 >> 5 & e) / e * 255 | 0, c113 = (a199 >> 10 & e) / e * 255 | 0, u99 = a199 >> 15 ? 255 : 0, h87 = n326 * this.width * 4 + 4 * i266;
            this.data[h87] = c113, this.data[h87 + 1] = s135, this.data[h87 + 2] = o171, this.data[h87 + 3] = u99;
        }
        this.pos += t;
    }
}, te.prototype.bit16 = function() {
    for(var t = this.width % 3, e = parseInt("11111", 2), r = parseInt("111111", 2), n327 = this.height - 1; n327 >= 0; n327--){
        for(var i267 = this.bottom_up ? n327 : this.height - 1 - n327, a200 = 0; a200 < this.width; a200++){
            var o172 = this.datav.getUint16(this.pos, !0);
            this.pos += 2;
            var s136 = (o172 & e) / e * 255 | 0, c114 = (o172 >> 5 & r) / r * 255 | 0, u100 = (o172 >> 11) / e * 255 | 0, h88 = i267 * this.width * 4 + 4 * a200;
            this.data[h88] = u100, this.data[h88 + 1] = c114, this.data[h88 + 2] = s136, this.data[h88 + 3] = 255;
        }
        this.pos += t;
    }
}, te.prototype.bit24 = function() {
    for(var t = this.height - 1; t >= 0; t--){
        for(var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++){
            var n328 = this.datav.getUint8(this.pos++, !0), i268 = this.datav.getUint8(this.pos++, !0), a201 = this.datav.getUint8(this.pos++, !0), o173 = e * this.width * 4 + 4 * r;
            this.data[o173] = a201, this.data[o173 + 1] = i268, this.data[o173 + 2] = n328, this.data[o173 + 3] = 255;
        }
        this.pos += this.width % 4;
    }
}, te.prototype.bit32 = function() {
    for(var t = this.height - 1; t >= 0; t--)for(var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++){
        var n329 = this.datav.getUint8(this.pos++, !0), i269 = this.datav.getUint8(this.pos++, !0), a202 = this.datav.getUint8(this.pos++, !0), o174 = this.datav.getUint8(this.pos++, !0), s137 = e * this.width * 4 + 4 * r;
        this.data[s137] = a202, this.data[s137 + 1] = i269, this.data[s137 + 2] = n329, this.data[s137 + 3] = o174;
    }
}, te.prototype.getData = function() {
    return this.data;
}, /**
 * @license
 * Copyright (c) 2018 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    t.processBMP = function(e, r, n330, i270) {
        var a203 = new te(e, !1), o175 = a203.width, s138 = a203.height, c115 = {
            data: a203.getData(),
            width: o175,
            height: s138
        }, u101 = new Qt(100).encode(c115, 100);
        return t.processJPEG.call(this, u101, r, n330, i270);
    };
}(E.API), ee.prototype.getData = function() {
    return this.data;
}, /**
 * @license
 * Copyright (c) 2019 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t) {
    t.processWEBP = function(e, r, n331, i271) {
        var a204 = new ee(e, !1), o176 = a204.width, s139 = a204.height, c116 = {
            data: a204.getData(),
            width: o176,
            height: s139
        }, u102 = new Qt(100).encode(c116, 100);
        return t.processJPEG.call(this, u102, r, n331, i271);
    };
}(E.API), E.API.processRGBA = function(t, e, r) {
    for(var n332 = t.data, i272 = n332.length, a205 = new Uint8Array(i272 / 4 * 3), o177 = new Uint8Array(i272 / 4), s140 = 0, c117 = 0, u103 = 0; u103 < i272; u103 += 4){
        var h89 = n332[u103], l71 = n332[u103 + 1], f64 = n332[u103 + 2], d57 = n332[u103 + 3];
        a205[s140++] = h89, a205[s140++] = l71, a205[s140++] = f64, o177[c117++] = d57;
    }
    var p = this.__addimage__.arrayBufferToBinaryString(a205);
    return {
        alpha: this.__addimage__.arrayBufferToBinaryString(o177),
        data: p,
        index: e,
        alias: r,
        colorSpace: "DeviceRGB",
        bitsPerComponent: 8,
        width: t.width,
        height: t.height
    };
}, E.API.setLanguage = function(t) {
    return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = !1), void 0 !== ({
        af: "Afrikaans",
        sq: "Albanian",
        ar: "Arabic (Standard)",
        "ar-DZ": "Arabic (Algeria)",
        "ar-BH": "Arabic (Bahrain)",
        "ar-EG": "Arabic (Egypt)",
        "ar-IQ": "Arabic (Iraq)",
        "ar-JO": "Arabic (Jordan)",
        "ar-KW": "Arabic (Kuwait)",
        "ar-LB": "Arabic (Lebanon)",
        "ar-LY": "Arabic (Libya)",
        "ar-MA": "Arabic (Morocco)",
        "ar-OM": "Arabic (Oman)",
        "ar-QA": "Arabic (Qatar)",
        "ar-SA": "Arabic (Saudi Arabia)",
        "ar-SY": "Arabic (Syria)",
        "ar-TN": "Arabic (Tunisia)",
        "ar-AE": "Arabic (U.A.E.)",
        "ar-YE": "Arabic (Yemen)",
        an: "Aragonese",
        hy: "Armenian",
        as: "Assamese",
        ast: "Asturian",
        az: "Azerbaijani",
        eu: "Basque",
        be: "Belarusian",
        bn: "Bengali",
        bs: "Bosnian",
        br: "Breton",
        bg: "Bulgarian",
        my: "Burmese",
        ca: "Catalan",
        ch: "Chamorro",
        ce: "Chechen",
        zh: "Chinese",
        "zh-HK": "Chinese (Hong Kong)",
        "zh-CN": "Chinese (PRC)",
        "zh-SG": "Chinese (Singapore)",
        "zh-TW": "Chinese (Taiwan)",
        cv: "Chuvash",
        co: "Corsican",
        cr: "Cree",
        hr: "Croatian",
        cs: "Czech",
        da: "Danish",
        nl: "Dutch (Standard)",
        "nl-BE": "Dutch (Belgian)",
        en: "English",
        "en-AU": "English (Australia)",
        "en-BZ": "English (Belize)",
        "en-CA": "English (Canada)",
        "en-IE": "English (Ireland)",
        "en-JM": "English (Jamaica)",
        "en-NZ": "English (New Zealand)",
        "en-PH": "English (Philippines)",
        "en-ZA": "English (South Africa)",
        "en-TT": "English (Trinidad & Tobago)",
        "en-GB": "English (United Kingdom)",
        "en-US": "English (United States)",
        "en-ZW": "English (Zimbabwe)",
        eo: "Esperanto",
        et: "Estonian",
        fo: "Faeroese",
        fj: "Fijian",
        fi: "Finnish",
        fr: "French (Standard)",
        "fr-BE": "French (Belgium)",
        "fr-CA": "French (Canada)",
        "fr-FR": "French (France)",
        "fr-LU": "French (Luxembourg)",
        "fr-MC": "French (Monaco)",
        "fr-CH": "French (Switzerland)",
        fy: "Frisian",
        fur: "Friulian",
        gd: "Gaelic (Scots)",
        "gd-IE": "Gaelic (Irish)",
        gl: "Galacian",
        ka: "Georgian",
        de: "German (Standard)",
        "de-AT": "German (Austria)",
        "de-DE": "German (Germany)",
        "de-LI": "German (Liechtenstein)",
        "de-LU": "German (Luxembourg)",
        "de-CH": "German (Switzerland)",
        el: "Greek",
        gu: "Gujurati",
        ht: "Haitian",
        he: "Hebrew",
        hi: "Hindi",
        hu: "Hungarian",
        is: "Icelandic",
        id: "Indonesian",
        iu: "Inuktitut",
        ga: "Irish",
        it: "Italian (Standard)",
        "it-CH": "Italian (Switzerland)",
        ja: "Japanese",
        kn: "Kannada",
        ks: "Kashmiri",
        kk: "Kazakh",
        km: "Khmer",
        ky: "Kirghiz",
        tlh: "Klingon",
        ko: "Korean",
        "ko-KP": "Korean (North Korea)",
        "ko-KR": "Korean (South Korea)",
        la: "Latin",
        lv: "Latvian",
        lt: "Lithuanian",
        lb: "Luxembourgish",
        mk: "North Macedonia",
        ms: "Malay",
        ml: "Malayalam",
        mt: "Maltese",
        mi: "Maori",
        mr: "Marathi",
        mo: "Moldavian",
        nv: "Navajo",
        ng: "Ndonga",
        ne: "Nepali",
        no: "Norwegian",
        nb: "Norwegian (Bokmal)",
        nn: "Norwegian (Nynorsk)",
        oc: "Occitan",
        or: "Oriya",
        om: "Oromo",
        fa: "Persian",
        "fa-IR": "Persian/Iran",
        pl: "Polish",
        pt: "Portuguese",
        "pt-BR": "Portuguese (Brazil)",
        pa: "Punjabi",
        "pa-IN": "Punjabi (India)",
        "pa-PK": "Punjabi (Pakistan)",
        qu: "Quechua",
        rm: "Rhaeto-Romanic",
        ro: "Romanian",
        "ro-MO": "Romanian (Moldavia)",
        ru: "Russian",
        "ru-MO": "Russian (Moldavia)",
        sz: "Sami (Lappish)",
        sg: "Sango",
        sa: "Sanskrit",
        sc: "Sardinian",
        sd: "Sindhi",
        si: "Singhalese",
        sr: "Serbian",
        sk: "Slovak",
        sl: "Slovenian",
        so: "Somani",
        sb: "Sorbian",
        es: "Spanish",
        "es-AR": "Spanish (Argentina)",
        "es-BO": "Spanish (Bolivia)",
        "es-CL": "Spanish (Chile)",
        "es-CO": "Spanish (Colombia)",
        "es-CR": "Spanish (Costa Rica)",
        "es-DO": "Spanish (Dominican Republic)",
        "es-EC": "Spanish (Ecuador)",
        "es-SV": "Spanish (El Salvador)",
        "es-GT": "Spanish (Guatemala)",
        "es-HN": "Spanish (Honduras)",
        "es-MX": "Spanish (Mexico)",
        "es-NI": "Spanish (Nicaragua)",
        "es-PA": "Spanish (Panama)",
        "es-PY": "Spanish (Paraguay)",
        "es-PE": "Spanish (Peru)",
        "es-PR": "Spanish (Puerto Rico)",
        "es-ES": "Spanish (Spain)",
        "es-UY": "Spanish (Uruguay)",
        "es-VE": "Spanish (Venezuela)",
        sx: "Sutu",
        sw: "Swahili",
        sv: "Swedish",
        "sv-FI": "Swedish (Finland)",
        "sv-SV": "Swedish (Sweden)",
        ta: "Tamil",
        tt: "Tatar",
        te: "Teluga",
        th: "Thai",
        tig: "Tigre",
        ts: "Tsonga",
        tn: "Tswana",
        tr: "Turkish",
        tk: "Turkmen",
        uk: "Ukrainian",
        hsb: "Upper Sorbian",
        ur: "Urdu",
        ve: "Venda",
        vi: "Vietnamese",
        vo: "Volapuk",
        wa: "Walloon",
        cy: "Welsh",
        xh: "Xhosa",
        ji: "Yiddish",
        zu: "Zulu"
    })[t] && (this.internal.languageSettings.languageCode = t, !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", function() {
        this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
    }), this.internal.languageSettings.isSubscribed = !0)), this;
}, Vt = E.API, Gt = Vt.getCharWidthsArray = function(e, r) {
    var n333, i273, a206 = (r = r || {}).font || this.internal.getFont(), o178 = r.fontSize || this.internal.getFontSize(), s141 = r.charSpace || this.internal.getCharSpace(), c118 = r.widths ? r.widths : a206.metadata.Unicode.widths, u104 = c118.fof ? c118.fof : 1, h90 = r.kerning ? r.kerning : a206.metadata.Unicode.kerning, l72 = h90.fof ? h90.fof : 1, f65 = !1 !== r.doKerning, d58 = 0, p = e.length, g47 = 0, m43 = c118[0] || u104, v38 = [];
    for(n333 = 0; n333 < p; n333++)i273 = e.charCodeAt(n333), "function" == typeof a206.metadata.widthOfString ? v38.push((a206.metadata.widthOfGlyph(a206.metadata.characterToGlyph(i273)) + s141 * (1e3 / o178) || 0) / 1e3) : (d58 = f65 && "object" === _typeofDefault.default(h90[i273]) && !isNaN(parseInt(h90[i273][g47], 10)) ? h90[i273][g47] / l72 : 0, v38.push((c118[i273] || m43) / u104 + d58)), g47 = i273;
    return v38;
}, Yt = Vt.getStringUnitWidth = function(t86, e55) {
    var r = (e55 = e55 || {}).fontSize || this.internal.getFontSize(), n334 = e55.font || this.internal.getFont(), i274 = e55.charSpace || this.internal.getCharSpace();
    return Vt.processArabic && (t86 = Vt.processArabic(t86)), "function" == typeof n334.metadata.widthOfString ? n334.metadata.widthOfString(t86, r, i274) / r : Gt.apply(this, arguments).reduce(function(t, e) {
        return t + e;
    }, 0);
}, Jt = function(t, e, r, n335) {
    for(var i275 = [], a207 = 0, o179 = t.length, s142 = 0; a207 !== o179 && s142 + e[a207] < r;)s142 += e[a207], a207++;
    i275.push(t.slice(0, a207));
    var c119 = a207;
    for(s142 = 0; a207 !== o179;)s142 + e[a207] > n335 && (i275.push(t.slice(c119, a207)), s142 = 0, c119 = a207), s142 += e[a207], a207++;
    return c119 !== a207 && i275.push(t.slice(c119, a207)), i275;
}, Xt = function(t87, e56, r) {
    r || (r = {});
    var n336, i276, a208, o180, s143, c120, u105, h91 = [], l73 = [
        h91
    ], f66 = r.textIndent || 0, d59 = 0, p = 0, g48 = t87.split(" "), m44 = Gt.apply(this, [
        " ",
        r
    ])[0];
    if (c120 = -1 === r.lineIndent ? g48[0].length + 2 : r.lineIndent || 0) {
        var v39 = Array(c120).join(" "), b33 = [];
        g48.map(function(t88) {
            (t88 = t88.split(/\s*\n/)).length > 1 ? b33 = b33.concat(t88.map(function(t, e) {
                return (e && t.length ? "\n" : "") + t;
            })) : b33.push(t88[0]);
        }), g48 = b33, c120 = Yt.apply(this, [
            v39,
            r
        ]);
    }
    for(a208 = 0, o180 = g48.length; a208 < o180; a208++){
        var y30 = 0;
        if (n336 = g48[a208], c120 && "\n" == n336[0] && (n336 = n336.substr(1), y30 = 1), f66 + d59 + (p = (i276 = Gt.apply(this, [
            n336,
            r
        ])).reduce(function(t, e) {
            return t + e;
        }, 0)) > e56 || y30) {
            if (p > e56) {
                for(s143 = Jt.apply(this, [
                    n336,
                    i276,
                    e56 - (f66 + d59),
                    e56
                ]), h91.push(s143.shift()), h91 = [
                    s143.pop()
                ]; s143.length;)l73.push([
                    s143.shift()
                ]);
                p = i276.slice(n336.length - (h91[0] ? h91[0].length : 0)).reduce(function(t, e) {
                    return t + e;
                }, 0);
            } else h91 = [
                n336
            ];
            l73.push(h91), f66 = p + c120, d59 = m44;
        } else h91.push(n336), f66 += d59 + p, d59 = m44;
    }
    return u105 = c120 ? function(t, e) {
        return (e ? v39 : "") + t.join(" ");
    } : function(t) {
        return t.join(" ");
    }, l73.map(u105);
}, Vt.splitTextToSize = function(t89, e57, r) {
    var n337, i277 = (r = r || {}).fontSize || this.internal.getFontSize(), a209 = (function(t) {
        if (t.widths && t.kerning) return {
            widths: t.widths,
            kerning: t.kerning
        };
        var e = this.internal.getFont(t.fontName, t.fontStyle);
        return e.metadata.Unicode ? {
            widths: e.metadata.Unicode.widths || {
                0: 1
            },
            kerning: e.metadata.Unicode.kerning || {}
        } : {
            font: e.metadata,
            fontSize: this.internal.getFontSize(),
            charSpace: this.internal.getCharSpace()
        };
    }).call(this, r);
    n337 = Array.isArray(t89) ? t89 : String(t89).split(/\r?\n/);
    var o181 = 1 * this.internal.scaleFactor * e57 / i277;
    a209.textIndent = r.textIndent ? 1 * r.textIndent * this.internal.scaleFactor / i277 : 0, a209.lineIndent = r.lineIndent;
    var s144, c121, u106 = [];
    for(s144 = 0, c121 = n337.length; s144 < c121; s144++)u106 = u106.concat(Xt.apply(this, [
        n337[s144],
        o181,
        a209
    ]));
    return u106;
}, function(e58) {
    e58.__fontmetrics__ = e58.__fontmetrics__ || {};
    for(var r40 = "klmnopqrstuvwxyz", n338 = {}, i278 = {}, a210 = 0; a210 < r40.length; a210++)n338[r40[a210]] = "0123456789abcdef"[a210], i278["0123456789abcdef"[a210]] = r40[a210];
    var o182 = function(t) {
        return "0x" + parseInt(t, 10).toString(16);
    }, s145 = e58.__fontmetrics__.compress = function(e) {
        var r, n339, a211, c123, u108 = [
            "{"
        ];
        for(var h93 in e){
            if (r = e[h93], isNaN(parseInt(h93, 10)) ? n339 = "'" + h93 + "'" : (h93 = parseInt(h93, 10), n339 = (n339 = o182(h93).slice(2)).slice(0, -1) + i278[n339.slice(-1)]), "number" == typeof r) r < 0 ? (a211 = o182(r).slice(3), c123 = "-") : (a211 = o182(r).slice(2), c123 = ""), a211 = c123 + a211.slice(0, -1) + i278[a211.slice(-1)];
            else {
                if ("object" !== _typeofDefault.default(r)) throw new Error("Don't know what to do with value type " + _typeofDefault.default(r) + ".");
                a211 = s145(r);
            }
            u108.push(n339 + a211);
        }
        return u108.push("}"), u108.join("");
    }, c122 = e58.__fontmetrics__.uncompress = function(t) {
        if ("string" != typeof t) throw new Error("Invalid argument passed to uncompress.");
        for(var e, r, i279, a212, o183 = {}, s146 = 1, c124 = o183, u109 = [], h94 = "", l75 = "", f67 = t.length - 1, d60 = 1; d60 < f67; d60 += 1)"'" == (a212 = t[d60]) ? e ? (i279 = e.join(""), e = void 0) : e = [] : e ? e.push(a212) : "{" == a212 ? (u109.push([
            c124,
            i279
        ]), c124 = {}, i279 = void 0) : "}" == a212 ? ((r = u109.pop())[0][r[1]] = c124, i279 = void 0, c124 = r[0]) : "-" == a212 ? s146 = -1 : void 0 === i279 ? n338.hasOwnProperty(a212) ? (h94 += n338[a212], i279 = parseInt(h94, 16) * s146, s146 = 1, h94 = "") : h94 += a212 : n338.hasOwnProperty(a212) ? (l75 += n338[a212], c124[i279] = parseInt(l75, 16) * s146, s146 = 1, i279 = void 0, l75 = "") : l75 += a212;
        return o183;
    }, u107 = {
        codePages: [
            "WinAnsiEncoding"
        ],
        WinAnsiEncoding: c122("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
    }, h92 = {
        Unicode: {
            Courier: u107,
            "Courier-Bold": u107,
            "Courier-BoldOblique": u107,
            "Courier-Oblique": u107,
            Helvetica: u107,
            "Helvetica-Bold": u107,
            "Helvetica-BoldOblique": u107,
            "Helvetica-Oblique": u107,
            "Times-Roman": u107,
            "Times-Bold": u107,
            "Times-BoldItalic": u107,
            "Times-Italic": u107
        }
    }, l74 = {
        Unicode: {
            "Courier-Oblique": c122("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-BoldItalic": c122("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
            "Helvetica-Bold": c122("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
            Courier: c122("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Courier-BoldOblique": c122("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-Bold": c122("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
            Symbol: c122("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
            Helvetica: c122("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
            "Helvetica-BoldOblique": c122("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
            ZapfDingbats: c122("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
            "Courier-Bold": c122("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
            "Times-Italic": c122("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
            "Times-Roman": c122("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
            "Helvetica-Oblique": c122("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
        }
    };
    e58.events.push([
        "addFont",
        function(t) {
            var e = t.font, r = l74.Unicode[e.postScriptName];
            r && (e.metadata.Unicode = {}, e.metadata.Unicode.widths = r.widths, e.metadata.Unicode.kerning = r.kerning);
            var n340 = h92.Unicode[e.postScriptName];
            n340 && (e.metadata.Unicode.encoding = n340, e.encoding = n340.codePages[0]);
        }
    ]);
}(E.API), /**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t90) {
    var e59 = function(t) {
        for(var e = t.length, r = new Uint8Array(e), n341 = 0; n341 < e; n341++)r[n341] = t.charCodeAt(n341);
        return r;
    };
    t90.API.events.push([
        "addFont",
        function(r41) {
            var n342 = void 0, i280 = r41.font, a213 = r41.instance;
            if (!i280.isStandardFont) {
                if (void 0 === a213) throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + i280.postScriptName + "').");
                if ("string" != typeof (n342 = !1 === a213.existsFileInVFS(i280.postScriptName) ? a213.loadFile(i280.postScriptName) : a213.getFileFromVFS(i280.postScriptName))) throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + i280.postScriptName + "').");
                !function(r, n343) {
                    n343 = /^\x00\x01\x00\x00/.test(n343) ? e59(n343) : e59(u(n343)), r.metadata = t90.API.TTFFont.open(n343), r.metadata.Unicode = r.metadata.Unicode || {
                        encoding: {},
                        kerning: {},
                        widths: []
                    }, r.metadata.glyIdsUsed = [
                        0
                    ];
                }(i280, n342);
            }
        }
    ]);
}(E), /** @license
 * Copyright (c) 2012 Willow Systems Corporation, https://github.com/willowsystems
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */ function(t91) {
    function e60() {
        return (n.canvg ? Promise.resolve(n.canvg) : require("92cdeb0fd981d904")).catch(function(t) {
            return Promise.reject(new Error("Could not load canvg: " + t));
        }).then(function(t) {
            return t.default ? t.default : t;
        });
    }
    E.API.addSvgAsImage = function(t92, r, n344, i281, o184, s, c125, u110) {
        if (isNaN(r) || isNaN(n344)) throw a.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
        if (isNaN(i281) || isNaN(o184)) throw a.error("jsPDF.addSvgAsImage: Invalid measurements", arguments), new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
        var h95 = document.createElement("canvas");
        h95.width = i281, h95.height = o184;
        var l76 = h95.getContext("2d");
        l76.fillStyle = "#fff", l76.fillRect(0, 0, h95.width, h95.height);
        var f68 = {
            ignoreMouse: !0,
            ignoreAnimation: !0,
            ignoreDimensions: !0
        }, d61 = this;
        return e60().then(function(e) {
            return e.fromString(l76, t92, f68);
        }, function() {
            return Promise.reject(new Error("Could not load canvg."));
        }).then(function(t) {
            return t.render(f68);
        }).then(function() {
            d61.addImage(h95.toDataURL("image/jpeg", 1), r, n344, i281, o184, c125, u110);
        });
    };
}(), E.API.putTotalPages = function(t) {
    var e, r = 0;
    parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t, "g"), r = this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()), "g"), r = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));
    for(var n345 = 1; n345 <= this.internal.getNumberOfPages(); n345++)for(var i282 = 0; i282 < this.internal.pages[n345].length; i282++)this.internal.pages[n345][i282] = this.internal.pages[n345][i282].replace(e, r);
    return this;
}, E.API.viewerPreferences = function(e61, r42) {
    var n346;
    e61 = e61 || {}, r42 = r42 || !1;
    var i283, a214, o185, s147 = {
        HideToolbar: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        HideMenubar: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        HideWindowUI: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        FitWindow: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        CenterWindow: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.3
        },
        DisplayDocTitle: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.4
        },
        NonFullScreenPageMode: {
            defaultValue: "UseNone",
            value: "UseNone",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "UseNone",
                "UseOutlines",
                "UseThumbs",
                "UseOC"
            ],
            pdfVersion: 1.3
        },
        Direction: {
            defaultValue: "L2R",
            value: "L2R",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "L2R",
                "R2L"
            ],
            pdfVersion: 1.3
        },
        ViewArea: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        ViewClip: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        PrintArea: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        PrintClip: {
            defaultValue: "CropBox",
            value: "CropBox",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "MediaBox",
                "CropBox",
                "TrimBox",
                "BleedBox",
                "ArtBox"
            ],
            pdfVersion: 1.4
        },
        PrintScaling: {
            defaultValue: "AppDefault",
            value: "AppDefault",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "AppDefault",
                "None"
            ],
            pdfVersion: 1.6
        },
        Duplex: {
            defaultValue: "",
            value: "none",
            type: "name",
            explicitSet: !1,
            valueSet: [
                "Simplex",
                "DuplexFlipShortEdge",
                "DuplexFlipLongEdge",
                "none"
            ],
            pdfVersion: 1.7
        },
        PickTrayByPDFSize: {
            defaultValue: !1,
            value: !1,
            type: "boolean",
            explicitSet: !1,
            valueSet: [
                !0,
                !1
            ],
            pdfVersion: 1.7
        },
        PrintPageRange: {
            defaultValue: "",
            value: "",
            type: "array",
            explicitSet: !1,
            valueSet: null,
            pdfVersion: 1.7
        },
        NumCopies: {
            defaultValue: 1,
            value: 1,
            type: "integer",
            explicitSet: !1,
            valueSet: null,
            pdfVersion: 1.7
        }
    }, c126 = Object.keys(s147), u111 = [], h96 = 0, l77 = 0, f69 = 0;
    function d62(t, e) {
        var r, n347 = !1;
        for(r = 0; r < t.length; r += 1)t[r] === e && (n347 = !0);
        return n347;
    }
    if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(s147)), this.internal.viewerpreferences.isSubscribed = !1), n346 = this.internal.viewerpreferences.configuration, "reset" === e61 || !0 === r42) {
        var p = c126.length;
        for(f69 = 0; f69 < p; f69 += 1)n346[c126[f69]].value = n346[c126[f69]].defaultValue, n346[c126[f69]].explicitSet = !1;
    }
    if ("object" === _typeofDefault.default(e61)) {
        for(a214 in e61)if (o185 = e61[a214], d62(c126, a214) && void 0 !== o185) {
            if ("boolean" === n346[a214].type && "boolean" == typeof o185) n346[a214].value = o185;
            else if ("name" === n346[a214].type && d62(n346[a214].valueSet, o185)) n346[a214].value = o185;
            else if ("integer" === n346[a214].type && Number.isInteger(o185)) n346[a214].value = o185;
            else if ("array" === n346[a214].type) {
                for(h96 = 0; h96 < o185.length; h96 += 1)if (i283 = !0, 1 === o185[h96].length && "number" == typeof o185[h96][0]) u111.push(String(o185[h96] - 1));
                else if (o185[h96].length > 1) {
                    for(l77 = 0; l77 < o185[h96].length; l77 += 1)"number" != typeof o185[h96][l77] && (i283 = !1);
                    !0 === i283 && u111.push([
                        o185[h96][0] - 1,
                        o185[h96][1] - 1
                    ].join(" "));
                }
                n346[a214].value = "[" + u111.join(" ") + "]";
            } else n346[a214].value = n346[a214].defaultValue;
            n346[a214].explicitSet = !0;
        }
    }
    return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", function() {
        var t, e = [];
        for(t in n346)!0 === n346[t].explicitSet && ("name" === n346[t].type ? e.push("/" + t + " /" + n346[t].value) : e.push("/" + t + " " + n346[t].value));
        0 !== e.length && this.internal.write("/ViewerPreferences\n<<\n" + e.join("\n") + "\n>>");
    }), this.internal.viewerpreferences.isSubscribed = !0), this.internal.viewerpreferences.configuration = n346, this;
}, /** ====================================================================
 * @license
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */ function(t93) {
    var e62 = function() {
        var t = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>', e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')), r = unescape(encodeURIComponent(t)), n348 = unescape(encodeURIComponent(this.internal.__metadata__.metadata)), i284 = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")), a215 = unescape(encodeURIComponent("</x:xmpmeta>")), o186 = r.length + n348.length + i284.length + e.length + a215.length;
        this.internal.__metadata__.metadata_object_number = this.internal.newObject(), this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + o186 + " >>"), this.internal.write("stream"), this.internal.write(e + r + n348 + i284 + a215), this.internal.write("endstream"), this.internal.write("endobj");
    }, r43 = function() {
        this.internal.__metadata__.metadata_object_number && this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R");
    };
    t93.addMetadata = function(t, n349) {
        return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = {
            metadata: t,
            namespaceuri: n349 || "http://jspdf.default.namespaceuri/"
        }, this.internal.events.subscribe("putCatalog", r43), this.internal.events.subscribe("postPutResources", e62)), this;
    };
}(E.API), function(t94) {
    var e63 = t94.API, r44 = e63.pdfEscape16 = function(t, e) {
        for(var r, n351 = e.metadata.Unicode.widths, i286 = [
            "",
            "0",
            "00",
            "000",
            "0000"
        ], a216 = [
            ""
        ], o187 = 0, s148 = t.length; o187 < s148; ++o187){
            if (r = e.metadata.characterToGlyph(t.charCodeAt(o187)), e.metadata.glyIdsUsed.push(r), e.metadata.toUnicode[r] = t.charCodeAt(o187), -1 == n351.indexOf(r) && (n351.push(r), n351.push([
                parseInt(e.metadata.widthOfGlyph(r), 10)
            ])), "0" == r) return a216.join("");
            r = r.toString(16), a216.push(i286[4 - r.length], r);
        }
        return a216.join("");
    }, n350 = function(t95) {
        var e64, r, n352, i287, a217, o188, s149;
        for(a217 = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange", n352 = [], o188 = 0, s149 = (r = Object.keys(t95).sort(function(t, e) {
            return t - e;
        })).length; o188 < s149; o188++)e64 = r[o188], n352.length >= 100 && (a217 += "\n" + n352.length + " beginbfchar\n" + n352.join("\n") + "\nendbfchar", n352 = []), void 0 !== t95[e64] && null !== t95[e64] && "function" == typeof t95[e64].toString && (i287 = ("0000" + t95[e64].toString(16)).slice(-4), e64 = ("0000" + (+e64).toString(16)).slice(-4), n352.push("<" + e64 + "><" + i287 + ">"));
        return n352.length && (a217 += "\n" + n352.length + " beginbfchar\n" + n352.join("\n") + "\nendbfchar\n"), a217 += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
    };
    e63.events.push([
        "putFont",
        function(e65) {
            !function(e) {
                var r = e.font, i288 = e.out, a218 = e.newObject, o189 = e.putStream;
                if (r.metadata instanceof t94.API.TTFFont && "Identity-H" === r.encoding) {
                    for(var s150 = r.metadata.Unicode.widths, c127 = r.metadata.subset.encode(r.metadata.glyIdsUsed, 1), u112 = "", h97 = 0; h97 < c127.length; h97++)u112 += String.fromCharCode(c127[h97]);
                    var l78 = a218();
                    o189({
                        data: u112,
                        addLength1: !0,
                        objectId: l78
                    }), i288("endobj");
                    var f70 = a218();
                    o189({
                        data: n350(r.metadata.toUnicode),
                        addLength1: !0,
                        objectId: f70
                    }), i288("endobj");
                    var d63 = a218();
                    i288("<<"), i288("/Type /FontDescriptor"), i288("/FontName /" + F(r.fontName)), i288("/FontFile2 " + l78 + " 0 R"), i288("/FontBBox " + t94.API.PDFObject.convert(r.metadata.bbox)), i288("/Flags " + r.metadata.flags), i288("/StemV " + r.metadata.stemV), i288("/ItalicAngle " + r.metadata.italicAngle), i288("/Ascent " + r.metadata.ascender), i288("/Descent " + r.metadata.decender), i288("/CapHeight " + r.metadata.capHeight), i288(">>"), i288("endobj");
                    var p = a218();
                    i288("<<"), i288("/Type /Font"), i288("/BaseFont /" + F(r.fontName)), i288("/FontDescriptor " + d63 + " 0 R"), i288("/W " + t94.API.PDFObject.convert(s150)), i288("/CIDToGIDMap /Identity"), i288("/DW 1000"), i288("/Subtype /CIDFontType2"), i288("/CIDSystemInfo"), i288("<<"), i288("/Supplement 0"), i288("/Registry (Adobe)"), i288("/Ordering (" + r.encoding + ")"), i288(">>"), i288(">>"), i288("endobj"), r.objectNumber = a218(), i288("<<"), i288("/Type /Font"), i288("/Subtype /Type0"), i288("/ToUnicode " + f70 + " 0 R"), i288("/BaseFont /" + F(r.fontName)), i288("/Encoding /" + r.encoding), i288("/DescendantFonts [" + p + " 0 R]"), i288(">>"), i288("endobj"), r.isAlreadyPutted = !0;
                }
            }(e65);
        }
    ]);
    e63.events.push([
        "putFont",
        function(e66) {
            !function(e) {
                var r = e.font, i289 = e.out, a219 = e.newObject, o190 = e.putStream;
                if (r.metadata instanceof t94.API.TTFFont && "WinAnsiEncoding" === r.encoding) {
                    for(var s151 = r.metadata.rawData, c128 = "", u113 = 0; u113 < s151.length; u113++)c128 += String.fromCharCode(s151[u113]);
                    var h98 = a219();
                    o190({
                        data: c128,
                        addLength1: !0,
                        objectId: h98
                    }), i289("endobj");
                    var l79 = a219();
                    o190({
                        data: n350(r.metadata.toUnicode),
                        addLength1: !0,
                        objectId: l79
                    }), i289("endobj");
                    var f71 = a219();
                    i289("<<"), i289("/Descent " + r.metadata.decender), i289("/CapHeight " + r.metadata.capHeight), i289("/StemV " + r.metadata.stemV), i289("/Type /FontDescriptor"), i289("/FontFile2 " + h98 + " 0 R"), i289("/Flags 96"), i289("/FontBBox " + t94.API.PDFObject.convert(r.metadata.bbox)), i289("/FontName /" + F(r.fontName)), i289("/ItalicAngle " + r.metadata.italicAngle), i289("/Ascent " + r.metadata.ascender), i289(">>"), i289("endobj"), r.objectNumber = a219();
                    for(var d64 = 0; d64 < r.metadata.hmtx.widths.length; d64++)r.metadata.hmtx.widths[d64] = parseInt(r.metadata.hmtx.widths[d64] * (1e3 / r.metadata.head.unitsPerEm));
                    i289("<</Subtype/TrueType/Type/Font/ToUnicode " + l79 + " 0 R/BaseFont/" + F(r.fontName) + "/FontDescriptor " + f71 + " 0 R/Encoding/" + r.encoding + " /FirstChar 29 /LastChar 255 /Widths " + t94.API.PDFObject.convert(r.metadata.hmtx.widths) + ">>"), i289("endobj"), r.isAlreadyPutted = !0;
                }
            }(e66);
        }
    ]);
    var i285 = function(t96) {
        var e, n353 = t96.text || "", i290 = t96.x, a220 = t96.y, o191 = t96.options || {}, s152 = t96.mutex || {}, c129 = s152.pdfEscape, u114 = s152.activeFontKey, h99 = s152.fonts, l80 = u114, f72 = "", d65 = 0, p = "", g49 = h99[l80].encoding;
        if ("Identity-H" !== h99[l80].encoding) return {
            text: n353,
            x: i290,
            y: a220,
            options: o191,
            mutex: s152
        };
        for(p = n353, l80 = u114, Array.isArray(n353) && (p = n353[0]), d65 = 0; d65 < p.length; d65 += 1)h99[l80].metadata.hasOwnProperty("cmap") && (e = h99[l80].metadata.cmap.unicode.codeMap[p[d65].charCodeAt(0)]), e || p[d65].charCodeAt(0) < 256 && h99[l80].metadata.hasOwnProperty("Unicode") ? f72 += p[d65] : f72 += "";
        var m45 = "";
        return parseInt(l80.slice(1)) < 14 || "WinAnsiEncoding" === g49 ? m45 = c129(f72, l80).split("").map(function(t) {
            return t.charCodeAt(0).toString(16);
        }).join("") : "Identity-H" === g49 && (m45 = r44(f72, h99[l80])), s152.isHex = !0, {
            text: m45,
            x: i290,
            y: a220,
            options: o191,
            mutex: s152
        };
    };
    e63.events.push([
        "postProcessText",
        function(t) {
            var e = t.text || "", r = [], n354 = {
                text: e,
                x: t.x,
                y: t.y,
                options: t.options,
                mutex: t.mutex
            };
            if (Array.isArray(e)) {
                var a221 = 0;
                for(a221 = 0; a221 < e.length; a221 += 1)Array.isArray(e[a221]) && 3 === e[a221].length ? r.push([
                    i285(Object.assign({}, n354, {
                        text: e[a221][0]
                    })).text,
                    e[a221][1],
                    e[a221][2]
                ]) : r.push(i285(Object.assign({}, n354, {
                    text: e[a221]
                })).text);
                t.text = r;
            } else t.text = i285(Object.assign({}, n354, {
                text: e
            })).text;
        }
    ]);
}(E), /**
 * @license
 * jsPDF virtual FileSystem functionality
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */ function(t97) {
    var e = function() {
        return void 0 === this.internal.vFS && (this.internal.vFS = {}), !0;
    };
    t97.existsFileInVFS = function(t) {
        return e.call(this), void 0 !== this.internal.vFS[t];
    }, t97.addFileToVFS = function(t, r) {
        return e.call(this), this.internal.vFS[t] = r, this;
    }, t97.getFileFromVFS = function(t) {
        return e.call(this), void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null;
    };
}(E.API), /**
 * @license
 * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
 * MIT License
 */ function(t98) {
    t98.__bidiEngine__ = t98.prototype.__bidiEngine__ = function(t99) {
        var r46, n355, i291, a222, o192, s153, c130, u115 = e67, h100 = [
            [
                0,
                3,
                0,
                1,
                0,
                0,
                0
            ],
            [
                0,
                3,
                0,
                1,
                2,
                2,
                0
            ],
            [
                0,
                3,
                0,
                17,
                2,
                0,
                1
            ],
            [
                0,
                3,
                5,
                5,
                4,
                1,
                0
            ],
            [
                0,
                3,
                21,
                21,
                4,
                0,
                1
            ],
            [
                0,
                3,
                5,
                5,
                4,
                2,
                0
            ]
        ], l81 = [
            [
                2,
                0,
                1,
                1,
                0,
                1,
                0
            ],
            [
                2,
                0,
                1,
                1,
                0,
                2,
                0
            ],
            [
                2,
                0,
                2,
                1,
                3,
                2,
                0
            ],
            [
                2,
                0,
                2,
                33,
                3,
                1,
                1
            ]
        ], f73 = {
            L: 0,
            R: 1,
            EN: 2,
            AN: 3,
            N: 4,
            B: 5,
            S: 6
        }, d66 = {
            0: 0,
            5: 1,
            6: 2,
            7: 3,
            32: 4,
            251: 5,
            254: 6,
            255: 7
        }, p17 = [
            "(",
            ")",
            "(",
            "<",
            ">",
            "<",
            "[",
            "]",
            "[",
            "{",
            "}",
            "{",
            "«",
            "»",
            "«",
            "‹",
            "›",
            "‹",
            "⁅",
            "⁆",
            "⁅",
            "⁽",
            "⁾",
            "⁽",
            "₍",
            "₎",
            "₍",
            "≤",
            "≥",
            "≤",
            "〈",
            "〉",
            "〈",
            "﹙",
            "﹚",
            "﹙",
            "﹛",
            "﹜",
            "﹛",
            "﹝",
            "﹞",
            "﹝",
            "﹤",
            "﹥",
            "﹤"
        ], g50 = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/), m46 = !1, v40 = 0;
        this.__bidiEngine__ = {};
        var b34 = function(t) {
            var e = t.charCodeAt(), r = e >> 8, n356 = d66[r];
            return void 0 !== n356 ? u115[256 * n356 + (255 & e)] : 252 === r || 253 === r ? "AL" : g50.test(r) ? "L" : 8 === r ? "R" : "N";
        }, y31 = function(t) {
            for(var e, r = 0; r < t.length; r++){
                if ("L" === (e = b34(t.charAt(r)))) return !1;
                if ("R" === e) return !0;
            }
            return !1;
        }, w33 = function(t, e, o193, s154) {
            var c131, u116, h101, l82, f74 = e[s154];
            switch(f74){
                case "L":
                case "R":
                    m46 = !1;
                    break;
                case "N":
                case "AN":
                    break;
                case "EN":
                    m46 && (f74 = "AN");
                    break;
                case "AL":
                    m46 = !0, f74 = "R";
                    break;
                case "WS":
                    f74 = "N";
                    break;
                case "CS":
                    s154 < 1 || s154 + 1 >= e.length || "EN" !== (c131 = o193[s154 - 1]) && "AN" !== c131 || "EN" !== (u116 = e[s154 + 1]) && "AN" !== u116 ? f74 = "N" : m46 && (u116 = "AN"), f74 = u116 === c131 ? u116 : "N";
                    break;
                case "ES":
                    f74 = "EN" === (c131 = s154 > 0 ? o193[s154 - 1] : "B") && s154 + 1 < e.length && "EN" === e[s154 + 1] ? "EN" : "N";
                    break;
                case "ET":
                    if (s154 > 0 && "EN" === o193[s154 - 1]) {
                        f74 = "EN";
                        break;
                    }
                    if (m46) {
                        f74 = "N";
                        break;
                    }
                    for(h101 = s154 + 1, l82 = e.length; h101 < l82 && "ET" === e[h101];)h101++;
                    f74 = h101 < l82 && "EN" === e[h101] ? "EN" : "N";
                    break;
                case "NSM":
                    if (i291 && !a222) {
                        for(l82 = e.length, h101 = s154 + 1; h101 < l82 && "NSM" === e[h101];)h101++;
                        if (h101 < l82) {
                            var d67 = t[s154], p = d67 >= 1425 && d67 <= 2303 || 64286 === d67;
                            if (c131 = e[h101], p && ("R" === c131 || "AL" === c131)) {
                                f74 = "R";
                                break;
                            }
                        }
                    }
                    f74 = s154 < 1 || "B" === (c131 = e[s154 - 1]) ? "N" : o193[s154 - 1];
                    break;
                case "B":
                    m46 = !1, r46 = !0, f74 = v40;
                    break;
                case "S":
                    n355 = !0, f74 = "N";
                    break;
                case "LRE":
                case "RLE":
                case "LRO":
                case "RLO":
                case "PDF":
                    m46 = !1;
                    break;
                case "BN":
                    f74 = "N";
            }
            return f74;
        }, N29 = function(t, e, r) {
            var n357 = t.split("");
            return r && L25(n357, r, {
                hiLevel: v40
            }), n357.reverse(), e && e.reverse(), n357.join("");
        }, L25 = function(t100, e68, i292) {
            var a223, o194, s155, c132, u117, d68 = -1, p = t100.length, g51 = 0, y32 = [], N30 = v40 ? l81 : h100, L26 = [];
            for(m46 = !1, r46 = !1, n355 = !1, o194 = 0; o194 < p; o194++)L26[o194] = b34(t100[o194]);
            for(s155 = 0; s155 < p; s155++){
                if (u117 = g51, y32[s155] = w33(t100, L26, y32, s155), a223 = 240 & (g51 = N30[u117][f73[y32[s155]]]), g51 &= 15, e68[s155] = c132 = N30[g51][5], a223 > 0) {
                    if (16 === a223) {
                        for(o194 = d68; o194 < s155; o194++)e68[o194] = 1;
                        d68 = -1;
                    } else d68 = -1;
                }
                if (N30[g51][6]) -1 === d68 && (d68 = s155);
                else if (d68 > -1) {
                    for(o194 = d68; o194 < s155; o194++)e68[o194] = c132;
                    d68 = -1;
                }
                "B" === L26[s155] && (e68[s155] = 0), i292.hiLevel |= c132;
            }
            n355 && function(t, e, r) {
                for(var n358 = 0; n358 < r; n358++)if ("S" === t[n358]) {
                    e[n358] = v40;
                    for(var i293 = n358 - 1; i293 >= 0 && "WS" === t[i293]; i293--)e[i293] = v40;
                }
            }(L26, e68, p);
        }, A26 = function(t, e, n359, i294, a224) {
            if (!(a224.hiLevel < t)) {
                if (1 === t && 1 === v40 && !r46) return e.reverse(), void (n359 && n359.reverse());
                for(var o195, s156, c133, u118, h102 = e.length, l83 = 0; l83 < h102;){
                    if (i294[l83] >= t) {
                        for(c133 = l83 + 1; c133 < h102 && i294[c133] >= t;)c133++;
                        for(u118 = l83, s156 = c133 - 1; u118 < s156; u118++, s156--)o195 = e[u118], e[u118] = e[s156], e[s156] = o195, n359 && (o195 = n359[u118], n359[u118] = n359[s156], n359[s156] = o195);
                        l83 = c133;
                    }
                    l83++;
                }
            }
        }, x18 = function(t101, e69, r47) {
            var n360 = t101.split(""), i295 = {
                hiLevel: v40
            };
            return r47 || (r47 = []), L25(n360, r47, i295), function(t, e, r) {
                if (0 !== r.hiLevel && c130) for(var n361, i296 = 0; i296 < t.length; i296++)1 === e[i296] && (n361 = p17.indexOf(t[i296])) >= 0 && (t[i296] = p17[n361 + 1]);
            }(n360, r47, i295), A26(2, n360, e69, r47, i295), A26(1, n360, e69, r47, i295), n360.join("");
        };
        return this.__bidiEngine__.doBidiReorder = function(t102, e70, r48) {
            if (function(t, e) {
                if (e) for(var r = 0; r < t.length; r++)e[r] = r;
                void 0 === a222 && (a222 = y31(t)), void 0 === s153 && (s153 = y31(t));
            }(t102, e70), i291 || !o192 || s153) {
                if (i291 && o192 && a222 ^ s153) v40 = a222 ? 1 : 0, t102 = N29(t102, e70, r48);
                else if (!i291 && o192 && s153) v40 = a222 ? 1 : 0, t102 = x18(t102, e70, r48), t102 = N29(t102, e70);
                else if (!i291 || a222 || o192 || s153) {
                    if (i291 && !o192 && a222 ^ s153) t102 = N29(t102, e70), a222 ? (v40 = 0, t102 = x18(t102, e70, r48)) : (v40 = 1, t102 = x18(t102, e70, r48), t102 = N29(t102, e70));
                    else if (i291 && a222 && !o192 && s153) v40 = 1, t102 = x18(t102, e70, r48), t102 = N29(t102, e70);
                    else if (!i291 && !o192 && a222 ^ s153) {
                        var n362 = c130;
                        a222 ? (v40 = 1, t102 = x18(t102, e70, r48), v40 = 0, c130 = !1, t102 = x18(t102, e70, r48), c130 = n362) : (v40 = 0, t102 = x18(t102, e70, r48), t102 = N29(t102, e70), v40 = 1, c130 = !1, t102 = x18(t102, e70, r48), c130 = n362, t102 = N29(t102, e70));
                    }
                } else v40 = 0, t102 = x18(t102, e70, r48);
            } else v40 = a222 ? 1 : 0, t102 = x18(t102, e70, r48);
            return t102;
        }, this.__bidiEngine__.setOptions = function(t) {
            t && (i291 = t.isInputVisual, o192 = t.isOutputVisual, a222 = t.isInputRtl, s153 = t.isOutputRtl, c130 = t.isSymmetricSwapping);
        }, this.__bidiEngine__.setOptions(t99), this.__bidiEngine__;
    };
    var e67 = [
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "S",
        "B",
        "S",
        "WS",
        "B",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "B",
        "B",
        "B",
        "S",
        "WS",
        "N",
        "N",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ES",
        "CS",
        "ES",
        "CS",
        "CS",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "B",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "CS",
        "N",
        "ET",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "L",
        "N",
        "N",
        "BN",
        "N",
        "N",
        "ET",
        "ET",
        "EN",
        "EN",
        "N",
        "L",
        "N",
        "N",
        "N",
        "EN",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ET",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "R",
        "NSM",
        "R",
        "NSM",
        "NSM",
        "R",
        "NSM",
        "NSM",
        "R",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "N",
        "N",
        "AL",
        "ET",
        "ET",
        "AL",
        "CS",
        "AL",
        "N",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "AL",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "AN",
        "ET",
        "AN",
        "AN",
        "AL",
        "AL",
        "AL",
        "NSM",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AN",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "AL",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "AL",
        "AL",
        "NSM",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "AL",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "R",
        "R",
        "N",
        "N",
        "N",
        "N",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "WS",
        "BN",
        "BN",
        "BN",
        "L",
        "R",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "WS",
        "B",
        "LRE",
        "RLE",
        "PDF",
        "LRO",
        "RLO",
        "CS",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "WS",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "N",
        "LRI",
        "RLI",
        "FSI",
        "PDI",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "BN",
        "EN",
        "L",
        "N",
        "N",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "ES",
        "ES",
        "N",
        "N",
        "N",
        "L",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "ES",
        "ES",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "R",
        "NSM",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "ES",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "N",
        "R",
        "N",
        "R",
        "R",
        "N",
        "R",
        "R",
        "N",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "R",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "NSM",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "CS",
        "N",
        "CS",
        "N",
        "N",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ET",
        "N",
        "N",
        "ES",
        "ES",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "AL",
        "N",
        "N",
        "BN",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "ES",
        "CS",
        "ES",
        "CS",
        "CS",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "EN",
        "CS",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "L",
        "L",
        "L",
        "N",
        "N",
        "L",
        "L",
        "L",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "ET",
        "ET",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N",
        "N"
    ], r45 = new t98.__bidiEngine__({
        isInputVisual: !0
    });
    t98.API.events.push([
        "postProcessText",
        function(t) {
            var e = t.text, n363 = (t.x, t.y, t.options || {}), i297 = (t.mutex, n363.lang, []);
            if (n363.isInputVisual = "boolean" != typeof n363.isInputVisual || n363.isInputVisual, r45.setOptions(n363), "[object Array]" === Object.prototype.toString.call(e)) {
                var a225 = 0;
                for(i297 = [], a225 = 0; a225 < e.length; a225 += 1)"[object Array]" === Object.prototype.toString.call(e[a225]) ? i297.push([
                    r45.doBidiReorder(e[a225][0]),
                    e[a225][1],
                    e[a225][2]
                ]) : i297.push([
                    r45.doBidiReorder(e[a225])
                ]);
                t.text = i297;
            } else t.text = r45.doBidiReorder(e);
            r45.setOptions({
                isInputVisual: !0
            });
        }
    ]);
}(E), E.API.TTFFont = function() {
    function t103(t) {
        var e;
        if (this.rawData = t, e = this.contents = new ne(t), this.contents.pos = 4, "ttcf" === e.readString(4)) throw new Error("TTCF not supported.");
        e.pos = 0, this.parse(), this.subset = new Le(this), this.registerTTF();
    }
    return t103.open = function(e) {
        return new t103(e);
    }, t103.prototype.parse = function() {
        return this.directory = new ie(this.contents), this.head = new se(this), this.name = new pe(this), this.cmap = new ue(this), this.toUnicode = {}, this.hhea = new he(this), this.maxp = new ge(this), this.hmtx = new me(this), this.post = new fe(this), this.os2 = new le(this), this.loca = new Ne(this), this.glyf = new be(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [
            this.head.xMin,
            this.head.yMin,
            this.head.xMax,
            this.head.yMax
        ];
    }, t103.prototype.registerTTF = function() {
        var t, e71, r49, n364, i298;
        if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = (function() {
            var e, r, n365, i299;
            for(i299 = [], e = 0, r = (n365 = this.bbox).length; e < r; e++)t = n365[e], i299.push(Math.round(t * this.scaleFactor));
            return i299;
        }).call(this), this.stemV = 0, this.post.exists ? (r49 = 255 & (n364 = this.post.italic_angle), 0 != (32768 & (e71 = n364 >> 16)) && (e71 = -(1 + (65535 ^ e71))), this.italicAngle = +(e71 + "." + r49)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (i298 = this.familyClass) || 2 === i298 || 3 === i298 || 4 === i298 || 5 === i298 || 7 === i298, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode) throw new Error("No unicode cmap for font");
    }, t103.prototype.characterToGlyph = function(t) {
        var e;
        return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0;
    }, t103.prototype.widthOfGlyph = function(t) {
        var e;
        return e = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t).advance * e;
    }, t103.prototype.widthOfString = function(t, e, r) {
        var n366, i300, a226, o196;
        for(a226 = 0, i300 = 0, o196 = (t = "" + t).length; 0 <= o196 ? i300 < o196 : i300 > o196; i300 = 0 <= o196 ? ++i300 : --i300)n366 = t.charCodeAt(i300), a226 += this.widthOfGlyph(this.characterToGlyph(n366)) + r * (1e3 / e) || 0;
        return a226 * (e / 1e3);
    }, t103.prototype.lineHeight = function(t, e) {
        var r;
        return null == e && (e = !1), r = e ? this.lineGap : 0, (this.ascender + r - this.decender) / 1e3 * t;
    }, t103;
}();
var re, ne = function() {
    function t104(t) {
        this.data = null != t ? t : [], this.pos = 0, this.length = this.data.length;
    }
    return t104.prototype.readByte = function() {
        return this.data[this.pos++];
    }, t104.prototype.writeByte = function(t) {
        return this.data[this.pos++] = t;
    }, t104.prototype.readUInt32 = function() {
        return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();
    }, t104.prototype.writeUInt32 = function(t) {
        return this.writeByte(t >>> 24 & 255), this.writeByte(t >> 16 & 255), this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t104.prototype.readInt32 = function() {
        var t;
        return (t = this.readUInt32()) >= 2147483648 ? t - 4294967296 : t;
    }, t104.prototype.writeInt32 = function(t) {
        return t < 0 && (t += 4294967296), this.writeUInt32(t);
    }, t104.prototype.readUInt16 = function() {
        return this.readByte() << 8 | this.readByte();
    }, t104.prototype.writeUInt16 = function(t) {
        return this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t104.prototype.readInt16 = function() {
        var t;
        return (t = this.readUInt16()) >= 32768 ? t - 65536 : t;
    }, t104.prototype.writeInt16 = function(t) {
        return t < 0 && (t += 65536), this.writeUInt16(t);
    }, t104.prototype.readString = function(t) {
        var e, r;
        for(r = [], e = 0; 0 <= t ? e < t : e > t; e = 0 <= t ? ++e : --e)r[e] = String.fromCharCode(this.readByte());
        return r.join("");
    }, t104.prototype.writeString = function(t) {
        var e, r, n367;
        for(n367 = [], e = 0, r = t.length; 0 <= r ? e < r : e > r; e = 0 <= r ? ++e : --e)n367.push(this.writeByte(t.charCodeAt(e)));
        return n367;
    }, t104.prototype.readShort = function() {
        return this.readInt16();
    }, t104.prototype.writeShort = function(t) {
        return this.writeInt16(t);
    }, t104.prototype.readLongLong = function() {
        var t, e, r, n368, i301, a227, o197, s157;
        return t = this.readByte(), e = this.readByte(), r = this.readByte(), n368 = this.readByte(), i301 = this.readByte(), a227 = this.readByte(), o197 = this.readByte(), s157 = this.readByte(), 128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ r) + 4294967296 * (255 ^ n368) + 16777216 * (255 ^ i301) + 65536 * (255 ^ a227) + 256 * (255 ^ o197) + (255 ^ s157) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * r + 4294967296 * n368 + 16777216 * i301 + 65536 * a227 + 256 * o197 + s157;
    }, t104.prototype.writeLongLong = function(t) {
        var e, r;
        return e = Math.floor(t / 4294967296), r = 4294967295 & t, this.writeByte(e >> 24 & 255), this.writeByte(e >> 16 & 255), this.writeByte(e >> 8 & 255), this.writeByte(255 & e), this.writeByte(r >> 24 & 255), this.writeByte(r >> 16 & 255), this.writeByte(r >> 8 & 255), this.writeByte(255 & r);
    }, t104.prototype.readInt = function() {
        return this.readInt32();
    }, t104.prototype.writeInt = function(t) {
        return this.writeInt32(t);
    }, t104.prototype.read = function(t) {
        var e, r;
        for(e = [], r = 0; 0 <= t ? r < t : r > t; r = 0 <= t ? ++r : --r)e.push(this.readByte());
        return e;
    }, t104.prototype.write = function(t) {
        var e, r, n369, i302;
        for(i302 = [], r = 0, n369 = t.length; r < n369; r++)e = t[r], i302.push(this.writeByte(e));
        return i302;
    }, t104;
}(), ie = function() {
    var t105;
    function e72(t) {
        var e, r, n370;
        for(this.scalarType = t.readInt(), this.tableCount = t.readShort(), this.searchRange = t.readShort(), this.entrySelector = t.readShort(), this.rangeShift = t.readShort(), this.tables = {}, r = 0, n370 = this.tableCount; 0 <= n370 ? r < n370 : r > n370; r = 0 <= n370 ? ++r : --r)e = {
            tag: t.readString(4),
            checksum: t.readInt(),
            offset: t.readInt(),
            length: t.readInt()
        }, this.tables[e.tag] = e;
    }
    return e72.prototype.encode = function(e) {
        var r, n371, i303, a228, o198, s158, c134, u119, h103, l84, f75, d69, p;
        for(p in f75 = Object.keys(e).length, s158 = Math.log(2), h103 = 16 * Math.floor(Math.log(f75) / s158), a228 = Math.floor(h103 / s158), u119 = 16 * f75 - h103, (n371 = new ne).writeInt(this.scalarType), n371.writeShort(f75), n371.writeShort(h103), n371.writeShort(a228), n371.writeShort(u119), i303 = 16 * f75, c134 = n371.pos + i303, o198 = null, d69 = [], e)for(l84 = e[p], n371.writeString(p), n371.writeInt(t105(l84)), n371.writeInt(c134), n371.writeInt(l84.length), d69 = d69.concat(l84), "head" === p && (o198 = c134), c134 += l84.length; c134 % 4;)d69.push(0), c134++;
        return n371.write(d69), r = 2981146554 - t105(n371.data), n371.pos = o198 + 8, n371.writeUInt32(r), n371.data;
    }, t105 = function(t) {
        var e, r, n372, i304;
        for(t = ve.call(t); t.length % 4;)t.push(0);
        for(n372 = new ne(t), r = 0, e = 0, i304 = t.length; e < i304; e = e += 4)r += n372.readUInt32();
        return 4294967295 & r;
    }, e72;
}(), ae = {}.hasOwnProperty, oe = function(t, e) {
    for(var r in e)ae.call(e, r) && (t[r] = e[r]);
    function n373() {
        this.constructor = t;
    }
    return n373.prototype = e.prototype, t.prototype = new n373, t.__super__ = e.prototype, t;
};
re = function() {
    function t106(t) {
        var e;
        this.file = t, e = this.file.directory.tables[this.tag], this.exists = !!e, e && (this.offset = e.offset, this.length = e.length, this.parse(this.file.contents));
    }
    return t106.prototype.parse = function() {}, t106.prototype.encode = function() {}, t106.prototype.raw = function() {
        return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;
    }, t106;
}();
var se = function(t107) {
    function e73() {
        return e73.__super__.constructor.apply(this, arguments);
    }
    return oe(e73, re), e73.prototype.tag = "head", e73.prototype.parse = function(t) {
        return t.pos = this.offset, this.version = t.readInt(), this.revision = t.readInt(), this.checkSumAdjustment = t.readInt(), this.magicNumber = t.readInt(), this.flags = t.readShort(), this.unitsPerEm = t.readShort(), this.created = t.readLongLong(), this.modified = t.readLongLong(), this.xMin = t.readShort(), this.yMin = t.readShort(), this.xMax = t.readShort(), this.yMax = t.readShort(), this.macStyle = t.readShort(), this.lowestRecPPEM = t.readShort(), this.fontDirectionHint = t.readShort(), this.indexToLocFormat = t.readShort(), this.glyphDataFormat = t.readShort();
    }, e73.prototype.encode = function(t) {
        var e;
        return (e = new ne).writeInt(this.version), e.writeInt(this.revision), e.writeInt(this.checkSumAdjustment), e.writeInt(this.magicNumber), e.writeShort(this.flags), e.writeShort(this.unitsPerEm), e.writeLongLong(this.created), e.writeLongLong(this.modified), e.writeShort(this.xMin), e.writeShort(this.yMin), e.writeShort(this.xMax), e.writeShort(this.yMax), e.writeShort(this.macStyle), e.writeShort(this.lowestRecPPEM), e.writeShort(this.fontDirectionHint), e.writeShort(t), e.writeShort(this.glyphDataFormat), e.data;
    }, e73;
}(), ce = function() {
    function t108(t, e74) {
        var r50, n374, i305, a229, o199, s159, c135, u120, h104, l85, f76, d70, p, g52, m47, v41, b35;
        switch(this.platformID = t.readUInt16(), this.encodingID = t.readShort(), this.offset = e74 + t.readInt(), h104 = t.pos, t.pos = this.offset, this.format = t.readUInt16(), this.length = t.readUInt16(), this.language = t.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format){
            case 0:
                for(s159 = 0; s159 < 256; ++s159)this.codeMap[s159] = t.readByte();
                break;
            case 4:
                for(f76 = t.readUInt16(), l85 = f76 / 2, t.pos += 6, i305 = function() {
                    var e, r;
                    for(r = [], s159 = e = 0; 0 <= l85 ? e < l85 : e > l85; s159 = 0 <= l85 ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), t.pos += 2, p = function() {
                    var e, r;
                    for(r = [], s159 = e = 0; 0 <= l85 ? e < l85 : e > l85; s159 = 0 <= l85 ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), c135 = function() {
                    var e, r;
                    for(r = [], s159 = e = 0; 0 <= l85 ? e < l85 : e > l85; s159 = 0 <= l85 ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), u120 = function() {
                    var e, r;
                    for(r = [], s159 = e = 0; 0 <= l85 ? e < l85 : e > l85; s159 = 0 <= l85 ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), n374 = (this.length - t.pos + this.offset) / 2, o199 = function() {
                    var e, r;
                    for(r = [], s159 = e = 0; 0 <= n374 ? e < n374 : e > n374; s159 = 0 <= n374 ? ++e : --e)r.push(t.readUInt16());
                    return r;
                }(), s159 = m47 = 0, b35 = i305.length; m47 < b35; s159 = ++m47)for(g52 = i305[s159], r50 = v41 = d70 = p[s159]; d70 <= g52 ? v41 <= g52 : v41 >= g52; r50 = d70 <= g52 ? ++v41 : --v41)0 === u120[s159] ? a229 = r50 + c135[s159] : 0 !== (a229 = o199[u120[s159] / 2 + (r50 - d70) - (l85 - s159)] || 0) && (a229 += c135[s159]), this.codeMap[r50] = 65535 & a229;
        }
        t.pos = h104;
    }
    return t108.encode = function(t109, e75) {
        var r, n375, i306, a230, o200, s160, c136, u121, h105, l86, f77, d71, p, g53, m48, v42, b36, y33, w34, N31, L27, A27, x19, S19, _23, P23, k21, I16, F15, C13, j14, O12, B12, M11, E10, q8, D10, R11, T11, U8, z7, H7, W7, V7, G7, Y7;
        switch(I16 = new ne, a230 = Object.keys(t109).sort(function(t, e) {
            return t - e;
        }), e75){
            case "macroman":
                for(p = 0, g53 = function() {
                    var t = [];
                    for(d71 = 0; d71 < 256; ++d71)t.push(0);
                    return t;
                }(), v42 = {
                    0: 0
                }, i306 = {}, F15 = 0, B12 = a230.length; F15 < B12; F15++)null == v42[W7 = t109[n375 = a230[F15]]] && (v42[W7] = ++p), i306[n375] = {
                    old: t109[n375],
                    new: v42[t109[n375]]
                }, g53[n375] = v42[t109[n375]];
                return I16.writeUInt16(1), I16.writeUInt16(0), I16.writeUInt32(12), I16.writeUInt16(0), I16.writeUInt16(262), I16.writeUInt16(0), I16.write(g53), {
                    charMap: i306,
                    subtable: I16.data,
                    maxGlyphID: p + 1
                };
            case "unicode":
                for(P23 = [], h105 = [], b36 = 0, v42 = {}, r = {}, m48 = c136 = null, C13 = 0, M11 = a230.length; C13 < M11; C13++)null == v42[w34 = t109[n375 = a230[C13]]] && (v42[w34] = ++b36), r[n375] = {
                    old: w34,
                    new: v42[w34]
                }, o200 = v42[w34] - n375, null != m48 && o200 === c136 || (m48 && h105.push(m48), P23.push(n375), c136 = o200), m48 = n375;
                for(m48 && h105.push(m48), h105.push(65535), P23.push(65535), S19 = 2 * (x19 = P23.length), A27 = 2 * Math.pow(Math.log(x19) / Math.LN2, 2), l86 = Math.log(A27 / 2) / Math.LN2, L27 = 2 * x19 - A27, s160 = [], N31 = [], f77 = [], d71 = j14 = 0, E10 = P23.length; j14 < E10; d71 = ++j14){
                    if (_23 = P23[d71], u121 = h105[d71], 65535 === _23) {
                        s160.push(0), N31.push(0);
                        break;
                    }
                    if (_23 - (k21 = r[_23].new) >= 32768) for(s160.push(0), N31.push(2 * (f77.length + x19 - d71)), n375 = O12 = _23; _23 <= u121 ? O12 <= u121 : O12 >= u121; n375 = _23 <= u121 ? ++O12 : --O12)f77.push(r[n375].new);
                    else s160.push(k21 - _23), N31.push(0);
                }
                for(I16.writeUInt16(3), I16.writeUInt16(1), I16.writeUInt32(12), I16.writeUInt16(4), I16.writeUInt16(16 + 8 * x19 + 2 * f77.length), I16.writeUInt16(0), I16.writeUInt16(S19), I16.writeUInt16(A27), I16.writeUInt16(l86), I16.writeUInt16(L27), z7 = 0, q8 = h105.length; z7 < q8; z7++)n375 = h105[z7], I16.writeUInt16(n375);
                for(I16.writeUInt16(0), H7 = 0, D10 = P23.length; H7 < D10; H7++)n375 = P23[H7], I16.writeUInt16(n375);
                for(V7 = 0, R11 = s160.length; V7 < R11; V7++)o200 = s160[V7], I16.writeUInt16(o200);
                for(G7 = 0, T11 = N31.length; G7 < T11; G7++)y33 = N31[G7], I16.writeUInt16(y33);
                for(Y7 = 0, U8 = f77.length; Y7 < U8; Y7++)p = f77[Y7], I16.writeUInt16(p);
                return {
                    charMap: r,
                    subtable: I16.data,
                    maxGlyphID: b36 + 1
                };
        }
    }, t108;
}(), ue = function(t110) {
    function e76() {
        return e76.__super__.constructor.apply(this, arguments);
    }
    return oe(e76, re), e76.prototype.tag = "cmap", e76.prototype.parse = function(t) {
        var e, r, n376;
        for(t.pos = this.offset, this.version = t.readUInt16(), n376 = t.readUInt16(), this.tables = [], this.unicode = null, r = 0; 0 <= n376 ? r < n376 : r > n376; r = 0 <= n376 ? ++r : --r)e = new ce(t, this.offset), this.tables.push(e), e.isUnicode && null == this.unicode && (this.unicode = e);
        return !0;
    }, e76.encode = function(t, e) {
        var r, n377;
        return null == e && (e = "macroman"), r = ce.encode(t, e), (n377 = new ne).writeUInt16(0), n377.writeUInt16(1), r.table = n377.data.concat(r.subtable), r;
    }, e76;
}(), he = function(t111) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "hhea", e.prototype.parse = function(t) {
        return t.pos = this.offset, this.version = t.readInt(), this.ascender = t.readShort(), this.decender = t.readShort(), this.lineGap = t.readShort(), this.advanceWidthMax = t.readShort(), this.minLeftSideBearing = t.readShort(), this.minRightSideBearing = t.readShort(), this.xMaxExtent = t.readShort(), this.caretSlopeRise = t.readShort(), this.caretSlopeRun = t.readShort(), this.caretOffset = t.readShort(), t.pos += 8, this.metricDataFormat = t.readShort(), this.numberOfMetrics = t.readUInt16();
    }, e;
}(), le = function(t112) {
    function e77() {
        return e77.__super__.constructor.apply(this, arguments);
    }
    return oe(e77, re), e77.prototype.tag = "OS/2", e77.prototype.parse = function(t) {
        if (t.pos = this.offset, this.version = t.readUInt16(), this.averageCharWidth = t.readShort(), this.weightClass = t.readUInt16(), this.widthClass = t.readUInt16(), this.type = t.readShort(), this.ySubscriptXSize = t.readShort(), this.ySubscriptYSize = t.readShort(), this.ySubscriptXOffset = t.readShort(), this.ySubscriptYOffset = t.readShort(), this.ySuperscriptXSize = t.readShort(), this.ySuperscriptYSize = t.readShort(), this.ySuperscriptXOffset = t.readShort(), this.ySuperscriptYOffset = t.readShort(), this.yStrikeoutSize = t.readShort(), this.yStrikeoutPosition = t.readShort(), this.familyClass = t.readShort(), this.panose = function() {
            var e, r;
            for(r = [], e = 0; e < 10; ++e)r.push(t.readByte());
            return r;
        }(), this.charRange = function() {
            var e, r;
            for(r = [], e = 0; e < 4; ++e)r.push(t.readInt());
            return r;
        }(), this.vendorID = t.readString(4), this.selection = t.readShort(), this.firstCharIndex = t.readShort(), this.lastCharIndex = t.readShort(), this.version > 0 && (this.ascent = t.readShort(), this.descent = t.readShort(), this.lineGap = t.readShort(), this.winAscent = t.readShort(), this.winDescent = t.readShort(), this.codePageRange = function() {
            var e, r;
            for(r = [], e = 0; e < 2; e = ++e)r.push(t.readInt());
            return r;
        }(), this.version > 1)) return this.xHeight = t.readShort(), this.capHeight = t.readShort(), this.defaultChar = t.readShort(), this.breakChar = t.readShort(), this.maxContext = t.readShort();
    }, e77;
}(), fe = function(t113) {
    function e78() {
        return e78.__super__.constructor.apply(this, arguments);
    }
    return oe(e78, re), e78.prototype.tag = "post", e78.prototype.parse = function(t) {
        var e79, r51, n378;
        switch(t.pos = this.offset, this.format = t.readInt(), this.italicAngle = t.readInt(), this.underlinePosition = t.readShort(), this.underlineThickness = t.readShort(), this.isFixedPitch = t.readInt(), this.minMemType42 = t.readInt(), this.maxMemType42 = t.readInt(), this.minMemType1 = t.readInt(), this.maxMemType1 = t.readInt(), this.format){
            case 65536:
                break;
            case 131072:
                var i307;
                for(r51 = t.readUInt16(), this.glyphNameIndex = [], i307 = 0; 0 <= r51 ? i307 < r51 : i307 > r51; i307 = 0 <= r51 ? ++i307 : --i307)this.glyphNameIndex.push(t.readUInt16());
                for(this.names = [], n378 = []; t.pos < this.offset + this.length;)e79 = t.readByte(), n378.push(this.names.push(t.readString(e79)));
                return n378;
            case 151552:
                return r51 = t.readUInt16(), this.offsets = t.read(r51);
            case 196608:
                break;
            case 262144:
                return this.map = (function() {
                    var e, r, n379;
                    for(n379 = [], i307 = e = 0, r = this.file.maxp.numGlyphs; 0 <= r ? e < r : e > r; i307 = 0 <= r ? ++e : --e)n379.push(t.readUInt32());
                    return n379;
                }).call(this);
        }
    }, e78;
}(), de = function(t, e) {
    this.raw = t, this.length = t.length, this.platformID = e.platformID, this.encodingID = e.encodingID, this.languageID = e.languageID;
}, pe = function(t114) {
    function e80() {
        return e80.__super__.constructor.apply(this, arguments);
    }
    return oe(e80, re), e80.prototype.tag = "name", e80.prototype.parse = function(t) {
        var e, r, n380, i308, a231, o201, s161, c137, u122, h106, l87;
        for(t.pos = this.offset, t.readShort(), e = t.readShort(), o201 = t.readShort(), r = [], i308 = 0; 0 <= e ? i308 < e : i308 > e; i308 = 0 <= e ? ++i308 : --i308)r.push({
            platformID: t.readShort(),
            encodingID: t.readShort(),
            languageID: t.readShort(),
            nameID: t.readShort(),
            length: t.readShort(),
            offset: this.offset + o201 + t.readShort()
        });
        for(s161 = {}, i308 = u122 = 0, h106 = r.length; u122 < h106; i308 = ++u122)n380 = r[i308], t.pos = n380.offset, c137 = t.readString(n380.length), a231 = new de(c137, n380), null == s161[l87 = n380.nameID] && (s161[l87] = []), s161[n380.nameID].push(a231);
        this.strings = s161, this.copyright = s161[0], this.fontFamily = s161[1], this.fontSubfamily = s161[2], this.uniqueSubfamily = s161[3], this.fontName = s161[4], this.version = s161[5];
        try {
            this.postscriptName = s161[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
        } catch (t115) {
            this.postscriptName = s161[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
        }
        return this.trademark = s161[7], this.manufacturer = s161[8], this.designer = s161[9], this.description = s161[10], this.vendorUrl = s161[11], this.designerUrl = s161[12], this.license = s161[13], this.licenseUrl = s161[14], this.preferredFamily = s161[15], this.preferredSubfamily = s161[17], this.compatibleFull = s161[18], this.sampleText = s161[19];
    }, e80;
}(), ge = function(t116) {
    function e() {
        return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "maxp", e.prototype.parse = function(t) {
        return t.pos = this.offset, this.version = t.readInt(), this.numGlyphs = t.readUInt16(), this.maxPoints = t.readUInt16(), this.maxContours = t.readUInt16(), this.maxCompositePoints = t.readUInt16(), this.maxComponentContours = t.readUInt16(), this.maxZones = t.readUInt16(), this.maxTwilightPoints = t.readUInt16(), this.maxStorage = t.readUInt16(), this.maxFunctionDefs = t.readUInt16(), this.maxInstructionDefs = t.readUInt16(), this.maxStackElements = t.readUInt16(), this.maxSizeOfInstructions = t.readUInt16(), this.maxComponentElements = t.readUInt16(), this.maxComponentDepth = t.readUInt16();
    }, e;
}(), me = function(t117) {
    function e81() {
        return e81.__super__.constructor.apply(this, arguments);
    }
    return oe(e81, re), e81.prototype.tag = "hmtx", e81.prototype.parse = function(t118) {
        var e82, r52, n381, i309, a232, o202, s162;
        for(t118.pos = this.offset, this.metrics = [], e82 = 0, o202 = this.file.hhea.numberOfMetrics; 0 <= o202 ? e82 < o202 : e82 > o202; e82 = 0 <= o202 ? ++e82 : --e82)this.metrics.push({
            advance: t118.readUInt16(),
            lsb: t118.readInt16()
        });
        for(n381 = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function() {
            var r, i310;
            for(i310 = [], e82 = r = 0; 0 <= n381 ? r < n381 : r > n381; e82 = 0 <= n381 ? ++r : --r)i310.push(t118.readInt16());
            return i310;
        }(), this.widths = (function() {
            var t, e, r, n382;
            for(n382 = [], t = 0, e = (r = this.metrics).length; t < e; t++)i309 = r[t], n382.push(i309.advance);
            return n382;
        }).call(this), r52 = this.widths[this.widths.length - 1], s162 = [], e82 = a232 = 0; 0 <= n381 ? a232 < n381 : a232 > n381; e82 = 0 <= n381 ? ++a232 : --a232)s162.push(this.widths.push(r52));
        return s162;
    }, e81.prototype.forGlyph = function(t) {
        return t in this.metrics ? this.metrics[t] : {
            advance: this.metrics[this.metrics.length - 1].advance,
            lsb: this.leftSideBearings[t - this.metrics.length]
        };
    }, e81;
}(), ve = [].slice, be = function(t119) {
    function e83() {
        return e83.__super__.constructor.apply(this, arguments);
    }
    return oe(e83, re), e83.prototype.tag = "glyf", e83.prototype.parse = function() {
        return this.cache = {};
    }, e83.prototype.glyphFor = function(t) {
        var e, r, n383, i311, a233, o203, s163, c138, u123, h107;
        return t in this.cache ? this.cache[t] : (i311 = this.file.loca, e = this.file.contents, r = i311.indexOf(t), 0 === (n383 = i311.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + r, a233 = (o203 = new ne(e.read(n383))).readShort(), c138 = o203.readShort(), h107 = o203.readShort(), s163 = o203.readShort(), u123 = o203.readShort(), this.cache[t] = -1 === a233 ? new we(o203, c138, h107, s163, u123) : new ye(o203, a233, c138, h107, s163, u123), this.cache[t]));
    }, e83.prototype.encode = function(t, e, r) {
        var n384, i312, a234, o204, s164;
        for(a234 = [], i312 = [], o204 = 0, s164 = e.length; o204 < s164; o204++)n384 = t[e[o204]], i312.push(a234.length), n384 && (a234 = a234.concat(n384.encode(r)));
        return i312.push(a234.length), {
            table: a234,
            offsets: i312
        };
    }, e83;
}(), ye = function() {
    function t120(t, e, r, n385, i313, a235) {
        this.raw = t, this.numberOfContours = e, this.xMin = r, this.yMin = n385, this.xMax = i313, this.yMax = a235, this.compound = !1;
    }
    return t120.prototype.encode = function() {
        return this.raw.data;
    }, t120;
}(), we = function() {
    function t121(t, e, r, n386, i314) {
        var a236, o205;
        for(this.raw = t, this.xMin = e, this.yMin = r, this.xMax = n386, this.yMax = i314, this.compound = !0, this.glyphIDs = [], this.glyphOffsets = [], a236 = this.raw; o205 = a236.readShort(), this.glyphOffsets.push(a236.pos), this.glyphIDs.push(a236.readUInt16()), 32 & o205;)a236.pos += 1 & o205 ? 4 : 2, 128 & o205 ? a236.pos += 8 : 64 & o205 ? a236.pos += 4 : 8 & o205 && (a236.pos += 2);
    }
    return t121.prototype.encode = function() {
        var t, e, r;
        for(e = new ne(ve.call(this.raw.data)), t = 0, r = this.glyphIDs.length; t < r; ++t)e.pos = this.glyphOffsets[t];
        return e.data;
    }, t121;
}(), Ne = function(t122) {
    function e84() {
        return e84.__super__.constructor.apply(this, arguments);
    }
    return oe(e84, re), e84.prototype.tag = "loca", e84.prototype.parse = function(t) {
        var e85, r;
        return t.pos = this.offset, e85 = this.file.head.indexToLocFormat, this.offsets = 0 === e85 ? (function() {
            var e, n387;
            for(n387 = [], r = 0, e = this.length; r < e; r += 2)n387.push(2 * t.readUInt16());
            return n387;
        }).call(this) : (function() {
            var e, n388;
            for(n388 = [], r = 0, e = this.length; r < e; r += 4)n388.push(t.readUInt32());
            return n388;
        }).call(this);
    }, e84.prototype.indexOf = function(t) {
        return this.offsets[t];
    }, e84.prototype.lengthOf = function(t) {
        return this.offsets[t + 1] - this.offsets[t];
    }, e84.prototype.encode = function(t, e) {
        for(var r = new Uint32Array(this.offsets.length), n389 = 0, i315 = 0, a237 = 0; a237 < r.length; ++a237)if (r[a237] = n389, i315 < e.length && e[i315] == a237) {
            ++i315, r[a237] = n389;
            var o206 = this.offsets[a237], s165 = this.offsets[a237 + 1] - o206;
            s165 > 0 && (n389 += s165);
        }
        for(var c139 = new Array(4 * r.length), u124 = 0; u124 < r.length; ++u124)c139[4 * u124 + 3] = 255 & r[u124], c139[4 * u124 + 2] = (65280 & r[u124]) >> 8, c139[4 * u124 + 1] = (16711680 & r[u124]) >> 16, c139[4 * u124] = (4278190080 & r[u124]) >> 24;
        return c139;
    }, e84;
}(), Le = function() {
    function t123(t) {
        this.font = t, this.subset = {}, this.unicodes = {}, this.next = 33;
    }
    return t123.prototype.generateCmap = function() {
        var t, e, r, n390, i316;
        for(e in n390 = this.font.cmap.tables[0].codeMap, t = {}, i316 = this.subset)r = i316[e], t[e] = n390[r];
        return t;
    }, t123.prototype.glyphsFor = function(t) {
        var e, r, n391, i317, a238, o207, s166;
        for(n391 = {}, a238 = 0, o207 = t.length; a238 < o207; a238++)n391[i317 = t[a238]] = this.font.glyf.glyphFor(i317);
        for(i317 in e = [], n391)(null != (r = n391[i317]) ? r.compound : void 0) && e.push.apply(e, r.glyphIDs);
        if (e.length > 0) for(i317 in s166 = this.glyphsFor(e))r = s166[i317], n391[i317] = r;
        return n391;
    }, t123.prototype.encode = function(t124, e86) {
        var r53, n392, i318, a239, o208, s167, c140, u125, h108, l88, f78, d72, p, g54, m49;
        for(n392 in r53 = ue.encode(this.generateCmap(), "unicode"), a239 = this.glyphsFor(t124), f78 = {
            0: 0
        }, m49 = r53.charMap)f78[(s167 = m49[n392]).old] = s167.new;
        for(d72 in l88 = r53.maxGlyphID, a239)d72 in f78 || (f78[d72] = l88++);
        return u125 = function(t) {
            var e, r;
            for(e in r = {}, t)r[t[e]] = e;
            return r;
        }(f78), h108 = Object.keys(u125).sort(function(t, e) {
            return t - e;
        }), p = function() {
            var t, e, r;
            for(r = [], t = 0, e = h108.length; t < e; t++)o208 = h108[t], r.push(u125[o208]);
            return r;
        }(), i318 = this.font.glyf.encode(a239, p, f78), c140 = this.font.loca.encode(i318.offsets, p), g54 = {
            cmap: this.font.cmap.raw(),
            glyf: i318.table,
            loca: c140,
            hmtx: this.font.hmtx.raw(),
            hhea: this.font.hhea.raw(),
            maxp: this.font.maxp.raw(),
            post: this.font.post.raw(),
            name: this.font.name.raw(),
            head: this.font.head.encode(e86)
        }, this.font.os2.exists && (g54["OS/2"] = this.font.os2.raw()), this.font.directory.encode(g54);
    }, t123;
}();
E.API.PDFObject = function() {
    var t125;
    function e87() {}
    return t125 = function(t, e) {
        return (Array(e + 1).join("0") + t).slice(-e);
    }, e87.convert = function(r) {
        var n393, i319, a240, o209;
        if (Array.isArray(r)) return "[" + (function() {
            var t, i320, a241;
            for(a241 = [], t = 0, i320 = r.length; t < i320; t++)n393 = r[t], a241.push(e87.convert(n393));
            return a241;
        })().join(" ") + "]";
        if ("string" == typeof r) return "/" + r;
        if (null != r ? r.isString : void 0) return "(" + r + ")";
        if (r instanceof Date) return "(D:" + t125(r.getUTCFullYear(), 4) + t125(r.getUTCMonth(), 2) + t125(r.getUTCDate(), 2) + t125(r.getUTCHours(), 2) + t125(r.getUTCMinutes(), 2) + t125(r.getUTCSeconds(), 2) + "Z)";
        if ("[object Object]" === ({}).toString.call(r)) {
            for(i319 in a240 = [
                "<<"
            ], r)o209 = r[i319], a240.push("/" + i319 + " " + e87.convert(o209));
            return a240.push(">>"), a240.join("\n");
        }
        return "" + r;
    }, e87;
}();
exports.default = E;

},{"@babel/runtime/helpers/typeof":"jgQjt","fflate":"61VnC","f4c3b48e1b8c7c37":"4MWaq","dda6c17c09594b43":"9skFS","92cdeb0fd981d904":"hzgiH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jgQjt":[function(require,module,exports) {
function _typeof(obj1) {
    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj1);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"61VnC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Deflate", ()=>Deflate
);
parcelHelpers.export(exports, "AsyncDeflate", ()=>AsyncDeflate
);
parcelHelpers.export(exports, "deflate", ()=>deflate
);
/**
 * Compresses data with DEFLATE without any wrapper
 * @param data The data to compress
 * @param opts The compression options
 * @returns The deflated version of the data
 */ parcelHelpers.export(exports, "deflateSync", ()=>deflateSync
);
parcelHelpers.export(exports, "Inflate", ()=>Inflate
);
parcelHelpers.export(exports, "AsyncInflate", ()=>AsyncInflate
);
parcelHelpers.export(exports, "inflate", ()=>inflate
);
/**
 * Expands DEFLATE data with no wrapper
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "inflateSync", ()=>inflateSync
);
parcelHelpers.export(exports, "Gzip", ()=>Gzip
);
parcelHelpers.export(exports, "AsyncGzip", ()=>AsyncGzip
);
parcelHelpers.export(exports, "gzip", ()=>gzip
);
/**
 * Compresses data with GZIP
 * @param data The data to compress
 * @param opts The compression options
 * @returns The gzipped version of the data
 */ parcelHelpers.export(exports, "gzipSync", ()=>gzipSync
);
parcelHelpers.export(exports, "Gunzip", ()=>Gunzip
);
parcelHelpers.export(exports, "AsyncGunzip", ()=>AsyncGunzip
);
parcelHelpers.export(exports, "gunzip", ()=>gunzip
);
/**
 * Expands GZIP data
 * @param data The data to decompress
 * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "gunzipSync", ()=>gunzipSync
);
parcelHelpers.export(exports, "Zlib", ()=>Zlib
);
parcelHelpers.export(exports, "AsyncZlib", ()=>AsyncZlib
);
parcelHelpers.export(exports, "zlib", ()=>zlib
);
/**
 * Compress data with Zlib
 * @param data The data to compress
 * @param opts The compression options
 * @returns The zlib-compressed version of the data
 */ parcelHelpers.export(exports, "zlibSync", ()=>zlibSync
);
parcelHelpers.export(exports, "Unzlib", ()=>Unzlib
);
parcelHelpers.export(exports, "AsyncUnzlib", ()=>AsyncUnzlib
);
parcelHelpers.export(exports, "unzlib", ()=>unzlib
);
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "unzlibSync", ()=>unzlibSync
);
// Default algorithm for compression (used because having a known output size allows faster decompression)
parcelHelpers.export(exports, "compress", ()=>gzip
);
parcelHelpers.export(exports, "AsyncCompress", ()=>AsyncGzip
);
// Default algorithm for compression (used because having a known output size allows faster decompression)
parcelHelpers.export(exports, "compressSync", ()=>gzipSync
);
parcelHelpers.export(exports, "Compress", ()=>Gzip
);
parcelHelpers.export(exports, "Decompress", ()=>Decompress
);
parcelHelpers.export(exports, "AsyncDecompress", ()=>AsyncDecompress
);
parcelHelpers.export(exports, "decompress", ()=>decompress
);
/**
 * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */ parcelHelpers.export(exports, "decompressSync", ()=>decompressSync
);
/**
 * Converts a string into a Uint8Array for use with compression/decompression methods
 * @param str The string to encode
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless decoding a binary string.
 * @returns The string encoded in UTF-8/Latin-1 binary
 */ parcelHelpers.export(exports, "strToU8", ()=>strToU8
);
/**
 * Converts a Uint8Array to a string
 * @param dat The data to decode to string
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless encoding to binary string.
 * @returns The original UTF-8/Latin-1 string
 */ parcelHelpers.export(exports, "strFromU8", ()=>strFromU8
);
parcelHelpers.export(exports, "zip", ()=>zip
);
/**
 * Synchronously creates a ZIP file. Prefer using `zip` for better performance
 * with more than one file.
 * @param data The directory structure for the ZIP archive
 * @param opts The main options, merged with per-file options
 * @returns The generated ZIP archive
 */ parcelHelpers.export(exports, "zipSync", ()=>zipSync
);
/**
 * Asynchronously decompresses a ZIP archive
 * @param data The raw compressed ZIP file
 * @param cb The callback to call with the decompressed files
 * @returns A function that can be used to immediately terminate the unzipping
 */ parcelHelpers.export(exports, "unzip", ()=>unzip
);
/**
 * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better
 * performance with more than one file.
 * @param data The raw compressed ZIP file
 * @returns The decompressed files
 */ parcelHelpers.export(exports, "unzipSync", ()=>unzipSync
);
// DEFLATE is a complex format; to read this code, you should probably check the RFC first:
// https://tools.ietf.org/html/rfc1951
// You may also wish to take a look at the guide I made about this program:
// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad
// Much of the following code is similar to that of UZIP.js:
// https://github.com/photopea/UZIP.js
// Many optimizations have been made, so the bundle size is ultimately smaller but performance is similar.
// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint
// is better for memory in most engines (I *think*).
var ch2 = {};
var wk = function(c, id, msg, transfer, cb) {
    var u = ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
        c
    ], {
        type: 'text/javascript'
    })));
    var w = new Worker(u);
    w.onerror = function(e) {
        return cb(e.error, null);
    };
    w.onmessage = function(e) {
        return cb(null, e.data);
    };
    w.postMessage(msg, transfer);
    return w;
};
// aliases for shorter compressed code (most minifers don't do this)
var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
// fixed length extra bits
var fleb = new u8([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0,
    /* unused */ 0,
    0,
    /* impossible */ 0
]);
// fixed distance extra bits
// see fleb note
var fdeb = new u8([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13,
    /* unused */ 0,
    0
]);
// code length index map
var clim = new u8([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
// get base, reverse index map from extra bits
var freb = function(eb, start) {
    var b = new u16(31);
    for(var i1 = 0; i1 < 31; ++i1)b[i1] = start += 1 << eb[i1 - 1];
    // numbers here are at max 18 bits
    var r = new u32(b[30]);
    for(var i1 = 1; i1 < 30; ++i1)for(var j = b[i1]; j < b[i1 + 1]; ++j)r[j] = j - b[i1] << 5 | i1;
    return [
        b,
        r
    ];
};
var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];
// we can ignore the fact that the other numbers are wrong; they never happen anyway
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];
// map of value to reverse (assuming 16 bits)
var rev = new u16(32768);
for(var i = 0; i < 32768; ++i){
    // reverse table algorithm from SO
    var x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
    x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
    x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
    rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
}
// create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?
var hMap = function(cd, mb, r) {
    var s = cd.length;
    // index
    var i2 = 0;
    // u16 "map": index -> # of codes with bit length = index
    var l = new u16(mb);
    // length of cd must be 288 (total # of codes)
    for(; i2 < s; ++i2)++l[cd[i2] - 1];
    // u16 "map": index -> minimum code for bit length = index
    var le = new u16(mb);
    for(i2 = 0; i2 < mb; ++i2)le[i2] = le[i2 - 1] + l[i2 - 1] << 1;
    var co;
    if (r) {
        // u16 "map": index -> number of actual bits, symbol for code
        co = new u16(1 << mb);
        // bits to remove for reverser
        var rvb = 15 - mb;
        for(i2 = 0; i2 < s; ++i2)// ignore 0 lengths
        if (cd[i2]) {
            // num encoding both symbol and bits read
            var sv = i2 << 4 | cd[i2];
            // free bits
            var r_1 = mb - cd[i2];
            // start value
            var v = (le[cd[i2] - 1]++) << r_1;
            // m is end value
            for(var m = v | (1 << r_1) - 1; v <= m; ++v)// every 16 bit value starting with the code yields the same result
            co[rev[v] >>> rvb] = sv;
        }
    } else {
        co = new u16(s);
        for(i2 = 0; i2 < s; ++i2)co[i2] = rev[le[cd[i2] - 1]++] >>> 15 - cd[i2];
    }
    return co;
};
// fixed length tree
var flt = new u8(288);
for(var i = 0; i < 144; ++i)flt[i] = 8;
for(var i = 144; i < 256; ++i)flt[i] = 9;
for(var i = 256; i < 280; ++i)flt[i] = 7;
for(var i = 280; i < 288; ++i)flt[i] = 8;
// fixed distance tree
var fdt = new u8(32);
for(var i = 0; i < 32; ++i)fdt[i] = 5;
// fixed length map
var flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);
// fixed distance map
var fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);
// find max of array
var max = function(a) {
    var m = a[0];
    for(var i3 = 1; i3 < a.length; ++i3)if (a[i3] > m) m = a[i3];
    return m;
};
// read d, starting at bit p and mask with m
var bits = function(d, p, m) {
    var o = p / 8 >> 0;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
// read d, starting at bit p continuing for at least 16 bits
var bits16 = function(d, p) {
    var o = p / 8 >> 0;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
// get end of byte
var shft = function(p) {
    return (p / 8 >> 0) + (p & 7 && 1);
};
// typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice
var slc = function(v, s, e) {
    if (s == null || s < 0) s = 0;
    if (e == null || e > v.length) e = v.length;
    // can't use .constructor in case user-supplied
    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
// expands raw DEFLATE data
var inflt = function(dat, buf, st) {
    // source length
    var sl = dat.length;
    // have to estimate size
    var noBuf = !buf || st;
    // no state
    var noSt = !st || st.i;
    if (!st) st = {};
    // Assumes roughly 33% compression ratio average
    if (!buf) buf = new u8(sl * 3);
    // ensure buffer can fit at least l elements
    var cbuf = function(l) {
        var bl = buf.length;
        // need to increase size to fit
        if (l > bl) {
            // Double or set to necessary, whichever is greater
            var nbuf = new u8(Math.max(bl * 2, l));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    //  last chunk         bitpos           bytes
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    // total bits
    var tbts = sl * 8;
    do {
        if (!lm) {
            // BFINAL - this is only 1 when last chunk is next
            st.f = final = bits(dat, pos, 1);
            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
            var type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                // go to end of byte boundary
                var s = shft(pos) + 4, l1 = dat[s - 4] | dat[s - 3] << 8, t = s + l1;
                if (t > sl) {
                    if (noSt) throw 'unexpected EOF';
                    break;
                }
                // ensure size
                if (noBuf) cbuf(bt + l1);
                // Copy over uncompressed data
                buf.set(dat.subarray(s, t), bt);
                // Get new bitpos, update byte count
                st.b = bt += l1, st.p = pos = t * 8;
                continue;
            } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                //  literal                            lengths
                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                var tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                // length+distance tree
                var ldt = new u8(tl);
                // code length tree
                var clt = new u8(19);
                for(var i4 = 0; i4 < hcLen; ++i4)// use index map to get real code
                clt[clim[i4]] = bits(dat, pos + i4 * 3, 7);
                pos += hcLen * 3;
                // code lengths bits
                var clb = max(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts) break;
                // code lengths map
                var clm = hMap(clt, clb, 1);
                for(var i4 = 0; i4 < tl;){
                    var r = clm[bits(dat, pos, clbmsk)];
                    // bits read
                    pos += r & 15;
                    // symbol
                    var s = r >>> 4;
                    // code length to copy
                    if (s < 16) ldt[i4++] = s;
                    else {
                        //  copy   count
                        var c = 0, n = 0;
                        if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i4 - 1];
                        else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;
                        while(n--)ldt[i4++] = c;
                    }
                }
                //    length tree                 distance tree
                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                // max length bits
                lbt = max(lt);
                // max dist bits
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            } else throw 'invalid block type';
            if (pos > tbts) throw 'unexpected EOF';
        }
        // Make sure the buffer can hold this + the largest possible addition
        // Maximum chunk size (practically, theoretically infinite) is 2^17;
        if (noBuf) cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var mxa = lbt + dbt + 18;
        while(noSt || pos + mxa < tbts){
            // bits read, code
            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts) throw 'unexpected EOF';
            if (!c) throw 'invalid length/literal';
            if (sym < 256) buf[bt++] = sym;
            else if (sym == 256) {
                lm = null;
                break;
            } else {
                var add = sym - 254;
                // no extra bits needed if less
                if (sym > 264) {
                    // index
                    var i4 = sym - 257, b = fleb[i4];
                    add = bits(dat, pos, (1 << b) - 1) + fl[i4];
                    pos += b;
                }
                // dist
                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d) throw 'invalid distance';
                pos += d & 15;
                var dt = fd[dsym];
                if (dsym > 3) {
                    var b = fdeb[dsym];
                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
                }
                if (pos > tbts) throw 'unexpected EOF';
                if (noBuf) cbuf(bt + 131072);
                var end = bt + add;
                for(; bt < end; bt += 4){
                    buf[bt] = buf[bt - dt];
                    buf[bt + 1] = buf[bt + 1 - dt];
                    buf[bt + 2] = buf[bt + 2 - dt];
                    buf[bt + 3] = buf[bt + 3 - dt];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    }while (!final)
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
// starting at p, write the minimum number of bits that can hold v to d
var wbits = function(d, p, v) {
    v <<= p & 7;
    var o = p / 8 >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
};
// starting at p, write the minimum number of bits (>8) that can hold v to d
var wbits16 = function(d, p, v) {
    v <<= p & 7;
    var o = p / 8 >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
    d[o + 2] |= v >>> 16;
};
// creates code lengths from a frequency table
var hTree = function(d, mb) {
    // Need extra info to make a tree
    var t = [];
    for(var i5 = 0; i5 < d.length; ++i5)if (d[i5]) t.push({
        s: i5,
        f: d[i5]
    });
    var s = t.length;
    var t2 = t.slice();
    if (!s) return [
        new u8(0),
        0
    ];
    if (s == 1) {
        var v = new u8(t[0].s + 1);
        v[t[0].s] = 1;
        return [
            v,
            1
        ];
    }
    t.sort(function(a, b) {
        return a.f - b.f;
    });
    // after i2 reaches last ind, will be stopped
    // freq must be greater than largest possible number of symbols
    t.push({
        s: -1,
        f: 25001
    });
    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
    t[0] = {
        s: -1,
        f: l.f + r.f,
        l: l,
        r: r
    };
    // efficient algorithm from UZIP.js
    // i0 is lookbehind, i2 is lookahead - after processing two low-freq
    // symbols that combined have high freq, will start processing i2 (high-freq,
    // non-composite) symbols instead
    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/
    while(i1 != s - 1){
        l = t[t[i0].f < t[i2].f ? i0++ : i2++];
        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
        t[i1++] = {
            s: -1,
            f: l.f + r.f,
            l: l,
            r: r
        };
    }
    var maxSym = t2[0].s;
    for(var i5 = 1; i5 < s; ++i5)if (t2[i5].s > maxSym) maxSym = t2[i5].s;
    // code lengths
    var tr = new u16(maxSym + 1);
    // max bits in tree
    var mbt = ln(t[i1 - 1], tr, 0);
    if (mbt > mb) {
        // more algorithms from UZIP.js
        // TODO: find out how this code works (debt)
        //  ind    debt
        var i5 = 0, dt = 0;
        //    left            cost
        var lft = mbt - mb, cst = 1 << lft;
        t2.sort(function(a, b) {
            return tr[b.s] - tr[a.s] || a.f - b.f;
        });
        for(; i5 < s; ++i5){
            var i2_1 = t2[i5].s;
            if (tr[i2_1] > mb) {
                dt += cst - (1 << mbt - tr[i2_1]);
                tr[i2_1] = mb;
            } else break;
        }
        dt >>>= lft;
        while(dt > 0){
            var i2_2 = t2[i5].s;
            if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;
            else ++i5;
        }
        for(; i5 >= 0 && dt; --i5){
            var i2_3 = t2[i5].s;
            if (tr[i2_3] == mb) {
                --tr[i2_3];
                ++dt;
            }
        }
        mbt = mb;
    }
    return [
        new u8(tr),
        mbt
    ];
};
// get the max length and assign length codes
var ln = function(n, l, d) {
    return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
};
// length codes generation
var lc = function(c) {
    var s = c.length;
    // Note that the semicolon was intentional
    while(s && !c[--s]);
    var cl = new u16(++s);
    //  ind      num         streak
    var cli = 0, cln = c[0], cls = 1;
    var w = function(v) {
        cl[cli++] = v;
    };
    for(var i6 = 1; i6 <= s; ++i6)if (c[i6] == cln && i6 != s) ++cls;
    else {
        if (!cln && cls > 2) {
            for(; cls > 138; cls -= 138)w(32754);
            if (cls > 2) {
                w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
                cls = 0;
            }
        } else if (cls > 3) {
            w(cln), --cls;
            for(; cls > 6; cls -= 6)w(8304);
            if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;
        }
        while(cls--)w(cln);
        cls = 1;
        cln = c[i6];
    }
    return [
        cl.subarray(0, cli),
        s
    ];
};
// calculate the length of output from tree, code lengths
var clen = function(cf, cl) {
    var l = 0;
    for(var i7 = 0; i7 < cl.length; ++i7)l += cf[i7] * cl[i7];
    return l;
};
// writes a fixed block
// returns the new bit pos
var wfblk = function(out, pos, dat) {
    // no need to write 00 as type: TypedArray defaults to 0
    var s = dat.length;
    var o = shft(pos + 2);
    out[o] = s & 255;
    out[o + 1] = s >>> 8;
    out[o + 2] = out[o] ^ 255;
    out[o + 3] = out[o + 1] ^ 255;
    for(var i8 = 0; i8 < s; ++i8)out[o + i8 + 4] = dat[i8];
    return (o + 4 + s) * 8;
};
// writes a block
var wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
    wbits(out, p++, final);
    ++lf[256];
    var _a1 = hTree(lf, 15), dlt = _a1[0], mlb = _a1[1];
    var _b1 = hTree(df, 15), ddt = _b1[0], mdb = _b1[1];
    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
    var lcfreq = new u16(19);
    for(var i9 = 0; i9 < lclt.length; ++i9)lcfreq[lclt[i9] & 31]++;
    for(var i9 = 0; i9 < lcdt.length; ++i9)lcfreq[lcdt[i9] & 31]++;
    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
    var nlcc = 19;
    for(; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc);
    var flen = bl + 5 << 3;
    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
    if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));
    var lm, ll, dm, dl;
    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
    if (dtlen < ftlen) {
        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
        var llm = hMap(lct, mlcb, 0);
        wbits(out, p, nlc - 257);
        wbits(out, p + 5, ndc - 1);
        wbits(out, p + 10, nlcc - 4);
        p += 14;
        for(var i9 = 0; i9 < nlcc; ++i9)wbits(out, p + 3 * i9, lct[clim[i9]]);
        p += 3 * nlcc;
        var lcts = [
            lclt,
            lcdt
        ];
        for(var it = 0; it < 2; ++it){
            var clct = lcts[it];
            for(var i9 = 0; i9 < clct.length; ++i9){
                var len = clct[i9] & 31;
                wbits(out, p, llm[len]), p += lct[len];
                if (len > 15) wbits(out, p, clct[i9] >>> 5 & 127), p += clct[i9] >>> 12;
            }
        }
    } else lm = flm, ll = flt, dm = fdm, dl = fdt;
    for(var i9 = 0; i9 < li; ++i9)if (syms[i9] > 255) {
        var len = syms[i9] >>> 18 & 31;
        wbits16(out, p, lm[len + 257]), p += ll[len + 257];
        if (len > 7) wbits(out, p, syms[i9] >>> 23 & 31), p += fleb[len];
        var dst = syms[i9] & 31;
        wbits16(out, p, dm[dst]), p += dl[dst];
        if (dst > 3) wbits16(out, p, syms[i9] >>> 5 & 8191), p += fdeb[dst];
    } else wbits16(out, p, lm[syms[i9]]), p += ll[syms[i9]];
    wbits16(out, p, lm[256]);
    return p + ll[256];
};
// deflate options (nice << 13) | chain
var deo = /*#__PURE__*/ new u32([
    65540,
    131080,
    131088,
    131104,
    262176,
    1048704,
    1048832,
    2114560,
    2117632
]);
// empty
var et = /*#__PURE__*/ new u8(0);
// compresses data into a raw DEFLATE buffer
var dflt = function(dat, lvl, plvl, pre, post, lst) {
    var s = dat.length;
    var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post);
    // writing to this writes to the output buffer
    var w = o.subarray(pre, o.length - post);
    var pos = 0;
    if (!lvl || s < 8) for(var i10 = 0; i10 <= s; i10 += 65535){
        // end
        var e = i10 + 65535;
        if (e < s) // write full block
        pos = wfblk(w, pos, dat.subarray(i10, e));
        else {
            // write final block
            w[i10] = lst;
            pos = wfblk(w, pos, dat.subarray(i10, s));
        }
    }
    else {
        var opt = deo[lvl - 1];
        var n = opt >>> 13, c = opt & 8191;
        var msk_1 = (1 << plvl) - 1;
        //    prev 2-byte val map    curr 2-byte val map
        var prev = new u16(32768), head = new u16(msk_1 + 1);
        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
        var hsh = function(i11) {
            return (dat[i11] ^ dat[i11 + 1] << bs1_1 ^ dat[i11 + 2] << bs2_1) & msk_1;
        };
        // 24576 is an arbitrary number of maximum symbols per block
        // 424 buffer for last block
        var syms = new u32(25000);
        // length/literal freq   distance freq
        var lf = new u16(288), df = new u16(32);
        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos
        var lc_1 = 0, eb = 0, i10 = 0, li = 0, wi = 0, bs = 0;
        for(; i10 < s; ++i10){
            // hash value
            var hv = hsh(i10);
            // index mod 32768
            var imod = i10 & 32767;
            // previous index with this value
            var pimod = head[hv];
            prev[imod] = pimod;
            head[hv] = imod;
            // We always should modify head and prev, but only add symbols if
            // this data is not yet processed ("wait" for wait index)
            if (wi <= i10) {
                // bytes remaining
                var rem = s - i10;
                if ((lc_1 > 7000 || li > 24576) && rem > 423) {
                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i10 - bs, pos);
                    li = lc_1 = eb = 0, bs = i10;
                    for(var j = 0; j < 286; ++j)lf[j] = 0;
                    for(var j = 0; j < 30; ++j)df[j] = 0;
                }
                //  len    dist   chain
                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;
                if (rem > 2 && hv == hsh(i10 - dif)) {
                    var maxn = Math.min(n, rem) - 1;
                    var maxd = Math.min(32767, i10);
                    // max possible length
                    // not capped at dif because decompressors implement "rolling" index population
                    var ml = Math.min(258, rem);
                    while(dif <= maxd && --ch_1 && imod != pimod){
                        if (dat[i10 + l] == dat[i10 + l - dif]) {
                            var nl = 0;
                            for(; nl < ml && dat[i10 + nl] == dat[i10 + nl - dif]; ++nl);
                            if (nl > l) {
                                l = nl, d = dif;
                                // break out early when we reach "nice" (we are satisfied enough)
                                if (nl > maxn) break;
                                // now, find the rarest 2-byte sequence within this
                                // length of literals and search for that instead.
                                // Much faster than just using the start
                                var mmd = Math.min(dif, nl - 2);
                                var md = 0;
                                for(var j = 0; j < mmd; ++j){
                                    var ti = i10 - dif + j + 32768 & 32767;
                                    var pti = prev[ti];
                                    var cd = ti - pti + 32768 & 32767;
                                    if (cd > md) md = cd, pimod = ti;
                                }
                            }
                        }
                        // check the previous match
                        imod = pimod, pimod = prev[imod];
                        dif += imod - pimod + 32768 & 32767;
                    }
                }
                // d will be nonzero only when a match was found
                if (d) {
                    // store both dist and len data in one Uint32
                    // Make sure this is recognized as a len/dist with 28th bit (2^28)
                    syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
                    var lin = revfl[l] & 31, din = revfd[d] & 31;
                    eb += fleb[lin] + fdeb[din];
                    ++lf[257 + lin];
                    ++df[din];
                    wi = i10 + l;
                    ++lc_1;
                } else {
                    syms[li++] = dat[i10];
                    ++lf[dat[i10]];
                }
            }
        }
        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i10 - bs, pos);
        // this is the easiest way to avoid needing to maintain state
        if (!lst) pos = wfblk(w, pos, et);
    }
    return slc(o, 0, pre + shft(pos) + post);
};
// CRC32 table
var crct = /*#__PURE__*/ function() {
    var t = new u32(256);
    for(var i12 = 0; i12 < 256; ++i12){
        var c = i12, k = 9;
        while(--k)c = (c & 1 && 0xEDB88320) ^ c >>> 1;
        t[i12] = c;
    }
    return t;
}();
// CRC32
var crc = function() {
    var c = 0xFFFFFFFF;
    return {
        p: function(d) {
            // closures have awful performance
            var cr = c;
            for(var i13 = 0; i13 < d.length; ++i13)cr = crct[cr & 255 ^ d[i13]] ^ cr >>> 8;
            c = cr;
        },
        d: function() {
            return c ^ 0xFFFFFFFF;
        }
    };
};
// Alder32
var adler = function() {
    var a = 1, b = 0;
    return {
        p: function(d) {
            // closures have awful performance
            var n = a, m = b;
            var l = d.length;
            for(var i14 = 0; i14 != l;){
                var e = Math.min(i14 + 5552, l);
                for(; i14 < e; ++i14)n += d[i14], m += n;
                n %= 65521, m %= 65521;
            }
            a = n, b = m;
        },
        d: function() {
            return (a >>> 8 << 16 | (b & 255) << 8 | b >>> 8) + ((a & 255) << 23) * 2;
        }
    };
};
// deflate with opts
var dopt = function(dat, opt, pre, post, st) {
    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
};
// Walmart object spread
var mrg = function(a, b) {
    var o = {};
    for(var k in a)o[k] = a[k];
    for(var k in b)o[k] = b[k];
    return o;
};
// worker clone
// This is possibly the craziest part of the entire codebase, despite how simple it may seem.
// The only parameter to this function is a closure that returns an array of variables outside of the function scope.
// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.
// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).
// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.
// This took me three weeks to figure out how to do.
var wcln = function(fn, fnStr, td) {
    var dt = fn();
    var st = fn.toString();
    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');
    for(var i15 = 0; i15 < dt.length; ++i15){
        var v = dt[i15], k = ks[i15];
        if (typeof v == 'function') {
            fnStr += ';' + k + '=';
            var st_1 = v.toString();
            if (v.prototype) {
                // for global objects
                if (st_1.indexOf('[native code]') != -1) {
                    var spInd = st_1.indexOf(' ', 8) + 1;
                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));
                } else {
                    fnStr += st_1;
                    for(var t in v.prototype)fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();
                }
            } else fnStr += st_1;
        } else td[k] = v;
    }
    return [
        fnStr,
        td
    ];
};
var ch = [];
// clone bufs
var cbfs = function(v) {
    var tl = [];
    for(var k in v)if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32) tl.push((v[k] = new v[k].constructor(v[k])).buffer);
    return tl;
};
// use a worker to execute code
var wrkr = function(fns, init, id, cb) {
    var _a2;
    if (!ch[id]) {
        var fnStr = '', td_1 = {}, m = fns.length - 1;
        for(var i16 = 0; i16 < m; ++i16)_a2 = wcln(fns[i16], fnStr, td_1), fnStr = _a2[0], td_1 = _a2[1];
        ch[id] = wcln(fns[m], fnStr, td_1);
    }
    var td = mrg({}, ch[id][1]);
    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);
};
// base async inflate fn
var bInflt = function() {
    return [
        u8,
        u16,
        u32,
        fleb,
        fdeb,
        clim,
        fl,
        fd,
        flrm,
        fdrm,
        rev,
        hMap,
        max,
        bits,
        bits16,
        shft,
        slc,
        inflt,
        inflateSync,
        pbf,
        gu8
    ];
};
var bDflt = function() {
    return [
        u8,
        u16,
        u32,
        fleb,
        fdeb,
        clim,
        revfl,
        revfd,
        flm,
        flt,
        fdm,
        fdt,
        rev,
        deo,
        et,
        hMap,
        wbits,
        wbits16,
        hTree,
        ln,
        lc,
        clen,
        wfblk,
        wblk,
        shft,
        slc,
        dflt,
        dopt,
        deflateSync,
        pbf
    ];
};
// gzip extra
var gze = function() {
    return [
        gzh,
        gzhl,
        wbytes,
        crc,
        crct
    ];
};
// gunzip extra
var guze = function() {
    return [
        gzs,
        gzl
    ];
};
// zlib extra
var zle = function() {
    return [
        zlh,
        wbytes,
        adler
    ];
};
// unzlib extra
var zule = function() {
    return [
        zlv
    ];
};
// post buf
var pbf = function(msg) {
    return postMessage(msg, [
        msg.buffer
    ]);
};
// get u8
var gu8 = function(o) {
    return o && o.size && new u8(o.size);
};
// async helper
var cbify = function(dat1, opts, fns, init, id, cb) {
    var w = wrkr(fns, init, id, function(err, dat) {
        w.terminate();
        cb(err, dat);
    });
    if (!opts.consume) dat1 = new u8(dat1);
    w.postMessage([
        dat1,
        opts
    ], [
        dat1.buffer
    ]);
    return function() {
        w.terminate();
    };
};
// auto stream
var astrm = function(strm) {
    strm.ondata = function(dat, final) {
        return postMessage([
            dat,
            final
        ], [
            dat.buffer
        ]);
    };
    return function(ev) {
        return strm.push(ev.data[0], ev.data[1]);
    };
};
// async stream attach
var astrmify = function(fns, strm, opts, init, id) {
    var t;
    var w = wrkr(fns, init, id, function(err, dat) {
        if (err) w.terminate(), strm.ondata.call(strm, err);
        else {
            if (dat[1]) w.terminate();
            strm.ondata.call(strm, err, dat[0], dat[1]);
        }
    });
    w.postMessage(opts);
    strm.push = function(d, f) {
        if (t) throw 'stream finished';
        if (!strm.ondata) throw 'no stream handler';
        w.postMessage([
            d,
            t = f
        ], [
            d.buffer
        ]);
    };
    strm.terminate = function() {
        w.terminate();
    };
};
// read 2 bytes
var b2 = function(d, b) {
    return d[b] | d[b + 1] << 8;
};
// read 4 bytes
var b4 = function(d, b) {
    return (d[b] | d[b + 1] << 8 | d[b + 2] << 16) + (d[b + 3] << 23) * 2;
};
// write bytes
var wbytes = function(d, b, v) {
    for(; v; ++b)d[b] = v, v >>>= 8;
};
// gzip header
var gzh = function(c, o) {
    var fn = o.filename;
    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix
    if (o.mtime != 0) wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));
    if (fn) {
        c[3] = 8;
        for(var i17 = 0; i17 <= fn.length; ++i17)c[i17 + 10] = fn.charCodeAt(i17);
    }
};
// gzip footer: -8 to -4 = CRC, -4 to -0 is length
// gzip start
var gzs = function(d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8) throw 'invalid gzip data';
    var flg = d[3];
    var st = 10;
    if (flg & 4) st += d[10] | (d[11] << 8) + 2;
    for(var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++]);
    return st + (flg & 2);
};
// gzip length
var gzl = function(d) {
    var l = d.length;
    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) + 2 * (d[l - 1] << 23);
};
// gzip header length
var gzhl = function(o) {
    return 10 + (o.filename && o.filename.length + 1 || 0);
};
// zlib header
var zlh = function(c, o) {
    var lv = o.level, fl1 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
    c[0] = 120, c[1] = fl1 << 6 | (fl1 ? 32 - 2 * fl1 : 1);
};
// zlib valid
var zlv = function(d) {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';
    if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
};
function AsyncCmpStrm(opts, cb) {
    if (!cb && typeof opts == 'function') cb = opts, opts = {};
    this.ondata = cb;
    return opts;
}
// zlib footer: -4 to -0 is Adler32
/**
 * Streaming DEFLATE compression
 */ var Deflate = /*#__PURE__*/ function() {
    function Deflate1(opts, cb) {
        if (!cb && typeof opts == 'function') cb = opts, opts = {};
        this.ondata = cb;
        this.o = opts || {};
    }
    Deflate1.prototype.p = function(c, f) {
        this.ondata(dopt(c, this.o, 0, 0, !f), f);
    };
    /**
     * Pushes a chunk to be deflated
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Deflate1.prototype.push = function(chunk, final) {
        if (this.d) throw 'stream finished';
        if (!this.ondata) throw 'no stream handler';
        this.d = final;
        this.p(chunk, final || false);
    };
    return Deflate1;
}();
/**
 * Asynchronous streaming DEFLATE compression
 */ var AsyncDeflate = /*#__PURE__*/ function() {
    function AsyncDeflate1(opts, cb) {
        astrmify([
            bDflt,
            function() {
                return [
                    astrm,
                    Deflate
                ];
            }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
            var strm = new Deflate(ev.data);
            onmessage = astrm(strm);
        }, 6);
    }
    return AsyncDeflate1;
}();
function deflate(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    return cbify(data, opts, [
        bDflt, 
    ], function(ev) {
        return pbf(deflateSync(ev.data[0], ev.data[1]));
    }, 0, cb);
}
function deflateSync(data, opts) {
    if (opts === void 0) opts = {};
    return dopt(data, opts, 0, 0);
}
/**
 * Streaming DEFLATE decompression
 */ var Inflate = /*#__PURE__*/ function() {
    /**
     * Creates an inflation stream
     * @param cb The callback to call whenever data is inflated
     */ function Inflate1(cb) {
        this.s = {};
        this.p = new u8(0);
        this.ondata = cb;
    }
    Inflate1.prototype.e = function(c) {
        if (this.d) throw 'stream finished';
        if (!this.ondata) throw 'no stream handler';
        var l = this.p.length;
        var n = new u8(l + c.length);
        n.set(this.p), n.set(c, l), this.p = n;
    };
    Inflate1.prototype.c = function(final) {
        this.d = this.s.i = final || false;
        var bts = this.s.b;
        var dt = inflt(this.p, this.o, this.s);
        this.ondata(slc(dt, bts, this.s.b), this.d);
        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
        this.p = slc(this.p, this.s.p / 8 >> 0), this.s.p &= 7;
    };
    /**
     * Pushes a chunk to be inflated
     * @param chunk The chunk to push
     * @param final Whether this is the final chunk
     */ Inflate1.prototype.push = function(chunk, final) {
        this.e(chunk), this.c(final);
    };
    return Inflate1;
}();
/**
 * Asynchronous streaming DEFLATE decompression
 */ var AsyncInflate = /*#__PURE__*/ function() {
    /**
     * Creates an asynchronous inflation stream
     * @param cb The callback to call whenever data is deflated
     */ function AsyncInflate1(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            function() {
                return [
                    astrm,
                    Inflate
                ];
            }
        ], this, 0, function() {
            var strm = new Inflate();
            onmessage = astrm(strm);
        }, 7);
    }
    return AsyncInflate1;
}();
function inflate(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    return cbify(data, opts, [
        bInflt
    ], function(ev) {
        return pbf(inflateSync(ev.data[0], gu8(ev.data[1])));
    }, 1, cb);
}
function inflateSync(data, out) {
    return inflt(data, out);
}
// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.
/**
 * Streaming GZIP compression
 */ var Gzip = /*#__PURE__*/ function() {
    function Gzip1(opts, cb) {
        this.c = crc();
        this.l = 0;
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be GZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Gzip1.prototype.push = function(chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Gzip1.prototype.p = function(c, f) {
        this.c.p(c);
        this.l += c.length;
        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
        if (this.v) gzh(raw, this.o), this.v = 0;
        if (f) wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
        this.ondata(raw, f);
    };
    return Gzip1;
}();
/**
 * Asynchronous streaming GZIP compression
 */ var AsyncGzip = /*#__PURE__*/ function() {
    function AsyncGzip1(opts, cb) {
        astrmify([
            bDflt,
            gze,
            function() {
                return [
                    astrm,
                    Deflate,
                    Gzip
                ];
            }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
            var strm = new Gzip(ev.data);
            onmessage = astrm(strm);
        }, 8);
    }
    return AsyncGzip1;
}();
function gzip(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    return cbify(data, opts, [
        bDflt,
        gze,
        function() {
            return [
                gzipSync
            ];
        }
    ], function(ev) {
        return pbf(gzipSync(ev.data[0], ev.data[1]));
    }, 2, cb);
}
function gzipSync(data, opts) {
    if (opts === void 0) opts = {};
    var c = crc(), l = data.length;
    c.p(data);
    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;
    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;
}
/**
 * Streaming GZIP decompression
 */ var Gunzip = /*#__PURE__*/ function() {
    /**
     * Creates a GUNZIP stream
     * @param cb The callback to call whenever data is inflated
     */ function Gunzip1(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be GUNZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Gunzip1.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            var s = gzs(this.p);
            if (s >= this.p.length && !final) return;
            this.p = this.p.subarray(s), this.v = 0;
        }
        if (final) {
            if (this.p.length < 8) throw 'invalid gzip stream';
            this.p = this.p.subarray(0, -8);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Gunzip1;
}();
/**
 * Asynchronous streaming GZIP decompression
 */ var AsyncGunzip = /*#__PURE__*/ function() {
    /**
     * Creates an asynchronous GUNZIP stream
     * @param cb The callback to call whenever data is deflated
     */ function AsyncGunzip1(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            guze,
            function() {
                return [
                    astrm,
                    Inflate,
                    Gunzip
                ];
            }
        ], this, 0, function() {
            var strm = new Gunzip();
            onmessage = astrm(strm);
        }, 9);
    }
    return AsyncGunzip1;
}();
function gunzip(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    return cbify(data, opts, [
        bInflt,
        guze,
        function() {
            return [
                gunzipSync
            ];
        }
    ], function(ev) {
        return pbf(gunzipSync(ev.data[0]));
    }, 3, cb);
}
function gunzipSync(data, out) {
    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));
}
/**
 * Streaming Zlib compression
 */ var Zlib = /*#__PURE__*/ function() {
    function Zlib1(opts, cb) {
        this.c = adler();
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be zlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Zlib1.prototype.push = function(chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Zlib1.prototype.p = function(c, f) {
        this.c.p(c);
        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
        if (this.v) zlh(raw, this.o), this.v = 0;
        if (f) wbytes(raw, raw.length - 4, this.c.d());
        this.ondata(raw, f);
    };
    return Zlib1;
}();
/**
 * Asynchronous streaming Zlib compression
 */ var AsyncZlib = /*#__PURE__*/ function() {
    function AsyncZlib1(opts, cb) {
        astrmify([
            bDflt,
            zle,
            function() {
                return [
                    astrm,
                    Deflate,
                    Zlib
                ];
            }
        ], this, AsyncCmpStrm.call(this, opts, cb), function(ev) {
            var strm = new Zlib(ev.data);
            onmessage = astrm(strm);
        }, 10);
    }
    return AsyncZlib1;
}();
function zlib(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    return cbify(data, opts, [
        bDflt,
        zle,
        function() {
            return [
                zlibSync
            ];
        }
    ], function(ev) {
        return pbf(zlibSync(ev.data[0], ev.data[1]));
    }, 4, cb);
}
function zlibSync(data, opts) {
    if (opts === void 0) opts = {};
    var a = adler();
    a.p(data);
    var d = dopt(data, opts, 2, 4);
    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;
}
/**
 * Streaming Zlib decompression
 */ var Unzlib = /*#__PURE__*/ function() {
    /**
     * Creates a Zlib decompression stream
     * @param cb The callback to call whenever data is inflated
     */ function Unzlib1(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be unzlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Unzlib1.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            if (this.p.length < 2 && !final) return;
            this.p = this.p.subarray(2), this.v = 0;
        }
        if (final) {
            if (this.p.length < 4) throw 'invalid zlib stream';
            this.p = this.p.subarray(0, -4);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Unzlib1;
}();
/**
 * Asynchronous streaming Zlib decompression
 */ var AsyncUnzlib = /*#__PURE__*/ function() {
    /**
     * Creates an asynchronous Zlib decompression stream
     * @param cb The callback to call whenever data is deflated
     */ function AsyncUnzlib1(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            zule,
            function() {
                return [
                    astrm,
                    Inflate,
                    Unzlib
                ];
            }
        ], this, 0, function() {
            var strm = new Unzlib();
            onmessage = astrm(strm);
        }, 11);
    }
    return AsyncUnzlib1;
}();
function unzlib(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    return cbify(data, opts, [
        bInflt,
        zule,
        function() {
            return [
                unzlibSync
            ];
        }
    ], function(ev) {
        return pbf(unzlibSync(ev.data[0], gu8(ev.data[1])));
    }, 5, cb);
}
function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
}
/**
 * Streaming GZIP, Zlib, or raw DEFLATE decompression
 */ var Decompress = /*#__PURE__*/ function() {
    /**
     * Creates a decompression stream
     * @param cb The callback to call whenever data is decompressed
     */ function Decompress1(cb) {
        this.G = Gunzip;
        this.I = Inflate;
        this.Z = Unzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ Decompress1.prototype.push = function(chunk, final) {
        if (!this.ondata) throw 'no stream handler';
        if (!this.s) {
            if (this.p && this.p.length) {
                var n = new u8(this.p.length + chunk.length);
                n.set(this.p), n.set(chunk, this.p.length);
            } else this.p = chunk;
            if (this.p.length > 2) {
                var _this_1 = this;
                var cb = function() {
                    _this_1.ondata.apply(_this_1, arguments);
                };
                this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
                this.s.push(this.p, final);
                this.p = null;
            }
        } else this.s.push(chunk, final);
    };
    return Decompress1;
}();
/**
 * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression
 */ var AsyncDecompress = /*#__PURE__*/ function() {
    /**
   * Creates an asynchronous decompression stream
   * @param cb The callback to call whenever data is decompressed
   */ function AsyncDecompress1(cb) {
        this.G = AsyncGunzip;
        this.I = AsyncInflate;
        this.Z = AsyncUnzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */ AsyncDecompress1.prototype.push = function(chunk, final) {
        Decompress.prototype.push.call(this, chunk, final);
    };
    return AsyncDecompress1;
}();
function decompress(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzip(data, opts, cb) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflate(data, opts, cb) : unzlib(data, opts, cb);
}
function decompressSync(data, out) {
    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzipSync(data, out) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflateSync(data, out) : unzlibSync(data, out);
}
// flatten a directory structure
var fltn = function(d, p, t, o) {
    for(var k in d){
        var val = d[k], n = p + k;
        if (val instanceof u8) t[n] = [
            val,
            o
        ];
        else if (Array.isArray(val)) t[n] = [
            val[0],
            mrg(o, val[1])
        ];
        else fltn(val, n + '/', t, o);
    }
};
function strToU8(str, latin1) {
    var l = str.length;
    if (!latin1 && typeof TextEncoder != 'undefined') return new TextEncoder().encode(str);
    var ar = new u8(str.length + (str.length >>> 1));
    var ai = 0;
    var w = function(v) {
        ar[ai++] = v;
    };
    for(var i18 = 0; i18 < l; ++i18){
        if (ai + 5 > ar.length) {
            var n = new u8(ai + 8 + (l - i18 << 1));
            n.set(ar);
            ar = n;
        }
        var c = str.charCodeAt(i18);
        if (c < 128 || latin1) w(c);
        else if (c < 2048) w(192 | c >>> 6), w(128 | c & 63);
        else if (c > 55295 && c < 57344) c = 65536 + (c & 1047552) | str.charCodeAt(++i18) & 1023, w(240 | c >>> 18), w(128 | c >>> 12 & 63), w(128 | c >>> 6 & 63), w(128 | c & 63);
        else w(224 | c >>> 12), w(128 | c >>> 6 & 63), w(128 | c & 63);
    }
    return slc(ar, 0, ai);
}
function strFromU8(dat, latin1) {
    var r = '';
    if (!latin1 && typeof TextDecoder != 'undefined') return new TextDecoder().decode(dat);
    for(var i19 = 0; i19 < dat.length;){
        var c = dat[i19++];
        if (c < 128 || latin1) r += String.fromCharCode(c);
        else if (c < 224) r += String.fromCharCode((c & 31) << 6 | dat[i19++] & 63);
        else if (c < 240) r += String.fromCharCode((c & 15) << 12 | (dat[i19++] & 63) << 6 | dat[i19++] & 63);
        else c = ((c & 15) << 18 | (dat[i19++] & 63) << 12 | (dat[i19++] & 63) << 6 | dat[i19++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
    }
    return r;
}
// skip local zip header
var slzh = function(d, b) {
    return b + 30 + b2(d, b + 26) + b2(d, b + 28);
};
// read zip header
var zh = function(d, b, z) {
    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl;
    var _a3 = z ? z64e(d, es) : [
        b4(d, b + 20),
        b4(d, b + 24),
        b4(d, b + 42)
    ], sc = _a3[0], su = _a3[1], off = _a3[2];
    return [
        b2(d, b + 10),
        sc,
        su,
        fn,
        es + b2(d, b + 30) + b2(d, b + 32),
        off
    ];
};
// read zip64 extra field
var z64e = function(d, b) {
    for(; b2(d, b) != 1; b += 4 + b2(d, b + 2));
    return [
        b4(d, b + 12),
        b4(d, b + 4),
        b4(d, b + 20)
    ];
};
// write zip header
var wzh = function(d, b, c, cmp, su, fn, u, o, ce, t) {
    var fl2 = fn.length, l = cmp.length;
    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;
    if (ce != null) d[b] = 20, b += 2;
    d[b] = 20, b += 2; // spec compliance? what's that?
    d[b++] = t == 8 && (o.level == 1 ? 6 : o.level < 6 ? 4 : o.level == 9 ? 2 : 0), d[b++] = u && 8;
    d[b] = t, b += 2;
    var dt = new Date(o.mtime || Date.now()), y = dt.getFullYear() - 1980;
    if (y < 0 || y > 119) throw 'date not in range 1980-2099';
    wbytes(d, b, (y << 24) * 2 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >>> 1);
    b += 4;
    wbytes(d, b, c);
    wbytes(d, b + 4, l);
    wbytes(d, b + 8, su);
    wbytes(d, b + 12, fl2), b += 16; // skip extra field, comment
    if (ce != null) wbytes(d, b += 10, ce), b += 4;
    d.set(fn, b);
    b += fl2;
    if (ce == null) d.set(cmp, b);
};
// write zip footer (end of central directory)
var wzf = function(o, b, c, d, e) {
    wbytes(o, b, 0x6054B50); // skip disk
    wbytes(o, b + 8, c);
    wbytes(o, b + 10, c);
    wbytes(o, b + 12, d);
    wbytes(o, b + 16, e);
};
function zip(data, opts, cb) {
    if (!cb) cb = opts, opts = {};
    if (typeof cb != 'function') throw 'no callback';
    var r = {};
    fltn(data, '', r, opts);
    var k = Object.keys(r);
    var lft = k.length, o = 0, tot = 0;
    var slft = lft, files = new Array(lft);
    var term = [];
    var tAll = function() {
        for(var i21 = 0; i21 < term.length; ++i21)term[i21]();
    };
    var cbf = function() {
        var out = new u8(tot + 22), oe = o, cdl = tot - o;
        tot = 0;
        for(var i22 = 0; i22 < slft; ++i22){
            var f = files[i22];
            try {
                wzh(out, tot, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
                wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, tot, f.t), o += 46 + f.n.length, tot += 30 + f.n.length + f.d.length;
            } catch (e) {
                return cb(e, null);
            }
        }
        wzf(out, o, files.length, cdl, oe);
        cb(null, out);
    };
    if (!lft) cbf();
    var _loop_1 = function(i23) {
        var fn = k[i23];
        var _a4 = r[fn], file = _a4[0], p = _a4[1];
        var c = crc(), m = file.length;
        c.p(file);
        var n = strToU8(fn), s = n.length;
        var t = p.level == 0 ? 0 : 8;
        var cbl = function(e, d) {
            if (e) {
                tAll();
                cb(e, null);
            } else {
                var l = d.length;
                files[i23] = {
                    t: t,
                    d: d,
                    m: m,
                    c: c.d(),
                    u: fn.length != l,
                    n: n,
                    p: p
                };
                o += 30 + s + l;
                tot += 76 + 2 * s + l;
                if (!--lft) cbf();
            }
        };
        if (n.length > 65535) cbl('filename too long', null);
        if (!t) cbl(null, file);
        else if (m < 160000) try {
            cbl(null, deflateSync(file, p));
        } catch (e) {
            cbl(e, null);
        }
        else term.push(deflate(file, p, cbl));
    };
    // Cannot use lft because it can decrease
    for(var i20 = 0; i20 < slft; ++i20)_loop_1(i20);
    return tAll;
}
function zipSync(data, opts) {
    if (opts === void 0) opts = {};
    var r = {};
    var files = [];
    fltn(data, '', r, opts);
    var o = 0;
    var tot = 0;
    for(var fn in r){
        var _a5 = r[fn], file = _a5[0], p = _a5[1];
        var t = p.level == 0 ? 0 : 8;
        var n = strToU8(fn), s = n.length;
        if (n.length > 65535) throw 'filename too long';
        var d = t ? deflateSync(file, p) : file, l = d.length;
        var c = crc();
        c.p(file);
        files.push({
            t: t,
            d: d,
            m: file.length,
            c: c.d(),
            u: fn.length != s,
            n: n,
            o: o,
            p: p
        });
        o += 30 + s + l;
        tot += 76 + 2 * s + l;
    }
    var out = new u8(tot + 22), oe = o, cdl = tot - o;
    for(var i24 = 0; i24 < files.length; ++i24){
        var f = files[i24];
        wzh(out, f.o, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
        wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, f.o, f.t), o += 46 + f.n.length;
    }
    wzf(out, o, files.length, cdl, oe);
    return out;
}
function unzip(data, cb) {
    if (typeof cb != 'function') throw 'no callback';
    var term = [];
    var tAll = function() {
        for(var i26 = 0; i26 < term.length; ++i26)term[i26]();
    };
    var files = {};
    var e1 = data.length - 22;
    for(; b4(data, e1) != 0x6054B50; --e1)if (!e1 || data.length - e1 > 65558) {
        cb('invalid zip file', null);
        return;
    }
    var lft = b2(data, e1 + 8);
    if (!lft) cb(null, {});
    var c = lft;
    var o = b4(data, e1 + 16);
    var z = o == 4294967295;
    if (z) {
        e1 = b4(data, e1 - 12);
        if (b4(data, e1) != 0x6064B50) throw 'invalid zip file';
        c = lft = b4(data, e1 + 32);
        o = b4(data, e1 + 48);
    }
    var _loop_2 = function(i) {
        var _a6 = zh(data, o, z), c_1 = _a6[0], sc = _a6[1], su = _a6[2], fn = _a6[3], no = _a6[4], off = _a6[5], b = slzh(data, off);
        o = no;
        var cbl = function(e, d) {
            if (e) {
                tAll();
                cb(e, null);
            } else {
                files[fn] = d;
                if (!--lft) cb(null, files);
            }
        };
        if (!c_1) cbl(null, slc(data, b, b + sc));
        else if (c_1 == 8) {
            var infl = data.subarray(b, b + sc);
            if (sc < 320000) try {
                cbl(null, inflateSync(infl, new u8(su)));
            } catch (e) {
                cbl(e, null);
            }
            else term.push(inflate(infl, {
                size: su
            }, cbl));
        } else cbl('unknown compression type ' + c_1, null);
    };
    for(var i25 = 0; i25 < c; ++i25)_loop_2(i25);
    return tAll;
}
function unzipSync(data) {
    var files = {};
    var e = data.length - 22;
    for(; b4(data, e) != 0x6054B50; --e){
        if (!e || data.length - e > 65558) throw 'invalid zip file';
    }
    var c = b2(data, e + 8);
    if (!c) return {};
    var o = b4(data, e + 16);
    var z = o == 4294967295;
    if (z) {
        e = b4(data, e - 12);
        if (b4(data, e) != 0x6064B50) throw 'invalid zip file';
        c = b4(data, e + 32);
        o = b4(data, e + 48);
    }
    for(var i27 = 0; i27 < c; ++i27){
        var _a7 = zh(data, o, z), c_2 = _a7[0], sc = _a7[1], su = _a7[2], fn = _a7[3], no = _a7[4], off = _a7[5], b = slzh(data, off);
        o = no;
        if (!c_2) files[fn] = slc(data, b, b + sc);
        else if (c_2 == 8) files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));
        else throw 'unknown compression type ' + c_2;
    }
    return files;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"4MWaq":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('jgVSf') + "html2canvas.323804f6.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root('j1W5C')
);

},{"./helpers/browser/js-loader":"61B45","./helpers/bundle-url":"lgJ39"}],"61B45":[function(require,module,exports) {
"use strict";
var cacheLoader = require('../cacheLoader');
module.exports = cacheLoader(function(bundle) {
    return new Promise(function(resolve, reject) {
        // Don't insert the same script twice (e.g. if it was already in the HTML)
        var existingScripts = document.getElementsByTagName('script');
        if ([].concat(existingScripts).some(function isCurrentBundle(script) {
            return script.src === bundle;
        })) {
            resolve();
            return;
        }
        var preloadLink = document.createElement('link');
        preloadLink.href = bundle;
        preloadLink.rel = 'preload';
        preloadLink.as = 'script';
        document.head.appendChild(preloadLink);
        var script1 = document.createElement('script');
        script1.async = true;
        script1.type = 'text/javascript';
        script1.charset = 'utf-8';
        script1.src = bundle;
        script1.onerror = function(e) {
            var error = new TypeError("Failed to fetch dynamically imported module: ".concat(bundle, ". Error: ").concat(e.message));
            script1.onerror = script1.onload = null;
            script1.remove();
            reject(error);
        };
        script1.onload = function() {
            script1.onerror = script1.onload = null;
            resolve();
        };
        document.getElementsByTagName('head')[0].appendChild(script1);
    });
});

},{"../cacheLoader":"j49pS"}],"j49pS":[function(require,module,exports) {
"use strict";
var cachedBundles = {};
var cachedPreloads = {};
var cachedPrefetches = {};
function getCache(type) {
    switch(type){
        case 'preload':
            return cachedPreloads;
        case 'prefetch':
            return cachedPrefetches;
        default:
            return cachedBundles;
    }
}
module.exports = function(loader, type) {
    return function(bundle) {
        var cache = getCache(type);
        if (cache[bundle]) return cache[bundle];
        return cache[bundle] = loader.apply(null, arguments).catch(function(e) {
            delete cache[bundle];
            throw e;
        });
    };
};

},{}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz)-extension):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"9skFS":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('jgVSf') + "purify.fef73ec9.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root('9Kzno')
);

},{"./helpers/browser/js-loader":"61B45","./helpers/bundle-url":"lgJ39"}],"hzgiH":[function(require,module,exports) {
module.exports = require("./helpers/browser/js-loader")(require('./helpers/bundle-url').getBundleURL('jgVSf') + "index.es.e6d65bb7.js" + "?" + Date.now()).catch((err)=>{
    delete module.bundle.cache[module.id];
    throw err;
}).then(()=>module.bundle.root('gt0ZF')
);

},{"./helpers/browser/js-loader":"61B45","./helpers/bundle-url":"lgJ39"}],"bAabt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "app", ()=>app
);
parcelHelpers.export(exports, "auth", ()=>auth
);
parcelHelpers.export(exports, "db", ()=>db
);
parcelHelpers.export(exports, "storage", ()=>storage
);
// Import the functions you need from the SDKs you need
var _app = require("firebase/app");
var _auth = require("firebase/auth");
var _firestore = require("firebase/firestore");
var _storage = require("firebase/storage");
// Your web app's Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyAcvsGAqg13kR5a0LjoSmi5C5KJDqHTl9s",
    authDomain: "rooms-a324a.firebaseapp.com",
    projectId: "rooms-a324a",
    storageBucket: "rooms-a324a.appspot.com",
    messagingSenderId: "133747960043",
    appId: "1:133747960043:web:fd5801a61cd9c4b98636ae"
};
// Initialize Firebase
const app = _app.initializeApp(firebaseConfig);
const auth = _auth.getAuth();
const db = _firestore.getFirestore(app);
const storage = _storage.getStorage(app);

},{"firebase/app":"5wGMN","firebase/auth":"drt1f","firebase/firestore":"cJafS","firebase/storage":"9dDUH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5wGMN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _app = require("@firebase/app");
parcelHelpers.exportAll(_app, exports);
var name = "firebase";
var version = "9.6.11";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ _app.registerVersion(name, version, 'app');

},{"@firebase/app":"3AcPV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AcPV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FirebaseError", ()=>_util.FirebaseError
);
parcelHelpers.export(exports, "SDK_VERSION", ()=>SDK_VERSION
);
parcelHelpers.export(exports, "_DEFAULT_ENTRY_NAME", ()=>DEFAULT_ENTRY_NAME
);
parcelHelpers.export(exports, "_addComponent", ()=>_addComponent
);
parcelHelpers.export(exports, "_addOrOverwriteComponent", ()=>_addOrOverwriteComponent
);
parcelHelpers.export(exports, "_apps", ()=>_apps
);
parcelHelpers.export(exports, "_clearComponents", ()=>_clearComponents
);
parcelHelpers.export(exports, "_components", ()=>_components
);
parcelHelpers.export(exports, "_getProvider", ()=>_getProvider
);
parcelHelpers.export(exports, "_registerComponent", ()=>_registerComponent
);
parcelHelpers.export(exports, "_removeServiceInstance", ()=>_removeServiceInstance
);
parcelHelpers.export(exports, "deleteApp", ()=>deleteApp
);
parcelHelpers.export(exports, "getApp", ()=>getApp
);
parcelHelpers.export(exports, "getApps", ()=>getApps
);
parcelHelpers.export(exports, "initializeApp", ()=>initializeApp
);
parcelHelpers.export(exports, "onLog", ()=>onLog
);
parcelHelpers.export(exports, "registerVersion", ()=>registerVersion
);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel
);
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
var _util = require("@firebase/util");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class PlatformLoggerServiceImpl {
    constructor(container){
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
        const providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers.map((provider)=>{
            if (isVersionServiceProvider(provider)) {
                const service = provider.getImmediate();
                return `${service.library}/${service.version}`;
            } else return null;
        }).filter((logString)=>logString
        ).join(' ');
    }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */ function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */ ;
}
const name$o = "@firebase/app";
const version$1 = "0.7.21";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logger = new _logger.Logger('@firebase/app');
const name$n = "@firebase/app-compat";
const name$m = "@firebase/analytics-compat";
const name$l = "@firebase/analytics";
const name$k = "@firebase/app-check-compat";
const name$j = "@firebase/app-check";
const name$i = "@firebase/auth";
const name$h = "@firebase/auth-compat";
const name$g = "@firebase/database";
const name$f = "@firebase/database-compat";
const name$e = "@firebase/functions";
const name$d = "@firebase/functions-compat";
const name$c = "@firebase/installations";
const name$b = "@firebase/installations-compat";
const name$a = "@firebase/messaging";
const name$9 = "@firebase/messaging-compat";
const name$8 = "@firebase/performance";
const name$7 = "@firebase/performance-compat";
const name$6 = "@firebase/remote-config";
const name$5 = "@firebase/remote-config-compat";
const name$4 = "@firebase/storage";
const name$3 = "@firebase/storage-compat";
const name$2 = "@firebase/firestore";
const name$1 = "@firebase/firestore-compat";
const name = "firebase";
const version = "9.6.11";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The default app name
 *
 * @internal
 */ const DEFAULT_ENTRY_NAME = '[DEFAULT]';
const PLATFORM_LOG_STRING = {
    [name$o]: 'fire-core',
    [name$n]: 'fire-core-compat',
    [name$l]: 'fire-analytics',
    [name$m]: 'fire-analytics-compat',
    [name$j]: 'fire-app-check',
    [name$k]: 'fire-app-check-compat',
    [name$i]: 'fire-auth',
    [name$h]: 'fire-auth-compat',
    [name$g]: 'fire-rtdb',
    [name$f]: 'fire-rtdb-compat',
    [name$e]: 'fire-fn',
    [name$d]: 'fire-fn-compat',
    [name$c]: 'fire-iid',
    [name$b]: 'fire-iid-compat',
    [name$a]: 'fire-fcm',
    [name$9]: 'fire-fcm-compat',
    [name$8]: 'fire-perf',
    [name$7]: 'fire-perf-compat',
    [name$6]: 'fire-rc',
    [name$5]: 'fire-rc-compat',
    [name$4]: 'fire-gcs',
    [name$3]: 'fire-gcs-compat',
    [name$2]: 'fire-fst',
    [name$1]: 'fire-fst-compat',
    'fire-js': 'fire-js',
    [name]: 'fire-js-all'
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ const _apps = new Map();
/**
 * Registered components.
 *
 * @internal
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */ function _addComponent(app, component) {
    try {
        app.container.addComponent(component);
    } catch (e) {
        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
    }
}
/**
 *
 * @internal
 */ function _addOrOverwriteComponent(app, component) {
    app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */ function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
        logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
    }
    _components.set(componentName, component);
    // add the component to existing app instances
    for (const app of _apps.values())_addComponent(app, component);
    return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */ function _getProvider(app, name1) {
    const heartbeatController = app.container.getProvider('heartbeat').getImmediate({
        optional: true
    });
    if (heartbeatController) heartbeatController.triggerHeartbeat();
    return app.container.getProvider(name1);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */ function _removeServiceInstance(app, name2, instanceIdentifier = DEFAULT_ENTRY_NAME) {
    _getProvider(app, name2).clearInstance(instanceIdentifier);
}
/**
 * Test only
 *
 * @internal
 */ function _clearComponents() {
    _components.clear();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ERRORS = {
    ["no-app" /* NO_APP */ ]: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
    ["bad-app-name" /* BAD_APP_NAME */ ]: "Illegal App name: '{$appName}",
    ["duplicate-app" /* DUPLICATE_APP */ ]: "Firebase App named '{$appName}' already exists with different options or config",
    ["app-deleted" /* APP_DELETED */ ]: "Firebase App named '{$appName}' already deleted",
    ["invalid-app-argument" /* INVALID_APP_ARGUMENT */ ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
    ["invalid-log-argument" /* INVALID_LOG_ARGUMENT */ ]: 'First argument to `onLog` must be null or a function.',
    ["storage-open" /* STORAGE_OPEN */ ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
    ["storage-get" /* STORAGE_GET */ ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
    ["storage-set" /* STORAGE_WRITE */ ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
    ["storage-delete" /* STORAGE_DELETE */ ]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'
};
const ERROR_FACTORY = new _util.ErrorFactory('app', 'Firebase', ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class FirebaseAppImpl {
    constructor(options, config, container){
        this._isDeleted = false;
        this._options = Object.assign({}, options);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new _component.Component('app', ()=>this
        , "PUBLIC" /* PUBLIC */ ));
    }
    get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
    }
    get name() {
        this.checkDestroyed();
        return this._name;
    }
    get options() {
        this.checkDestroyed();
        return this._options;
    }
    get config() {
        this.checkDestroyed();
        return this._config;
    }
    get container() {
        return this._container;
    }
    get isDeleted() {
        return this._isDeleted;
    }
    set isDeleted(val) {
        this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ checkDestroyed() {
        if (this.isDeleted) throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */ , {
            appName: this._name
        });
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The current SDK version.
 *
 * @public
 */ const SDK_VERSION = version;
function initializeApp(options, rawConfig = {}) {
    if (typeof rawConfig !== 'object') {
        const name3 = rawConfig;
        rawConfig = {
            name: name3
        };
    }
    const config = Object.assign({
        name: DEFAULT_ENTRY_NAME,
        automaticDataCollectionEnabled: false
    }, rawConfig);
    const name4 = config.name;
    if (typeof name4 !== 'string' || !name4) throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */ , {
        appName: String(name4)
    });
    const existingApp = _apps.get(name4);
    if (existingApp) {
        // return the existing app if options and config deep equal the ones in the existing app.
        if (_util.deepEqual(options, existingApp.options) && _util.deepEqual(config, existingApp.config)) return existingApp;
        else throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */ , {
            appName: name4
        });
    }
    const container = new _component.ComponentContainer(name4);
    for (const component of _components.values())container.addComponent(component);
    const newApp = new FirebaseAppImpl(options, config, container);
    _apps.set(name4, newApp);
    return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */ function getApp(name5 = DEFAULT_ENTRY_NAME) {
    const app = _apps.get(name5);
    if (!app) throw ERROR_FACTORY.create("no-app" /* NO_APP */ , {
        appName: name5
    });
    return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */ function getApps() {
    return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */ async function deleteApp(app) {
    const name6 = app.name;
    if (_apps.has(name6)) {
        _apps.delete(name6);
        await Promise.all(app.container.getProviders().map((provider)=>provider.delete()
        ));
        app.isDeleted = true;
    }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */ function registerVersion(libraryKeyOrName, version1, variant) {
    var _a;
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) library += `-${variant}`;
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version1.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
        const warning = [
            `Unable to register library "${library}" with version "${version1}":`
        ];
        if (libraryMismatch) warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        if (libraryMismatch && versionMismatch) warning.push('and');
        if (versionMismatch) warning.push(`version name "${version1}" contains illegal characters (whitespace or "/")`);
        logger.warn(warning.join(' '));
        return;
    }
    _registerComponent(new _component.Component(`${library}-version`, ()=>({
            library,
            version: version1
        })
    , "VERSION" /* VERSION */ ));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */ function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== 'function') throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */ );
    _logger.setUserLogHandler(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */ function setLogLevel(logLevel) {
    _logger.setLogLevel(logLevel);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DB_NAME = 'firebase-heartbeat-database';
const DB_VERSION = 1;
const STORE_NAME = 'firebase-heartbeat-store';
let dbPromise = null;
function getDbPromise() {
    if (!dbPromise) dbPromise = _util.openDB(DB_NAME, DB_VERSION, (db, oldVersion)=>{
        // We don't use 'break' in this switch statement, the fall-through
        // behavior is what we want, because if there are multiple versions between
        // the old version and the current version, we want ALL the migrations
        // that correspond to those versions to run, not only the last one.
        // eslint-disable-next-line default-case
        switch(oldVersion){
            case 0:
                db.createObjectStore(STORE_NAME);
        }
    }).catch((e)=>{
        throw ERROR_FACTORY.create("storage-open" /* STORAGE_OPEN */ , {
            originalErrorMessage: e.message
        });
    });
    return dbPromise;
}
async function readHeartbeatsFromIndexedDB(app) {
    try {
        const db = await getDbPromise();
        return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));
    } catch (e) {
        throw ERROR_FACTORY.create("storage-get" /* STORAGE_GET */ , {
            originalErrorMessage: e.message
        });
    }
}
async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
    try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME, 'readwrite');
        const objectStore = tx.objectStore(STORE_NAME);
        await objectStore.put(heartbeatObject, computeKey(app));
        return tx.complete;
    } catch (e) {
        throw ERROR_FACTORY.create("storage-set" /* STORAGE_WRITE */ , {
            originalErrorMessage: e.message
        });
    }
}
function computeKey(app) {
    return `${app.name}!${app.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const MAX_HEADER_BYTES = 1024;
// 30 days
const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 2592000000;
class HeartbeatServiceImpl {
    constructor(container){
        this.container = container;
        /**
         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
         * the header string.
         * Stores one record per date. This will be consolidated into the standard
         * format of one record per user agent string before being sent as a header.
         * Populated from indexedDB when the controller is instantiated and should
         * be kept in sync with indexedDB.
         * Leave public for easier testing.
         */ this._heartbeatsCache = null;
        const app = this.container.getProvider('app').getImmediate();
        this._storage = new HeartbeatStorageImpl(app);
        this._heartbeatsCachePromise = this._storage.read().then((result)=>{
            this._heartbeatsCache = result;
            return result;
        });
    }
    /**
     * Called to report a heartbeat. The function will generate
     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
     * to IndexedDB.
     * Note that we only store one heartbeat per day. So if a heartbeat for today is
     * already logged, subsequent calls to this function in the same day will be ignored.
     */ async triggerHeartbeat() {
        const platformLogger = this.container.getProvider('platform-logger').getImmediate();
        // This is the "Firebase user agent" string from the platform logger
        // service, not the browser user agent.
        const agent = platformLogger.getPlatformInfoString();
        const date = getUTCDateString();
        if (this._heartbeatsCache === null) this._heartbeatsCache = await this._heartbeatsCachePromise;
        // Do not store a heartbeat if one is already stored for this day
        // or if a header has already been sent today.
        if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat)=>singleDateHeartbeat.date === date
        )) return;
        else // There is no entry for this date. Create one.
        this._heartbeatsCache.heartbeats.push({
            date,
            agent
        });
        // Remove entries older than 30 days.
        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((singleDateHeartbeat)=>{
            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
            const now = Date.now();
            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
        });
        return this._storage.overwrite(this._heartbeatsCache);
    }
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */ async getHeartbeatsHeader() {
        if (this._heartbeatsCache === null) await this._heartbeatsCachePromise;
        // If it's still null or the array is empty, there is no data to send.
        if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) return '';
        const date = getUTCDateString();
        // Extract as many heartbeats from the cache as will fit under the size limit.
        const { heartbeatsToSend , unsentEntries  } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
        const headerString = _util.base64urlEncodeWithoutPadding(JSON.stringify({
            version: 2,
            heartbeats: heartbeatsToSend
        }));
        // Store last sent date to prevent another being logged/sent for the same day.
        this._heartbeatsCache.lastSentHeartbeatDate = date;
        if (unsentEntries.length > 0) {
            // Store any unsent entries if they exist.
            this._heartbeatsCache.heartbeats = unsentEntries;
            // This seems more likely than emptying the array (below) to lead to some odd state
            // since the cache isn't empty and this will be called again on the next request,
            // and is probably safest if we await it.
            await this._storage.overwrite(this._heartbeatsCache);
        } else {
            this._heartbeatsCache.heartbeats = [];
            this._storage.overwrite(this._heartbeatsCache);
        }
        return headerString;
    }
}
function getUTCDateString() {
    const today = new Date();
    // Returns date format 'YYYY-MM-DD'
    return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
    // Heartbeats grouped by user agent in the standard format to be sent in
    // the header.
    const heartbeatsToSend = [];
    // Single date format heartbeats that are not sent.
    let unsentEntries = heartbeatsCache.slice();
    for (const singleDateHeartbeat of heartbeatsCache){
        // Look for an existing entry with the same user agent.
        const heartbeatEntry = heartbeatsToSend.find((hb)=>hb.agent === singleDateHeartbeat.agent
        );
        if (!heartbeatEntry) {
            // If no entry for this user agent exists, create one.
            heartbeatsToSend.push({
                agent: singleDateHeartbeat.agent,
                dates: [
                    singleDateHeartbeat.date
                ]
            });
            if (countBytes(heartbeatsToSend) > maxSize) {
                // If the header would exceed max size, remove the added heartbeat
                // entry and stop adding to the header.
                heartbeatsToSend.pop();
                break;
            }
        } else {
            heartbeatEntry.dates.push(singleDateHeartbeat.date);
            // If the header would exceed max size, remove the added date
            // and stop adding to the header.
            if (countBytes(heartbeatsToSend) > maxSize) {
                heartbeatEntry.dates.pop();
                break;
            }
        }
        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
        // quota and the loop breaks early.)
        unsentEntries = unsentEntries.slice(1);
    }
    return {
        heartbeatsToSend,
        unsentEntries
    };
}
class HeartbeatStorageImpl {
    constructor(app){
        this.app = app;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
    }
    async runIndexedDBEnvironmentCheck() {
        if (!_util.isIndexedDBAvailable()) return false;
        else return _util.validateIndexedDBOpenable().then(()=>true
        ).catch(()=>false
        );
    }
    /**
     * Read all heartbeats.
     */ async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return {
            heartbeats: []
        };
        else {
            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
            return idbHeartbeatObject || {
                heartbeats: []
            };
        }
    }
    // overwrite the storage with the provided heartbeats
    async overwrite(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: heartbeatsObject.heartbeats
            });
        }
    }
    // add heartbeats
    async add(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: [
                    ...existingHeartbeatsObject.heartbeats,
                    ...heartbeatsObject.heartbeats
                ]
            });
        }
    }
}
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */ function countBytes(heartbeatsCache) {
    // base64 has a restricted set of characters, all of which should be 1 byte.
    return _util.base64urlEncodeWithoutPadding(// heartbeatsCache wrapper properties
    JSON.stringify({
        version: 2,
        heartbeats: heartbeatsCache
    })).length;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerCoreComponents(variant) {
    _registerComponent(new _component.Component('platform-logger', (container)=>new PlatformLoggerServiceImpl(container)
    , "PRIVATE" /* PRIVATE */ ));
    _registerComponent(new _component.Component('heartbeat', (container)=>new HeartbeatServiceImpl(container)
    , "PRIVATE" /* PRIVATE */ ));
    // Register `app` package.
    registerVersion(name$o, version$1, variant);
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    registerVersion(name$o, version$1, 'esm2017');
    // Register platform SDK identifier (no version).
    registerVersion('fire-js', '');
}
/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */ registerCoreComponents('');

},{"@firebase/component":"bi1VB","@firebase/logger":"fZmft","@firebase/util":"ePiK6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bi1VB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>Component
);
parcelHelpers.export(exports, "ComponentContainer", ()=>ComponentContainer
);
parcelHelpers.export(exports, "Provider", ()=>Provider
);
var _util = require("@firebase/util");
/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */ class Component {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */ constructor(name, instanceFactory, type){
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */ this.serviceProps = {};
        this.instantiationMode = "LAZY" /* LAZY */ ;
        this.onInstanceCreated = null;
    }
    setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
    }
    setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    }
    setServiceProps(props) {
        this.serviceProps = props;
        return this;
    }
    setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */ class Provider {
    constructor(name, container){
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */ get(identifier) {
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            const deferred = new _util.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) // initialize the service if it can be auto-initialized
            try {
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                if (instance) deferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
    getImmediate(options) {
        var _a;
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) try {
            return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
            });
        } catch (e) {
            if (optional) return null;
            else throw e;
        }
        else {
            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) return null;
            else throw Error(`Service ${this.name} is not available`);
        }
    }
    getComponent() {
        return this.component;
    }
    setComponent(component) {
        if (component.name !== this.name) throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        if (this.component) throw Error(`Component for ${this.name} has already been provided`);
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) return;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) try {
            this.getOrInitializeService({
                instanceIdentifier: DEFAULT_ENTRY_NAME
            });
        } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
        }
        // Create service instances for the pending promises and resolve them
        // NOTE: if this.multipleInstances is false, only the default instance will be created
        // and all promises with resolve with it regardless of the identifier.
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                instanceDeferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception, it should not cause
            // a fatal error. We just leave the promise unresolved.
            }
        }
    }
    clearInstance(identifier = DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    }
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
            ...services.filter((service)=>'INTERNAL' in service
            ) // legacy services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service.INTERNAL.delete()
            ),
            ...services.filter((service)=>'_delete' in service
            ) // modularized services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service._delete()
            )
        ]);
    }
    isComponentSet() {
        return this.component != null;
    }
    isInitialized(identifier = DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
    }
    getOptions(identifier = DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
    }
    initialize(opts = {}) {
        const { options ={}  } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        if (!this.isComponentSet()) throw Error(`Component ${this.name} has not been registered yet`);
        const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options
        });
        // resolve any pending promise waiting for the service instance
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) instanceDeferred.resolve(instance);
        }
        return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */ onInit(callback, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) callback(existingInstance, normalizedIdentifier);
        return ()=>{
            existingCallbacks.delete(callback);
        };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */ invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) return;
        for (const callback of callbacks)try {
            callback(instance, identifier);
        } catch (_a) {
        // ignore errors in the onInit callback
        }
    }
    getOrInitializeService({ instanceIdentifier , options ={}  }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */ this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */ if (this.component.onInstanceCreated) try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_a) {
            // ignore errors in the onInstanceCreatedCallback
            }
        }
        return instance || null;
    }
    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
        if (this.component) return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        else return identifier; // assume multiple instances are supported before the component is provided.
    }
    shouldAutoInitialize() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */ ;
    }
}
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* EAGER */ ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */ class ComponentContainer {
    constructor(name){
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */ addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        provider.setComponent(component);
    }
    addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component
        this.providers.delete(component.name);
        this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */ getProvider(name) {
        if (this.providers.has(name)) return this.providers.get(name);
        // create a Provider for a service that hasn't registered with Firebase
        const provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    }
    getProviders() {
        return Array.from(this.providers.values());
    }
}

},{"@firebase/util":"ePiK6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ePiK6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONSTANTS", ()=>CONSTANTS
);
parcelHelpers.export(exports, "DBWrapper", ()=>DBWrapper
);
parcelHelpers.export(exports, "Deferred", ()=>Deferred
);
parcelHelpers.export(exports, "ErrorFactory", ()=>ErrorFactory
);
parcelHelpers.export(exports, "FirebaseError", ()=>FirebaseError
);
parcelHelpers.export(exports, "MAX_VALUE_MILLIS", ()=>MAX_VALUE_MILLIS
);
parcelHelpers.export(exports, "RANDOM_FACTOR", ()=>RANDOM_FACTOR
);
parcelHelpers.export(exports, "Sha1", ()=>Sha1
);
parcelHelpers.export(exports, "areCookiesEnabled", ()=>areCookiesEnabled
);
parcelHelpers.export(exports, "assert", ()=>assert
);
parcelHelpers.export(exports, "assertionError", ()=>assertionError
);
parcelHelpers.export(exports, "async", ()=>async
);
parcelHelpers.export(exports, "base64", ()=>base64
);
parcelHelpers.export(exports, "base64Decode", ()=>base64Decode
);
parcelHelpers.export(exports, "base64Encode", ()=>base64Encode
);
parcelHelpers.export(exports, "base64urlEncodeWithoutPadding", ()=>base64urlEncodeWithoutPadding
);
parcelHelpers.export(exports, "calculateBackoffMillis", ()=>calculateBackoffMillis
);
parcelHelpers.export(exports, "contains", ()=>contains
);
parcelHelpers.export(exports, "createMockUserToken", ()=>createMockUserToken
);
parcelHelpers.export(exports, "createSubscribe", ()=>createSubscribe
);
parcelHelpers.export(exports, "decode", ()=>decode
);
parcelHelpers.export(exports, "deepCopy", ()=>deepCopy
);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual
);
parcelHelpers.export(exports, "deepExtend", ()=>deepExtend
);
parcelHelpers.export(exports, "deleteDB", ()=>deleteDB
);
parcelHelpers.export(exports, "errorPrefix", ()=>errorPrefix
);
parcelHelpers.export(exports, "extractQuerystring", ()=>extractQuerystring
);
parcelHelpers.export(exports, "getGlobal", ()=>getGlobal
);
parcelHelpers.export(exports, "getModularInstance", ()=>getModularInstance
);
parcelHelpers.export(exports, "getUA", ()=>getUA
);
parcelHelpers.export(exports, "isAdmin", ()=>isAdmin
);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser
);
parcelHelpers.export(exports, "isBrowserExtension", ()=>isBrowserExtension
);
parcelHelpers.export(exports, "isElectron", ()=>isElectron
);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty
);
parcelHelpers.export(exports, "isIE", ()=>isIE
);
parcelHelpers.export(exports, "isIndexedDBAvailable", ()=>isIndexedDBAvailable
);
parcelHelpers.export(exports, "isMobileCordova", ()=>isMobileCordova
);
parcelHelpers.export(exports, "isNode", ()=>isNode
);
parcelHelpers.export(exports, "isNodeSdk", ()=>isNodeSdk
);
parcelHelpers.export(exports, "isReactNative", ()=>isReactNative
);
parcelHelpers.export(exports, "isSafari", ()=>isSafari
);
parcelHelpers.export(exports, "isUWP", ()=>isUWP
);
parcelHelpers.export(exports, "isValidFormat", ()=>isValidFormat
);
parcelHelpers.export(exports, "isValidTimestamp", ()=>isValidTimestamp
);
parcelHelpers.export(exports, "issuedAtTime", ()=>issuedAtTime
);
parcelHelpers.export(exports, "jsonEval", ()=>jsonEval
);
parcelHelpers.export(exports, "map", ()=>map
);
parcelHelpers.export(exports, "openDB", ()=>openDB
);
parcelHelpers.export(exports, "ordinal", ()=>ordinal
);
parcelHelpers.export(exports, "querystring", ()=>querystring
);
parcelHelpers.export(exports, "querystringDecode", ()=>querystringDecode
);
parcelHelpers.export(exports, "safeGet", ()=>safeGet
);
parcelHelpers.export(exports, "stringLength", ()=>stringLength
);
parcelHelpers.export(exports, "stringToByteArray", ()=>stringToByteArray
);
parcelHelpers.export(exports, "stringify", ()=>stringify
);
parcelHelpers.export(exports, "validateArgCount", ()=>validateArgCount
);
parcelHelpers.export(exports, "validateCallback", ()=>validateCallback
);
parcelHelpers.export(exports, "validateContextObject", ()=>validateContextObject
);
parcelHelpers.export(exports, "validateIndexedDBOpenable", ()=>validateIndexedDBOpenable
);
parcelHelpers.export(exports, "validateNamespace", ()=>validateNamespace
);
var global = arguments[3];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ const CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ const assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ const assertionError = function(message) {
    return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const stringToByteArray$1 = function(str) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ const byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let pos = 0, c = 0;
    while(pos < bytes.length){
        const c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            const c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            const c4 = bytes[pos++];
            const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        } else {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
const base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray (input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for(let i = 0; i < input.length; i += 3){
            const byte1 = input[i];
            const haveByte2 = i + 1 < input.length;
            const byte2 = haveByte2 ? input[i + 1] : 0;
            const haveByte3 = i + 2 < input.length;
            const byte3 = haveByte3 ? input[i + 2] : 0;
            const outByte1 = byte1 >> 2;
            const outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
            let outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
            let outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray (input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for(let i = 0; i < input.length;){
            const byte1 = charToByteMap[input.charAt(i++)];
            const haveByte2 = i < input.length;
            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            const haveByte3 = i < input.length;
            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            const haveByte4 = i < input.length;
            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw Error();
            const outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                const outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    const outByte3 = byte3 << 6 & 0xc0 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_ () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for(let i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */ const base64Encode = function(str) {
    const utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */ const base64urlEncodeWithoutPadding = function(str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ const base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            const dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {};
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(const prop in source){
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== '__proto__';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Deferred {
    constructor(){
        this.reject = ()=>{};
        this.resolve = ()=>{};
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ wrapCallback(callback) {
        return (error, value)=>{
            if (error) this.reject(error);
            else this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                this.promise.catch(()=>{});
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function createMockUserToken(token, projectId) {
    if (token.uid) throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    // Unsecured JWTs use "none" as the algorithm.
    const header = {
        alg: 'none',
        type: 'JWT'
    };
    const project = projectId || 'demo-project';
    const iat = token.iat || 0;
    const sub = token.sub || token.user_id;
    if (!sub) throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    const payload = Object.assign({
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`,
        aud: project,
        iat,
        exp: iat + 3600,
        auth_time: iat,
        sub,
        user_id: sub,
        firebase: {
            sign_in_provider: 'custom',
            identities: {}
        }
    }, token);
    // Unsecured JWTs use the empty string as a signature.
    const signature = '';
    return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
    ].join('.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */ function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    const runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    const ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */ function isSafari() {
    return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */ function isIndexedDBAvailable() {
    return typeof indexedDB === 'object';
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */ function validateIndexedDBOpenable() {
    return new Promise((resolve, reject)=>{
        try {
            let preExist = true;
            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
            const request = self.indexedDB.open(DB_CHECK_NAME);
            request.onsuccess = ()=>{
                request.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist) self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                resolve(true);
            };
            request.onupgradeneeded = ()=>{
                preExist = false;
            };
            request.onerror = ()=>{
                var _a;
                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
            };
        } catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */ function areCookiesEnabled() {
    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) return false;
    return true;
}
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 */ function getGlobal() {
    if (typeof self !== 'undefined') return self;
    if (typeof window !== 'undefined') return window;
    if (typeof global !== 'undefined') return global;
    throw new Error('Unable to locate global object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // Typescript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if (e.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */ const ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
class FirebaseError extends Error {
    constructor(/** The error code for this error. */ code, message, /** Custom data for this error. */ customData){
        super(message);
        this.code = code;
        this.customData = customData;
        /** The custom name for all FirebaseErrors. */ this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, FirebaseError.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(this, ErrorFactory.prototype.create);
    }
}
class ErrorFactory {
    constructor(service, serviceName, errors){
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
    }
}
function replaceTemplate(template, data) {
    return template.replace(PATTERN, (_, key)=>{
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
    });
}
const PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const decode = function(token) {
    let header = {}, claims = {}, data = {}, signature = '';
    try {
        const parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    } catch (e) {}
    return {
        header,
        claims,
        data,
        signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isValidTimestamp = function(token) {
    const claims = decode(token).claims;
    const now = Math.floor(new Date().getTime() / 1000);
    let validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const issuedAtTime = function(token) {
    const claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isValidFormat = function(token) {
    const decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isAdmin = function(token) {
    const claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(const key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    const res = {};
    for(const key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */ function deepEqual(a, b) {
    if (a === b) return true;
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys){
        if (!bKeys.includes(k)) return false;
        const aProp = a[k];
        const bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
            if (!deepEqual(aProp, bProp)) return false;
        } else if (aProp !== bProp) return false;
    }
    for (const k1 of bKeys){
        if (!aKeys.includes(k1)) return false;
    }
    return true;
}
function isObject(thing) {
    return thing !== null && typeof thing === 'object';
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    const params = [];
    for (const [key, value] of Object.entries(querystringParams))if (Array.isArray(value)) value.forEach((arrayVal)=>{
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
    });
    else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring1) {
    const obj = {};
    const tokens = querystring1.replace(/^\?/, '').split('&');
    tokens.forEach((token)=>{
        if (token) {
            const [key, value] = token.split('=');
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */ function extractQuerystring(url) {
    const queryStart = url.indexOf('?');
    if (!queryStart) return '';
    const fragmentStart = url.indexOf('#', queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ class Sha1 {
    constructor(){
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(let i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    reset() {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    }
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ compress_(buf, offset) {
        if (!offset) offset = 0;
        const W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(let i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(let i1 = 0; i1 < 16; i1++){
            W[i1] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(let i2 = 16; i2 < 80; i2++){
            const t = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];
            W[i2] = (t << 1 | t >>> 31) & 0xffffffff;
        }
        let a = this.chain_[0];
        let b = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(let i3 = 0; i3 < 80; i3++){
            if (i3 < 40) {
                if (i3 < 20) {
                    f = d ^ b & (c ^ d);
                    k = 0x5a827999;
                } else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            } else if (i3 < 60) {
                f = b & c | d & (b | c);
                k = 0x8f1bbcdc;
            } else {
                f = b ^ c ^ d;
                k = 0xca62c1d6;
            }
            const t = (a << 5 | a >>> 27) + f + e + k + W[i3] & 0xffffffff;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 0xffffffff;
        this.chain_[1] = this.chain_[1] + b & 0xffffffff;
        this.chain_[2] = this.chain_[2] + c & 0xffffffff;
        this.chain_[3] = this.chain_[3] + d & 0xffffffff;
        this.chain_[4] = this.chain_[4] + e & 0xffffffff;
    }
    update(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        const lengthMinusBlock = length - this.blockSize;
        let n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    }
    /** @override */ digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(let i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        let n = 0;
        for(let i4 = 0; i4 < 5; i4++)for(let j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i4] >> j & 255;
            ++n;
        }
        return digest;
    }
}
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    const proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ class ObserverProxy {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ constructor(executor, onNoObservers){
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(()=>{
            executor(this);
        }).catch((e)=>{
            this.error(e);
        });
    }
    next(value) {
        this.forEachObserver((observer)=>{
            observer.next(value);
        });
    }
    error(error) {
        this.forEachObserver((observer)=>{
            observer.error(error);
        });
        this.close(error);
    }
    complete() {
        this.forEachObserver((observer)=>{
            observer.complete();
        });
        this.close();
    }
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */ subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error,
            complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            try {
                if (this.finalError) observer.error(this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    }
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    }
    forEachObserver(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(let i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    }
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    sendOne(i, fn) {
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            if (this.observers !== undefined && this.observers[i] !== undefined) try {
                fn(this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    }
    close(err) {
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
/** Turn synchronous function into one called asynchronously. */ // eslint-disable-next-line @typescript-eslint/ban-types
function async(fn, onError) {
    return (...args)=>{
        Promise.resolve(true).then(()=>{
            fn(...args);
        }).catch((error)=>{
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for (const method of methods){
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ const validateArgCount = function(fnName, minCount, maxCount, argCount) {
    let argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        const error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argName) {
    return `${fnName} failed: ${argName} argument `;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
}
function validateCallback(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
}
function validateContextObject(fnName, argumentName, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ const stringToByteArray = function(str) {
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            const high = c - 0xd800; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ const stringLength = function(str) {
    let p = 0;
    for(let i = 0; i < str.length; i++){
        const c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The amount of milliseconds to exponentially increase.
 */ const DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */ const DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */ const MAX_VALUE_MILLIS = 14400000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */ const RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */ function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    const randomWait = Math.round(// A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provide English ordinal letters after a number
 */ function ordinal(i) {
    if (!Number.isFinite(i)) return `${i}`;
    return i + indicator(i);
}
function indicator(i) {
    i = Math.abs(i);
    const cent = i % 100;
    if (cent >= 10 && cent <= 20) return 'th';
    const dec = i % 10;
    if (dec === 1) return 'st';
    if (dec === 2) return 'nd';
    if (dec === 3) return 'rd';
    return 'th';
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getModularInstance(service) {
    if (service && service._delegate) return service._delegate;
    else return service;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ function promisifyRequest(request, errorMessage) {
    return new Promise((resolve, reject)=>{
        request.onsuccess = (event)=>{
            resolve(event.target.result);
        };
        request.onerror = (event)=>{
            var _a;
            reject(`${errorMessage}: ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);
        };
    });
}
/**
 * @internal
 */ class DBWrapper {
    constructor(_db){
        this._db = _db;
        this.objectStoreNames = this._db.objectStoreNames;
    }
    transaction(storeNames, mode = 'readonly') {
        return new TransactionWrapper(this._db.transaction.call(this._db, storeNames, mode));
    }
    createObjectStore(storeName, options) {
        return new ObjectStoreWrapper(this._db.createObjectStore(storeName, options));
    }
    close() {
        this._db.close();
    }
}
/**
 * @internal
 */ class TransactionWrapper {
    constructor(_transaction){
        this._transaction = _transaction;
        this.complete = new Promise((resolve, reject)=>{
            this._transaction.oncomplete = function() {
                resolve();
            };
            this._transaction.onerror = ()=>{
                reject(this._transaction.error);
            };
            this._transaction.onabort = ()=>{
                reject(this._transaction.error);
            };
        });
    }
    objectStore(storeName) {
        return new ObjectStoreWrapper(this._transaction.objectStore(storeName));
    }
}
/**
 * @internal
 */ class ObjectStoreWrapper {
    constructor(_store){
        this._store = _store;
    }
    index(name) {
        return new IndexWrapper(this._store.index(name));
    }
    createIndex(name, keypath, options) {
        return new IndexWrapper(this._store.createIndex(name, keypath, options));
    }
    get(key) {
        const request = this._store.get(key);
        return promisifyRequest(request, 'Error reading from IndexedDB');
    }
    put(value, key) {
        const request = this._store.put(value, key);
        return promisifyRequest(request, 'Error writing to IndexedDB');
    }
    delete(key) {
        const request = this._store.delete(key);
        return promisifyRequest(request, 'Error deleting from IndexedDB');
    }
    clear() {
        const request = this._store.clear();
        return promisifyRequest(request, 'Error clearing IndexedDB object store');
    }
}
/**
 * @internal
 */ class IndexWrapper {
    constructor(_index){
        this._index = _index;
    }
    get(key) {
        const request = this._index.get(key);
        return promisifyRequest(request, 'Error reading from IndexedDB');
    }
}
/**
 * @internal
 */ function openDB(dbName, dbVersion, upgradeCallback) {
    return new Promise((resolve, reject)=>{
        try {
            const request = indexedDB.open(dbName, dbVersion);
            request.onsuccess = (event)=>{
                resolve(new DBWrapper(event.target.result));
            };
            request.onerror = (event)=>{
                var _a;
                reject(`Error opening indexedDB: ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);
            };
            request.onupgradeneeded = (event)=>{
                upgradeCallback(new DBWrapper(request.result), event.oldVersion, event.newVersion, new TransactionWrapper(request.transaction));
            };
        } catch (e) {
            reject(`Error opening indexedDB: ${e.message}`);
        }
    });
}
/**
 * @internal
 */ async function deleteDB(dbName) {
    return new Promise((resolve, reject)=>{
        try {
            const request = indexedDB.deleteDatabase(dbName);
            request.onsuccess = ()=>{
                resolve();
            };
            request.onerror = (event)=>{
                var _a;
                reject(`Error deleting indexedDB database "${dbName}": ${(_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message}`);
            };
        } catch (e) {
            reject(`Error deleting indexedDB database "${dbName}": ${e.message}`);
        }
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZmft":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel
);
parcelHelpers.export(exports, "Logger", ()=>Logger
);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel
);
parcelHelpers.export(exports, "setUserLogHandler", ()=>setUserLogHandler
);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A container for all of the Logger instances
 */ const instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */ var LogLevel;
(function(LogLevel1) {
    LogLevel1[LogLevel1["DEBUG"] = 0] = "DEBUG";
    LogLevel1[LogLevel1["VERBOSE"] = 1] = "VERBOSE";
    LogLevel1[LogLevel1["INFO"] = 2] = "INFO";
    LogLevel1[LogLevel1["WARN"] = 3] = "WARN";
    LogLevel1[LogLevel1["ERROR"] = 4] = "ERROR";
    LogLevel1[LogLevel1["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
const levelStringToEnum = {
    'debug': LogLevel.DEBUG,
    'verbose': LogLevel.VERBOSE,
    'info': LogLevel.INFO,
    'warn': LogLevel.WARN,
    'error': LogLevel.ERROR,
    'silent': LogLevel.SILENT
};
/**
 * The default log level
 */ const defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */ const ConsoleMethod = {
    [LogLevel.DEBUG]: 'log',
    [LogLevel.VERBOSE]: 'log',
    [LogLevel.INFO]: 'info',
    [LogLevel.WARN]: 'warn',
    [LogLevel.ERROR]: 'error'
};
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ const defaultLogHandler = (instance, logType, ...args)=>{
    if (logType < instance.logLevel) return;
    const now = new Date().toISOString();
    const method = ConsoleMethod[logType];
    if (method) console[method](`[${now}]  ${instance.name}:`, ...args);
    else throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
};
class Logger {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ constructor(name){
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */ this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */ this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */ instances.push(this);
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(val) {
        if (!(val in LogLevel)) throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        this._logLevel = val;
    }
    // Workaround for setter/getter having to be the same type.
    setLogLevel(val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    }
    get logHandler() {
        return this._logHandler;
    }
    set logHandler(val) {
        if (typeof val !== 'function') throw new TypeError('Value assigned to `logHandler` must be a function');
        this._logHandler = val;
    }
    get userLogHandler() {
        return this._userLogHandler;
    }
    set userLogHandler(val) {
        this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */ debug(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
        this._logHandler(this, LogLevel.DEBUG, ...args);
    }
    log(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
        this._logHandler(this, LogLevel.VERBOSE, ...args);
    }
    info(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
        this._logHandler(this, LogLevel.INFO, ...args);
    }
    warn(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
        this._logHandler(this, LogLevel.WARN, ...args);
    }
    error(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
        this._logHandler(this, LogLevel.ERROR, ...args);
    }
}
function setLogLevel(level) {
    instances.forEach((inst)=>{
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    for (const instance1 of instances){
        let customLogLevel = null;
        if (options && options.level) customLogLevel = levelStringToEnum[options.level];
        if (logCallback === null) instance1.userLogHandler = null;
        else instance1.userLogHandler = (instance, level, ...args)=>{
            const message = args.map((arg)=>{
                if (arg == null) return null;
                else if (typeof arg === 'string') return arg;
                else if (typeof arg === 'number' || typeof arg === 'boolean') return arg.toString();
                else if (arg instanceof Error) return arg.message;
                else try {
                    return JSON.stringify(arg);
                } catch (ignored) {
                    return null;
                }
            }).filter((arg)=>arg
            ).join(' ');
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) logCallback({
                level: LogLevel[level].toLowerCase(),
                message,
                args,
                type: instance.name
            });
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"drt1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _auth = require("@firebase/auth");
parcelHelpers.exportAll(_auth, exports);

},{"@firebase/auth":"khbwD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"khbwD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ActionCodeOperation", ()=>_index7078A255Js.A
);
parcelHelpers.export(exports, "ActionCodeURL", ()=>_index7078A255Js.ac
);
parcelHelpers.export(exports, "AuthCredential", ()=>_index7078A255Js.G
);
parcelHelpers.export(exports, "AuthErrorCodes", ()=>_index7078A255Js.C
);
parcelHelpers.export(exports, "EmailAuthCredential", ()=>_index7078A255Js.H
);
parcelHelpers.export(exports, "EmailAuthProvider", ()=>_index7078A255Js.L
);
parcelHelpers.export(exports, "FacebookAuthProvider", ()=>_index7078A255Js.M
);
parcelHelpers.export(exports, "FactorId", ()=>_index7078A255Js.F
);
parcelHelpers.export(exports, "GithubAuthProvider", ()=>_index7078A255Js.Q
);
parcelHelpers.export(exports, "GoogleAuthProvider", ()=>_index7078A255Js.N
);
parcelHelpers.export(exports, "OAuthCredential", ()=>_index7078A255Js.I
);
parcelHelpers.export(exports, "OAuthProvider", ()=>_index7078A255Js.T
);
parcelHelpers.export(exports, "OperationType", ()=>_index7078A255Js.O
);
parcelHelpers.export(exports, "PhoneAuthCredential", ()=>_index7078A255Js.J
);
parcelHelpers.export(exports, "PhoneAuthProvider", ()=>_index7078A255Js.P
);
parcelHelpers.export(exports, "PhoneMultiFactorGenerator", ()=>_index7078A255Js.m
);
parcelHelpers.export(exports, "ProviderId", ()=>_index7078A255Js.o
);
parcelHelpers.export(exports, "RecaptchaVerifier", ()=>_index7078A255Js.R
);
parcelHelpers.export(exports, "SAMLAuthProvider", ()=>_index7078A255Js.U
);
parcelHelpers.export(exports, "SignInMethod", ()=>_index7078A255Js.S
);
parcelHelpers.export(exports, "TwitterAuthProvider", ()=>_index7078A255Js.V
);
parcelHelpers.export(exports, "applyActionCode", ()=>_index7078A255Js.a1
);
parcelHelpers.export(exports, "browserLocalPersistence", ()=>_index7078A255Js.b
);
parcelHelpers.export(exports, "browserPopupRedirectResolver", ()=>_index7078A255Js.k
);
parcelHelpers.export(exports, "browserSessionPersistence", ()=>_index7078A255Js.a
);
parcelHelpers.export(exports, "checkActionCode", ()=>_index7078A255Js.a2
);
parcelHelpers.export(exports, "confirmPasswordReset", ()=>_index7078A255Js.a0
);
parcelHelpers.export(exports, "connectAuthEmulator", ()=>_index7078A255Js.E
);
parcelHelpers.export(exports, "createUserWithEmailAndPassword", ()=>_index7078A255Js.a4
);
parcelHelpers.export(exports, "debugErrorMap", ()=>_index7078A255Js.z
);
parcelHelpers.export(exports, "deleteUser", ()=>_index7078A255Js.y
);
parcelHelpers.export(exports, "fetchSignInMethodsForEmail", ()=>_index7078A255Js.a9
);
parcelHelpers.export(exports, "getAdditionalUserInfo", ()=>_index7078A255Js.ak
);
parcelHelpers.export(exports, "getAuth", ()=>_index7078A255Js.n
);
parcelHelpers.export(exports, "getIdToken", ()=>_index7078A255Js.ah
);
parcelHelpers.export(exports, "getIdTokenResult", ()=>_index7078A255Js.ai
);
parcelHelpers.export(exports, "getMultiFactorResolver", ()=>_index7078A255Js.am
);
parcelHelpers.export(exports, "getRedirectResult", ()=>_index7078A255Js.j
);
parcelHelpers.export(exports, "inMemoryPersistence", ()=>_index7078A255Js.K
);
parcelHelpers.export(exports, "indexedDBLocalPersistence", ()=>_index7078A255Js.i
);
parcelHelpers.export(exports, "initializeAuth", ()=>_index7078A255Js.D
);
parcelHelpers.export(exports, "isSignInWithEmailLink", ()=>_index7078A255Js.a7
);
parcelHelpers.export(exports, "linkWithCredential", ()=>_index7078A255Js.Y
);
parcelHelpers.export(exports, "linkWithPhoneNumber", ()=>_index7078A255Js.l
);
parcelHelpers.export(exports, "linkWithPopup", ()=>_index7078A255Js.d
);
parcelHelpers.export(exports, "linkWithRedirect", ()=>_index7078A255Js.g
);
parcelHelpers.export(exports, "multiFactor", ()=>_index7078A255Js.an
);
parcelHelpers.export(exports, "onAuthStateChanged", ()=>_index7078A255Js.t
);
parcelHelpers.export(exports, "onIdTokenChanged", ()=>_index7078A255Js.q
);
parcelHelpers.export(exports, "parseActionCodeURL", ()=>_index7078A255Js.ad
);
parcelHelpers.export(exports, "prodErrorMap", ()=>_index7078A255Js.B
);
parcelHelpers.export(exports, "reauthenticateWithCredential", ()=>_index7078A255Js.Z
);
parcelHelpers.export(exports, "reauthenticateWithPhoneNumber", ()=>_index7078A255Js.r
);
parcelHelpers.export(exports, "reauthenticateWithPopup", ()=>_index7078A255Js.e
);
parcelHelpers.export(exports, "reauthenticateWithRedirect", ()=>_index7078A255Js.h
);
parcelHelpers.export(exports, "reload", ()=>_index7078A255Js.al
);
parcelHelpers.export(exports, "sendEmailVerification", ()=>_index7078A255Js.aa
);
parcelHelpers.export(exports, "sendPasswordResetEmail", ()=>_index7078A255Js.$
);
parcelHelpers.export(exports, "sendSignInLinkToEmail", ()=>_index7078A255Js.a6
);
parcelHelpers.export(exports, "setPersistence", ()=>_index7078A255Js.p
);
parcelHelpers.export(exports, "signInAnonymously", ()=>_index7078A255Js.W
);
parcelHelpers.export(exports, "signInWithCredential", ()=>_index7078A255Js.X
);
parcelHelpers.export(exports, "signInWithCustomToken", ()=>_index7078A255Js._
);
parcelHelpers.export(exports, "signInWithEmailAndPassword", ()=>_index7078A255Js.a5
);
parcelHelpers.export(exports, "signInWithEmailLink", ()=>_index7078A255Js.a8
);
parcelHelpers.export(exports, "signInWithPhoneNumber", ()=>_index7078A255Js.s
);
parcelHelpers.export(exports, "signInWithPopup", ()=>_index7078A255Js.c
);
parcelHelpers.export(exports, "signInWithRedirect", ()=>_index7078A255Js.f
);
parcelHelpers.export(exports, "signOut", ()=>_index7078A255Js.x
);
parcelHelpers.export(exports, "unlink", ()=>_index7078A255Js.aj
);
parcelHelpers.export(exports, "updateCurrentUser", ()=>_index7078A255Js.w
);
parcelHelpers.export(exports, "updateEmail", ()=>_index7078A255Js.af
);
parcelHelpers.export(exports, "updatePassword", ()=>_index7078A255Js.ag
);
parcelHelpers.export(exports, "updatePhoneNumber", ()=>_index7078A255Js.u
);
parcelHelpers.export(exports, "updateProfile", ()=>_index7078A255Js.ae
);
parcelHelpers.export(exports, "useDeviceLanguage", ()=>_index7078A255Js.v
);
parcelHelpers.export(exports, "verifyBeforeUpdateEmail", ()=>_index7078A255Js.ab
);
parcelHelpers.export(exports, "verifyPasswordResetCode", ()=>_index7078A255Js.a3
);
var _util = require("@firebase/util");
var _app = require("@firebase/app");
var _tslib = require("tslib");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");
var _index7078A255Js = require("./index-7078a255.js");

},{"@firebase/util":"ePiK6","@firebase/app":"3AcPV","tslib":"lRdW5","@firebase/logger":"fZmft","@firebase/component":"bi1VB","./index-7078a255.js":"eExx3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread
);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet
);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet
);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn
);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eExx3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>sendPasswordResetEmail
);
parcelHelpers.export(exports, "A", ()=>ActionCodeOperation
);
parcelHelpers.export(exports, "B", ()=>prodErrorMap
);
parcelHelpers.export(exports, "C", ()=>AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY
);
parcelHelpers.export(exports, "D", ()=>initializeAuth
);
parcelHelpers.export(exports, "E", ()=>connectAuthEmulator
);
parcelHelpers.export(exports, "F", ()=>FactorId
);
parcelHelpers.export(exports, "G", ()=>AuthCredential
);
parcelHelpers.export(exports, "H", ()=>EmailAuthCredential
);
parcelHelpers.export(exports, "I", ()=>OAuthCredential
);
parcelHelpers.export(exports, "J", ()=>PhoneAuthCredential
);
parcelHelpers.export(exports, "K", ()=>inMemoryPersistence
);
parcelHelpers.export(exports, "L", ()=>EmailAuthProvider
);
parcelHelpers.export(exports, "M", ()=>FacebookAuthProvider
);
parcelHelpers.export(exports, "N", ()=>GoogleAuthProvider
);
parcelHelpers.export(exports, "O", ()=>OperationType
);
parcelHelpers.export(exports, "P", ()=>PhoneAuthProvider
);
parcelHelpers.export(exports, "Q", ()=>GithubAuthProvider
);
parcelHelpers.export(exports, "R", ()=>RecaptchaVerifier
);
parcelHelpers.export(exports, "S", ()=>SignInMethod
);
parcelHelpers.export(exports, "T", ()=>OAuthProvider
);
parcelHelpers.export(exports, "U", ()=>SAMLAuthProvider
);
parcelHelpers.export(exports, "V", ()=>TwitterAuthProvider
);
parcelHelpers.export(exports, "W", ()=>signInAnonymously
);
parcelHelpers.export(exports, "X", ()=>signInWithCredential
);
parcelHelpers.export(exports, "Y", ()=>linkWithCredential
);
parcelHelpers.export(exports, "Z", ()=>reauthenticateWithCredential
);
parcelHelpers.export(exports, "_", ()=>signInWithCustomToken
);
parcelHelpers.export(exports, "a", ()=>browserSessionPersistence
);
parcelHelpers.export(exports, "a0", ()=>confirmPasswordReset
);
parcelHelpers.export(exports, "a1", ()=>applyActionCode
);
parcelHelpers.export(exports, "a2", ()=>checkActionCode
);
parcelHelpers.export(exports, "a3", ()=>verifyPasswordResetCode
);
parcelHelpers.export(exports, "a4", ()=>createUserWithEmailAndPassword
);
parcelHelpers.export(exports, "a5", ()=>signInWithEmailAndPassword
);
parcelHelpers.export(exports, "a6", ()=>sendSignInLinkToEmail
);
parcelHelpers.export(exports, "a7", ()=>isSignInWithEmailLink
);
parcelHelpers.export(exports, "a8", ()=>signInWithEmailLink
);
parcelHelpers.export(exports, "a9", ()=>fetchSignInMethodsForEmail
);
parcelHelpers.export(exports, "aA", ()=>_getRedirectResult
);
parcelHelpers.export(exports, "aB", ()=>_clearRedirectOutcomes
);
parcelHelpers.export(exports, "aC", ()=>_castAuth
);
parcelHelpers.export(exports, "aD", ()=>UserImpl
);
parcelHelpers.export(exports, "aE", ()=>AuthImpl
);
parcelHelpers.export(exports, "aF", ()=>_getClientVersion
);
parcelHelpers.export(exports, "aG", ()=>_generateEventId
);
parcelHelpers.export(exports, "aH", ()=>AuthPopup
);
parcelHelpers.export(exports, "aI", ()=>FetchProvider
);
parcelHelpers.export(exports, "aJ", ()=>SAMLAuthCredential
);
parcelHelpers.export(exports, "aa", ()=>sendEmailVerification
);
parcelHelpers.export(exports, "ab", ()=>verifyBeforeUpdateEmail
);
parcelHelpers.export(exports, "ac", ()=>ActionCodeURL
);
parcelHelpers.export(exports, "ad", ()=>parseActionCodeURL
);
parcelHelpers.export(exports, "ae", ()=>updateProfile
);
parcelHelpers.export(exports, "af", ()=>updateEmail
);
parcelHelpers.export(exports, "ag", ()=>updatePassword
);
parcelHelpers.export(exports, "ah", ()=>getIdToken
);
parcelHelpers.export(exports, "ai", ()=>getIdTokenResult
);
parcelHelpers.export(exports, "aj", ()=>unlink
);
parcelHelpers.export(exports, "ak", ()=>getAdditionalUserInfo
);
parcelHelpers.export(exports, "al", ()=>reload
);
parcelHelpers.export(exports, "am", ()=>getMultiFactorResolver
);
parcelHelpers.export(exports, "an", ()=>multiFactor
);
parcelHelpers.export(exports, "ao", ()=>_isIOS7Or8
);
parcelHelpers.export(exports, "ap", ()=>debugAssert
);
parcelHelpers.export(exports, "aq", ()=>_isIOS
);
parcelHelpers.export(exports, "ar", ()=>_isAndroid
);
parcelHelpers.export(exports, "as", ()=>_fail
);
parcelHelpers.export(exports, "at", ()=>_getRedirectUrl
);
parcelHelpers.export(exports, "au", ()=>_getProjectConfig
);
parcelHelpers.export(exports, "av", ()=>_createError
);
parcelHelpers.export(exports, "aw", ()=>_assert
);
parcelHelpers.export(exports, "ax", ()=>_getInstance
);
parcelHelpers.export(exports, "ay", ()=>_persistenceKeyName
);
parcelHelpers.export(exports, "az", ()=>AuthEventManager
);
parcelHelpers.export(exports, "b", ()=>browserLocalPersistence
);
parcelHelpers.export(exports, "c", ()=>signInWithPopup
);
parcelHelpers.export(exports, "d", ()=>linkWithPopup
);
parcelHelpers.export(exports, "e", ()=>reauthenticateWithPopup
);
parcelHelpers.export(exports, "f", ()=>signInWithRedirect
);
parcelHelpers.export(exports, "g", ()=>linkWithRedirect
);
parcelHelpers.export(exports, "h", ()=>reauthenticateWithRedirect
);
parcelHelpers.export(exports, "i", ()=>indexedDBLocalPersistence
);
parcelHelpers.export(exports, "j", ()=>getRedirectResult
);
parcelHelpers.export(exports, "k", ()=>browserPopupRedirectResolver
);
parcelHelpers.export(exports, "l", ()=>linkWithPhoneNumber
);
parcelHelpers.export(exports, "m", ()=>PhoneMultiFactorGenerator
);
parcelHelpers.export(exports, "n", ()=>getAuth
);
parcelHelpers.export(exports, "o", ()=>ProviderId
);
parcelHelpers.export(exports, "p", ()=>setPersistence
);
parcelHelpers.export(exports, "q", ()=>onIdTokenChanged
);
parcelHelpers.export(exports, "r", ()=>reauthenticateWithPhoneNumber
);
parcelHelpers.export(exports, "s", ()=>signInWithPhoneNumber
);
parcelHelpers.export(exports, "t", ()=>onAuthStateChanged
);
parcelHelpers.export(exports, "u", ()=>updatePhoneNumber
);
parcelHelpers.export(exports, "v", ()=>useDeviceLanguage
);
parcelHelpers.export(exports, "w", ()=>updateCurrentUser
);
parcelHelpers.export(exports, "x", ()=>signOut
);
parcelHelpers.export(exports, "y", ()=>deleteUser
);
parcelHelpers.export(exports, "z", ()=>debugErrorMap
);
var _util = require("@firebase/util");
var _app = require("@firebase/app");
var _tslib = require("tslib");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An enum of factors that may be used for multifactor authentication.
 *
 * @public
 */ const FactorId = {
    /** Phone as second factor */ PHONE: 'phone'
};
/**
 * Enumeration of supported providers.
 *
 * @public
 */ const ProviderId = {
    /** Facebook provider ID */ FACEBOOK: 'facebook.com',
    /** GitHub provider ID */ GITHUB: 'github.com',
    /** Google provider ID */ GOOGLE: 'google.com',
    /** Password provider */ PASSWORD: 'password',
    /** Phone provider */ PHONE: 'phone',
    /** Twitter provider ID */ TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported sign-in methods.
 *
 * @public
 */ const SignInMethod = {
    /** Email link sign in method */ EMAIL_LINK: 'emailLink',
    /** Email/password sign in method */ EMAIL_PASSWORD: 'password',
    /** Facebook sign in method */ FACEBOOK: 'facebook.com',
    /** GitHub sign in method */ GITHUB: 'github.com',
    /** Google sign in method */ GOOGLE: 'google.com',
    /** Phone sign in method */ PHONE: 'phone',
    /** Twitter sign in method */ TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported operation types.
 *
 * @public
 */ const OperationType = {
    /** Operation involving linking an additional provider to an already signed-in user. */ LINK: 'link',
    /** Operation involving using a provider to reauthenticate an already signed-in user. */ REAUTHENTICATE: 'reauthenticate',
    /** Operation involving signing in a user. */ SIGN_IN: 'signIn'
};
/**
 * An enumeration of the possible email action types.
 *
 * @public
 */ const ActionCodeOperation = {
    /** The email link sign-in action. */ EMAIL_SIGNIN: 'EMAIL_SIGNIN',
    /** The password reset action. */ PASSWORD_RESET: 'PASSWORD_RESET',
    /** The email revocation action. */ RECOVER_EMAIL: 'RECOVER_EMAIL',
    /** The revert second factor addition email action. */ REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
    /** The revert second factor addition email action. */ VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
    /** The email verification action. */ VERIFY_EMAIL: 'VERIFY_EMAIL'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _debugErrorMap() {
    return {
        ["admin-restricted-operation" /* ADMIN_ONLY_OPERATION */ ]: 'This operation is restricted to administrators only.',
        ["argument-error" /* ARGUMENT_ERROR */ ]: '',
        ["app-not-authorized" /* APP_NOT_AUTHORIZED */ ]: "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
        ["app-not-installed" /* APP_NOT_INSTALLED */ ]: "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
        ["captcha-check-failed" /* CAPTCHA_CHECK_FAILED */ ]: "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
        ["code-expired" /* CODE_EXPIRED */ ]: "The SMS code has expired. Please re-send the verification code to try again.",
        ["cordova-not-ready" /* CORDOVA_NOT_READY */ ]: 'Cordova framework is not ready.',
        ["cors-unsupported" /* CORS_UNSUPPORTED */ ]: 'This browser is not supported.',
        ["credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */ ]: 'This credential is already associated with a different user account.',
        ["custom-token-mismatch" /* CREDENTIAL_MISMATCH */ ]: 'The custom token corresponds to a different audience.',
        ["requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        ["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.",
        ["dynamic-link-not-activated" /* DYNAMIC_LINK_NOT_ACTIVATED */ ]: "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
        ["email-change-needs-verification" /* EMAIL_CHANGE_NEEDS_VERIFICATION */ ]: 'Multi-factor users must always have a verified email.',
        ["email-already-in-use" /* EMAIL_EXISTS */ ]: 'The email address is already in use by another account.',
        ["emulator-config-failed" /* EMULATOR_CONFIG_FAILED */ ]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
        ["expired-action-code" /* EXPIRED_OOB_CODE */ ]: 'The action code has expired.',
        ["cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */ ]: 'This operation has been cancelled due to another conflicting popup being opened.',
        ["internal-error" /* INTERNAL_ERROR */ ]: 'An internal AuthError has occurred.',
        ["invalid-app-credential" /* INVALID_APP_CREDENTIAL */ ]: "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
        ["invalid-app-id" /* INVALID_APP_ID */ ]: 'The mobile app identifier is not registed for the current project.',
        ["invalid-user-token" /* INVALID_AUTH */ ]: "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
        ["invalid-auth-event" /* INVALID_AUTH_EVENT */ ]: 'An internal AuthError has occurred.',
        ["invalid-verification-code" /* INVALID_CODE */ ]: "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.",
        ["invalid-continue-uri" /* INVALID_CONTINUE_URI */ ]: 'The continue URL provided in the request is invalid.',
        ["invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */ ]: "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
        ["invalid-custom-token" /* INVALID_CUSTOM_TOKEN */ ]: 'The custom token format is incorrect. Please check the documentation.',
        ["invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */ ]: 'The provided dynamic link domain is not configured or authorized for the current project.',
        ["invalid-email" /* INVALID_EMAIL */ ]: 'The email address is badly formatted.',
        ["invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */ ]: 'Emulator URL must start with a valid scheme (http:// or https://).',
        ["invalid-api-key" /* INVALID_API_KEY */ ]: 'Your API key is invalid, please check you have copied it correctly.',
        ["invalid-cert-hash" /* INVALID_CERT_HASH */ ]: 'The SHA-1 certificate hash provided is invalid.',
        ["invalid-credential" /* INVALID_IDP_RESPONSE */ ]: 'The supplied auth credential is malformed or has expired.',
        ["invalid-message-payload" /* INVALID_MESSAGE_PAYLOAD */ ]: "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-multi-factor-session" /* INVALID_MFA_SESSION */ ]: 'The request does not contain a valid proof of first factor successful sign-in.',
        ["invalid-oauth-provider" /* INVALID_OAUTH_PROVIDER */ ]: "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
        ["invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */ ]: "The OAuth client ID provided is either invalid or does not match the specified API key.",
        ["unauthorized-domain" /* INVALID_ORIGIN */ ]: "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        ["invalid-action-code" /* INVALID_OOB_CODE */ ]: "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
        ["wrong-password" /* INVALID_PASSWORD */ ]: 'The password is invalid or the user does not have a password.',
        ["invalid-persistence-type" /* INVALID_PERSISTENCE */ ]: 'The specified persistence type is invalid. It can only be local, session or none.',
        ["invalid-phone-number" /* INVALID_PHONE_NUMBER */ ]: "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
        ["invalid-provider-id" /* INVALID_PROVIDER_ID */ ]: 'The specified provider ID is invalid.',
        ["invalid-recipient-email" /* INVALID_RECIPIENT_EMAIL */ ]: "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
        ["invalid-sender" /* INVALID_SENDER */ ]: "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-verification-id" /* INVALID_SESSION_INFO */ ]: 'The verification ID used to create the phone auth credential is invalid.',
        ["invalid-tenant-id" /* INVALID_TENANT_ID */ ]: "The Auth instance's tenant ID is invalid.",
        ["missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */ ]: 'An Android Package Name must be provided if the Android App is required to be installed.',
        ["auth-domain-config-required" /* MISSING_AUTH_DOMAIN */ ]: "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
        ["missing-app-credential" /* MISSING_APP_CREDENTIAL */ ]: "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
        ["missing-verification-code" /* MISSING_CODE */ ]: 'The phone auth credential was created with an empty SMS verification code.',
        ["missing-continue-uri" /* MISSING_CONTINUE_URI */ ]: 'A continue URL must be provided in the request.',
        ["missing-iframe-start" /* MISSING_IFRAME_START */ ]: 'An internal AuthError has occurred.',
        ["missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */ ]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
        ["missing-or-invalid-nonce" /* MISSING_OR_INVALID_NONCE */ ]: "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
        ["missing-multi-factor-info" /* MISSING_MFA_INFO */ ]: 'No second factor identifier is provided.',
        ["missing-multi-factor-session" /* MISSING_MFA_SESSION */ ]: 'The request is missing proof of first factor successful sign-in.',
        ["missing-phone-number" /* MISSING_PHONE_NUMBER */ ]: 'To send verification codes, provide a phone number for the recipient.',
        ["missing-verification-id" /* MISSING_SESSION_INFO */ ]: 'The phone auth credential was created with an empty verification ID.',
        ["app-deleted" /* MODULE_DESTROYED */ ]: 'This instance of FirebaseApp has been deleted.',
        ["multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */ ]: 'The user does not have a second factor matching the identifier provided.',
        ["multi-factor-auth-required" /* MFA_REQUIRED */ ]: 'Proof of ownership of a second factor is required to complete sign-in.',
        ["account-exists-with-different-credential" /* NEED_CONFIRMATION */ ]: "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        ["network-request-failed" /* NETWORK_REQUEST_FAILED */ ]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
        ["no-auth-event" /* NO_AUTH_EVENT */ ]: 'An internal AuthError has occurred.',
        ["no-such-provider" /* NO_SUCH_PROVIDER */ ]: 'User was not linked to an account with the given provider.',
        ["null-user" /* NULL_USER */ ]: "A null user object was provided as the argument for an operation which requires a non-null user object.",
        ["operation-not-allowed" /* OPERATION_NOT_ALLOWED */ ]: "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
        ["operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ ]: 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
        ["popup-blocked" /* POPUP_BLOCKED */ ]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
        ["popup-closed-by-user" /* POPUP_CLOSED_BY_USER */ ]: 'The popup has been closed by the user before finalizing the operation.',
        ["provider-already-linked" /* PROVIDER_ALREADY_LINKED */ ]: 'User can only be linked to one identity for the given provider.',
        ["quota-exceeded" /* QUOTA_EXCEEDED */ ]: "The project's quota for this operation has been exceeded.",
        ["redirect-cancelled-by-user" /* REDIRECT_CANCELLED_BY_USER */ ]: 'The redirect operation has been cancelled by the user before finalizing.',
        ["redirect-operation-pending" /* REDIRECT_OPERATION_PENDING */ ]: 'A redirect sign-in operation is already pending.',
        ["rejected-credential" /* REJECTED_CREDENTIAL */ ]: 'The request contains malformed or mismatching credentials.',
        ["second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */ ]: 'The second factor is already enrolled on this account.',
        ["maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */ ]: 'The maximum allowed number of second factors on a user has been exceeded.',
        ["tenant-id-mismatch" /* TENANT_ID_MISMATCH */ ]: "The provided tenant ID does not match the Auth instance's tenant ID",
        ["timeout" /* TIMEOUT */ ]: 'The operation has timed out.',
        ["user-token-expired" /* TOKEN_EXPIRED */ ]: "The user's credential is no longer valid. The user must sign in again.",
        ["too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "We have blocked all requests from this device due to unusual activity. Try again later.",
        ["unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */ ]: "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
        ["unsupported-first-factor" /* UNSUPPORTED_FIRST_FACTOR */ ]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
        ["unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */ ]: 'The current environment does not support the specified persistence type.',
        ["unsupported-tenant-operation" /* UNSUPPORTED_TENANT_OPERATION */ ]: 'This operation is not supported in a multi-tenant context.',
        ["unverified-email" /* UNVERIFIED_EMAIL */ ]: 'The operation requires a verified email.',
        ["user-cancelled" /* USER_CANCELLED */ ]: 'The user did not grant your application the permissions it requested.',
        ["user-not-found" /* USER_DELETED */ ]: "There is no user record corresponding to this identifier. The user may have been deleted.",
        ["user-disabled" /* USER_DISABLED */ ]: 'The user account has been disabled by an administrator.',
        ["user-mismatch" /* USER_MISMATCH */ ]: 'The supplied credentials do not correspond to the previously signed in user.',
        ["user-signed-out" /* USER_SIGNED_OUT */ ]: '',
        ["weak-password" /* WEAK_PASSWORD */ ]: 'The password must be 6 characters long or more.',
        ["web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */ ]: 'This browser is not supported or 3rd party cookies and data may be disabled.',
        ["already-initialized" /* ALREADY_INITIALIZED */ ]: "initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance."
    };
}
function _prodErrorMap() {
    // We will include this one message in the prod error map since by the very
    // nature of this error, developers will never be able to see the message
    // using the debugErrorMap (which is installed during auth initialization).
    return {
        ["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
    };
}
/**
 * A verbose error map with detailed descriptions for most error codes.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const debugErrorMap = _debugErrorMap;
/**
 * A minimal error map with all verbose error messages stripped.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const prodErrorMap = _prodErrorMap;
const _DEFAULT_AUTH_ERROR_FACTORY = new _util.ErrorFactory('auth', 'Firebase', _prodErrorMap());
/**
 * A map of potential `Auth` error codes, for easier comparison with errors
 * thrown by the SDK.
 *
 * @remarks
 * Note that you can't tree-shake individual keys
 * in the map, so by using the map you might substantially increase your
 * bundle size.
 *
 * @public
 */ const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {
    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',
    ARGUMENT_ERROR: 'auth/argument-error',
    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',
    APP_NOT_INSTALLED: 'auth/app-not-installed',
    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',
    CODE_EXPIRED: 'auth/code-expired',
    CORDOVA_NOT_READY: 'auth/cordova-not-ready',
    CORS_UNSUPPORTED: 'auth/cors-unsupported',
    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',
    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',
    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',
    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',
    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',
    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',
    EMAIL_EXISTS: 'auth/email-already-in-use',
    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',
    EXPIRED_OOB_CODE: 'auth/expired-action-code',
    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',
    INTERNAL_ERROR: 'auth/internal-error',
    INVALID_API_KEY: 'auth/invalid-api-key',
    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',
    INVALID_APP_ID: 'auth/invalid-app-id',
    INVALID_AUTH: 'auth/invalid-user-token',
    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',
    INVALID_CERT_HASH: 'auth/invalid-cert-hash',
    INVALID_CODE: 'auth/invalid-verification-code',
    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',
    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',
    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',
    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',
    INVALID_EMAIL: 'auth/invalid-email',
    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',
    INVALID_IDP_RESPONSE: 'auth/invalid-credential',
    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',
    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',
    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',
    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',
    INVALID_OOB_CODE: 'auth/invalid-action-code',
    INVALID_ORIGIN: 'auth/unauthorized-domain',
    INVALID_PASSWORD: 'auth/wrong-password',
    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',
    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',
    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',
    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',
    INVALID_SENDER: 'auth/invalid-sender',
    INVALID_SESSION_INFO: 'auth/invalid-verification-id',
    INVALID_TENANT_ID: 'auth/invalid-tenant-id',
    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',
    MFA_REQUIRED: 'auth/multi-factor-auth-required',
    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',
    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',
    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',
    MISSING_CODE: 'auth/missing-verification-code',
    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',
    MISSING_IFRAME_START: 'auth/missing-iframe-start',
    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',
    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',
    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',
    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',
    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',
    MISSING_SESSION_INFO: 'auth/missing-verification-id',
    MODULE_DESTROYED: 'auth/app-deleted',
    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',
    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',
    NULL_USER: 'auth/null-user',
    NO_AUTH_EVENT: 'auth/no-auth-event',
    NO_SUCH_PROVIDER: 'auth/no-such-provider',
    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',
    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',
    POPUP_BLOCKED: 'auth/popup-blocked',
    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',
    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',
    QUOTA_EXCEEDED: 'auth/quota-exceeded',
    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',
    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',
    REJECTED_CREDENTIAL: 'auth/rejected-credential',
    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',
    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',
    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',
    TIMEOUT: 'auth/timeout',
    TOKEN_EXPIRED: 'auth/user-token-expired',
    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',
    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',
    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',
    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',
    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',
    UNVERIFIED_EMAIL: 'auth/unverified-email',
    USER_CANCELLED: 'auth/user-cancelled',
    USER_DELETED: 'auth/user-not-found',
    USER_DISABLED: 'auth/user-disabled',
    USER_MISMATCH: 'auth/user-mismatch',
    USER_SIGNED_OUT: 'auth/user-signed-out',
    WEAK_PASSWORD: 'auth/weak-password',
    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',
    ALREADY_INITIALIZED: 'auth/already-initialized'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logClient = new _logger.Logger('@firebase/auth');
function _logError(msg, ...args) {
    if (logClient.logLevel <= _logger.LogLevel.ERROR) logClient.error(`Auth (${_app.SDK_VERSION}): ${msg}`, ...args);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _fail(authOrCode, ...rest) {
    throw createErrorInternal(authOrCode, ...rest);
}
function _createError(authOrCode, ...rest) {
    return createErrorInternal(authOrCode, ...rest);
}
function _errorWithCustomMessage(auth, code, message) {
    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), {
        [code]: message
    });
    const factory = new _util.ErrorFactory('auth', 'Firebase', errorMap);
    return factory.create(code, {
        appName: auth.name
    });
}
function _assertInstanceOf(auth, object, instance) {
    const constructorInstance = instance;
    if (!(object instanceof constructorInstance)) {
        if (constructorInstance.name !== object.constructor.name) _fail(auth, "argument-error" /* ARGUMENT_ERROR */ );
        throw _errorWithCustomMessage(auth, "argument-error" /* ARGUMENT_ERROR */ , `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);
    }
}
function createErrorInternal(authOrCode, ...rest) {
    if (typeof authOrCode !== 'string') {
        const code = rest[0];
        const fullParams = [
            ...rest.slice(1)
        ];
        if (fullParams[0]) fullParams[0].appName = authOrCode.name;
        return authOrCode._errorFactory.create(code, ...fullParams);
    }
    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function _assert(assertion, authOrCode, ...rest) {
    if (!assertion) throw createErrorInternal(authOrCode, ...rest);
}
/**
 * Unconditionally fails, throwing an internal error with the given message.
 *
 * @param failure type of failure encountered
 * @throws Error
 */ function debugFail(failure) {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const message = `INTERNAL ASSERTION FAILED: ` + failure;
    _logError(message);
    // NOTE: We don't use FirebaseError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * @param assertion
 * @param message
 */ function debugAssert(assertion, message) {
    if (!assertion) debugFail(message);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const instanceCache = new Map();
function _getInstance(cls) {
    debugAssert(cls instanceof Function, 'Expected a class definition');
    let instance = instanceCache.get(cls);
    if (instance) {
        debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
        return instance;
    }
    instance = new cls();
    instanceCache.set(cls, instance);
    return instance;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Initializes an {@link Auth} instance with fine-grained control over
 * {@link Dependencies}.
 *
 * @remarks
 *
 * This function allows more control over the {@link Auth} instance than
 * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
 * the {@link Dependencies}. In general, `getAuth` is the easiest way to
 * initialize Auth and works for most use cases. Use `initializeAuth` if you
 * need control over which persistence layer is used, or to minimize bundle
 * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
 *
 * For example, if your app only uses anonymous accounts and you only want
 * accounts saved for the current session, initialize `Auth` with:
 *
 * ```js
 * const auth = initializeAuth(app, {
 *   persistence: browserSessionPersistence,
 *   popupRedirectResolver: undefined,
 * });
 * ```
 *
 * @public
 */ function initializeAuth(app, deps) {
    const provider = _app._getProvider(app, 'auth');
    if (provider.isInitialized()) {
        const auth = provider.getImmediate();
        const initialOptions = provider.getOptions();
        if (_util.deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) return auth;
        else _fail(auth, "already-initialized" /* ALREADY_INITIALIZED */ );
    }
    const auth = provider.initialize({
        options: deps
    });
    return auth;
}
function _initializeAuthInstance(auth, deps) {
    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
    const hierarchy = (Array.isArray(persistence) ? persistence : [
        persistence
    ]).map(_getInstance);
    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) auth._updateErrorMap(deps.errorMap);
    // This promise is intended to float; auth initialization happens in the
    // background, meanwhile the auth object may be used by the app.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _getCurrentUrl() {
    var _a;
    return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';
}
function _isHttpOrHttps() {
    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
}
function _getCurrentScheme() {
    var _a;
    return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine whether the browser is working online
 */ function _isOnline() {
    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (_isHttpOrHttps() || _util.isBrowserExtension() || 'connection' in navigator)) return navigator.onLine;
    // If we can't determine the state, assume it is online.
    return true;
}
function _getUserLanguage() {
    if (typeof navigator === 'undefined') return null;
    const navigatorLanguage = navigator;
    return(// Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language || // Couldn't determine language.
    null);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A structure to help pick between a range of long and short delay durations
 * depending on the current environment. In general, the long delay is used for
 * mobile environments whereas short delays are used for desktop environments.
 */ class Delay {
    constructor(shortDelay, longDelay){
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        // Internal error when improperly initialized.
        debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
        this.isMobile = _util.isMobileCordova() || _util.isReactNative();
    }
    get() {
        if (!_isOnline()) // Pick the shorter timeout.
        return Math.min(5000 /* OFFLINE */ , this.shortDelay);
        // If running in a mobile environment, return the long delay, otherwise
        // return the short delay.
        // This could be improved in the future to dynamically change based on other
        // variables instead of just reading the current environment.
        return this.isMobile ? this.longDelay : this.shortDelay;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _emulatorUrl(config, path) {
    debugAssert(config.emulator, 'Emulator should always be set here');
    const { url  } = config.emulator;
    if (!path) return url;
    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class FetchProvider {
    static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) this.headersImpl = headersImpl;
        if (responseImpl) this.responseImpl = responseImpl;
    }
    static fetch() {
        if (this.fetchImpl) return this.fetchImpl;
        if (typeof self !== 'undefined' && 'fetch' in self) return self.fetch;
        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static headers() {
        if (this.headersImpl) return this.headersImpl;
        if (typeof self !== 'undefined' && 'Headers' in self) return self.Headers;
        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static response() {
        if (this.responseImpl) return this.responseImpl;
        if (typeof self !== 'undefined' && 'Response' in self) return self.Response;
        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Map from errors returned by the server to errors to developer visible errors
 */ const SERVER_ERROR_MAP = {
    // Custom token errors.
    ["CREDENTIAL_MISMATCH" /* CREDENTIAL_MISMATCH */ ]: "custom-token-mismatch" /* CREDENTIAL_MISMATCH */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CUSTOM_TOKEN" /* MISSING_CUSTOM_TOKEN */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Create Auth URI errors.
    ["INVALID_IDENTIFIER" /* INVALID_IDENTIFIER */ ]: "invalid-email" /* INVALID_EMAIL */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CONTINUE_URI" /* MISSING_CONTINUE_URI */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Sign in with email and password errors (some apply to sign up too).
    ["INVALID_PASSWORD" /* INVALID_PASSWORD */ ]: "wrong-password" /* INVALID_PASSWORD */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_PASSWORD" /* MISSING_PASSWORD */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Sign up with email and password errors.
    ["EMAIL_EXISTS" /* EMAIL_EXISTS */ ]: "email-already-in-use" /* EMAIL_EXISTS */ ,
    ["PASSWORD_LOGIN_DISABLED" /* PASSWORD_LOGIN_DISABLED */ ]: "operation-not-allowed" /* OPERATION_NOT_ALLOWED */ ,
    // Verify assertion for sign in with credential errors:
    ["INVALID_IDP_RESPONSE" /* INVALID_IDP_RESPONSE */ ]: "invalid-credential" /* INVALID_IDP_RESPONSE */ ,
    ["INVALID_PENDING_TOKEN" /* INVALID_PENDING_TOKEN */ ]: "invalid-credential" /* INVALID_IDP_RESPONSE */ ,
    ["FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */ ]: "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_REQ_TYPE" /* MISSING_REQ_TYPE */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Send Password reset email errors:
    ["EMAIL_NOT_FOUND" /* EMAIL_NOT_FOUND */ ]: "user-not-found" /* USER_DELETED */ ,
    ["RESET_PASSWORD_EXCEED_LIMIT" /* RESET_PASSWORD_EXCEED_LIMIT */ ]: "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    ["EXPIRED_OOB_CODE" /* EXPIRED_OOB_CODE */ ]: "expired-action-code" /* EXPIRED_OOB_CODE */ ,
    ["INVALID_OOB_CODE" /* INVALID_OOB_CODE */ ]: "invalid-action-code" /* INVALID_OOB_CODE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_OOB_CODE" /* MISSING_OOB_CODE */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Operations that require ID token in request:
    ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ,
    ["INVALID_ID_TOKEN" /* INVALID_ID_TOKEN */ ]: "invalid-user-token" /* INVALID_AUTH */ ,
    ["TOKEN_EXPIRED" /* TOKEN_EXPIRED */ ]: "user-token-expired" /* TOKEN_EXPIRED */ ,
    ["USER_NOT_FOUND" /* USER_NOT_FOUND */ ]: "user-token-expired" /* TOKEN_EXPIRED */ ,
    // Other errors.
    ["TOO_MANY_ATTEMPTS_TRY_LATER" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    // Phone Auth related errors.
    ["INVALID_CODE" /* INVALID_CODE */ ]: "invalid-verification-code" /* INVALID_CODE */ ,
    ["INVALID_SESSION_INFO" /* INVALID_SESSION_INFO */ ]: "invalid-verification-id" /* INVALID_SESSION_INFO */ ,
    ["INVALID_TEMPORARY_PROOF" /* INVALID_TEMPORARY_PROOF */ ]: "invalid-credential" /* INVALID_IDP_RESPONSE */ ,
    ["MISSING_SESSION_INFO" /* MISSING_SESSION_INFO */ ]: "missing-verification-id" /* MISSING_SESSION_INFO */ ,
    ["SESSION_EXPIRED" /* SESSION_EXPIRED */ ]: "code-expired" /* CODE_EXPIRED */ ,
    // Other action code errors when additional settings passed.
    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
    // This is OK as this error will be caught by client side validation.
    ["MISSING_ANDROID_PACKAGE_NAME" /* MISSING_ANDROID_PACKAGE_NAME */ ]: "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */ ,
    ["UNAUTHORIZED_DOMAIN" /* UNAUTHORIZED_DOMAIN */ ]: "unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */ ,
    // getProjectConfig errors when clientId is passed.
    ["INVALID_OAUTH_CLIENT_ID" /* INVALID_OAUTH_CLIENT_ID */ ]: "invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */ ,
    // User actions (sign-up or deletion) disabled errors.
    ["ADMIN_ONLY_OPERATION" /* ADMIN_ONLY_OPERATION */ ]: "admin-restricted-operation" /* ADMIN_ONLY_OPERATION */ ,
    // Multi factor related errors.
    ["INVALID_MFA_PENDING_CREDENTIAL" /* INVALID_MFA_PENDING_CREDENTIAL */ ]: "invalid-multi-factor-session" /* INVALID_MFA_SESSION */ ,
    ["MFA_ENROLLMENT_NOT_FOUND" /* MFA_ENROLLMENT_NOT_FOUND */ ]: "multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */ ,
    ["MISSING_MFA_ENROLLMENT_ID" /* MISSING_MFA_ENROLLMENT_ID */ ]: "missing-multi-factor-info" /* MISSING_MFA_INFO */ ,
    ["MISSING_MFA_PENDING_CREDENTIAL" /* MISSING_MFA_PENDING_CREDENTIAL */ ]: "missing-multi-factor-session" /* MISSING_MFA_SESSION */ ,
    ["SECOND_FACTOR_EXISTS" /* SECOND_FACTOR_EXISTS */ ]: "second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */ ,
    ["SECOND_FACTOR_LIMIT_EXCEEDED" /* SECOND_FACTOR_LIMIT_EXCEEDED */ ]: "maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */ ,
    // Blocking functions related errors.
    ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* BLOCKING_FUNCTION_ERROR_RESPONSE */ ]: "internal-error" /* INTERNAL_ERROR */ 
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
function _addTidIfNecessary(auth, request) {
    if (auth.tenantId && !request.tenantId) return Object.assign(Object.assign({}, request), {
        tenantId: auth.tenantId
    });
    return request;
}
async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
    return _performFetchWithErrorHandling(auth, customErrorMap, async ()=>{
        let body = {};
        let params = {};
        if (request) {
            if (method === "GET" /* GET */ ) params = request;
            else body = {
                body: JSON.stringify(request)
            };
        }
        const query = _util.querystring(Object.assign({
            key: auth.config.apiKey
        }, params)).slice(1);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* CONTENT_TYPE */ ] = 'application/json';
        if (auth.languageCode) headers["X-Firebase-Locale" /* X_FIREBASE_LOCALE */ ] = auth.languageCode;
        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({
            method,
            headers,
            referrerPolicy: 'no-referrer'
        }, body));
    });
}
async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
    auth._canInitEmulator = false;
    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
    try {
        const networkTimeout = new NetworkTimeout(auth);
        const response = await Promise.race([
            fetchFn(),
            networkTimeout.promise
        ]);
        // If we've reached this point, the fetch succeeded and the networkTimeout
        // didn't throw; clear the network timeout delay so that Node won't hang
        networkTimeout.clearNetworkTimeout();
        const json = await response.json();
        if ('needConfirmation' in json) throw _makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */ , json);
        if (response.ok && !('errorMessage' in json)) return json;
        else {
            const errorMessage = response.ok ? json.errorMessage : json.error.message;
            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */ ) throw _makeTaggedError(auth, "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */ , json);
            else if (serverErrorCode === "EMAIL_EXISTS" /* EMAIL_EXISTS */ ) throw _makeTaggedError(auth, "email-already-in-use" /* EMAIL_EXISTS */ , json);
            const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, '-');
            if (serverErrorMessage) throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
            else _fail(auth, authError);
        }
    } catch (e) {
        if (e instanceof _util.FirebaseError) throw e;
        _fail(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ );
    }
}
async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);
    if ('mfaPendingCredential' in serverResponse) _fail(auth, "multi-factor-auth-required" /* MFA_REQUIRED */ , {
        _serverResponse: serverResponse
    });
    return serverResponse;
}
function _getFinalTarget(auth, host, path, query) {
    const base = `${host}${path}?${query}`;
    if (!auth.config.emulator) return `${auth.config.apiScheme}://${base}`;
    return _emulatorUrl(auth.config, base);
}
class NetworkTimeout {
    constructor(auth){
        this.auth = auth;
        // Node timers and browser timers are fundamentally incompatible, but we
        // don't care about the value here
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timer = null;
        this.promise = new Promise((_, reject)=>{
            this.timer = setTimeout(()=>{
                return reject(_createError(this.auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
            }, DEFAULT_API_TIMEOUT_MS.get());
        });
    }
    clearNetworkTimeout() {
        clearTimeout(this.timer);
    }
}
function _makeTaggedError(auth, code, response) {
    const errorParams = {
        appName: auth.name
    };
    if (response.email) errorParams.email = response.email;
    if (response.phoneNumber) errorParams.phoneNumber = response.phoneNumber;
    const error = _createError(auth, code, errorParams);
    // We know customData is defined on error because errorParams is defined
    error.customData._tokenResponse = response;
    return error;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function deleteAccount(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:delete" /* DELETE_ACCOUNT */ , request);
}
async function deleteLinkedAccounts(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , request);
}
async function getAccountInfo(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:lookup" /* GET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function utcTimestampToDateString(utcTimestamp) {
    if (!utcTimestamp) return undefined;
    try {
        // Convert to date object.
        const date = new Date(Number(utcTimestamp));
        // Test date is valid.
        if (!isNaN(date.getTime())) // Convert to UTC date string.
        return date.toUTCString();
    } catch (e) {
    // Do nothing. undefined will be returned.
    }
    return undefined;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ function getIdToken(user, forceRefresh = false) {
    return _util.getModularInstance(user).getIdToken(forceRefresh);
}
/**
 * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ async function getIdTokenResult(user, forceRefresh = false) {
    const userInternal = _util.getModularInstance(user);
    const token = await userInternal.getIdToken(forceRefresh);
    const claims = _parseToken(token);
    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* INTERNAL_ERROR */ );
    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
    return {
        claims,
        token,
        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
        signInProvider: signInProvider || null,
        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
    };
}
function secondsStringToMilliseconds(seconds) {
    return Number(seconds) * 1000;
}
function _parseToken(token) {
    const [algorithm, payload, signature] = token.split('.');
    if (algorithm === undefined || payload === undefined || signature === undefined) {
        _logError('JWT malformed, contained fewer than 3 sections');
        return null;
    }
    try {
        const decoded = _util.base64Decode(payload);
        if (!decoded) {
            _logError('Failed to decode base64 JWT payload');
            return null;
        }
        return JSON.parse(decoded);
    } catch (e) {
        _logError('Caught error parsing JWT payload as JSON', e);
        return null;
    }
}
/**
 * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
 */ function _tokenExpiresIn(token) {
    const parsedToken = _parseToken(token);
    _assert(parsedToken, "internal-error" /* INTERNAL_ERROR */ );
    _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* INTERNAL_ERROR */ );
    _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* INTERNAL_ERROR */ );
    return Number(parsedToken.exp) - Number(parsedToken.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
    if (bypassAuthState) return promise;
    try {
        return await promise;
    } catch (e) {
        if (e instanceof _util.FirebaseError && isUserInvalidated(e)) {
            if (user.auth.currentUser === user) await user.auth.signOut();
        }
        throw e;
    }
}
function isUserInvalidated({ code  }) {
    return code === `auth/${"user-disabled" /* USER_DISABLED */ }` || code === `auth/${"user-token-expired" /* TOKEN_EXPIRED */ }`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ProactiveRefresh {
    constructor(user){
        this.user = user;
        this.isRunning = false;
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timerId = null;
        this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */ ;
    }
    _start() {
        if (this.isRunning) return;
        this.isRunning = true;
        this.schedule();
    }
    _stop() {
        if (!this.isRunning) return;
        this.isRunning = false;
        if (this.timerId !== null) clearTimeout(this.timerId);
    }
    getInterval(wasError) {
        var _a;
        if (wasError) {
            const interval = this.errorBackoff;
            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* RETRY_BACKOFF_MAX */ );
            return interval;
        } else {
            // Reset the error backoff
            this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */ ;
            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
            const interval = expTime - Date.now() - 300000 /* OFFSET */ ;
            return Math.max(0, interval);
        }
    }
    schedule(wasError = false) {
        if (!this.isRunning) // Just in case...
        return;
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(async ()=>{
            await this.iteration();
        }, interval);
    }
    async iteration() {
        try {
            await this.user.getIdToken(true);
        } catch (e) {
            // Only retry on network errors
            if (e.code === `auth/${"network-request-failed" /* NETWORK_REQUEST_FAILED */ }`) this.schedule(/* wasError */ true);
            return;
        }
        this.schedule();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class UserMetadata {
    constructor(createdAt, lastLoginAt){
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
    }
    _initializeTime() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
    }
    _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
    }
    toJSON() {
        return {
            createdAt: this.createdAt,
            lastLoginAt: this.lastLoginAt
        };
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _reloadWithoutSaving(user) {
    var _a;
    const auth = user.auth;
    const idToken = await user.getIdToken();
    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {
        idToken
    }));
    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* INTERNAL_ERROR */ );
    const coreAccount = response.users[0];
    user._notifyReloadListener(coreAccount);
    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
    const providerData = mergeProviderData(user.providerData, newProviderData);
    // Preserves the non-nonymous status of the stored user, even if no more
    // credentials (federated or email/password) are linked to the user. If
    // the user was previously anonymous, then use provider data to update.
    // On the other hand, if it was not anonymous before, it should never be
    // considered anonymous now.
    const oldIsAnonymous = user.isAnonymous;
    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
    const updates = {
        uid: coreAccount.localId,
        displayName: coreAccount.displayName || null,
        photoURL: coreAccount.photoUrl || null,
        email: coreAccount.email || null,
        emailVerified: coreAccount.emailVerified || false,
        phoneNumber: coreAccount.phoneNumber || null,
        tenantId: coreAccount.tenantId || null,
        providerData,
        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
        isAnonymous
    };
    Object.assign(user, updates);
}
/**
 * Reloads user account data, if signed in.
 *
 * @param user - The user.
 *
 * @public
 */ async function reload(user) {
    const userInternal = _util.getModularInstance(user);
    await _reloadWithoutSaving(userInternal);
    // Even though the current user hasn't changed, update
    // current user will trigger a persistence update w/ the
    // new info.
    await userInternal.auth._persistUserIfCurrent(userInternal);
    userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function mergeProviderData(original, newData) {
    const deduped = original.filter((o)=>!newData.some((n)=>n.providerId === o.providerId
        )
    );
    return [
        ...deduped,
        ...newData
    ];
}
function extractProviderData(providers) {
    return providers.map((_a)=>{
        var { providerId  } = _a, provider = _tslib.__rest(_a, [
            "providerId"
        ]);
        return {
            providerId,
            uid: provider.rawId || '',
            displayName: provider.displayName || null,
            email: provider.email || null,
            phoneNumber: provider.phoneNumber || null,
            photoURL: provider.photoUrl || null
        };
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function requestStsToken(auth, refreshToken) {
    const response = await _performFetchWithErrorHandling(auth, {}, async ()=>{
        const body = _util.querystring({
            'grant_type': 'refresh_token',
            'refresh_token': refreshToken
        }).slice(1);
        const { tokenApiHost , apiKey  } = auth.config;
        const url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* TOKEN */ , `key=${apiKey}`);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* CONTENT_TYPE */ ] = 'application/x-www-form-urlencoded';
        return FetchProvider.fetch()(url, {
            method: "POST" /* POST */ ,
            headers,
            body
        });
    });
    // The response comes back in snake_case. Convert to camel:
    return {
        accessToken: response.access_token,
        expiresIn: response.expires_in,
        refreshToken: response.refresh_token
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * We need to mark this class as internal explicitly to exclude it in the public typings, because
 * it references AuthInternal which has a circular dependency with UserInternal.
 *
 * @internal
 */ class StsTokenManager {
    constructor(){
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
    }
    get isExpired() {
        return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* TOKEN_REFRESH */ ;
    }
    updateFromServerResponse(response) {
        _assert(response.idToken, "internal-error" /* INTERNAL_ERROR */ );
        _assert(typeof response.idToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */ );
        _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */ );
        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
    }
    async getToken(auth, forceRefresh = false) {
        _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired" /* TOKEN_EXPIRED */ );
        if (!forceRefresh && this.accessToken && !this.isExpired) return this.accessToken;
        if (this.refreshToken) {
            await this.refresh(auth, this.refreshToken);
            return this.accessToken;
        }
        return null;
    }
    clearRefreshToken() {
        this.refreshToken = null;
    }
    async refresh(auth, oldToken) {
        const { accessToken , refreshToken , expiresIn  } = await requestStsToken(auth, oldToken);
        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
    }
    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1000;
    }
    static fromJSON(appName, object) {
        const { refreshToken , accessToken , expirationTime  } = object;
        const manager = new StsTokenManager();
        if (refreshToken) {
            _assert(typeof refreshToken === 'string', "internal-error" /* INTERNAL_ERROR */ , {
                appName
            });
            manager.refreshToken = refreshToken;
        }
        if (accessToken) {
            _assert(typeof accessToken === 'string', "internal-error" /* INTERNAL_ERROR */ , {
                appName
            });
            manager.accessToken = accessToken;
        }
        if (expirationTime) {
            _assert(typeof expirationTime === 'number', "internal-error" /* INTERNAL_ERROR */ , {
                appName
            });
            manager.expirationTime = expirationTime;
        }
        return manager;
    }
    toJSON() {
        return {
            refreshToken: this.refreshToken,
            accessToken: this.accessToken,
            expirationTime: this.expirationTime
        };
    }
    _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
    }
    _clone() {
        return Object.assign(new StsTokenManager(), this.toJSON());
    }
    _performRefresh() {
        return debugFail('not implemented');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function assertStringOrUndefined(assertion, appName) {
    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* INTERNAL_ERROR */ , {
        appName
    });
}
class UserImpl {
    constructor(_a){
        var { uid , auth , stsTokenManager  } = _a, opt = _tslib.__rest(_a, [
            "uid",
            "auth",
            "stsTokenManager"
        ]);
        // For the user object, provider is always Firebase.
        this.providerId = "firebase" /* FIREBASE */ ;
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [
            ...opt.providerData
        ] : [];
        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
    }
    async getIdToken(forceRefresh) {
        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
        _assert(accessToken, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        if (this.accessToken !== accessToken) {
            this.accessToken = accessToken;
            await this.auth._persistUserIfCurrent(this);
            this.auth._notifyListenersIfCurrent(this);
        }
        return accessToken;
    }
    getIdTokenResult(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
    }
    reload() {
        return reload(this);
    }
    _assign(user) {
        if (this === user) return;
        _assert(this.uid === user.uid, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map((userInfo)=>Object.assign({}, userInfo)
        );
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
    }
    _clone(auth) {
        return new UserImpl(Object.assign(Object.assign({}, this), {
            auth,
            stsTokenManager: this.stsTokenManager._clone()
        }));
    }
    _onReload(callback) {
        // There should only ever be one listener, and that is a single instance of MultiFactorUser
        _assert(!this.reloadListener, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
            this._notifyReloadListener(this.reloadUserInfo);
            this.reloadUserInfo = null;
        }
    }
    _notifyReloadListener(userInfo) {
        if (this.reloadListener) this.reloadListener(userInfo);
        else // If no listener is subscribed yet, save the result so it's available when they do subscribe
        this.reloadUserInfo = userInfo;
    }
    _startProactiveRefresh() {
        this.proactiveRefresh._start();
    }
    _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
    }
    async _updateTokensIfNecessary(response, reload1 = false) {
        let tokensRefreshed = false;
        if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
            this.stsTokenManager.updateFromServerResponse(response);
            tokensRefreshed = true;
        }
        if (reload1) await _reloadWithoutSaving(this);
        await this.auth._persistUserIfCurrent(this);
        if (tokensRefreshed) this.auth._notifyListenersIfCurrent(this);
    }
    async delete() {
        const idToken = await this.getIdToken();
        await _logoutIfInvalidated(this, deleteAccount(this.auth, {
            idToken
        }));
        this.stsTokenManager.clearRefreshToken();
        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
        //       cancels pending actions...
        return this.auth.signOut();
    }
    toJSON() {
        return Object.assign(Object.assign({
            uid: this.uid,
            email: this.email || undefined,
            emailVerified: this.emailVerified,
            displayName: this.displayName || undefined,
            isAnonymous: this.isAnonymous,
            photoURL: this.photoURL || undefined,
            phoneNumber: this.phoneNumber || undefined,
            tenantId: this.tenantId || undefined,
            providerData: this.providerData.map((userInfo)=>Object.assign({}, userInfo)
            ),
            stsTokenManager: this.stsTokenManager.toJSON(),
            // Redirect event ID must be maintained in case there is a pending
            // redirect event.
            _redirectEventId: this._redirectEventId
        }, this.metadata.toJSON()), {
            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
            apiKey: this.auth.config.apiKey,
            appName: this.auth.name
        });
    }
    get refreshToken() {
        return this.stsTokenManager.refreshToken || '';
    }
    static _fromJSON(auth, object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
        const { uid , emailVerified , isAnonymous , providerData , stsTokenManager: plainObjectTokenManager  } = object;
        _assert(uid && plainObjectTokenManager, auth, "internal-error" /* INTERNAL_ERROR */ );
        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(typeof uid === 'string', auth, "internal-error" /* INTERNAL_ERROR */ );
        assertStringOrUndefined(displayName, auth.name);
        assertStringOrUndefined(email, auth.name);
        _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */ );
        _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */ );
        assertStringOrUndefined(phoneNumber, auth.name);
        assertStringOrUndefined(photoURL, auth.name);
        assertStringOrUndefined(tenantId, auth.name);
        assertStringOrUndefined(_redirectEventId, auth.name);
        assertStringOrUndefined(createdAt, auth.name);
        assertStringOrUndefined(lastLoginAt, auth.name);
        const user = new UserImpl({
            uid,
            auth,
            email,
            emailVerified,
            displayName,
            isAnonymous,
            photoURL,
            phoneNumber,
            tenantId,
            stsTokenManager,
            createdAt,
            lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) user.providerData = providerData.map((userInfo)=>Object.assign({}, userInfo)
        );
        if (_redirectEventId) user._redirectEventId = _redirectEventId;
        return user;
    }
    /**
     * Initialize a User from an idToken server response
     * @param auth
     * @param idTokenResponse
     */ static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromServerResponse(idTokenResponse);
        // Initialize the Firebase Auth user.
        const user = new UserImpl({
            uid: idTokenResponse.localId,
            auth,
            stsTokenManager,
            isAnonymous
        });
        // Updates the user info and data and resolves with a user instance.
        await _reloadWithoutSaving(user);
        return user;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class InMemoryPersistence {
    constructor(){
        this.type = "NONE" /* NONE */ ;
        this.storage = {};
    }
    async _isAvailable() {
        return true;
    }
    async _set(key, value) {
        this.storage[key] = value;
    }
    async _get(key) {
        const value = this.storage[key];
        return value === undefined ? null : value;
    }
    async _remove(key) {
        delete this.storage[key];
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
}
InMemoryPersistence.type = 'NONE';
/**
 * An implementation of {@link Persistence} of type 'NONE'.
 *
 * @public
 */ const inMemoryPersistence = InMemoryPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _persistenceKeyName(key, apiKey, appName) {
    return `${"firebase" /* PERSISTENCE */ }:${key}:${apiKey}:${appName}`;
}
class PersistenceUserManager {
    constructor(persistence, auth, userKey){
        this.persistence = persistence;
        this.auth = auth;
        this.userKey = userKey;
        const { config , name: name1  } = this.auth;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name1);
        this.fullPersistenceKey = _persistenceKeyName("persistence" /* PERSISTENCE_USER */ , config.apiKey, name1);
        this.boundEventHandler = auth._onStorageEvent.bind(auth);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
    }
    setCurrentUser(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
    }
    async getCurrentUser() {
        const blob = await this.persistence._get(this.fullUserKey);
        return blob ? UserImpl._fromJSON(this.auth, blob) : null;
    }
    removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
    }
    savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
    }
    async setPersistence(newPersistence) {
        if (this.persistence === newPersistence) return;
        const currentUser = await this.getCurrentUser();
        await this.removeCurrentUser();
        this.persistence = newPersistence;
        if (currentUser) return this.setCurrentUser(currentUser);
    }
    delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
    }
    static async create(auth, persistenceHierarchy, userKey = "authUser" /* AUTH_USER */ ) {
        if (!persistenceHierarchy.length) return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
        // Eliminate any persistences that are not available
        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (await persistence._isAvailable()) return persistence;
            return undefined;
        }))).filter((persistence)=>persistence
        );
        // Fall back to the first persistence listed, or in memory if none available
        let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
        // Pull out the existing user, setting the chosen persistence to that
        // persistence if the user exists.
        let userToMigrate = null;
        // Note, here we check for a user in _all_ persistences, not just the
        // ones deemed available. If we can migrate a user out of a broken
        // persistence, we will (but only if that persistence supports migration).
        for (const persistence1 of persistenceHierarchy)try {
            const blob = await persistence1._get(key);
            if (blob) {
                const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                if (persistence1 !== selectedPersistence) userToMigrate = user;
                selectedPersistence = persistence1;
                break;
            }
        } catch (_a) {}
        // If we find the user in a persistence that does support migration, use
        // that migration path (of only persistences that support migration)
        const migrationHierarchy = availablePersistences.filter((p)=>p._shouldAllowMigration
        );
        // If the persistence does _not_ allow migration, just finish off here
        if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) return new PersistenceUserManager(selectedPersistence, auth, userKey);
        selectedPersistence = migrationHierarchy[0];
        if (userToMigrate) // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
        // we'll just let it bubble to surface the error.
        await selectedPersistence._set(key, userToMigrate.toJSON());
        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
        // such as users getting stuck with a previous account after signing out and refreshing the tab.
        await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (persistence !== selectedPersistence) try {
                await persistence._remove(key);
            } catch (_a) {}
        }));
        return new PersistenceUserManager(selectedPersistence, auth, userKey);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine the browser for the purposes of reporting usage to the API
 */ function _getBrowserName(userAgent) {
    const ua = userAgent.toLowerCase();
    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) return "Opera" /* OPERA */ ;
    else if (_isIEMobile(ua)) // Windows phone IEMobile browser.
    return "IEMobile" /* IEMOBILE */ ;
    else if (ua.includes('msie') || ua.includes('trident/')) return "IE" /* IE */ ;
    else if (ua.includes('edge/')) return "Edge" /* EDGE */ ;
    else if (_isFirefox(ua)) return "Firefox" /* FIREFOX */ ;
    else if (ua.includes('silk/')) return "Silk" /* SILK */ ;
    else if (_isBlackBerry(ua)) // Blackberry browser.
    return "Blackberry" /* BLACKBERRY */ ;
    else if (_isWebOS(ua)) // WebOS default browser.
    return "Webos" /* WEBOS */ ;
    else if (_isSafari(ua)) return "Safari" /* SAFARI */ ;
    else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) return "Chrome" /* CHROME */ ;
    else if (_isAndroid(ua)) // Android stock browser.
    return "Android" /* ANDROID */ ;
    else {
        // Most modern browsers have name/version at end of user agent string.
        const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        const matches = userAgent.match(re);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) return matches[1];
    }
    return "Other" /* OTHER */ ;
}
function _isFirefox(ua = _util.getUA()) {
    return /firefox\//i.test(ua);
}
function _isSafari(userAgent = _util.getUA()) {
    const ua = userAgent.toLowerCase();
    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');
}
function _isChromeIOS(ua = _util.getUA()) {
    return /crios\//i.test(ua);
}
function _isIEMobile(ua = _util.getUA()) {
    return /iemobile/i.test(ua);
}
function _isAndroid(ua = _util.getUA()) {
    return /android/i.test(ua);
}
function _isBlackBerry(ua = _util.getUA()) {
    return /blackberry/i.test(ua);
}
function _isWebOS(ua = _util.getUA()) {
    return /webos/i.test(ua);
}
function _isIOS(ua = _util.getUA()) {
    return /iphone|ipad|ipod/i.test(ua);
}
function _isIOS7Or8(ua = _util.getUA()) {
    return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
}
function _isIOSStandalone(ua = _util.getUA()) {
    var _a;
    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
}
function _isIE10() {
    return _util.isIE() && document.documentMode === 10;
}
function _isMobileBrowser(ua = _util.getUA()) {
    // TODO: implement getBrowserName equivalent for OS.
    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
}
function _isIframe() {
    try {
        // Check that the current window is not the top window.
        // If so, return true.
        return !!(window && window !== window.top);
    } catch (e) {
        return false;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Determine the SDK version string
 */ function _getClientVersion(clientPlatform, frameworks = []) {
    let reportedPlatform;
    switch(clientPlatform){
        case "Browser" /* BROWSER */ :
            // In a browser environment, report the browser name.
            reportedPlatform = _getBrowserName(_util.getUA());
            break;
        case "Worker" /* WORKER */ :
            // Technically a worker runs from a browser but we need to differentiate a
            // worker from a browser.
            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
            reportedPlatform = `${_getBrowserName(_util.getUA())}-${clientPlatform}`;
            break;
        default:
            reportedPlatform = clientPlatform;
    }
    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */ 
    return `${reportedPlatform}/${"JsCore" /* CORE */ }/${_app.SDK_VERSION}/${reportedFrameworks}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthImpl {
    constructor(app, heartbeatServiceProvider, config){
        this.app = app;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        // Any network calls will set this to true and prevent subsequent emulator
        // initialization
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        // Tracks the last notified UID for state change listeners to prevent
        // repeated calls to the callbacks. Undefined means it's never been
        // called, whereas null means it's been called with a signed out user
        this.lastNotifiedUid = undefined;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = {
            appVerificationDisabledForTesting: false
        };
        this.frameworks = [];
        this.name = app.name;
        this.clientVersion = config.sdkClientVersion;
    }
    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        // Have to check for app deletion throughout initialization (after each
        // promise resolution)
        this._initializationPromise = this.queue(async ()=>{
            var _a, _b;
            if (this._deleted) return;
            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
            if (this._deleted) return;
            // Initialize the resolver early if necessary (only applicable to web:
            // this will cause the iframe to load immediately in certain cases)
            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) // If this fails, don't halt auth loading
            try {
                await this._popupRedirectResolver._initialize(this);
            } catch (e) {}
            await this.initializeCurrentUser(popupRedirectResolver);
            this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
            if (this._deleted) return;
            this._isInitialized = true;
        });
        return this._initializationPromise;
    }
    /**
     * If the persistence is changed in another window, the user manager will let us know
     */ async _onStorageEvent() {
        if (this._deleted) return;
        const user = await this.assertedPersistence.getCurrentUser();
        if (!this.currentUser && !user) // No change, do nothing (was signed out and remained signed out).
        return;
        // If the same user is to be synchronized.
        if (this.currentUser && user && this.currentUser.uid === user.uid) {
            // Data update, simply copy data changes.
            this._currentUser._assign(user);
            // If tokens changed from previous user tokens, this will trigger
            // notifyAuthListeners_.
            await this.currentUser.getIdToken();
            return;
        }
        // Update current Auth state. Either a new login or logout.
        await this._updateCurrentUser(user);
    }
    async initializeCurrentUser(popupRedirectResolver) {
        var _a;
        // First check to see if we have a pending redirect event.
        let storedUser = await this.assertedPersistence.getCurrentUser();
        if (popupRedirectResolver && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
            const storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;
            const result = await this.tryRedirectSignIn(popupRedirectResolver);
            // If the stored user (i.e. the old "currentUser") has a redirectId that
            // matches the redirect user, then we want to initially sign in with the
            // new user object from result.
            // TODO(samgho): More thoroughly test all of this
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) storedUser = result.user;
        }
        // If no user in persistence, there is no current user. Set to null.
        if (!storedUser) return this.directlySetCurrentUser(null);
        if (!storedUser._redirectEventId) // This isn't a redirect user, we can reload and bail
        // This will also catch the redirected user, if available, as that method
        // strips the _redirectEventId
        return this.reloadAndSetCurrentUserOrClear(storedUser);
        _assert(this._popupRedirectResolver, this, "argument-error" /* ARGUMENT_ERROR */ );
        await this.getOrInitRedirectPersistenceManager();
        // If the redirect user's event ID matches the current user's event ID,
        // DO NOT reload the current user, otherwise they'll be cleared from storage.
        // This is important for the reauthenticateWithRedirect() flow.
        if (this.redirectUser && this.redirectUser._redirectEventId === storedUser._redirectEventId) return this.directlySetCurrentUser(storedUser);
        return this.reloadAndSetCurrentUserOrClear(storedUser);
    }
    async tryRedirectSignIn(redirectResolver) {
        // The redirect user needs to be checked (and signed in if available)
        // during auth initialization. All of the normal sign in and link/reauth
        // flows call back into auth and push things onto the promise queue. We
        // need to await the result of the redirect sign in *inside the promise
        // queue*. This presents a problem: we run into deadlock. See:
        //    ┌> [Initialization] ─────┐
        //    ┌> [<other queue tasks>] │
        //    └─ [getRedirectResult] <─┘
        //    where [] are tasks on the queue and arrows denote awaits
        // Initialization will never complete because it's waiting on something
        // that's waiting for initialization to complete!
        //
        // Instead, this method calls getRedirectResult() (stored in
        // _completeRedirectFn) with an optional parameter that instructs all of
        // the underlying auth operations to skip anything that mutates auth state.
        let result = null;
        try {
            // We know this._popupRedirectResolver is set since redirectResolver
            // is passed in. The _completeRedirectFn expects the unwrapped extern.
            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
        } catch (e) {
            // Swallow any errors here; the code can retrieve them in
            // getRedirectResult().
            await this._setRedirectUser(null);
        }
        return result;
    }
    async reloadAndSetCurrentUserOrClear(user) {
        try {
            await _reloadWithoutSaving(user);
        } catch (e) {
            if (e.code !== `auth/${"network-request-failed" /* NETWORK_REQUEST_FAILED */ }`) // Something's wrong with the user's token. Log them out and remove
            // them from storage
            return this.directlySetCurrentUser(null);
        }
        return this.directlySetCurrentUser(user);
    }
    useDeviceLanguage() {
        this.languageCode = _getUserLanguage();
    }
    async _delete() {
        this._deleted = true;
    }
    async updateCurrentUser(userExtern) {
        // The public updateCurrentUser method needs to make a copy of the user,
        // and also check that the project matches
        const user = userExtern ? _util.getModularInstance(userExtern) : null;
        if (user) _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* INVALID_AUTH */ );
        return this._updateCurrentUser(user && user._clone(this));
    }
    async _updateCurrentUser(user) {
        if (this._deleted) return;
        if (user) _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */ );
        return this.queue(async ()=>{
            await this.directlySetCurrentUser(user);
            this.notifyAuthListeners();
        });
    }
    async signOut() {
        // Clear the redirect user when signOut is called
        if (this.redirectPersistenceManager || this._popupRedirectResolver) await this._setRedirectUser(null);
        return this._updateCurrentUser(null);
    }
    setPersistence(persistence) {
        return this.queue(async ()=>{
            await this.assertedPersistence.setPersistence(_getInstance(persistence));
        });
    }
    _getPersistence() {
        return this.assertedPersistence.persistence.type;
    }
    _updateErrorMap(errorMap) {
        this._errorFactory = new _util.ErrorFactory('auth', 'Firebase', errorMap());
    }
    onAuthStateChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
    }
    onIdTokenChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
    }
    toJSON() {
        var _a;
        return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
    }
    async _setRedirectUser(user, popupRedirectResolver) {
        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
        return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
    }
    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        if (!this.redirectPersistenceManager) {
            const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
            _assert(resolver, this, "argument-error" /* ARGUMENT_ERROR */ );
            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [
                _getInstance(resolver._redirectPersistence)
            ], "redirectUser" /* REDIRECT_USER */ );
            this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
        }
        return this.redirectPersistenceManager;
    }
    async _redirectUserForId(id) {
        var _a, _b;
        // Make sure we've cleared any pending persistence actions if we're not in
        // the initializer
        if (this._isInitialized) await this.queue(async ()=>{});
        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) return this._currentUser;
        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) return this.redirectUser;
        return null;
    }
    async _persistUserIfCurrent(user) {
        if (user === this.currentUser) return this.queue(async ()=>this.directlySetCurrentUser(user)
        );
    }
    /** Notifies listeners only if the user is current */ _notifyListenersIfCurrent(user) {
        if (user === this.currentUser) this.notifyAuthListeners();
    }
    _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
    }
    _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) this._currentUser._startProactiveRefresh();
    }
    _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) this._currentUser._stopProactiveRefresh();
    }
    /** Returns the current user cast as the internal type */ get _currentUser() {
        return this.currentUser;
    }
    notifyAuthListeners() {
        var _a, _b;
        if (!this._isInitialized) return;
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
            this.lastNotifiedUid = currentUid;
            this.authStateSubscription.next(this.currentUser);
        }
    }
    registerStateListener(subscription, nextOrObserver, error, completed) {
        if (this._deleted) return ()=>{};
        const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
        const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        _assert(promise, this, "internal-error" /* INTERNAL_ERROR */ );
        // The callback needs to be called asynchronously per the spec.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        promise.then(()=>cb(this.currentUser)
        );
        if (typeof nextOrObserver === 'function') return subscription.addObserver(nextOrObserver, error, completed);
        else return subscription.addObserver(nextOrObserver);
    }
    /**
     * Unprotected (from race conditions) method to set the current user. This
     * should only be called from within a queued callback. This is necessary
     * because the queue shouldn't rely on another queued callback.
     */ async directlySetCurrentUser(user) {
        if (this.currentUser && this.currentUser !== user) {
            this._currentUser._stopProactiveRefresh();
            if (user && this.isProactiveRefreshEnabled) user._startProactiveRefresh();
        }
        this.currentUser = user;
        if (user) await this.assertedPersistence.setCurrentUser(user);
        else await this.assertedPersistence.removeCurrentUser();
    }
    queue(action) {
        // In case something errors, the callback still should be called in order
        // to keep the promise chain alive
        this.operations = this.operations.then(action, action);
        return this.operations;
    }
    get assertedPersistence() {
        _assert(this.persistenceManager, this, "internal-error" /* INTERNAL_ERROR */ );
        return this.persistenceManager;
    }
    _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) return;
        this.frameworks.push(framework);
        // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
        // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
    }
    _getFrameworks() {
        return this.frameworks;
    }
    async _getAdditionalHeaders() {
        var _a;
        // Additional headers on every request
        const headers = {
            ["X-Client-Version" /* X_CLIENT_VERSION */ ]: this.clientVersion
        };
        if (this.app.options.appId) headers["X-Firebase-gmpid" /* X_FIREBASE_GMPID */ ] = this.app.options.appId;
        // If the heartbeat service exists, add the heartbeat string
        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({
            optional: true
        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
        if (heartbeatsHeader) headers["X-Firebase-Client" /* X_FIREBASE_CLIENT */ ] = heartbeatsHeader;
        return headers;
    }
}
/**
 * Method to be used to cast down to our private implmentation of Auth.
 * It will also handle unwrapping from the compat type if necessary
 *
 * @param auth Auth object passed in from developer
 */ function _castAuth(auth) {
    return _util.getModularInstance(auth);
}
/** Helper class to wrap subscriber logic */ class Subscription {
    constructor(auth){
        this.auth = auth;
        this.observer = null;
        this.addObserver = _util.createSubscribe((observer)=>this.observer = observer
        );
    }
    get next() {
        _assert(this.observer, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        return this.observer.next.bind(this.observer);
    }
}
/**
 * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
 * Firebase Auth services.
 *
 * @remarks
 * This must be called synchronously immediately following the first call to
 * {@link initializeAuth}.  Do not use with production credentials as emulator
 * traffic is not encrypted.
 *
 *
 * @example
 * ```javascript
 * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
 * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
 * `true` to disable the warning banner attached to the DOM.
 *
 * @public
 */ function connectAuthEmulator(auth, url, options) {
    const authInternal = _castAuth(auth);
    _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed" /* EMULATOR_CONFIG_FAILED */ );
    _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */ );
    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
    const protocol = extractProtocol(url);
    const { host , port  } = extractHostAndPort(url);
    const portStr = port === null ? '' : `:${port}`;
    // Always replace path with "/" (even if input url had no path at all, or had a different one).
    authInternal.config.emulator = {
        url: `${protocol}//${host}${portStr}/`
    };
    authInternal.settings.appVerificationDisabledForTesting = true;
    authInternal.emulatorConfig = Object.freeze({
        host,
        port,
        protocol: protocol.replace(':', ''),
        options: Object.freeze({
            disableWarnings
        })
    });
    if (!disableWarnings) emitEmulatorWarning();
}
function extractProtocol(url) {
    const protocolEnd = url.indexOf(':');
    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
}
function extractHostAndPort(url) {
    const protocol = extractProtocol(url);
    const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
    if (!authority) return {
        host: '',
        port: null
    };
    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".
    const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
    if (bracketedIPv6) {
        const host = bracketedIPv6[1];
        return {
            host,
            port: parsePort(hostAndPort.substr(host.length + 1))
        };
    } else {
        const [host, port] = hostAndPort.split(':');
        return {
            host,
            port: parsePort(port)
        };
    }
}
function parsePort(portStr) {
    if (!portStr) return null;
    const port = Number(portStr);
    if (isNaN(port)) return null;
    return port;
}
function emitEmulatorWarning() {
    function attachBanner() {
        const el = document.createElement('p');
        const sty = el.style;
        el.innerText = 'Running in emulator mode. Do not use with production credentials.';
        sty.position = 'fixed';
        sty.width = '100%';
        sty.backgroundColor = '#ffffff';
        sty.border = '.1em solid #000000';
        sty.color = '#b50000';
        sty.bottom = '0px';
        sty.left = '0px';
        sty.margin = '0px';
        sty.zIndex = '10000';
        sty.textAlign = 'center';
        el.classList.add('firebase-emulator-warning');
        document.body.appendChild(el);
    }
    if (typeof console !== 'undefined' && typeof console.info === 'function') console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
        if (document.readyState === 'loading') window.addEventListener('DOMContentLoaded', attachBanner);
        else attachBanner();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by an {@link AuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class AuthCredential {
    /** @internal */ constructor(/**
     * The authentication provider ID for the credential.
     *
     * @remarks
     * For example, 'facebook.com', or 'google.com'.
     */ providerId, /**
     * The authentication sign in method for the credential.
     *
     * @remarks
     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
     * identifier as returned in {@link fetchSignInMethodsForEmail}.
     */ signInMethod){
        this.providerId = providerId;
        this.signInMethod = signInMethod;
    }
    /**
     * Returns a JSON-serializable representation of this object.
     *
     * @returns a JSON-serializable representation of this object.
     */ toJSON() {
        return debugFail('not implemented');
    }
    /** @internal */ _getIdTokenResponse(_auth) {
        return debugFail('not implemented');
    }
    /** @internal */ _linkToIdToken(_auth, _idToken) {
        return debugFail('not implemented');
    }
    /** @internal */ _getReauthenticationResolver(_auth) {
        return debugFail('not implemented');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function resetPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:resetPassword" /* RESET_PASSWORD */ , _addTidIfNecessary(auth, request));
}
async function updateEmailPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , request);
}
async function applyActionCode$1(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithPassword(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPassword" /* SIGN_IN_WITH_PASSWORD */ , _addTidIfNecessary(auth, request));
}
async function sendOobCode(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:sendOobCode" /* SEND_OOB_CODE */ , _addTidIfNecessary(auth, request));
}
async function sendEmailVerification$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendPasswordResetEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendSignInLinkToEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function verifyAndChangeEmail(auth, request) {
    return sendOobCode(auth, request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithEmailLink$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */ , _addTidIfNecessary(auth, request));
}
async function signInWithEmailLinkForLinking(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by {@link EmailAuthProvider} for
 * {@link ProviderId}.PASSWORD
 *
 * @remarks
 * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @public
 */ class EmailAuthCredential extends AuthCredential {
    /** @internal */ constructor(/** @internal */ _email, /** @internal */ _password, signInMethod, /** @internal */ _tenantId = null){
        super("password" /* PASSWORD */ , signInMethod);
        this._email = _email;
        this._password = _password;
        this._tenantId = _tenantId;
    }
    /** @internal */ static _fromEmailAndPassword(email, password) {
        return new EmailAuthCredential(email, password, "password" /* EMAIL_PASSWORD */ );
    }
    /** @internal */ static _fromEmailAndCode(email, oobCode, tenantId = null) {
        return new EmailAuthCredential(email, oobCode, "emailLink" /* EMAIL_LINK */ , tenantId);
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        return {
            email: this._email,
            password: this._password,
            signInMethod: this.signInMethod,
            tenantId: this._tenantId
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
     *
     * @param json - Either `object` or the stringified representation of the object. When string is
     * provided, `JSON.parse` would be called first.
     *
     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
            if (obj.signInMethod === "password" /* EMAIL_PASSWORD */ ) return this._fromEmailAndPassword(obj.email, obj.password);
            else if (obj.signInMethod === "emailLink" /* EMAIL_LINK */ ) return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
        }
        return null;
    }
    /** @internal */ async _getIdTokenResponse(auth) {
        switch(this.signInMethod){
            case "password" /* EMAIL_PASSWORD */ :
                return signInWithPassword(auth, {
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password
                });
            case "emailLink" /* EMAIL_LINK */ :
                return signInWithEmailLink$1(auth, {
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
        }
    }
    /** @internal */ async _linkToIdToken(auth, idToken) {
        switch(this.signInMethod){
            case "password" /* EMAIL_PASSWORD */ :
                return updateEmailPassword(auth, {
                    idToken,
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password
                });
            case "emailLink" /* EMAIL_LINK */ :
                return signInWithEmailLinkForLinking(auth, {
                    idToken,
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
        }
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return this._getIdTokenResponse(auth);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithIdp(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithIdp" /* SIGN_IN_WITH_IDP */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IDP_REQUEST_URI$1 = 'http://localhost';
/**
 * Represents the OAuth credentials returned by an {@link OAuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class OAuthCredential extends AuthCredential {
    constructor(){
        super(...arguments);
        this.pendingToken = null;
    }
    /** @internal */ static _fromParams(params) {
        const cred = new OAuthCredential(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
            // OAuth 2 and either ID token or access token.
            if (params.idToken) cred.idToken = params.idToken;
            if (params.accessToken) cred.accessToken = params.accessToken;
            // Add nonce if available and no pendingToken is present.
            if (params.nonce && !params.pendingToken) cred.nonce = params.nonce;
            if (params.pendingToken) cred.pendingToken = params.pendingToken;
        } else if (params.oauthToken && params.oauthTokenSecret) {
            // OAuth 1 and OAuth token with token secret
            cred.accessToken = params.oauthToken;
            cred.secret = params.oauthTokenSecret;
        } else _fail("argument-error" /* ARGUMENT_ERROR */ );
        return cred;
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId , signInMethod  } = obj, rest = _tslib.__rest(obj, [
            "providerId",
            "signInMethod"
        ]);
        if (!providerId || !signInMethod) return null;
        const cred = new OAuthCredential(providerId, signInMethod);
        cred.idToken = rest.idToken || undefined;
        cred.accessToken = rest.accessToken || undefined;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    buildRequest() {
        const request = {
            requestUri: IDP_REQUEST_URI$1,
            returnSecureToken: true
        };
        if (this.pendingToken) request.pendingToken = this.pendingToken;
        else {
            const postBody = {};
            if (this.idToken) postBody['id_token'] = this.idToken;
            if (this.accessToken) postBody['access_token'] = this.accessToken;
            if (this.secret) postBody['oauth_token_secret'] = this.secret;
            postBody['providerId'] = this.providerId;
            if (this.nonce && !this.pendingToken) postBody['nonce'] = this.nonce;
            request.postBody = _util.querystring(postBody);
        }
        return request;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function sendPhoneVerificationCode(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:sendVerificationCode" /* SEND_VERIFICATION_CODE */ , _addTidIfNecessary(auth, request));
}
async function signInWithPhoneNumber$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, request));
}
async function linkWithPhoneNumber$1(auth, request) {
    const response = await _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, request));
    if (response.temporaryProof) throw _makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */ , response);
    return response;
}
const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
    ["USER_NOT_FOUND" /* USER_NOT_FOUND */ ]: "user-not-found" /* USER_DELETED */ 
};
async function verifyPhoneNumberForExisting(auth, request) {
    const apiRequest = Object.assign(Object.assign({}, request), {
        operation: 'REAUTH'
    });
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents the credentials returned by {@link PhoneAuthProvider}.
 *
 * @public
 */ class PhoneAuthCredential extends AuthCredential {
    constructor(params){
        super("phone" /* PHONE */ , "phone" /* PHONE */ );
        this.params = params;
    }
    /** @internal */ static _fromVerification(verificationId, verificationCode) {
        return new PhoneAuthCredential({
            verificationId,
            verificationCode
        });
    }
    /** @internal */ static _fromTokenResponse(phoneNumber, temporaryProof) {
        return new PhoneAuthCredential({
            phoneNumber,
            temporaryProof
        });
    }
    /** @internal */ _getIdTokenResponse(auth) {
        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        return linkWithPhoneNumber$1(auth, Object.assign({
            idToken
        }, this._makeVerificationRequest()));
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
    }
    /** @internal */ _makeVerificationRequest() {
        const { temporaryProof , phoneNumber , verificationId , verificationCode  } = this.params;
        if (temporaryProof && phoneNumber) return {
            temporaryProof,
            phoneNumber
        };
        return {
            sessionInfo: verificationId,
            code: verificationCode
        };
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        const obj = {
            providerId: this.providerId
        };
        if (this.params.phoneNumber) obj.phoneNumber = this.params.phoneNumber;
        if (this.params.temporaryProof) obj.temporaryProof = this.params.temporaryProof;
        if (this.params.verificationCode) obj.verificationCode = this.params.verificationCode;
        if (this.params.verificationId) obj.verificationId = this.params.verificationId;
        return obj;
    }
    /** Generates a phone credential based on a plain object or a JSON string. */ static fromJSON(json) {
        if (typeof json === 'string') json = JSON.parse(json);
        const { verificationId , verificationCode , phoneNumber , temporaryProof  } = json;
        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) return null;
        return new PhoneAuthCredential({
            verificationId,
            verificationCode,
            phoneNumber,
            temporaryProof
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Maps the mode string in action code URL to Action Code Info operation.
 *
 * @param mode
 */ function parseMode(mode) {
    switch(mode){
        case 'recoverEmail':
            return "RECOVER_EMAIL" /* RECOVER_EMAIL */ ;
        case 'resetPassword':
            return "PASSWORD_RESET" /* PASSWORD_RESET */ ;
        case 'signIn':
            return "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ ;
        case 'verifyEmail':
            return "VERIFY_EMAIL" /* VERIFY_EMAIL */ ;
        case 'verifyAndChangeEmail':
            return "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */ ;
        case 'revertSecondFactorAddition':
            return "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */ ;
        default:
            return null;
    }
}
/**
 * Helper to parse FDL links
 *
 * @param url
 */ function parseDeepLink(url) {
    const link = _util.querystringDecode(_util.extractQuerystring(url))['link'];
    // Double link case (automatic redirect).
    const doubleDeepLink = link ? _util.querystringDecode(_util.extractQuerystring(link))['deep_link_id'] : null;
    // iOS custom scheme links.
    const iOSDeepLink = _util.querystringDecode(_util.extractQuerystring(url))['deep_link_id'];
    const iOSDoubleDeepLink = iOSDeepLink ? _util.querystringDecode(_util.extractQuerystring(iOSDeepLink))['link'] : null;
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * A utility class to parse email action URLs such as password reset, email verification,
 * email link sign in, etc.
 *
 * @public
 */ class ActionCodeURL {
    /**
     * @param actionLink - The link from which to extract the URL.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @internal
     */ constructor(actionLink){
        var _a, _b, _c, _d, _e, _f;
        const searchParams = _util.querystringDecode(_util.extractQuerystring(actionLink));
        const apiKey = (_a = searchParams["apiKey" /* API_KEY */ ]) !== null && _a !== void 0 ? _a : null;
        const code = (_b = searchParams["oobCode" /* CODE */ ]) !== null && _b !== void 0 ? _b : null;
        const operation = parseMode((_c = searchParams["mode" /* MODE */ ]) !== null && _c !== void 0 ? _c : null);
        // Validate API key, code and mode.
        _assert(apiKey && code && operation, "argument-error" /* ARGUMENT_ERROR */ );
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = (_d = searchParams["continueUrl" /* CONTINUE_URL */ ]) !== null && _d !== void 0 ? _d : null;
        this.languageCode = (_e = searchParams["languageCode" /* LANGUAGE_CODE */ ]) !== null && _e !== void 0 ? _e : null;
        this.tenantId = (_f = searchParams["tenantId" /* TENANT_ID */ ]) !== null && _f !== void 0 ? _f : null;
    }
    /**
     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
     * otherwise returns null.
     *
     * @param link  - The email action link string.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @public
     */ static parseLink(link) {
        const actionLink = parseDeepLink(link);
        try {
            return new ActionCodeURL(actionLink);
        } catch (_a) {
            return null;
        }
    }
}
/**
 * Parses the email action link string and returns an {@link ActionCodeURL} if
 * the link is valid, otherwise returns null.
 *
 * @public
 */ function parseActionCodeURL(link) {
    return ActionCodeURL.parseLink(link);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating {@link EmailAuthCredential}.
 *
 * @public
 */ class EmailAuthProvider {
    constructor(){
        /**
         * Always set to {@link ProviderId}.PASSWORD, even for email link.
         */ this.providerId = EmailAuthProvider.PROVIDER_ID;
    }
    /**
     * Initialize an {@link AuthCredential} using an email and password.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credential(email, password);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * const userCredential = await signInWithEmailAndPassword(auth, email, password);
     * ```
     *
     * @param email - Email address.
     * @param password - User account password.
     * @returns The auth provider credential.
     */ static credential(email, password) {
        return EmailAuthCredential._fromEmailAndPassword(email, password);
    }
    /**
     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
     * email link operation.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * await sendSignInLinkToEmail(auth, email);
     * // Obtain emailLink from user.
     * const userCredential = await signInWithEmailLink(auth, email, emailLink);
     * ```
     *
     * @param auth - The {@link Auth} instance used to verify the link.
     * @param email - Email address.
     * @param emailLink - Sign-in email link.
     * @returns - The auth provider credential.
     */ static credentialWithLink(email, emailLink) {
        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        _assert(actionCodeUrl, "argument-error" /* ARGUMENT_ERROR */ );
        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
    }
}
/**
 * Always set to {@link ProviderId}.PASSWORD, even for email link.
 */ EmailAuthProvider.PROVIDER_ID = "password" /* PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
 */ EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* EMAIL_PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_LINK.
 */ EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* EMAIL_LINK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The base class for all Federated providers (OAuth (including OIDC), SAML).
 *
 * This class is not meant to be instantiated directly.
 *
 * @public
 */ class FederatedAuthProvider {
    /**
     * Constructor for generic OAuth providers.
     *
     * @param providerId - Provider for which credentials should be generated.
     */ constructor(providerId){
        this.providerId = providerId;
        /** @internal */ this.defaultLanguageCode = null;
        /** @internal */ this.customParameters = {};
    }
    /**
     * Set the language gode.
     *
     * @param languageCode - language code
     */ setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
    }
    /**
     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
     * operations.
     *
     * @remarks
     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
     *
     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
     */ setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
    }
    /**
     * Retrieve the current list of {@link CustomParameters}.
     */ getCustomParameters() {
        return this.customParameters;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Common code to all OAuth providers. This is separate from the
 * {@link OAuthProvider} so that child providers (like
 * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
 * Instead, they rely on a static `credential` method.
 */ class BaseOAuthProvider extends FederatedAuthProvider {
    constructor(){
        super(...arguments);
        /** @internal */ this.scopes = [];
    }
    /**
     * Add an OAuth scope to the credential.
     *
     * @param scope - Provider OAuth scope to add.
     */ addScope(scope) {
        // If not already added, add scope to list.
        if (!this.scopes.includes(scope)) this.scopes.push(scope);
        return this;
    }
    /**
     * Retrieve the current list of OAuth scopes.
     */ getScopes() {
        return [
            ...this.scopes
        ];
    }
}
/**
 * Provider for generating generic {@link OAuthCredential}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new OAuthProvider('google.com');
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a OAuth Access Token for the provider.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new OAuthProvider('google.com');
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a OAuth Access Token for the provider.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class OAuthProvider extends BaseOAuthProvider {
    /**
     * Creates an {@link OAuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        _assert('providerId' in obj && 'signInMethod' in obj, "argument-error" /* ARGUMENT_ERROR */ );
        return OAuthCredential._fromParams(obj);
    }
    /**
     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
     *
     * @remarks
     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
     * the raw nonce must match the nonce field in the ID token.
     *
     * @example
     * ```javascript
     * // `googleUser` from the onsuccess Google Sign In callback.
     * // Initialize a generate OAuth provider with a `google.com` providerId.
     * const provider = new OAuthProvider('google.com');
     * const credential = provider.credential({
     *   idToken: googleUser.getAuthResponse().id_token,
     * });
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param params - Either the options object containing the ID token, access token and raw nonce
     * or the ID token string.
     */ credential(params) {
        return this._credential(Object.assign(Object.assign({}, params), {
            nonce: params.rawNonce
        }));
    }
    /** An internal credential method that accepts more permissive options */ _credential(params) {
        _assert(params.idToken || params.accessToken, "argument-error" /* ARGUMENT_ERROR */ );
        // For OAuthCredential, sign in method is same as providerId.
        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), {
            providerId: this.providerId,
            signInMethod: this.providerId
        }));
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});
    }
    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { oauthIdToken , oauthAccessToken , oauthTokenSecret , pendingToken , nonce , providerId  } = tokenResponse;
        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) return null;
        if (!providerId) return null;
        try {
            return new OAuthProvider(providerId)._credential({
                idToken: oauthIdToken,
                accessToken: oauthAccessToken,
                nonce,
                pendingToken
            });
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('user_birthday');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = FacebookAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * provider.addScope('user_birthday');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = FacebookAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class FacebookAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("facebook.com" /* FACEBOOK */ );
    }
    /**
     * Creates a credential for Facebook.
     *
     * @example
     * ```javascript
     * // `event` from the Facebook auth.authResponseChange callback.
     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param accessToken - Facebook access token.
     */ static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: FacebookAuthProvider.PROVIDER_ID,
            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.FACEBOOK. */ FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* FACEBOOK */ ;
/** Always set to {@link ProviderId}.FACEBOOK. */ FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* FACEBOOK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GoogleAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Google Access Token.
 *   const credential = GoogleAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GoogleAuthProvider();
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Google Access Token.
 * const credential = GoogleAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class GoogleAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("google.com" /* GOOGLE */ );
        this.addScope('profile');
    }
    /**
     * Creates a credential for Google. At least one of ID token and access token is required.
     *
     * @example
     * ```javascript
     * // \`googleUser\` from the onsuccess Google Sign In callback.
     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param idToken - Google ID token.
     * @param accessToken - Google access token.
     */ static credential(idToken, accessToken) {
        return OAuthCredential._fromParams({
            providerId: GoogleAuthProvider.PROVIDER_ID,
            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
            idToken,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { oauthIdToken , oauthAccessToken  } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) // This could be an oauth 1 credential or a phone credential
        return null;
        try {
            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GOOGLE. */ GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* GOOGLE */ ;
/** Always set to {@link ProviderId}.GOOGLE. */ GoogleAuthProvider.PROVIDER_ID = "google.com" /* GOOGLE */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
 *
 * @remarks
 * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
 * the {@link signInWithPopup} handler:
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GithubAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('repo');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Github Access Token.
 *   const credential = GithubAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GithubAuthProvider();
 * provider.addScope('repo');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Github Access Token.
 * const credential = GithubAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class GithubAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("github.com" /* GITHUB */ );
    }
    /**
     * Creates a credential for Github.
     *
     * @param accessToken - Github access token.
     */ static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: GithubAuthProvider.PROVIDER_ID,
            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return GithubAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GITHUB. */ GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* GITHUB */ ;
/** Always set to {@link ProviderId}.GITHUB. */ GithubAuthProvider.PROVIDER_ID = "github.com" /* GITHUB */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IDP_REQUEST_URI = 'http://localhost';
/**
 * @public
 */ class SAMLAuthCredential extends AuthCredential {
    /** @internal */ constructor(providerId, pendingToken){
        super(providerId, providerId);
        this.pendingToken = pendingToken;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            signInMethod: this.signInMethod,
            providerId: this.providerId,
            pendingToken: this.pendingToken
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId , signInMethod , pendingToken  } = obj;
        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) return null;
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    /**
     * Helper static method to avoid exposing the constructor to end users.
     *
     * @internal
     */ static _create(providerId, pendingToken) {
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    buildRequest() {
        return {
            requestUri: IDP_REQUEST_URI,
            returnSecureToken: true,
            pendingToken: this.pendingToken
        };
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const SAML_PROVIDER_PREFIX = 'saml.';
/**
 * An {@link AuthProvider} for SAML.
 *
 * @public
 */ class SAMLAuthProvider extends FederatedAuthProvider {
    /**
     * Constructor. The providerId must start with "saml."
     * @param providerId - SAML provider ID.
     */ constructor(providerId){
        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error" /* ARGUMENT_ERROR */ );
        super(providerId);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential} after a
     * successful SAML flow completes.
     *
     * @remarks
     *
     * For example, to get an {@link AuthCredential}, you could write the
     * following code:
     *
     * ```js
     * const userCredential = await signInWithPopup(auth, samlProvider);
     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
     * ```
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});
    }
    /**
     * Creates an {@link AuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const credential = SAMLAuthCredential.fromJSON(json);
        _assert(credential, "argument-error" /* ARGUMENT_ERROR */ );
        return credential;
    }
    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { pendingToken , providerId  } = tokenResponse;
        if (!pendingToken || !providerId) return null;
        try {
            return SAMLAuthCredential._create(providerId, pendingToken);
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new TwitterAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Twitter Access Token and Secret.
 *   const credential = TwitterAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 *   const secret = credential.secret;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new TwitterAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Twitter Access Token and Secret.
 * const credential = TwitterAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * const secret = credential.secret;
 * ```
 *
 * @public
 */ class TwitterAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("twitter.com" /* TWITTER */ );
    }
    /**
     * Creates a credential for Twitter.
     *
     * @param token - Twitter access token.
     * @param secret - Twitter secret.
     */ static credential(token, secret) {
        return OAuthCredential._fromParams({
            providerId: TwitterAuthProvider.PROVIDER_ID,
            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
            oauthToken: token,
            oauthTokenSecret: secret
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { oauthAccessToken , oauthTokenSecret  } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) return null;
        try {
            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.TWITTER. */ TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* TWITTER */ ;
/** Always set to {@link ProviderId}.TWITTER. */ TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* TWITTER */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signUp(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signUp" /* SIGN_UP */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class UserCredentialImpl {
    constructor(params){
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
    }
    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
        const providerId = providerIdForResponse(idTokenResponse);
        const userCred = new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: idTokenResponse,
            operationType
        });
        return userCred;
    }
    static async _forOperation(user, operationType, response) {
        await user._updateTokensIfNecessary(response, /* reload */ true);
        const providerId = providerIdForResponse(response);
        return new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: response,
            operationType
        });
    }
}
function providerIdForResponse(response) {
    if (response.providerId) return response.providerId;
    if ('phoneNumber' in response) return "phone" /* PHONE */ ;
    return null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in as an anonymous user.
 *
 * @remarks
 * If there is already an anonymous user signed in, that user will be returned; otherwise, a
 * new anonymous user identity will be created and returned.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ async function signInAnonymously(auth) {
    var _a;
    const authInternal = _castAuth(auth);
    await authInternal._initializationPromise;
    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) // If an anonymous user is already signed in, no need to sign them in again.
    return new UserCredentialImpl({
        user: authInternal.currentUser,
        providerId: null,
        operationType: "signIn" /* SIGN_IN */ 
    });
    const response = await signUp(authInternal, {
        returnSecureToken: true
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */ , response, true);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorError extends _util.FirebaseError {
    constructor(auth, error, operationType, user){
        var _a;
        super(error.code, error.message);
        this.operationType = operationType;
        this.user = user;
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, MultiFactorError.prototype);
        this.customData = {
            appName: auth.name,
            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,
            _serverResponse: error.customData._serverResponse,
            operationType
        };
    }
    static _fromErrorAndOperation(auth, error, operationType, user) {
        return new MultiFactorError(auth, error, operationType, user);
    }
}
function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
    const idTokenProvider = operationType === "reauthenticate" /* REAUTHENTICATE */  ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
    return idTokenProvider.catch((error)=>{
        if (error.code === `auth/${"multi-factor-auth-required" /* MFA_REQUIRED */ }`) throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
        throw error;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Takes a set of UserInfo provider data and converts it to a set of names
 */ function providerDataAsNames(providerData) {
    return new Set(providerData.map(({ providerId  })=>providerId
    ).filter((pid)=>!!pid
    ));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unlinks a provider from a user account.
 *
 * @param user - The user.
 * @param providerId - The provider to unlink.
 *
 * @public
 */ async function unlink(user, providerId) {
    const userInternal = _util.getModularInstance(user);
    await _assertLinkedStatus(true, userInternal, providerId);
    const { providerUserInfo  } = await deleteLinkedAccounts(userInternal.auth, {
        idToken: await userInternal.getIdToken(),
        deleteProvider: [
            providerId
        ]
    });
    const providersLeft = providerDataAsNames(providerUserInfo || []);
    userInternal.providerData = userInternal.providerData.filter((pd)=>providersLeft.has(pd.providerId)
    );
    if (!providersLeft.has("phone" /* PHONE */ )) userInternal.phoneNumber = null;
    await userInternal.auth._persistUserIfCurrent(userInternal);
    return userInternal;
}
async function _link$1(user, credential, bypassAuthState = false) {
    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
    return UserCredentialImpl._forOperation(user, "link" /* LINK */ , response);
}
async function _assertLinkedStatus(expected, user, provider) {
    await _reloadWithoutSaving(user);
    const providerIds = providerDataAsNames(user.providerData);
    const code = expected === false ? "provider-already-linked" /* PROVIDER_ALREADY_LINKED */  : "no-such-provider" /* NO_SUCH_PROVIDER */ ;
    _assert(providerIds.has(provider) === expected, user.auth, code);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _reauthenticate(user, credential, bypassAuthState = false) {
    const { auth  } = user;
    const operationType = "reauthenticate" /* REAUTHENTICATE */ ;
    try {
        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
        _assert(response.idToken, auth, "internal-error" /* INTERNAL_ERROR */ );
        const parsed = _parseToken(response.idToken);
        _assert(parsed, auth, "internal-error" /* INTERNAL_ERROR */ );
        const { sub: localId  } = parsed;
        _assert(user.uid === localId, auth, "user-mismatch" /* USER_MISMATCH */ );
        return UserCredentialImpl._forOperation(user, operationType, response);
    } catch (e) {
        // Convert user deleted error into user mismatch
        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found" /* USER_DELETED */ }`) _fail(auth, "user-mismatch" /* USER_MISMATCH */ );
        throw e;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _signInWithCredential(auth, credential, bypassAuthState = false) {
    const operationType = "signIn" /* SIGN_IN */ ;
    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
    if (!bypassAuthState) await auth._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param auth - The {@link Auth} instance.
 * @param credential - The auth credential.
 *
 * @public
 */ async function signInWithCredential(auth, credential) {
    return _signInWithCredential(_castAuth(auth), credential);
}
/**
 * Links the user account with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function linkWithCredential(user, credential) {
    const userInternal = _util.getModularInstance(user);
    await _assertLinkedStatus(false, userInternal, credential.providerId);
    return _link$1(userInternal, credential);
}
/**
 * Re-authenticates a user using a fresh credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
 * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function reauthenticateWithCredential(user, credential) {
    return _reauthenticate(_util.getModularInstance(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithCustomToken$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithCustomToken" /* SIGN_IN_WITH_CUSTOM_TOKEN */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in using a custom token.
 *
 * @remarks
 * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
 * be generated by an auth backend using the
 * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
 * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
 *
 * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
 *
 * @param auth - The {@link Auth} instance.
 * @param customToken - The custom token to sign in with.
 *
 * @public
 */ async function signInWithCustomToken(auth, customToken) {
    const authInternal = _castAuth(auth);
    const response = await signInWithCustomToken$1(authInternal, {
        token: customToken,
        returnSecureToken: true
    });
    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */ , response);
    await authInternal._updateCurrentUser(cred.user);
    return cred;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorInfoImpl {
    constructor(factorId, response){
        this.factorId = factorId;
        this.uid = response.mfaEnrollmentId;
        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
        this.displayName = response.displayName;
    }
    static _fromServerResponse(auth, enrollment) {
        if ('phoneInfo' in enrollment) return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        return _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
    }
}
class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {
    constructor(response){
        super("phone" /* PHONE */ , response);
        this.phoneNumber = response.phoneInfo;
    }
    static _fromServerResponse(_auth, enrollment) {
        return new PhoneMultiFactorInfoImpl(enrollment);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
    var _a;
    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri" /* INVALID_CONTINUE_URI */ );
    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */ );
    request.continueUrl = actionCodeSettings.url;
    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
    if (actionCodeSettings.iOS) {
        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */ );
        request.iOSBundleId = actionCodeSettings.iOS.bundleId;
    }
    if (actionCodeSettings.android) {
        _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */ );
        request.androidInstallApp = actionCodeSettings.android.installApp;
        request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
        request.androidPackageName = actionCodeSettings.android.packageName;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sends a password reset email to the given email address.
 *
 * @remarks
 * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
 * the email sent to the user, along with the new password specified by the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain code from user.
 * await confirmPasswordReset('user@example.com', code);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendPasswordResetEmail(auth, email, actionCodeSettings) {
    const authModular = _util.getModularInstance(auth);
    const request = {
        requestType: "PASSWORD_RESET" /* PASSWORD_RESET */ ,
        email
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
    await sendPasswordResetEmail$1(authModular, request);
}
/**
 * Completes the password reset process, given a confirmation code and new password.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A confirmation code sent to the user.
 * @param newPassword - The new password.
 *
 * @public
 */ async function confirmPasswordReset(auth, oobCode, newPassword) {
    await resetPassword(_util.getModularInstance(auth), {
        oobCode,
        newPassword
    });
// Do not return the email.
}
/**
 * Applies a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function applyActionCode(auth, oobCode) {
    await applyActionCode$1(_util.getModularInstance(auth), {
        oobCode
    });
}
/**
 * Checks a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @returns metadata about the code.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function checkActionCode(auth, oobCode) {
    const authModular = _util.getModularInstance(auth);
    const response = await resetPassword(authModular, {
        oobCode
    });
    // Email could be empty only if the request type is EMAIL_SIGNIN or
    // VERIFY_AND_CHANGE_EMAIL.
    // New email should not be empty if the request type is
    // VERIFY_AND_CHANGE_EMAIL.
    // Multi-factor info could not be empty if the request type is
    // REVERT_SECOND_FACTOR_ADDITION.
    const operation = response.requestType;
    _assert(operation, authModular, "internal-error" /* INTERNAL_ERROR */ );
    switch(operation){
        case "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ :
            break;
        case "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */ :
            _assert(response.newEmail, authModular, "internal-error" /* INTERNAL_ERROR */ );
            break;
        case "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */ :
            _assert(response.mfaInfo, authModular, "internal-error" /* INTERNAL_ERROR */ );
        // fall through
        default:
            _assert(response.email, authModular, "internal-error" /* INTERNAL_ERROR */ );
    }
    // The multi-factor info for revert second factor addition
    let multiFactorInfo = null;
    if (response.mfaInfo) multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
    return {
        data: {
            email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */  ? response.newEmail : response.email) || null,
            previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */  ? response.email : response.newEmail) || null,
            multiFactorInfo
        },
        operation
    };
}
/**
 * Checks a password reset code sent to the user by email or other out-of-band mechanism.
 *
 * @returns the user's email address if valid.
 *
 * @param auth - The {@link Auth} instance.
 * @param code - A verification code sent to the user.
 *
 * @public
 */ async function verifyPasswordResetCode(auth, code) {
    const { data  } = await checkActionCode(_util.getModularInstance(auth), code);
    // Email should always be present since a code was sent to it
    return data.email;
}
/**
 * Creates a new user account associated with the specified email address and password.
 *
 * @remarks
 * On successful creation of the user account, this user will also be signed in to your application.
 *
 * User account creation can fail if the account already exists or the password is invalid.
 *
 * Note: The email address acts as a unique identifier for the user and enables an email-based
 * password reset. This function will create a new user account and set the initial user password.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param password - The user's chosen password.
 *
 * @public
 */ async function createUserWithEmailAndPassword(auth, email, password) {
    const authInternal = _castAuth(auth);
    const response = await signUp(authInternal, {
        returnSecureToken: true,
        email,
        password
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */ , response);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in using an email and password.
 *
 * @remarks
 * Fails with an error if the email address and password do not match.
 *
 * Note: The user's password is NOT the password used to access the user's email account. The
 * email address serves as a unique identifier for the user, and the password is used to access
 * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The users email address.
 * @param password - The users password.
 *
 * @public
 */ function signInWithEmailAndPassword(auth, email, password) {
    return signInWithCredential(_util.getModularInstance(auth), EmailAuthProvider.credential(email, password));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sends a sign-in email link to the user with the specified email.
 *
 * @remarks
 * The sign-in operation has to always be completed in the app unlike other out of band email
 * actions (password reset and email verifications). This is because, at the end of the flow,
 * the user is expected to be signed in and their Auth state persisted within the app.
 *
 * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
 * address and the email link supplied in the email sent to the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param authInternal - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
    const authModular = _util.getModularInstance(auth);
    const request = {
        requestType: "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ ,
        email
    };
    _assert(actionCodeSettings.handleCodeInApp, authModular, "argument-error" /* ARGUMENT_ERROR */ );
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
    await sendSignInLinkToEmail$1(authModular, request);
}
/**
 * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
 *
 * @param auth - The {@link Auth} instance.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ function isSignInWithEmailLink(auth, emailLink) {
    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ ;
}
/**
 * Asynchronously signs in using an email and sign-in email link.
 *
 * @remarks
 * If no link is passed, the link is inferred from the current URL.
 *
 * Fails with an error if the email address is invalid or OTP in email link expires.
 *
 * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ async function signInWithEmailLink(auth, email, emailLink) {
    const authModular = _util.getModularInstance(auth);
    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
    // Check if the tenant ID in the email link matches the tenant ID on Auth
    // instance.
    _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */ );
    return signInWithCredential(authModular, credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function createAuthUri(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:createAuthUri" /* CREATE_AUTH_URI */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Gets the list of possible sign in methods for the given email address.
 *
 * @remarks
 * This is useful to differentiate methods of sign-in for the same provider, eg.
 * {@link EmailAuthProvider} which has 2 methods of sign-in,
 * {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 *
 * @public
 */ async function fetchSignInMethodsForEmail(auth, email) {
    // createAuthUri returns an error if continue URI is not http or https.
    // For environments like Cordova, Chrome extensions, native frameworks, file
    // systems, etc, use http://localhost as continue URL.
    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';
    const request = {
        identifier: email,
        continueUri
    };
    const { signinMethods  } = await createAuthUri(_util.getModularInstance(auth), request);
    return signinMethods || [];
}
/**
 * Sends a verification email to a user.
 *
 * @remarks
 * The verification process is completed by calling {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendEmailVerification(user, actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendEmailVerification(user, actionCodeSettings) {
    const userInternal = _util.getModularInstance(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_EMAIL" /* VERIFY_EMAIL */ ,
        idToken
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email  } = await sendEmailVerification$1(userInternal.auth, request);
    if (email !== user.email) await user.reload();
}
/**
 * Sends a verification email to a new email address.
 *
 * @remarks
 * The user's email will be updated to the new one after being verified.
 *
 * If you have a custom email action handler, you can complete the verification process by calling
 * {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param newEmail - The new email address to be verified before update.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
    const userInternal = _util.getModularInstance(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */ ,
        idToken,
        newEmail
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email  } = await verifyAndChangeEmail(userInternal.auth, request);
    if (email !== user.email) // If the local copy of the email on user is outdated, reload the
    // user.
    await user.reload();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function updateProfile$1(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Updates a user's profile data.
 *
 * @param user - The user.
 * @param profile - The profile's `displayName` and `photoURL` to update.
 *
 * @public
 */ async function updateProfile(user, { displayName , photoURL: photoUrl  }) {
    if (displayName === undefined && photoUrl === undefined) return;
    const userInternal = _util.getModularInstance(user);
    const idToken = await userInternal.getIdToken();
    const profileRequest = {
        idToken,
        displayName,
        photoUrl,
        returnSecureToken: true
    };
    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
    userInternal.displayName = response.displayName || null;
    userInternal.photoURL = response.photoUrl || null;
    // Update the password provider as well
    const passwordProvider = userInternal.providerData.find(({ providerId  })=>providerId === "password" /* PASSWORD */ 
    );
    if (passwordProvider) {
        passwordProvider.displayName = userInternal.displayName;
        passwordProvider.photoURL = userInternal.photoURL;
    }
    await userInternal._updateTokensIfNecessary(response);
}
/**
 * Updates the user's email address.
 *
 * @remarks
 * An email will be sent to the original email address (if it was set) that allows to revoke the
 * email address change, in order to protect them from account hijacking.
 *
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newEmail - The new email address.
 *
 * @public
 */ function updateEmail(user, newEmail) {
    return updateEmailOrPassword(_util.getModularInstance(user), newEmail, null);
}
/**
 * Updates the user's password.
 *
 * @remarks
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newPassword - The new password.
 *
 * @public
 */ function updatePassword(user, newPassword) {
    return updateEmailOrPassword(_util.getModularInstance(user), null, newPassword);
}
async function updateEmailOrPassword(user, email, password) {
    const { auth  } = user;
    const idToken = await user.getIdToken();
    const request = {
        idToken,
        returnSecureToken: true
    };
    if (email) request.email = email;
    if (password) request.password = password;
    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));
    await user._updateTokensIfNecessary(response, /* reload */ true);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Parse the `AdditionalUserInfo` from the ID token response.
 *
 */ function _fromIdTokenResponse(idTokenResponse) {
    var _a, _b;
    if (!idTokenResponse) return null;
    const { providerId  } = idTokenResponse;
    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* SignupNewUser */ ;
    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];
        if (signInProvider) {
            const filteredProviderId = signInProvider !== "anonymous" /* ANONYMOUS */  && signInProvider !== "custom" /* CUSTOM */  ? signInProvider : null;
            // Uses generic class in accordance with the legacy SDK.
            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
        }
    }
    if (!providerId) return null;
    switch(providerId){
        case "facebook.com" /* FACEBOOK */ :
            return new FacebookAdditionalUserInfo(isNewUser, profile);
        case "github.com" /* GITHUB */ :
            return new GithubAdditionalUserInfo(isNewUser, profile);
        case "google.com" /* GOOGLE */ :
            return new GoogleAdditionalUserInfo(isNewUser, profile);
        case "twitter.com" /* TWITTER */ :
            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
        case "custom" /* CUSTOM */ :
        case "anonymous" /* ANONYMOUS */ :
            return new GenericAdditionalUserInfo(isNewUser, null);
        default:
            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
    }
}
class GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile = {}){
        this.isNewUser = isNewUser;
        this.providerId = providerId;
        this.profile = profile;
    }
}
class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile, username){
        super(isNewUser, providerId, profile);
        this.username = username;
    }
}
class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "facebook.com" /* FACEBOOK */ , profile);
    }
}
class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile){
        super(isNewUser, "github.com" /* GITHUB */ , profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);
    }
}
class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "google.com" /* GOOGLE */ , profile);
    }
}
class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile, screenName){
        super(isNewUser, "twitter.com" /* TWITTER */ , profile, screenName);
    }
}
/**
 * Extracts provider specific {@link AdditionalUserInfo} for the given credential.
 *
 * @param userCredential - The user credential.
 *
 * @public
 */ function getAdditionalUserInfo(userCredential) {
    const { user , _tokenResponse  } = userCredential;
    if (user.isAnonymous && !_tokenResponse) // Handle the special case where signInAnonymously() gets called twice.
    // No network call is made so there's nothing to actually fill this in
    return {
        providerId: null,
        isNewUser: false,
        profile: null
    };
    return _fromIdTokenResponse(_tokenResponse);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Non-optional auth methods.
/**
 * Changes the type of persistence on the {@link Auth} instance for the currently saved
 * `Auth` session and applies this type of persistence for future sign-in requests, including
 * sign-in with redirect requests.
 *
 * @remarks
 * This makes it easy for a user signing in to specify whether their session should be
 * remembered or not. It also makes it easier to never persist the `Auth` state for applications
 * that are shared by other users or have sensitive data.
 *
 * @example
 * ```javascript
 * setPersistence(auth, browserSessionPersistence);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param persistence - The {@link Persistence} to use.
 * @returns A `Promise` that resolves once the persistence change has completed
 *
 * @public
 */ function setPersistence(auth, persistence) {
    return _util.getModularInstance(auth).setPersistence(persistence);
}
/**
 * Adds an observer for changes to the signed-in user's ID token, which includes sign-in,
 * sign-out, and token refresh events.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - callback triggered on error.
 * @param completed - callback triggered when observer is removed.
 *
 * @public
 */ function onIdTokenChanged(auth, nextOrObserver, error, completed) {
    return _util.getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);
}
/**
 * Adds an observer for changes to the user's sign-in state.
 *
 * @remarks
 * To keep the old behavior, see {@link onIdTokenChanged}.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - callback triggered on error.
 * @param completed - callback triggered when observer is removed.
 *
 * @public
 */ function onAuthStateChanged(auth, nextOrObserver, error, completed) {
    return _util.getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);
}
/**
 * Sets the current language to the default device/browser preference.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function useDeviceLanguage(auth) {
    _util.getModularInstance(auth).useDeviceLanguage();
}
/**
 * Asynchronously sets the provided user as {@link Auth.currentUser} on the
 * {@link Auth} instance.
 *
 * @remarks
 * A new instance copy of the user provided will be made and set as currentUser.
 *
 * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
 * like other sign in methods.
 *
 * The operation fails with an error if the user to be updated belongs to a different Firebase
 * project.
 *
 * @param auth - The {@link Auth} instance.
 * @param user - The new {@link User}.
 *
 * @public
 */ function updateCurrentUser(auth, user) {
    return _util.getModularInstance(auth).updateCurrentUser(user);
}
/**
 * Signs out the current user.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function signOut(auth) {
    return _util.getModularInstance(auth).signOut();
}
/**
 * Deletes and signs out the user.
 *
 * @remarks
 * Important: this is a security-sensitive operation that requires the user to have recently
 * signed in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 *
 * @public
 */ async function deleteUser(user) {
    return _util.getModularInstance(user).delete();
}
class MultiFactorSessionImpl {
    constructor(type, credential){
        this.type = type;
        this.credential = credential;
    }
    static _fromIdtoken(idToken) {
        return new MultiFactorSessionImpl("enroll" /* ENROLL */ , idToken);
    }
    static _fromMfaPendingCredential(mfaPendingCredential) {
        return new MultiFactorSessionImpl("signin" /* SIGN_IN */ , mfaPendingCredential);
    }
    toJSON() {
        const key = this.type === "enroll" /* ENROLL */  ? 'idToken' : 'pendingCredential';
        return {
            multiFactorSession: {
                [key]: this.credential
            }
        };
    }
    static fromJSON(obj) {
        var _a, _b;
        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
        }
        return null;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorResolverImpl {
    constructor(session, hints, signInResolver){
        this.session = session;
        this.hints = hints;
        this.signInResolver = signInResolver;
    }
    /** @internal */ static _fromError(authExtern, error) {
        const auth = _castAuth(authExtern);
        const serverResponse = error.customData._serverResponse;
        const hints = (serverResponse.mfaInfo || []).map((enrollment)=>MultiFactorInfoImpl._fromServerResponse(auth, enrollment)
        );
        _assert(serverResponse.mfaPendingCredential, auth, "internal-error" /* INTERNAL_ERROR */ );
        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
        return new MultiFactorResolverImpl(session, hints, async (assertion)=>{
            const mfaResponse = await assertion._process(auth, session);
            // Clear out the unneeded fields from the old login response
            delete serverResponse.mfaInfo;
            delete serverResponse.mfaPendingCredential;
            // Use in the new token & refresh token in the old response
            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), {
                idToken: mfaResponse.idToken,
                refreshToken: mfaResponse.refreshToken
            });
            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case
            switch(error.operationType){
                case "signIn" /* SIGN_IN */ :
                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
                    await auth._updateCurrentUser(userCredential.user);
                    return userCredential;
                case "reauthenticate" /* REAUTHENTICATE */ :
                    _assert(error.user, auth, "internal-error" /* INTERNAL_ERROR */ );
                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
                default:
                    _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
            }
        });
    }
    async resolveSignIn(assertionExtern) {
        const assertion = assertionExtern;
        return this.signInResolver(assertion);
    }
}
/**
 * Provides a {@link MultiFactorResolver} suitable for completion of a
 * multi-factor flow.
 *
 * @param auth - The {@link Auth} instance.
 * @param error - The {@link MultiFactorError} raised during a sign-in, or
 * reauthentication operation.
 *
 * @public
 */ function getMultiFactorResolver(auth, error) {
    var _a;
    const authModular = _util.getModularInstance(auth);
    const errorInternal = error;
    _assert(error.customData.operationType, authModular, "argument-error" /* ARGUMENT_ERROR */ );
    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error" /* ARGUMENT_ERROR */ );
    return MultiFactorResolverImpl._fromError(authModular, errorInternal);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function startEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaEnrollment:start" /* START_PHONE_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function finalizeEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaEnrollment:finalize" /* FINALIZE_PHONE_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function withdrawMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaEnrollment:withdraw" /* WITHDRAW_MFA */ , _addTidIfNecessary(auth, request));
}
class MultiFactorUserImpl {
    constructor(user){
        this.user = user;
        this.enrolledFactors = [];
        user._onReload((userInfo)=>{
            if (userInfo.mfaInfo) this.enrolledFactors = userInfo.mfaInfo.map((enrollment)=>MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment)
            );
        });
    }
    static _fromUser(user) {
        return new MultiFactorUserImpl(user);
    }
    async getSession() {
        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken());
    }
    async enroll(assertionExtern, displayName) {
        const assertion = assertionExtern;
        const session = await this.getSession();
        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
        // New tokens will be issued after enrollment of the new second factors.
        // They need to be updated on the user.
        await this.user._updateTokensIfNecessary(finalizeMfaResponse);
        // The user needs to be reloaded to get the new multi-factor information
        // from server. USER_RELOADED event will be triggered and `enrolledFactors`
        // will be updated.
        return this.user.reload();
    }
    async unenroll(infoOrUid) {
        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
        const idToken = await this.user.getIdToken();
        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
            idToken,
            mfaEnrollmentId
        }));
        // Remove the second factor from the user's list.
        this.enrolledFactors = this.enrolledFactors.filter(({ uid  })=>uid !== mfaEnrollmentId
        );
        // Depending on whether the backend decided to revoke the user's session,
        // the tokenResponse may be empty. If the tokens were not updated (and they
        // are now invalid), reloading the user will discover this and invalidate
        // the user's state accordingly.
        await this.user._updateTokensIfNecessary(idTokenResponse);
        try {
            await this.user.reload();
        } catch (e) {
            if (e.code !== `auth/${"user-token-expired" /* TOKEN_EXPIRED */ }`) throw e;
        }
    }
}
const multiFactorUserCache = new WeakMap();
/**
 * The {@link MultiFactorUser} corresponding to the user.
 *
 * @remarks
 * This is used to access all multi-factor properties and operations related to the user.
 *
 * @param user - The user.
 *
 * @public
 */ function multiFactor(user) {
    const userModular = _util.getModularInstance(user);
    if (!multiFactorUserCache.has(userModular)) multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
    return multiFactorUserCache.get(userModular);
}
const STORAGE_AVAILABLE_KEY = '__sak';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // There are two different browser persistence types: local and session.
// Both have the same implementation but use a different underlying storage
// object.
class BrowserPersistenceClass {
    constructor(storageRetriever, type){
        this.storageRetriever = storageRetriever;
        this.type = type;
    }
    _isAvailable() {
        try {
            if (!this.storage) return Promise.resolve(false);
            this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
            this.storage.removeItem(STORAGE_AVAILABLE_KEY);
            return Promise.resolve(true);
        } catch (_a) {
            return Promise.resolve(false);
        }
    }
    _set(key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        return Promise.resolve();
    }
    _get(key) {
        const json = this.storage.getItem(key);
        return Promise.resolve(json ? JSON.parse(json) : null);
    }
    _remove(key) {
        this.storage.removeItem(key);
        return Promise.resolve();
    }
    get storage() {
        return this.storageRetriever();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _iframeCannotSyncWebStorage() {
    const ua = _util.getUA();
    return _isSafari(ua) || _isIOS(ua);
}
// The polling period in case events are not supported
const _POLLING_INTERVAL_MS$1 = 1000;
// The IE 10 localStorage cross tab synchronization delay in milliseconds
const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
class BrowserLocalPersistence extends BrowserPersistenceClass {
    constructor(){
        super(()=>window.localStorage
        , "LOCAL" /* LOCAL */ );
        this.boundEventHandler = (event, poll)=>this.onStorageEvent(event, poll)
        ;
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        // Safari or iOS browser and embedded in an iframe.
        this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
        // Whether to use polling instead of depending on window events
        this.fallbackToPolling = _isMobileBrowser();
        this._shouldAllowMigration = true;
    }
    forAllChangedKeys(cb) {
        // Check all keys with listeners on them.
        for (const key of Object.keys(this.listeners)){
            // Get value from localStorage.
            const newValue = this.storage.getItem(key);
            const oldValue = this.localCache[key];
            // If local map value does not match, trigger listener with storage event.
            // Differentiate this simulated event from the real storage event.
            if (newValue !== oldValue) cb(key, oldValue, newValue);
        }
    }
    onStorageEvent(event, poll = false) {
        // Key would be null in some situations, like when localStorage is cleared
        if (!event.key) {
            this.forAllChangedKeys((key, _oldValue, newValue)=>{
                this.notifyListeners(key, newValue);
            });
            return;
        }
        const key1 = event.key;
        // Check the mechanism how this event was detected.
        // The first event will dictate the mechanism to be used.
        if (poll) // Environment detects storage changes via polling.
        // Remove storage event listener to prevent possible event duplication.
        this.detachListener();
        else // Environment detects storage changes via storage event listener.
        // Remove polling listener to prevent possible event duplication.
        this.stopPolling();
        // Safari embedded iframe. Storage event will trigger with the delta
        // changes but no changes will be applied to the iframe localStorage.
        if (this.safariLocalStorageNotSynced) {
            // Get current iframe page value.
            const storedValue = this.storage.getItem(key1);
            // Value not synchronized, synchronize manually.
            if (event.newValue !== storedValue) {
                if (event.newValue !== null) // Value changed from current value.
                this.storage.setItem(key1, event.newValue);
                else // Current value deleted.
                this.storage.removeItem(key1);
            } else if (this.localCache[key1] === event.newValue && !poll) // Already detected and processed, do not trigger listeners again.
            return;
        }
        const triggerListeners = ()=>{
            // Keep local map up to date in case storage event is triggered before
            // poll.
            const storedValue = this.storage.getItem(key1);
            if (!poll && this.localCache[key1] === storedValue) // Real storage event which has already been detected, do nothing.
            // This seems to trigger in some IE browsers for some reason.
            return;
            this.notifyListeners(key1, storedValue);
        };
        const storedValue1 = this.storage.getItem(key1);
        if (_isIE10() && storedValue1 !== event.newValue && event.newValue !== event.oldValue) // IE 10 has this weird bug where a storage event would trigger with the
        // correct key, oldValue and newValue but localStorage.getItem(key) does
        // not yield the updated value until a few milliseconds. This ensures
        // this recovers from that situation.
        setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
        else triggerListeners();
    }
    notifyListeners(key, value) {
        this.localCache[key] = value;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(value ? JSON.parse(value) : value);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(()=>{
            this.forAllChangedKeys((key, oldValue, newValue)=>{
                this.onStorageEvent(new StorageEvent('storage', {
                    key,
                    oldValue,
                    newValue
                }), /* poll */ true);
            });
        }, _POLLING_INTERVAL_MS$1);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    attachListener() {
        window.addEventListener('storage', this.boundEventHandler);
    }
    detachListener() {
        window.removeEventListener('storage', this.boundEventHandler);
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
            // Whether browser can detect storage event when it had already been pushed to the background.
            // This may happen in some mobile browsers. A localStorage change in the foreground window
            // will not be detected in the background window via the storage event.
            // This was detected in iOS 7.x mobile browsers
            if (this.fallbackToPolling) this.startPolling();
            else this.attachListener();
        }
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            this.localCache[key] = this.storage.getItem(key);
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) {
            this.detachListener();
            this.stopPolling();
        }
    }
    // Update local cache on base operations:
    async _set(key, value) {
        await super._set(key, value);
        this.localCache[key] = JSON.stringify(value);
    }
    async _get(key) {
        const value = await super._get(key);
        this.localCache[key] = JSON.stringify(value);
        return value;
    }
    async _remove(key) {
        await super._remove(key);
        delete this.localCache[key];
    }
}
BrowserLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
 * for the underlying storage.
 *
 * @public
 */ const browserLocalPersistence = BrowserLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class BrowserSessionPersistence extends BrowserPersistenceClass {
    constructor(){
        super(()=>window.sessionStorage
        , "SESSION" /* SESSION */ );
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
}
BrowserSessionPersistence.type = 'SESSION';
/**
 * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
 * for the underlying storage.
 *
 * @public
 */ const browserSessionPersistence = BrowserSessionPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
 *
 * @param promises - Array of promises to wait on.
 */ function _allSettled(promises) {
    return Promise.all(promises.map(async (promise)=>{
        try {
            const value = await promise;
            return {
                fulfilled: true,
                value
            };
        } catch (reason) {
            return {
                fulfilled: false,
                reason
            };
        }
    }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface class for receiving messages.
 *
 */ class Receiver {
    constructor(eventTarget){
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
    }
    /**
     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
     *
     * @param eventTarget - An event target (such as window or self) through which the underlying
     * messages will be received.
     */ static _getInstance(eventTarget) {
        // The results are stored in an array since objects can't be keys for other
        // objects. In addition, setting a unique property on an event target as a
        // hash map key may not be allowed due to CORS restrictions.
        const existingInstance = this.receivers.find((receiver)=>receiver.isListeningto(eventTarget)
        );
        if (existingInstance) return existingInstance;
        const newInstance = new Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
    }
    isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
    }
    /**
     * Fans out a MessageEvent to the appropriate listeners.
     *
     * @remarks
     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
     * finished processing.
     *
     * @param event - The MessageEvent.
     *
     */ async handleEvent(event) {
        const messageEvent = event;
        const { eventId , eventType , data  } = messageEvent.data;
        const handlers = this.handlersMap[eventType];
        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) return;
        messageEvent.ports[0].postMessage({
            status: "ack" /* ACK */ ,
            eventId,
            eventType
        });
        const promises = Array.from(handlers).map(async (handler)=>handler(messageEvent.origin, data)
        );
        const response = await _allSettled(promises);
        messageEvent.ports[0].postMessage({
            status: "done" /* DONE */ ,
            eventId,
            eventType,
            response
        });
    }
    /**
     * Subscribe an event handler for a particular event.
     *
     * @param eventType - Event name to subscribe to.
     * @param eventHandler - The event handler which should receive the events.
     *
     */ _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.addEventListener('message', this.boundEventHandler);
        if (!this.handlersMap[eventType]) this.handlersMap[eventType] = new Set();
        this.handlersMap[eventType].add(eventHandler);
    }
    /**
     * Unsubscribe an event handler from a particular event.
     *
     * @param eventType - Event name to unsubscribe from.
     * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
     *
     */ _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) this.handlersMap[eventType].delete(eventHandler);
        if (!eventHandler || this.handlersMap[eventType].size === 0) delete this.handlersMap[eventType];
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.removeEventListener('message', this.boundEventHandler);
    }
}
Receiver.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _generateEventId(prefix = '', digits = 10) {
    let random = '';
    for(let i = 0; i < digits; i++)random += Math.floor(Math.random() * 10);
    return prefix + random;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface for sending messages and waiting for a completion response.
 *
 */ class Sender {
    constructor(target){
        this.target = target;
        this.handlers = new Set();
    }
    /**
     * Unsubscribe the handler and remove it from our tracking Set.
     *
     * @param handler - The handler to unsubscribe.
     */ removeMessageHandler(handler) {
        if (handler.messageChannel) {
            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
            handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
    }
    /**
     * Send a message to the Receiver located at {@link target}.
     *
     * @remarks
     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
     * receiver has had a chance to fully process the event.
     *
     * @param eventType - Type of event to send.
     * @param data - The payload of the event.
     * @param timeout - Timeout for waiting on an ACK from the receiver.
     *
     * @returns An array of settled promises from all the handlers that were listening on the receiver.
     */ async _send(eventType, data, timeout = 50 /* ACK */ ) {
        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
        if (!messageChannel) throw new Error("connection_unavailable" /* CONNECTION_UNAVAILABLE */ );
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let completionTimer;
        let handler;
        return new Promise((resolve, reject)=>{
            const eventId = _generateEventId('', 20);
            messageChannel.port1.start();
            const ackTimer = setTimeout(()=>{
                reject(new Error("unsupported_event" /* UNSUPPORTED_EVENT */ ));
            }, timeout);
            handler = {
                messageChannel,
                onMessage (event) {
                    const messageEvent = event;
                    if (messageEvent.data.eventId !== eventId) return;
                    switch(messageEvent.data.status){
                        case "ack" /* ACK */ :
                            // The receiver should ACK first.
                            clearTimeout(ackTimer);
                            completionTimer = setTimeout(()=>{
                                reject(new Error("timeout" /* TIMEOUT */ ));
                            }, 3000 /* COMPLETION */ );
                            break;
                        case "done" /* DONE */ :
                            // Once the receiver's handlers are finished we will get the results.
                            clearTimeout(completionTimer);
                            resolve(messageEvent.data.response);
                            break;
                        default:
                            clearTimeout(ackTimer);
                            clearTimeout(completionTimer);
                            reject(new Error("invalid_response" /* INVALID_RESPONSE */ ));
                            break;
                    }
                }
            };
            this.handlers.add(handler);
            messageChannel.port1.addEventListener('message', handler.onMessage);
            this.target.postMessage({
                eventType,
                eventId,
                data
            }, [
                messageChannel.port2
            ]);
        }).finally(()=>{
            if (handler) this.removeMessageHandler(handler);
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Lazy accessor for window, since the compat layer won't tree shake this out,
 * we need to make sure not to mess with window unless we have to
 */ function _window() {
    return window;
}
function _setWindowLocation(url) {
    _window().location.href = url;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _isWorker() {
    return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';
}
async function _getActiveServiceWorker() {
    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) return null;
    try {
        const registration = await navigator.serviceWorker.ready;
        return registration.active;
    } catch (_a) {
        return null;
    }
}
function _getServiceWorkerController() {
    var _a;
    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
}
function _getWorkerGlobalScope() {
    return _isWorker() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DB_NAME = 'firebaseLocalStorageDb';
const DB_VERSION = 1;
const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
const DB_DATA_KEYPATH = 'fbase_key';
/**
 * Promise wrapper for IDBRequest
 *
 * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
 *
 */ class DBPromise {
    constructor(request){
        this.request = request;
    }
    toPromise() {
        return new Promise((resolve, reject)=>{
            this.request.addEventListener('success', ()=>{
                resolve(this.request.result);
            });
            this.request.addEventListener('error', ()=>{
                reject(this.request.error);
            });
        });
    }
}
function getObjectStore(db, isReadWrite) {
    return db.transaction([
        DB_OBJECTSTORE_NAME
    ], isReadWrite ? 'readwrite' : 'readonly').objectStore(DB_OBJECTSTORE_NAME);
}
function _deleteDatabase() {
    const request = indexedDB.deleteDatabase(DB_NAME);
    return new DBPromise(request).toPromise();
}
function _openDatabase() {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    return new Promise((resolve, reject)=>{
        request.addEventListener('error', ()=>{
            reject(request.error);
        });
        request.addEventListener('upgradeneeded', ()=>{
            const db = request.result;
            try {
                db.createObjectStore(DB_OBJECTSTORE_NAME, {
                    keyPath: DB_DATA_KEYPATH
                });
            } catch (e) {
                reject(e);
            }
        });
        request.addEventListener('success', async ()=>{
            const db = request.result;
            // Strange bug that occurs in Firefox when multiple tabs are opened at the
            // same time. The only way to recover seems to be deleting the database
            // and re-initializing it.
            // https://github.com/firebase/firebase-js-sdk/issues/634
            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
                // Need to close the database or else you get a `blocked` event
                db.close();
                await _deleteDatabase();
                resolve(await _openDatabase());
            } else resolve(db);
        });
    });
}
async function _putObject(db, key, value) {
    const request = getObjectStore(db, true).put({
        [DB_DATA_KEYPATH]: key,
        value
    });
    return new DBPromise(request).toPromise();
}
async function getObject(db, key) {
    const request = getObjectStore(db, false).get(key);
    const data = await new DBPromise(request).toPromise();
    return data === undefined ? null : data.value;
}
function _deleteObject(db, key) {
    const request = getObjectStore(db, true).delete(key);
    return new DBPromise(request).toPromise();
}
const _POLLING_INTERVAL_MS = 800;
const _TRANSACTION_RETRY_COUNT = 3;
class IndexedDBLocalPersistence {
    constructor(){
        this.type = "LOCAL" /* LOCAL */ ;
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        // Fire & forget the service worker registration as it may never resolve
        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(()=>{}, ()=>{});
    }
    async _openDb() {
        if (this.db) return this.db;
        this.db = await _openDatabase();
        return this.db;
    }
    async _withRetries(op) {
        let numAttempts = 0;
        while(true)try {
            const db = await this._openDb();
            return await op(db);
        } catch (e) {
            if ((numAttempts++) > _TRANSACTION_RETRY_COUNT) throw e;
            if (this.db) {
                this.db.close();
                this.db = undefined;
            }
        // TODO: consider adding exponential backoff
        }
    }
    /**
     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
     * postMessage interface to send these events to the worker ourselves.
     */ async initializeServiceWorkerMessaging() {
        return _isWorker() ? this.initializeReceiver() : this.initializeSender();
    }
    /**
     * As the worker we should listen to events from the main window.
     */ async initializeReceiver() {
        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
        // Refresh from persistence if we receive a KeyChanged message.
        this.receiver._subscribe("keyChanged" /* KEY_CHANGED */ , async (_origin, data)=>{
            const keys = await this._poll();
            return {
                keyProcessed: keys.includes(data.key)
            };
        });
        // Let the sender know that we are listening so they give us more timeout.
        this.receiver._subscribe("ping" /* PING */ , async (_origin, _data)=>{
            return [
                "keyChanged" /* KEY_CHANGED */ 
            ];
        });
    }
    /**
     * As the main window, we should let the worker know when keys change (set and remove).
     *
     * @remarks
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
     * may not resolve.
     */ async initializeSender() {
        var _a, _b;
        // Check to see if there's an active service worker.
        this.activeServiceWorker = await _getActiveServiceWorker();
        if (!this.activeServiceWorker) return;
        this.sender = new Sender(this.activeServiceWorker);
        // Ping the service worker to check what events they can handle.
        const results = await this.sender._send("ping" /* PING */ , {}, 800 /* LONG_ACK */ );
        if (!results) return;
        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged" /* KEY_CHANGED */ ))) this.serviceWorkerReceiverAvailable = true;
    }
    /**
     * Let the worker know about a changed key, the exact key doesn't technically matter since the
     * worker will just trigger a full sync anyway.
     *
     * @remarks
     * For now, we only support one service worker per page.
     *
     * @param key - Storage key which changed.
     */ async notifyServiceWorker(key) {
        if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) return;
        try {
            await this.sender._send("keyChanged" /* KEY_CHANGED */ , {
                key
            }, // Use long timeout if receiver has previously responded to a ping from us.
            this.serviceWorkerReceiverAvailable ? 800 /* LONG_ACK */  : 50 /* ACK */ );
        } catch (_a) {
        // This is a best effort approach. Ignore errors.
        }
    }
    async _isAvailable() {
        try {
            if (!indexedDB) return false;
            const db = await _openDatabase();
            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');
            await _deleteObject(db, STORAGE_AVAILABLE_KEY);
            return true;
        } catch (_a) {}
        return false;
    }
    async _withPendingWrite(write) {
        this.pendingWrites++;
        try {
            await write();
        } finally{
            this.pendingWrites--;
        }
    }
    async _set(key, value) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>_putObject(db, key, value)
            );
            this.localCache[key] = value;
            return this.notifyServiceWorker(key);
        });
    }
    async _get(key) {
        const obj = await this._withRetries((db)=>getObject(db, key)
        );
        this.localCache[key] = obj;
        return obj;
    }
    async _remove(key) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>_deleteObject(db, key)
            );
            delete this.localCache[key];
            return this.notifyServiceWorker(key);
        });
    }
    async _poll() {
        // TODO: check if we need to fallback if getAll is not supported
        const result = await this._withRetries((db)=>{
            const getAllRequest = getObjectStore(db, false).getAll();
            return new DBPromise(getAllRequest).toPromise();
        });
        if (!result) return [];
        // If we have pending writes in progress abort, we'll get picked up on the next poll
        if (this.pendingWrites !== 0) return [];
        const keys = [];
        const keysInResult = new Set();
        for (const { fbase_key: key , value  } of result){
            keysInResult.add(key);
            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                this.notifyListeners(key, value);
                keys.push(key);
            }
        }
        for (const localKey of Object.keys(this.localCache))if (this.localCache[localKey] && !keysInResult.has(localKey)) {
            // Deleted
            this.notifyListeners(localKey, null);
            keys.push(localKey);
        }
        return keys;
    }
    notifyListeners(key, newValue) {
        this.localCache[key] = newValue;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(newValue);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(async ()=>this._poll()
        , _POLLING_INTERVAL_MS);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) this.startPolling();
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            this._get(key); // This can happen in the background async and we can return immediately.
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) this.stopPolling();
    }
}
IndexedDBLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
 * for the underlying storage.
 *
 * @public
 */ const indexedDBLocalPersistence = IndexedDBLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function startSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaSignIn:start" /* START_PHONE_MFA_SIGN_IN */ , _addTidIfNecessary(auth, request));
}
function finalizeSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaSignIn:finalize" /* FINALIZE_PHONE_MFA_SIGN_IN */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function getRecaptchaParams(auth) {
    return (await _performApiRequest(auth, "GET" /* GET */ , "/v1/recaptchaParams" /* GET_RECAPTCHA_PARAM */ )).recaptchaSiteKey || '';
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getScriptParentElement() {
    var _a, _b;
    return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}
function _loadJS(url) {
    // TODO: consider adding timeout support & cancellation
    return new Promise((resolve, reject)=>{
        const el = document.createElement('script');
        el.setAttribute('src', url);
        el.onload = resolve;
        el.onerror = (e)=>{
            const error = _createError("internal-error" /* INTERNAL_ERROR */ );
            error.customData = e;
            reject(error);
        };
        el.type = 'text/javascript';
        el.charset = 'UTF-8';
        getScriptParentElement().appendChild(el);
    });
}
function _generateCallbackName(prefix) {
    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _SOLVE_TIME_MS = 500;
const _EXPIRATION_TIME_MS = 60000;
const _WIDGET_ID_START = 1000000000000;
class MockReCaptcha {
    constructor(auth){
        this.auth = auth;
        this.counter = _WIDGET_ID_START;
        this._widgets = new Map();
    }
    render(container, parameters) {
        const id = this.counter;
        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
        this.counter++;
        return id;
    }
    reset(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        (_a = this._widgets.get(id)) === null || _a === void 0 || _a.delete();
        this._widgets.delete(id);
    }
    getResponse(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';
    }
    async execute(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        (_a = this._widgets.get(id)) === null || _a === void 0 || _a.execute();
        return '';
    }
}
class MockWidget {
    constructor(containerOrId, appName, params){
        this.params = params;
        this.timerId = null;
        this.deleted = false;
        this.responseToken = null;
        this.clickHandler = ()=>{
            this.execute();
        };
        const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;
        _assert(container, "argument-error" /* ARGUMENT_ERROR */ , {
            appName
        });
        this.container = container;
        this.isVisible = this.params.size !== 'invisible';
        if (this.isVisible) this.execute();
        else this.container.addEventListener('click', this.clickHandler);
    }
    getResponse() {
        this.checkIfDeleted();
        return this.responseToken;
    }
    delete() {
        this.checkIfDeleted();
        this.deleted = true;
        if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
        this.container.removeEventListener('click', this.clickHandler);
    }
    execute() {
        this.checkIfDeleted();
        if (this.timerId) return;
        this.timerId = window.setTimeout(()=>{
            this.responseToken = generateRandomAlphaNumericString(50);
            const { callback , 'expired-callback': expiredCallback  } = this.params;
            if (callback) try {
                callback(this.responseToken);
            } catch (e) {}
            this.timerId = window.setTimeout(()=>{
                this.timerId = null;
                this.responseToken = null;
                if (expiredCallback) try {
                    expiredCallback();
                } catch (e) {}
                if (this.isVisible) this.execute();
            }, _EXPIRATION_TIME_MS);
        }, _SOLVE_TIME_MS);
    }
    checkIfDeleted() {
        if (this.deleted) throw new Error('reCAPTCHA mock was already deleted!');
    }
}
function generateRandomAlphaNumericString(len) {
    const chars = [];
    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    for(let i = 0; i < len; i++)chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
    return chars.join('');
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // ReCaptcha will load using the same callback, so the callback function needs
// to be kept around
const _JSLOAD_CALLBACK = _generateCallbackName('rcb');
const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
const RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';
/**
 * Loader for the GReCaptcha library. There should only ever be one of this.
 */ class ReCaptchaLoaderImpl {
    constructor(){
        this.hostLanguage = '';
        this.counter = 0;
        this.librarySeparatelyLoaded = !!_window().grecaptcha;
    }
    load(auth, hl = '') {
        _assert(isHostLanguageValid(hl), auth, "argument-error" /* ARGUMENT_ERROR */ );
        if (this.shouldResolveImmediately(hl)) return Promise.resolve(_window().grecaptcha);
        return new Promise((resolve, reject)=>{
            const networkTimeout = _window().setTimeout(()=>{
                reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
            }, NETWORK_TIMEOUT_DELAY.get());
            _window()[_JSLOAD_CALLBACK] = ()=>{
                _window().clearTimeout(networkTimeout);
                delete _window()[_JSLOAD_CALLBACK];
                const recaptcha = _window().grecaptcha;
                if (!recaptcha) {
                    reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */ ));
                    return;
                }
                // Wrap the greptcha render function so that we know if the developer has
                // called it separately
                const render = recaptcha.render;
                recaptcha.render = (container, params)=>{
                    const widgetId = render(container, params);
                    this.counter++;
                    return widgetId;
                };
                this.hostLanguage = hl;
                resolve(recaptcha);
            };
            const url = `${RECAPTCHA_BASE}?${_util.querystring({
                onload: _JSLOAD_CALLBACK,
                render: 'explicit',
                hl
            })}`;
            _loadJS(url).catch(()=>{
                clearTimeout(networkTimeout);
                reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */ ));
            });
        });
    }
    clearedOneInstance() {
        this.counter--;
    }
    shouldResolveImmediately(hl) {
        // We can resolve immediately if:
        //   • grecaptcha is already defined AND (
        //     1. the requested language codes are the same OR
        //     2. there exists already a ReCaptcha on the page
        //     3. the library was already loaded by the app
        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
        // that are already in the page
        return !!_window().grecaptcha && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
    }
}
function isHostLanguageValid(hl) {
    return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
}
class MockReCaptchaLoaderImpl {
    async load(auth) {
        return new MockReCaptcha(auth);
    }
    clearedOneInstance() {}
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
const DEFAULT_PARAMS = {
    theme: 'light',
    type: 'image'
};
/**
 * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.
 *
 * @public
 */ class RecaptchaVerifier {
    /**
     *
     * @param containerOrId - The reCAPTCHA container parameter.
     *
     * @remarks
     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
     * an element ID. The corresponding element must also must be in the DOM at the time of
     * initialization.
     *
     * @param parameters - The optional reCAPTCHA parameters.
     *
     * @remarks
     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
     * 'invisible'.
     *
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     *
     * @remarks
     * If none is provided, the default Firebase {@link Auth} instance is used. A Firebase {@link Auth} instance
     * must be initialized with an API key, otherwise an error will be thrown.
     */ constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern){
        this.parameters = parameters;
        /**
         * The application verifier type.
         *
         * @remarks
         * For a reCAPTCHA verifier, this is 'recaptcha'.
         */ this.type = RECAPTCHA_VERIFIER_TYPE;
        this.destroyed = false;
        this.widgetId = null;
        this.tokenChangeListeners = new Set();
        this.renderPromise = null;
        this.recaptcha = null;
        this.auth = _castAuth(authExtern);
        this.isInvisible = this.parameters.size === 'invisible';
        _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
        const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;
        _assert(container, this.auth, "argument-error" /* ARGUMENT_ERROR */ );
        this.container = container;
        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();
        this.validateStartingState();
    // TODO: Figure out if sdk version is needed
    }
    /**
     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
     *
     * @returns A Promise for the reCAPTCHA token.
     */ async verify() {
        this.assertNotDestroyed();
        const id = await this.render();
        const recaptcha = this.getAssertedRecaptcha();
        const response = recaptcha.getResponse(id);
        if (response) return response;
        return new Promise((resolve)=>{
            const tokenChange = (token)=>{
                if (!token) return; // Ignore token expirations.
                this.tokenChangeListeners.delete(tokenChange);
                resolve(token);
            };
            this.tokenChangeListeners.add(tokenChange);
            if (this.isInvisible) recaptcha.execute(id);
        });
    }
    /**
     * Renders the reCAPTCHA widget on the page.
     *
     * @returns A Promise that resolves with the reCAPTCHA widget ID.
     */ render() {
        try {
            this.assertNotDestroyed();
        } catch (e1) {
            // This method returns a promise. Since it's not async (we want to return the
            // _same_ promise if rendering is still occurring), the API surface should
            // reject with the error rather than just throw
            return Promise.reject(e1);
        }
        if (this.renderPromise) return this.renderPromise;
        this.renderPromise = this.makeRenderPromise().catch((e)=>{
            this.renderPromise = null;
            throw e;
        });
        return this.renderPromise;
    }
    /** @internal */ _reset() {
        this.assertNotDestroyed();
        if (this.widgetId !== null) this.getAssertedRecaptcha().reset(this.widgetId);
    }
    /**
     * Clears the reCAPTCHA widget from the page and destroys the instance.
     */ clear() {
        this.assertNotDestroyed();
        this.destroyed = true;
        this._recaptchaLoader.clearedOneInstance();
        if (!this.isInvisible) this.container.childNodes.forEach((node)=>{
            this.container.removeChild(node);
        });
    }
    validateStartingState() {
        _assert(!this.parameters.sitekey, this.auth, "argument-error" /* ARGUMENT_ERROR */ );
        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* ARGUMENT_ERROR */ );
        _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
    }
    makeTokenCallback(existing) {
        return (token)=>{
            this.tokenChangeListeners.forEach((listener)=>listener(token)
            );
            if (typeof existing === 'function') existing(token);
            else if (typeof existing === 'string') {
                const globalFunc = _window()[existing];
                if (typeof globalFunc === 'function') globalFunc(token);
            }
        };
    }
    assertNotDestroyed() {
        _assert(!this.destroyed, this.auth, "internal-error" /* INTERNAL_ERROR */ );
    }
    async makeRenderPromise() {
        await this.init();
        if (!this.widgetId) {
            let container = this.container;
            if (!this.isInvisible) {
                const guaranteedEmpty = document.createElement('div');
                container.appendChild(guaranteedEmpty);
                container = guaranteedEmpty;
            }
            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
        }
        return this.widgetId;
    }
    async init() {
        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error" /* INTERNAL_ERROR */ );
        await domReady();
        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);
        const siteKey = await getRecaptchaParams(this.auth);
        _assert(siteKey, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        this.parameters.sitekey = siteKey;
    }
    getAssertedRecaptcha() {
        _assert(this.recaptcha, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        return this.recaptcha;
    }
}
function domReady() {
    let resolver = null;
    return new Promise((resolve)=>{
        if (document.readyState === 'complete') {
            resolve();
            return;
        }
        // Document not ready, wait for load before resolving.
        // Save resolver, so we can remove listener in case it was externally
        // cancelled.
        resolver = ()=>resolve()
        ;
        window.addEventListener('load', resolver);
    }).catch((e)=>{
        if (resolver) window.removeEventListener('load', resolver);
        throw e;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ConfirmationResultImpl {
    constructor(verificationId, onConfirmation){
        this.verificationId = verificationId;
        this.onConfirmation = onConfirmation;
    }
    confirm(verificationCode) {
        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
        return this.onConfirmation(authCredential);
    }
}
/**
 * Asynchronously signs in using a phone number.
 *
 * @remarks
 * This method sends a code via SMS to the given
 * phone number, and returns a {@link ConfirmationResult}. After the user
 * provides the code sent to their phone, call {@link ConfirmationResult.confirm}
 * with the code to sign the user in.
 *
 * For abuse prevention, this method also requires a {@link ApplicationVerifier}.
 * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.
 * This function can work on other platforms that do not support the
 * {@link RecaptchaVerifier} (like React Native), but you need to use a
 * third-party {@link ApplicationVerifier} implementation.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
 * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
 * // Obtain a verificationCode from the user.
 * const credential = await confirmationResult.confirm(verificationCode);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {
    const authInternal = _castAuth(auth);
    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, _util.getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>signInWithCredential(authInternal, cred)
    );
}
/**
 * Links the user account with the given phone number.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = _util.getModularInstance(user);
    await _assertLinkedStatus(false, userInternal, "phone" /* PHONE */ );
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, _util.getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>linkWithCredential(userInternal, cred)
    );
}
/**
 * Re-authenticates a user using a fresh phone credential.
 *
 * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = _util.getModularInstance(user);
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, _util.getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>reauthenticateWithCredential(userInternal, cred)
    );
}
/**
 * Returns a verification ID to be used in conjunction with the SMS code that is sent.
 *
 */ async function _verifyPhoneNumber(auth, options, verifier) {
    var _a;
    const recaptchaToken = await verifier.verify();
    try {
        _assert(typeof recaptchaToken === 'string', auth, "argument-error" /* ARGUMENT_ERROR */ );
        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* ARGUMENT_ERROR */ );
        let phoneInfoOptions;
        if (typeof options === 'string') phoneInfoOptions = {
            phoneNumber: options
        };
        else phoneInfoOptions = options;
        if ('session' in phoneInfoOptions) {
            const session = phoneInfoOptions.session;
            if ('phoneNumber' in phoneInfoOptions) {
                _assert(session.type === "enroll" /* ENROLL */ , auth, "internal-error" /* INTERNAL_ERROR */ );
                const response = await startEnrollPhoneMfa(auth, {
                    idToken: session.credential,
                    phoneEnrollmentInfo: {
                        phoneNumber: phoneInfoOptions.phoneNumber,
                        recaptchaToken
                    }
                });
                return response.phoneSessionInfo.sessionInfo;
            } else {
                _assert(session.type === "signin" /* SIGN_IN */ , auth, "internal-error" /* INTERNAL_ERROR */ );
                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;
                _assert(mfaEnrollmentId, auth, "missing-multi-factor-info" /* MISSING_MFA_INFO */ );
                const response = await startSignInPhoneMfa(auth, {
                    mfaPendingCredential: session.credential,
                    mfaEnrollmentId,
                    phoneSignInInfo: {
                        recaptchaToken
                    }
                });
                return response.phoneResponseInfo.sessionInfo;
            }
        } else {
            const { sessionInfo  } = await sendPhoneVerificationCode(auth, {
                phoneNumber: phoneInfoOptions.phoneNumber,
                recaptchaToken
            });
            return sessionInfo;
        }
    } finally{
        verifier._reset();
    }
}
/**
 * Updates the user's phone number.
 *
 * @example
 * ```
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * await updatePhoneNumber(user, phoneCredential);
 * ```
 *
 * @param user - The user.
 * @param credential - A credential authenticating the new phone number.
 *
 * @public
 */ async function updatePhoneNumber(user, credential) {
    await _link$1(_util.getModularInstance(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link PhoneAuthCredential}.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * const userCredential = await signInWithCredential(auth, phoneCredential);
 * ```
 *
 * @public
 */ class PhoneAuthProvider {
    /**
     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
     *
     */ constructor(auth){
        /** Always set to {@link ProviderId}.PHONE. */ this.providerId = PhoneAuthProvider.PROVIDER_ID;
        this.auth = _castAuth(auth);
    }
    /**
     *
     * Starts a phone number authentication flow by sending a verification code to the given phone
     * number.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
     * E.164 format (e.g. +16505550101).
     * @param applicationVerifier - For abuse prevention, this method also requires a
     * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,
     * {@link RecaptchaVerifier}.
     *
     * @returns A Promise for a verification ID that can be passed to
     * {@link PhoneAuthProvider.credential} to identify this flow..
     */ verifyPhoneNumber(phoneOptions, applicationVerifier) {
        return _verifyPhoneNumber(this.auth, phoneOptions, _util.getModularInstance(applicationVerifier));
    }
    /**
     * Creates a phone auth credential, given the verification ID from
     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
     * mobile device.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
     * @param verificationCode - The verification code sent to the user's mobile device.
     *
     * @returns The auth provider credential.
     */ static credential(verificationId, verificationCode) {
        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential}.
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        const credential = userCredential;
        return PhoneAuthProvider.credentialFromTaggedObject(credential);
    }
    /**
     * Returns an {@link AuthCredential} when passed an error.
     *
     * @remarks
     *
     * This method works for errors like
     * `auth/account-exists-with-different-credentials`. This is useful for
     * recovering when attempting to set a user's phone number but the number
     * in question is already tied to another account. For example, the following
     * code tries to update the current user's phone number, and if that
     * fails, links the user with the account associated with that number:
     *
     * ```js
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(number, verifier);
     * try {
     *   const code = ''; // Prompt the user for the verification code
     *   await updatePhoneNumber(
     *       auth.currentUser,
     *       PhoneAuthProvider.credential(verificationId, code));
     * } catch (e) {
     *   if (e.code === 'auth/account-exists-with-different-credential') {
     *     const cred = PhoneAuthProvider.credentialFromError(e);
     *     await linkWithCredential(auth.currentUser, cred);
     *   }
     * }
     *
     * // At this point, auth.currentUser.phoneNumber === number.
     * ```
     *
     * @param error - The error to generate a credential from.
     */ static credentialFromError(error) {
        return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { phoneNumber , temporaryProof  } = tokenResponse;
        if (phoneNumber && temporaryProof) return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
        return null;
    }
}
/** Always set to {@link ProviderId}.PHONE. */ PhoneAuthProvider.PROVIDER_ID = "phone" /* PHONE */ ;
/** Always set to {@link SignInMethod}.PHONE. */ PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone" /* PHONE */ ;
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Chooses a popup/redirect resolver to use. This prefers the override (which
 * is directly passed in), and falls back to the property set on the auth
 * object. If neither are available, this function errors w/ an argument error.
 */ function _withDefaultResolver(auth, resolverOverride) {
    if (resolverOverride) return _getInstance(resolverOverride);
    _assert(auth._popupRedirectResolver, auth, "argument-error" /* ARGUMENT_ERROR */ );
    return auth._popupRedirectResolver;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class IdpCredential extends AuthCredential {
    constructor(params){
        super("custom" /* CUSTOM */ , "custom" /* CUSTOM */ );
        this.params = params;
    }
    _getIdTokenResponse(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _linkToIdToken(auth, idToken) {
        return signInWithIdp(auth, this._buildIdpRequest(idToken));
    }
    _getReauthenticationResolver(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _buildIdpRequest(idToken) {
        const request = {
            requestUri: this.params.requestUri,
            sessionId: this.params.sessionId,
            postBody: this.params.postBody,
            tenantId: this.params.tenantId,
            pendingToken: this.params.pendingToken,
            returnSecureToken: true,
            returnIdpCredential: true
        };
        if (idToken) request.idToken = idToken;
        return request;
    }
}
function _signIn(params) {
    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
}
function _reauth(params) {
    const { auth , user  } = params;
    _assert(user, auth, "internal-error" /* INTERNAL_ERROR */ );
    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
}
async function _link(params) {
    const { auth , user  } = params;
    _assert(user, auth, "internal-error" /* INTERNAL_ERROR */ );
    return _link$1(user, new IdpCredential(params), params.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 */ class AbstractPopupRedirectOperation {
    constructor(auth, filter, resolver, user, bypassAuthState = false){
        this.auth = auth;
        this.resolver = resolver;
        this.user = user;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [
            filter
        ];
    }
    execute() {
        return new Promise(async (resolve, reject)=>{
            this.pendingPromise = {
                resolve,
                reject
            };
            try {
                this.eventManager = await this.resolver._initialize(this.auth);
                await this.onExecution();
                this.eventManager.registerConsumer(this);
            } catch (e) {
                this.reject(e);
            }
        });
    }
    async onAuthEvent(event) {
        const { urlResponse , sessionId , postBody , tenantId , error , type  } = event;
        if (error) {
            this.reject(error);
            return;
        }
        const params = {
            auth: this.auth,
            requestUri: urlResponse,
            sessionId: sessionId,
            tenantId: tenantId || undefined,
            postBody: postBody || undefined,
            user: this.user,
            bypassAuthState: this.bypassAuthState
        };
        try {
            this.resolve(await this.getIdpTask(type)(params));
        } catch (e) {
            this.reject(e);
        }
    }
    onError(error) {
        this.reject(error);
    }
    getIdpTask(type) {
        switch(type){
            case "signInViaPopup" /* SIGN_IN_VIA_POPUP */ :
            case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ :
                return _signIn;
            case "linkViaPopup" /* LINK_VIA_POPUP */ :
            case "linkViaRedirect" /* LINK_VIA_REDIRECT */ :
                return _link;
            case "reauthViaPopup" /* REAUTH_VIA_POPUP */ :
            case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ :
                return _reauth;
            default:
                _fail(this.auth, "internal-error" /* INTERNAL_ERROR */ );
        }
    }
    resolve(cred) {
        debugAssert(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
    }
    reject(error) {
        debugAssert(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.reject(error);
        this.unregisterAndCleanUp();
    }
    unregisterAndCleanUp() {
        if (this.eventManager) this.eventManager.unregisterConsumer(this);
        this.pendingPromise = null;
        this.cleanUp();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
/**
 * Authenticates a Firebase client using a popup-based OAuth authentication flow.
 *
 * @remarks
 * If succeeds, returns the signed in user along with the provider's credential. If sign in was
 * unsuccessful, returns an error object containing additional information about the error.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */ async function signInWithPopup(auth, provider, resolver) {
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    const action = new PopupOperation(authInternal, "signInViaPopup" /* SIGN_IN_VIA_POPUP */ , provider, resolverInternal);
    return action.executeNotNull();
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
 * OAuth flow.
 *
 * @remarks
 * If the reauthentication is successful, the returned result will contain the user and the
 * provider's credential.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 * // Reauthenticate using a popup.
 * await reauthenticateWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function reauthenticateWithPopup(user, provider, resolver) {
    const userInternal = _util.getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "reauthViaPopup" /* REAUTH_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Links the authenticated provider to the user account using a pop-up based OAuth flow.
 *
 * @remarks
 * If the linking is successful, the returned result will contain the user and the provider's credential.
 *
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a popup.
 * const provider = new FacebookAuthProvider();
 * await linkWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function linkWithPopup(user, provider, resolver) {
    const userInternal = _util.getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "linkViaPopup" /* LINK_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 *
 */ class PopupOperation extends AbstractPopupRedirectOperation {
    constructor(auth, filter, provider, resolver, user){
        super(auth, filter, resolver, user);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if (PopupOperation.currentPopupAction) PopupOperation.currentPopupAction.cancel();
        PopupOperation.currentPopupAction = this;
    }
    async executeNotNull() {
        const result = await this.execute();
        _assert(result, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        return result;
    }
    async onExecution() {
        debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
        const eventId = _generateEventId();
        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], eventId);
        this.authWindow.associatedEvent = eventId;
        // Check for web storage support and origin validation _after_ the popup is
        // loaded. These operations are slow (~1 second or so) Rather than
        // waiting on them before opening the window, optimistically open the popup
        // and check for storage support at the same time. If storage support is
        // not available, this will cause the whole thing to reject properly. It
        // will also close the popup, but since the promise has already rejected,
        // the popup closed by user poll will reject into the void.
        this.resolver._originValidation(this.auth).catch((e)=>{
            this.reject(e);
        });
        this.resolver._isIframeWebStorageSupported(this.auth, (isSupported)=>{
            if (!isSupported) this.reject(_createError(this.auth, "web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */ ));
        });
        // Handle user closure. Notice this does *not* use await
        this.pollUserCancellation();
    }
    get eventId() {
        var _a;
        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
    }
    cancel() {
        this.reject(_createError(this.auth, "cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */ ));
    }
    cleanUp() {
        if (this.authWindow) this.authWindow.close();
        if (this.pollId) window.clearTimeout(this.pollId);
        this.authWindow = null;
        this.pollId = null;
        PopupOperation.currentPopupAction = null;
    }
    pollUserCancellation() {
        const poll = ()=>{
            var _a, _b;
            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
                // Make sure that there is sufficient time for whatever action to
                // complete. The window could have closed but the sign in network
                // call could still be in flight.
                this.pollId = window.setTimeout(()=>{
                    this.pollId = null;
                    this.reject(_createError(this.auth, "popup-closed-by-user" /* POPUP_CLOSED_BY_USER */ ));
                }, 2000 /* AUTH_EVENT */ );
                return;
            }
            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
    }
}
// Only one popup is ever shown at once. The lifecycle of the current popup
// can be managed / cancelled by the constructor.
PopupOperation.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const PENDING_REDIRECT_KEY = 'pendingRedirect';
// We only get one redirect outcome for any one auth, so just store it
// in here.
const redirectOutcomeMap = new Map();
class RedirectAction extends AbstractPopupRedirectOperation {
    constructor(auth, resolver, bypassAuthState = false){
        super(auth, [
            "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ ,
            "linkViaRedirect" /* LINK_VIA_REDIRECT */ ,
            "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ ,
            "unknown" /* UNKNOWN */ 
        ], resolver, undefined, bypassAuthState);
        this.eventId = null;
    }
    /**
     * Override the execute function; if we already have a redirect result, then
     * just return it.
     */ async execute() {
        let readyOutcome = redirectOutcomeMap.get(this.auth._key());
        if (!readyOutcome) {
            try {
                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
                const result = hasPendingRedirect ? await super.execute() : null;
                readyOutcome = ()=>Promise.resolve(result)
                ;
            } catch (e) {
                readyOutcome = ()=>Promise.reject(e)
                ;
            }
            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
        }
        // If we're not bypassing auth state, the ready outcome should be set to
        // null.
        if (!this.bypassAuthState) redirectOutcomeMap.set(this.auth._key(), ()=>Promise.resolve(null)
        );
        return readyOutcome();
    }
    async onAuthEvent(event) {
        if (event.type === "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ ) return super.onAuthEvent(event);
        else if (event.type === "unknown" /* UNKNOWN */ ) {
            // This is a sentinel value indicating there's no pending redirect
            this.resolve(null);
            return;
        }
        if (event.eventId) {
            const user = await this.auth._redirectUserForId(event.eventId);
            if (user) {
                this.user = user;
                return super.onAuthEvent(event);
            } else this.resolve(null);
        }
    }
    async onExecution() {}
    cleanUp() {}
}
async function _getAndClearPendingRedirectStatus(resolver, auth) {
    const key = pendingRedirectKey(auth);
    const persistence = resolverPersistence(resolver);
    if (!await persistence._isAvailable()) return false;
    const hasPendingRedirect = await persistence._get(key) === 'true';
    await persistence._remove(key);
    return hasPendingRedirect;
}
async function _setPendingRedirectStatus(resolver, auth) {
    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');
}
function _clearRedirectOutcomes() {
    redirectOutcomeMap.clear();
}
function resolverPersistence(resolver) {
    return _getInstance(resolver._redirectPersistence);
}
function pendingRedirectKey(auth) {
    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Authenticates a Firebase client using a full-page redirect flow.
 *
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function signInWithRedirect(auth, provider, resolver) {
    return _signInWithRedirect(auth, provider, resolver);
}
async function _signInWithRedirect(auth, provider, resolver) {
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    await _setPendingRedirectStatus(resolverInternal, authInternal);
    return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ );
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * // Link using a redirect.
 * await linkWithRedirect(result.user, provider);
 * // This will again trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function reauthenticateWithRedirect(user, provider, resolver) {
    return _reauthenticateWithRedirect(user, provider, resolver);
}
async function _reauthenticateWithRedirect(user, provider, resolver) {
    const userInternal = _util.getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ , eventId);
}
/**
 * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a redirect.
 * const provider = new FacebookAuthProvider();
 * await linkWithRedirect(result.user, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */ function linkWithRedirect(user, provider, resolver) {
    return _linkWithRedirect(user, provider, resolver);
}
async function _linkWithRedirect(user, provider, resolver) {
    const userInternal = _util.getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _assertLinkedStatus(false, userInternal, provider.providerId);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* LINK_VIA_REDIRECT */ , eventId);
}
/**
 * Returns a {@link UserCredential} from the redirect-based sign-in flow.
 *
 * @remarks
 * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
 * error. If no redirect operation was called, returns a {@link UserCredential}
 * with a null `user`.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function getRedirectResult(auth, resolver) {
    await _castAuth(auth)._initializationPromise;
    return _getRedirectResult(auth, resolver, false);
}
async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
    const authInternal = _castAuth(auth);
    const resolver = _withDefaultResolver(authInternal, resolverExtern);
    const action = new RedirectAction(authInternal, resolver, bypassAuthState);
    const result = await action.execute();
    if (result && !bypassAuthState) {
        delete result.user._redirectEventId;
        await authInternal._persistUserIfCurrent(result.user);
        await authInternal._setRedirectUser(null, resolverExtern);
    }
    return result;
}
async function prepareUserForRedirect(user) {
    const eventId = _generateEventId(`${user.uid}:::`);
    user._redirectEventId = eventId;
    await user.auth._setRedirectUser(user);
    await user.auth._persistUserIfCurrent(user);
    return eventId;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The amount of time to store the UIDs of seen events; this is
// set to 10 min by default
const EVENT_DUPLICATION_CACHE_DURATION_MS = 600000;
class AuthEventManager {
    constructor(auth){
        this.auth = auth;
        this.cachedEventUids = new Set();
        this.consumers = new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
    }
    registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
            this.saveEventToCache(this.queuedRedirectEvent);
            this.queuedRedirectEvent = null;
        }
    }
    unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
    }
    onEvent(event) {
        // Check if the event has already been handled
        if (this.hasEventBeenHandled(event)) return false;
        let handled = false;
        this.consumers.forEach((consumer)=>{
            if (this.isEventForConsumer(event, consumer)) {
                handled = true;
                this.sendToConsumer(event, consumer);
                this.saveEventToCache(event);
            }
        });
        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) // If we've already seen a redirect before, or this is a popup event,
        // bail now
        return handled;
        this.hasHandledPotentialRedirect = true;
        // If the redirect wasn't handled, hang on to it
        if (!handled) {
            this.queuedRedirectEvent = event;
            handled = true;
        }
        return handled;
    }
    sendToConsumer(event, consumer) {
        var _a;
        if (event.error && !isNullRedirectEvent(event)) {
            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) || "internal-error" /* INTERNAL_ERROR */ ;
            consumer.onError(_createError(this.auth, code));
        } else consumer.onAuthEvent(event);
    }
    isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
        return consumer.filter.includes(event.type) && eventIdMatches;
    }
    hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) this.cachedEventUids.clear();
        return this.cachedEventUids.has(eventUid(event));
    }
    saveEventToCache(event) {
        this.cachedEventUids.add(eventUid(event));
        this.lastProcessedEventTime = Date.now();
    }
}
function eventUid(e) {
    return [
        e.type,
        e.eventId,
        e.sessionId,
        e.tenantId
    ].filter((v)=>v
    ).join('-');
}
function isNullRedirectEvent({ type , error  }) {
    return type === "unknown" /* UNKNOWN */  && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event" /* NO_AUTH_EVENT */ }`;
}
function isRedirectEvent(event) {
    switch(event.type){
        case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ :
        case "linkViaRedirect" /* LINK_VIA_REDIRECT */ :
        case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ :
            return true;
        case "unknown" /* UNKNOWN */ :
            return isNullRedirectEvent(event);
        default:
            return false;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _getProjectConfig(auth, request = {}) {
    return _performApiRequest(auth, "GET" /* GET */ , "/v1/projects" /* GET_PROJECT_CONFIG */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
const HTTP_REGEX = /^https?/;
async function _validateOrigin(auth) {
    // Skip origin validation if we are in an emulated environment
    if (auth.config.emulator) return;
    const { authorizedDomains  } = await _getProjectConfig(auth);
    for (const domain of authorizedDomains)try {
        if (matchDomain(domain)) return;
    } catch (_a) {
    // Do nothing if there's a URL error; just continue searching
    }
    // In the old SDK, this error also provides helpful messages.
    _fail(auth, "unauthorized-domain" /* INVALID_ORIGIN */ );
}
function matchDomain(expected) {
    const currentUrl = _getCurrentUrl();
    const { protocol , hostname  } = new URL(currentUrl);
    if (expected.startsWith('chrome-extension://')) {
        const ceUrl = new URL(expected);
        if (ceUrl.hostname === '' && hostname === '') // For some reason we're not parsing chrome URLs properly
        return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');
        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
    }
    if (!HTTP_REGEX.test(protocol)) return false;
    if (IP_ADDRESS_REGEX.test(expected)) // The domain has to be exactly equal to the pattern, as an IP domain will
    // only contain the IP, no extra character.
    return hostname === expected;
    // Dots in pattern should be escaped.
    const escapedDomainPattern = expected.replace(/\./g, '\\.');
    // Non ip address domains.
    // domain.com = *.domain.com OR domain.com
    const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
    return re.test(hostname);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const NETWORK_TIMEOUT = new Delay(30000, 60000);
/**
 * Reset unlaoded GApi modules. If gapi.load fails due to a network error,
 * it will stop working after a retrial. This is a hack to fix this issue.
 */ function resetUnloadedGapiModules() {
    // Clear last failed gapi.load state to force next gapi.load to first
    // load the failed gapi.iframes module.
    // Get gapix.beacon context.
    const beacon = _window().___jsl;
    // Get current hint.
    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) // Get gapi hint.
    for (const hint of Object.keys(beacon.H)){
        // Requested modules.
        beacon.H[hint].r = beacon.H[hint].r || [];
        // Loaded modules.
        beacon.H[hint].L = beacon.H[hint].L || [];
        // Set requested modules to a copy of the loaded modules.
        beacon.H[hint].r = [
            ...beacon.H[hint].L
        ];
        // Clear pending callbacks.
        if (beacon.CP) for(let i = 0; i < beacon.CP.length; i++)// Remove all failed pending callbacks.
        beacon.CP[i] = null;
    }
}
function loadGapi(auth) {
    return new Promise((resolve, reject)=>{
        var _a, _b, _c;
        // Function to run when gapi.load is ready.
        function loadGapiIframe() {
            // The developer may have tried to previously run gapi.load and failed.
            // Run this to fix that.
            resetUnloadedGapiModules();
            gapi.load('gapi.iframes', {
                callback: ()=>{
                    resolve(gapi.iframes.getContext());
                },
                ontimeout: ()=>{
                    // The above reset may be sufficient, but having this reset after
                    // failure ensures that if the developer calls gapi.load after the
                    // connection is re-established and before another attempt to embed
                    // the iframe, it would work and would not be broken because of our
                    // failed attempt.
                    // Timeout when gapi.iframes.Iframe not loaded.
                    resetUnloadedGapiModules();
                    reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
                },
                timeout: NETWORK_TIMEOUT.get()
            });
        }
        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) // If gapi.iframes.Iframe available, resolve.
        resolve(gapi.iframes.getContext());
        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) // Gapi loader ready, load gapi.iframes.
        loadGapiIframe();
        else {
            // Create a new iframe callback when this is called so as not to overwrite
            // any previous defined callback. This happens if this method is called
            // multiple times in parallel and could result in the later callback
            // overwriting the previous one. This would end up with a iframe
            // timeout.
            const cbName = _generateCallbackName('iframefcb');
            // GApi loader not available, dynamically load platform.js.
            _window()[cbName] = ()=>{
                // GApi loader should be ready.
                if (!!gapi.load) loadGapiIframe();
                else // Gapi loader failed, throw error.
                reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
            };
            // Load GApi loader.
            return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`).catch((e)=>reject(e)
            );
        }
    }).catch((error)=>{
        // Reset cached promise to allow for retrial.
        cachedGApiLoader = null;
        throw error;
    });
}
let cachedGApiLoader = null;
function _loadGapi(auth) {
    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
    return cachedGApiLoader;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const PING_TIMEOUT = new Delay(5000, 15000);
const IFRAME_PATH = '__/auth/iframe';
const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
const IFRAME_ATTRIBUTES = {
    style: {
        position: 'absolute',
        top: '-100px',
        width: '1px',
        height: '1px'
    },
    'aria-hidden': 'true',
    tabindex: '-1'
};
// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
const EID_FROM_APIHOST = new Map([
    [
        "identitytoolkit.googleapis.com" /* API_HOST */ ,
        'p'
    ],
    [
        'staging-identitytoolkit.sandbox.googleapis.com',
        's'
    ],
    [
        'test-identitytoolkit.sandbox.googleapis.com',
        't'
    ] // test
]);
function getIframeUrl(auth) {
    const config = auth.config;
    _assert(config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */ );
    const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
    const params = {
        apiKey: config.apiKey,
        appName: auth.name,
        v: _app.SDK_VERSION
    };
    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
    if (eid) params.eid = eid;
    const frameworks = auth._getFrameworks();
    if (frameworks.length) params.fw = frameworks.join(',');
    return `${url}?${_util.querystring(params).slice(1)}`;
}
async function _openIframe(auth) {
    const context = await _loadGapi(auth);
    const gapi = _window().gapi;
    _assert(gapi, auth, "internal-error" /* INTERNAL_ERROR */ );
    return context.open({
        where: document.body,
        url: getIframeUrl(auth),
        messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
        attributes: IFRAME_ATTRIBUTES,
        dontclear: true
    }, (iframe)=>new Promise(async (resolve, reject)=>{
            await iframe.restyle({
                // Prevent iframe from closing on mouse out.
                setHideOnLeave: false
            });
            const networkError = _createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ );
            // Confirm iframe is correctly loaded.
            // To fallback on failure, set a timeout.
            const networkErrorTimer = _window().setTimeout(()=>{
                reject(networkError);
            }, PING_TIMEOUT.get());
            // Clear timer and resolve pending iframe ready promise.
            function clearTimerAndResolve() {
                _window().clearTimeout(networkErrorTimer);
                resolve(iframe);
            }
            // This returns an IThenable. However the reject part does not call
            // when the iframe is not loaded.
            iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, ()=>{
                reject(networkError);
            });
        })
    );
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const BASE_POPUP_OPTIONS = {
    location: 'yes',
    resizable: 'yes',
    statusbar: 'yes',
    toolbar: 'no'
};
const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = 600;
const TARGET_BLANK = '_blank';
const FIREFOX_EMPTY_URL = 'http://localhost';
class AuthPopup {
    constructor(window){
        this.window = window;
        this.associatedEvent = null;
    }
    close() {
        if (this.window) try {
            this.window.close();
        } catch (e) {}
    }
}
function _open(auth, url, name2, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
    let target = '';
    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
        width: width.toString(),
        height: height.toString(),
        top,
        left
    });
    // Chrome iOS 7 and 8 is returning an undefined popup win when target is
    // specified, even though the popup is not necessarily blocked.
    const ua = _util.getUA().toLowerCase();
    if (name2) target = _isChromeIOS(ua) ? TARGET_BLANK : name2;
    if (_isFirefox(ua)) {
        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
        url = url || FIREFOX_EMPTY_URL;
        // Firefox disables by default scrolling on popup windows, which can create
        // issues when the user has many Google accounts, for instance.
        options.scrollbars = 'yes';
    }
    const optionsString = Object.entries(options).reduce((accum, [key, value])=>`${accum}${key}=${value},`
    , '');
    if (_isIOSStandalone(ua) && target !== '_self') {
        openAsNewWindowIOS(url || '', target);
        return new AuthPopup(null);
    }
    // about:blank getting sanitized causing browsers like IE/Edge to display
    // brief error message before redirecting to handler.
    const newWin = window.open(url || '', target, optionsString);
    _assert(newWin, auth, "popup-blocked" /* POPUP_BLOCKED */ );
    // Flaky on IE edge, encapsulate with a try and catch.
    try {
        newWin.focus();
    } catch (e) {}
    return new AuthPopup(newWin);
}
function openAsNewWindowIOS(url, target) {
    const el = document.createElement('a');
    el.href = url;
    el.target = target;
    const click = document.createEvent('MouseEvent');
    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
    el.dispatchEvent(click);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * URL for Authentication widget which will initiate the OAuth handshake
 *
 * @internal
 */ const WIDGET_PATH = '__/auth/handler';
/**
 * URL for emulated environment
 *
 * @internal
 */ const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
    _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */ );
    _assert(auth.config.apiKey, auth, "invalid-api-key" /* INVALID_API_KEY */ );
    const params = {
        apiKey: auth.config.apiKey,
        appName: auth.name,
        authType,
        redirectUrl,
        v: _app.SDK_VERSION,
        eventId
    };
    if (provider instanceof FederatedAuthProvider) {
        provider.setDefaultLanguage(auth.languageCode);
        params.providerId = provider.providerId || '';
        if (!_util.isEmpty(provider.getCustomParameters())) params.customParameters = JSON.stringify(provider.getCustomParameters());
        // TODO set additionalParams from the provider as well?
        for (const [key, value] of Object.entries(additionalParams || {}))params[key] = value;
    }
    if (provider instanceof BaseOAuthProvider) {
        const scopes = provider.getScopes().filter((scope)=>scope !== ''
        );
        if (scopes.length > 0) params.scopes = scopes.join(',');
    }
    if (auth.tenantId) params.tid = auth.tenantId;
    // TODO: maybe set eid as endipointId
    // TODO: maybe set fw as Frameworks.join(",")
    const paramsDict = params;
    for (const key of Object.keys(paramsDict))if (paramsDict[key] === undefined) delete paramsDict[key];
    return `${getHandlerBase(auth)}?${_util.querystring(paramsDict).slice(1)}`;
}
function getHandlerBase({ config  }) {
    if (!config.emulator) return `https://${config.authDomain}/${WIDGET_PATH}`;
    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The special web storage event
 *
 */ const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
class BrowserPopupRedirectResolver {
    constructor(){
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = browserSessionPersistence;
        this._completeRedirectFn = _getRedirectResult;
    }
    // Wrapping in async even though we don't await anywhere in order
    // to make sure errors are raised as promise rejections
    async _openPopup(auth, provider, authType, eventId) {
        var _a;
        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');
        const url = _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        return _open(auth, url, _generateEventId());
    }
    async _openRedirect(auth, provider, authType, eventId) {
        await this._originValidation(auth);
        _setWindowLocation(_getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId));
        return new Promise(()=>{});
    }
    _initialize(auth) {
        const key = auth._key();
        if (this.eventManagers[key]) {
            const { manager , promise  } = this.eventManagers[key];
            if (manager) return Promise.resolve(manager);
            else {
                debugAssert(promise, 'If manager is not set, promise should be');
                return promise;
            }
        }
        const promise = this.initAndGetManager(auth);
        this.eventManagers[key] = {
            promise
        };
        // If the promise is rejected, the key should be removed so that the
        // operation can be retried later.
        promise.catch(()=>{
            delete this.eventManagers[key];
        });
        return promise;
    }
    async initAndGetManager(auth) {
        const iframe = await _openIframe(auth);
        const manager = new AuthEventManager(auth);
        iframe.register('authEvent', (iframeEvent)=>{
            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* INVALID_AUTH_EVENT */ );
            // TODO: Consider splitting redirect and popup events earlier on
            const handled = manager.onEvent(iframeEvent.authEvent);
            return {
                status: handled ? "ACK" /* ACK */  : "ERROR" /* ERROR */ 
            };
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        this.eventManagers[auth._key()] = {
            manager
        };
        this.iframes[auth._key()] = iframe;
        return manager;
    }
    _isIframeWebStorageSupported(auth, cb) {
        const iframe = this.iframes[auth._key()];
        iframe.send(WEB_STORAGE_SUPPORT_KEY, {
            type: WEB_STORAGE_SUPPORT_KEY
        }, (result)=>{
            var _a;
            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
            if (isSupported !== undefined) cb(!!isSupported);
            _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
    }
    _originValidation(auth) {
        const key = auth._key();
        if (!this.originValidationPromises[key]) this.originValidationPromises[key] = _validateOrigin(auth);
        return this.originValidationPromises[key];
    }
    get _shouldInitProactively() {
        // Mobile browsers and Safari need to optimistically initialize
        return _isMobileBrowser() || _isSafari() || _isIOS();
    }
}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for browser
 * based applications.
 *
 * @public
 */ const browserPopupRedirectResolver = BrowserPopupRedirectResolver;
class MultiFactorAssertionImpl {
    constructor(factorId){
        this.factorId = factorId;
    }
    _process(auth, session, displayName) {
        switch(session.type){
            case "enroll" /* ENROLL */ :
                return this._finalizeEnroll(auth, session.credential, displayName);
            case "signin" /* SIGN_IN */ :
                return this._finalizeSignIn(auth, session.credential);
            default:
                return debugFail('unexpected MultiFactorSessionType');
        }
    }
}
/**
 * {@inheritdoc PhoneMultiFactorAssertion}
 *
 * @public
 */ class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
    constructor(credential){
        super("phone" /* PHONE */ );
        this.credential = credential;
    }
    /** @internal */ static _fromCredential(credential) {
        return new PhoneMultiFactorAssertionImpl(credential);
    }
    /** @internal */ _finalizeEnroll(auth, idToken, displayName) {
        return finalizeEnrollPhoneMfa(auth, {
            idToken,
            displayName,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
    /** @internal */ _finalizeSignIn(auth, mfaPendingCredential) {
        return finalizeSignInPhoneMfa(auth, {
            mfaPendingCredential,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
}
/**
 * Provider for generating a {@link PhoneMultiFactorAssertion}.
 *
 * @public
 */ class PhoneMultiFactorGenerator {
    constructor(){}
    /**
     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
     *
     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
     * @returns A {@link PhoneMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}
     */ static assertion(credential) {
        return PhoneMultiFactorAssertionImpl._fromCredential(credential);
    }
}
/**
 * The identifier of the phone second factor: `phone`.
 */ PhoneMultiFactorGenerator.FACTOR_ID = 'phone';
var name = "@firebase/auth";
var version = "0.19.12";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthInterop {
    constructor(auth){
        this.auth = auth;
        this.internalListeners = new Map();
    }
    getUid() {
        var _a;
        this.assertAuthConfigured();
        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
    }
    async getToken(forceRefresh) {
        this.assertAuthConfigured();
        await this.auth._initializationPromise;
        if (!this.auth.currentUser) return null;
        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
        return {
            accessToken
        };
    }
    addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) return;
        const unsubscribe = this.auth.onIdTokenChanged((user)=>{
            var _a;
            listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
    }
    removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) return;
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
    }
    assertAuthConfigured() {
        _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */ );
    }
    updateProactiveRefresh() {
        if (this.internalListeners.size > 0) this.auth._startProactiveRefresh();
        else this.auth._stopProactiveRefresh();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getVersionForPlatform(clientPlatform) {
    switch(clientPlatform){
        case "Node" /* NODE */ :
            return 'node';
        case "ReactNative" /* REACT_NATIVE */ :
            return 'rn';
        case "Worker" /* WORKER */ :
            return 'webworker';
        case "Cordova" /* CORDOVA */ :
            return 'cordova';
        default:
            return undefined;
    }
}
/** @internal */ function registerAuth(clientPlatform) {
    _app._registerComponent(new _component.Component("auth" /* AUTH */ , (container, { options: deps  })=>{
        const app1 = container.getProvider('app').getImmediate();
        const heartbeatServiceProvider1 = container.getProvider('heartbeat');
        const { apiKey , authDomain  } = app1.options;
        return ((app, heartbeatServiceProvider)=>{
            _assert(apiKey && !apiKey.includes(':'), "invalid-api-key" /* INVALID_API_KEY */ , {
                appName: app.name
            });
            // Auth domain is optional if IdP sign in isn't being used
            _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(':')), "argument-error" /* ARGUMENT_ERROR */ , {
                appName: app.name
            });
            const config = {
                apiKey,
                authDomain,
                clientPlatform,
                apiHost: "identitytoolkit.googleapis.com" /* API_HOST */ ,
                tokenApiHost: "securetoken.googleapis.com" /* TOKEN_API_HOST */ ,
                apiScheme: "https" /* API_SCHEME */ ,
                sdkClientVersion: _getClientVersion(clientPlatform)
            };
            const authInstance = new AuthImpl(app, heartbeatServiceProvider, config);
            _initializeAuthInstance(authInstance, deps);
            return authInstance;
        })(app1, heartbeatServiceProvider1);
    }, "PUBLIC" /* PUBLIC */ )/**
         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
         * For why we do this, See go/firebase-next-auth-init
         */ .setInstantiationMode("EXPLICIT" /* EXPLICIT */ )/**
         * Because all firebase products that depend on auth depend on auth-internal directly,
         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
         */ .setInstanceCreatedCallback((container, _instanceIdentifier, _instance)=>{
        const authInternalProvider = container.getProvider("auth-internal" /* AUTH_INTERNAL */ );
        authInternalProvider.initialize();
    }));
    _app._registerComponent(new _component.Component("auth-internal" /* AUTH_INTERNAL */ , (container)=>{
        const auth1 = _castAuth(container.getProvider("auth" /* AUTH */ ).getImmediate());
        return ((auth)=>new AuthInterop(auth)
        )(auth1);
    }, "PRIVATE" /* PRIVATE */ ).setInstantiationMode("EXPLICIT" /* EXPLICIT */ ));
    _app.registerVersion(name, version, getVersionForPlatform(clientPlatform));
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    _app.registerVersion(name, version, 'esm2017');
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
 * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
 *
 * @param app - The Firebase App.
 *
 * @public
 */ function getAuth(app = _app.getApp()) {
    const provider = _app._getProvider(app, 'auth');
    if (provider.isInitialized()) return provider.getImmediate();
    return initializeAuth(app, {
        popupRedirectResolver: browserPopupRedirectResolver,
        persistence: [
            indexedDBLocalPersistence,
            browserLocalPersistence,
            browserSessionPersistence
        ]
    });
}
registerAuth("Browser" /* BROWSER */ );

},{"@firebase/util":"ePiK6","@firebase/app":"3AcPV","tslib":"lRdW5","@firebase/logger":"fZmft","@firebase/component":"bi1VB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cJafS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _firestore = require("@firebase/firestore");
parcelHelpers.exportAll(_firestore, exports);

},{"@firebase/firestore":"fkIBe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkIBe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractUserDataWriter", ()=>Jh
);
parcelHelpers.export(exports, "Bytes", ()=>jc
);
parcelHelpers.export(exports, "CACHE_SIZE_UNLIMITED", ()=>Vc
);
parcelHelpers.export(exports, "CollectionReference", ()=>yc
);
parcelHelpers.export(exports, "DocumentReference", ()=>mc
);
parcelHelpers.export(exports, "DocumentSnapshot", ()=>Ph
);
parcelHelpers.export(exports, "FieldPath", ()=>Gc
);
parcelHelpers.export(exports, "FieldValue", ()=>Wc
);
parcelHelpers.export(exports, "Firestore", ()=>vc
);
parcelHelpers.export(exports, "FirestoreError", ()=>Q
);
parcelHelpers.export(exports, "GeoPoint", ()=>zc
);
parcelHelpers.export(exports, "LoadBundleTask", ()=>bc
);
parcelHelpers.export(exports, "Query", ()=>gc
);
parcelHelpers.export(exports, "QueryConstraint", ()=>Ch
);
parcelHelpers.export(exports, "QueryDocumentSnapshot", ()=>bh
);
parcelHelpers.export(exports, "QuerySnapshot", ()=>Vh
);
parcelHelpers.export(exports, "SnapshotMetadata", ()=>Rh
);
parcelHelpers.export(exports, "Timestamp", ()=>at
);
parcelHelpers.export(exports, "Transaction", ()=>ml
);
parcelHelpers.export(exports, "WriteBatch", ()=>Zh
);
parcelHelpers.export(exports, "_DatabaseId", ()=>vt
);
parcelHelpers.export(exports, "_DocumentKey", ()=>xt
);
parcelHelpers.export(exports, "_EmptyAppCheckTokenProvider", ()=>et
);
parcelHelpers.export(exports, "_EmptyAuthCredentialsProvider", ()=>z
);
parcelHelpers.export(exports, "_FieldPath", ()=>mt
);
parcelHelpers.export(exports, "_cast", ()=>lc
);
parcelHelpers.export(exports, "_debugAssert", ()=>q
);
parcelHelpers.export(exports, "_isBase64Available", ()=>yt
);
parcelHelpers.export(exports, "_logWarn", ()=>$
);
parcelHelpers.export(exports, "_setIndexConfiguration", ()=>Rl
);
parcelHelpers.export(exports, "_validateIsNotUsedTogether", ()=>uc
);
parcelHelpers.export(exports, "addDoc", ()=>ll
);
parcelHelpers.export(exports, "arrayRemove", ()=>Tl
);
parcelHelpers.export(exports, "arrayUnion", ()=>Il
);
parcelHelpers.export(exports, "clearIndexedDbPersistence", ()=>Oc
);
parcelHelpers.export(exports, "collection", ()=>pc
);
parcelHelpers.export(exports, "collectionGroup", ()=>Ic
);
parcelHelpers.export(exports, "connectFirestoreEmulator", ()=>wc
);
parcelHelpers.export(exports, "deleteDoc", ()=>hl
);
parcelHelpers.export(exports, "deleteField", ()=>yl
);
parcelHelpers.export(exports, "disableNetwork", ()=>Bc
);
parcelHelpers.export(exports, "doc", ()=>Tc
);
parcelHelpers.export(exports, "documentId", ()=>Qc
);
parcelHelpers.export(exports, "enableIndexedDbPersistence", ()=>Nc
);
parcelHelpers.export(exports, "enableMultiTabIndexedDbPersistence", ()=>kc
);
parcelHelpers.export(exports, "enableNetwork", ()=>$c
);
parcelHelpers.export(exports, "endAt", ()=>Qh
);
parcelHelpers.export(exports, "endBefore", ()=>Gh
);
parcelHelpers.export(exports, "ensureFirestoreConfigured", ()=>Cc
);
parcelHelpers.export(exports, "executeWrite", ()=>_l
);
parcelHelpers.export(exports, "getDoc", ()=>el
);
parcelHelpers.export(exports, "getDocFromCache", ()=>sl
);
parcelHelpers.export(exports, "getDocFromServer", ()=>il
);
parcelHelpers.export(exports, "getDocs", ()=>rl
);
parcelHelpers.export(exports, "getDocsFromCache", ()=>ol
);
parcelHelpers.export(exports, "getDocsFromServer", ()=>ul
);
parcelHelpers.export(exports, "getFirestore", ()=>Dc
);
parcelHelpers.export(exports, "increment", ()=>El
);
parcelHelpers.export(exports, "initializeFirestore", ()=>Sc
);
parcelHelpers.export(exports, "limit", ()=>$h
);
parcelHelpers.export(exports, "limitToLast", ()=>Bh
);
parcelHelpers.export(exports, "loadBundle", ()=>Uc
);
parcelHelpers.export(exports, "namedQuery", ()=>qc
);
parcelHelpers.export(exports, "onSnapshot", ()=>fl
);
parcelHelpers.export(exports, "onSnapshotsInSync", ()=>dl
);
parcelHelpers.export(exports, "orderBy", ()=>Oh
);
parcelHelpers.export(exports, "query", ()=>xh
);
parcelHelpers.export(exports, "queryEqual", ()=>Ac
);
parcelHelpers.export(exports, "refEqual", ()=>Ec
);
parcelHelpers.export(exports, "runTransaction", ()=>gl
);
parcelHelpers.export(exports, "serverTimestamp", ()=>pl
);
parcelHelpers.export(exports, "setDoc", ()=>al
);
parcelHelpers.export(exports, "setLogLevel", ()=>M
);
parcelHelpers.export(exports, "snapshotEqual", ()=>Sh
);
parcelHelpers.export(exports, "startAfter", ()=>qh
);
parcelHelpers.export(exports, "startAt", ()=>Uh
);
parcelHelpers.export(exports, "terminate", ()=>Lc
);
parcelHelpers.export(exports, "updateDoc", ()=>cl
);
parcelHelpers.export(exports, "waitForPendingWrites", ()=>Fc
);
parcelHelpers.export(exports, "where", ()=>kh
);
parcelHelpers.export(exports, "writeBatch", ()=>Al
);
var _app = require("@firebase/app");
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
var _util = require("@firebase/util");
var _webchannelWrapper = require("@firebase/webchannel-wrapper");
var process = require("process");
const D = "@firebase/firestore";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */ class C {
    constructor(t){
        this.uid = t;
    }
    isAuthenticated() {
        return null != this.uid;
    }
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */ toKey() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }
    isEqual(t) {
        return t.uid === this.uid;
    }
}
/** A user with a null UID. */ C.UNAUTHENTICATED = new C(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
C.GOOGLE_CREDENTIALS = new C("google-credentials-uid"), C.FIRST_PARTY = new C("first-party-uid"), C.MOCK_USER = new C("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let x = "9.6.11";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const N = new _logger.Logger("@firebase/firestore");
// Helper methods are needed because variables can't be exported as read/write
function k() {
    return N.logLevel;
}
/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel - The verbosity you set for activity and error logging. Can
 *   be any of the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */ function M(t) {
    N.setLogLevel(t);
}
function O(t, ...e) {
    if (N.logLevel <= _logger.LogLevel.DEBUG) {
        const n = e.map(B);
        N.debug(`Firestore (${x}): ${t}`, ...n);
    }
}
function F(t, ...e) {
    if (N.logLevel <= _logger.LogLevel.ERROR) {
        const n = e.map(B);
        N.error(`Firestore (${x}): ${t}`, ...n);
    }
}
/**
 * @internal
 */ function $(t, ...e) {
    if (N.logLevel <= _logger.LogLevel.WARN) {
        const n = e.map(B);
        N.warn(`Firestore (${x}): ${t}`, ...n);
    }
}
/**
 * Converts an additional log parameter to a string representation.
 */ function B(t) {
    if ("string" == typeof t) return t;
    try {
        return e = t, JSON.stringify(e);
    } catch (e1) {
        // Converting to JSON failed, just log the object directly
        return t;
    }
    /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Formats an object as a JSON string, suitable for logging. */ var e;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */ function L(t = "Unexpected state") {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const e = `FIRESTORE (${x}) INTERNAL ASSERTION FAILED: ` + t;
    // NOTE: We don't use FirestoreError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw F(e), new Error(e);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */ function U(t, e) {
    t || L();
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * The code of callsites invoking this function are stripped out in production
 * builds. Any side-effects of code within the debugAssert() invocation will not
 * happen in this case.
 *
 * @internal
 */ function q(t, e) {
    t || L();
}
/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */ function K(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
    return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const G = {
    // Causes are copied from:
    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
    /** Not an error; returned on success. */ OK: "ok",
    /** The operation was cancelled (typically by the caller). */ CANCELLED: "cancelled",
    /** Unknown error or an error from a different error domain. */ UNKNOWN: "unknown",
    /**
     * Client specified an invalid argument. Note that this differs from
     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
     * problematic regardless of the state of the system (e.g., a malformed file
     * name).
     */ INVALID_ARGUMENT: "invalid-argument",
    /**
     * Deadline expired before operation could complete. For operations that
     * change the state of the system, this error may be returned even if the
     * operation has completed successfully. For example, a successful response
     * from a server could have been delayed long enough for the deadline to
     * expire.
     */ DEADLINE_EXCEEDED: "deadline-exceeded",
    /** Some requested entity (e.g., file or directory) was not found. */ NOT_FOUND: "not-found",
    /**
     * Some entity that we attempted to create (e.g., file or directory) already
     * exists.
     */ ALREADY_EXISTS: "already-exists",
    /**
     * The caller does not have permission to execute the specified operation.
     * PERMISSION_DENIED must not be used for rejections caused by exhausting
     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
     * PERMISSION_DENIED must not be used if the caller can not be identified
     * (use UNAUTHENTICATED instead for those errors).
     */ PERMISSION_DENIED: "permission-denied",
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     */ UNAUTHENTICATED: "unauthenticated",
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
     * entire file system is out of space.
     */ RESOURCE_EXHAUSTED: "resource-exhausted",
    /**
     * Operation was rejected because the system is not in a state required for
     * the operation's execution. For example, directory to be deleted may be
     * non-empty, an rmdir operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     */ FAILED_PRECONDITION: "failed-precondition",
    /**
     * The operation was aborted, typically due to a concurrency issue like
     * sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */ ABORTED: "aborted",
    /**
     * Operation was attempted past the valid range. E.g., seeking or reading
     * past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
     * if the system state changes. For example, a 32-bit file system will
     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
     * an offset past the current file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
     * when it applies so that callers who are iterating through a space can
     * easily look for an OUT_OF_RANGE error to detect when they are done.
     */ OUT_OF_RANGE: "out-of-range",
    /** Operation is not implemented or not supported/enabled in this service. */ UNIMPLEMENTED: "unimplemented",
    /**
     * Internal errors. Means some invariants expected by underlying System has
     * been broken. If you see one of these errors, Something is very broken.
     */ INTERNAL: "internal",
    /**
     * The service is currently unavailable. This is a most likely a transient
     * condition and may be corrected by retrying with a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */ UNAVAILABLE: "unavailable",
    /** Unrecoverable data loss or corruption. */ DATA_LOSS: "data-loss"
};
/** An error returned by a Firestore operation. */ class Q extends _util.FirebaseError {
    /** @hideconstructor */ constructor(/**
     * The backend error code associated with this error.
     */ t, /**
     * A custom error description.
     */ e){
        super(t, e), this.code = t, this.message = e, // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        this.toString = ()=>`${this.name}: [code=${this.code}]: ${this.message}`
        ;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class j {
    constructor(){
        this.promise = new Promise((t, e)=>{
            this.resolve = t, this.reject = e;
        });
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class W {
    constructor(t, e){
        this.user = e, this.type = "OAuth", this.headers = new Map, this.headers.set("Authorization", `Bearer ${t}`);
    }
}
/**
 * A CredentialsProvider that always yields an empty token.
 * @internal
 */ class z {
    getToken() {
        return Promise.resolve(null);
    }
    invalidateToken() {}
    start(t, e) {
        // Fire with initial user.
        t.enqueueRetryable(()=>e(C.UNAUTHENTICATED)
        );
    }
    shutdown() {}
}
/**
 * A CredentialsProvider that always returns a constant token. Used for
 * emulator token mocking.
 */ class H {
    constructor(t){
        this.token = t, /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */ this.changeListener = null;
    }
    getToken() {
        return Promise.resolve(this.token);
    }
    invalidateToken() {}
    start(t, e) {
        this.changeListener = e, // Fire with initial user.
        t.enqueueRetryable(()=>e(this.token.user)
        );
    }
    shutdown() {
        this.changeListener = null;
    }
}
class J {
    constructor(t){
        this.t = t, /** Tracks the current User. */ this.currentUser = C.UNAUTHENTICATED, /**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */ this.i = 0, this.forceRefresh = !1, this.auth = null;
    }
    start(t1, e2) {
        let n = this.i;
        // A change listener that prevents double-firing for the same token change.
        const s = (t)=>this.i !== n ? (n = this.i, e2(t)) : Promise.resolve()
        ;
        // A promise that can be waited on to block on the next token change.
        // This promise is re-created after each change.
        let i = new j;
        this.o = ()=>{
            this.i++, this.currentUser = this.u(), i.resolve(), i = new j, t1.enqueueRetryable(()=>s(this.currentUser)
            );
        };
        const r = ()=>{
            const e = i;
            t1.enqueueRetryable(async ()=>{
                await e.promise, await s(this.currentUser);
            });
        }, o = (t)=>{
            O("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = t, this.auth.addAuthTokenListener(this.o), r();
        };
        this.t.onInit((t)=>o(t)
        ), // Our users can initialize Auth right after Firestore, so we give it
        // a chance to register itself with the component framework before we
        // determine whether to start up in unauthenticated mode.
        setTimeout(()=>{
            if (!this.auth) {
                const t = this.t.getImmediate({
                    optional: !0
                });
                t ? o(t) : // If auth is still not available, proceed with `null` user
                (O("FirebaseAuthCredentialsProvider", "Auth not yet detected"), i.resolve(), i = new j);
            }
        }, 0), r();
    }
    getToken() {
        // Take note of the current value of the tokenCounter so that this method
        // can fail (with an ABORTED error) if there is a token change while the
        // request is outstanding.
        const t = this.i, e3 = this.forceRefresh;
        return this.forceRefresh = !1, this.auth ? this.auth.getToken(e3).then((e)=>// Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.i !== t ? (O("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : e ? (U("string" == typeof e.accessToken), new W(e.accessToken, this.currentUser)) : null
        ) : Promise.resolve(null);
    }
    invalidateToken() {
        this.forceRefresh = !0;
    }
    shutdown() {
        this.auth && this.auth.removeAuthTokenListener(this.o);
    }
    // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.
    u() {
        const t = this.auth && this.auth.getUid();
        return U(null === t || "string" == typeof t), new C(t);
    }
}
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */ class Y {
    constructor(t, e, n){
        this.type = "FirstParty", this.user = C.FIRST_PARTY, this.headers = new Map, this.headers.set("X-Goog-AuthUser", e);
        const s = t.auth.getAuthHeaderValueForFirstParty([]);
        s && this.headers.set("Authorization", s), n && this.headers.set("X-Goog-Iam-Authorization-Token", n);
    }
}
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */ class X {
    constructor(t, e, n){
        this.h = t, this.l = e, this.m = n;
    }
    getToken() {
        return Promise.resolve(new Y(this.h, this.l, this.m));
    }
    start(t, e) {
        // Fire with initial uid.
        t.enqueueRetryable(()=>e(C.FIRST_PARTY)
        );
    }
    shutdown() {}
    invalidateToken() {}
}
class Z {
    constructor(t){
        this.value = t, this.type = "AppCheck", this.headers = new Map, t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
    }
}
class tt {
    constructor(t){
        this.g = t, this.forceRefresh = !1, this.appCheck = null, this.p = null;
    }
    start(t2, e4) {
        const n1 = (t)=>{
            null != t.error && O("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`);
            const n = t.token !== this.p;
            return this.p = t.token, O("FirebaseAppCheckTokenProvider", `Received ${n ? "new" : "existing"} token.`), n ? e4(t.token) : Promise.resolve();
        };
        this.o = (e)=>{
            t2.enqueueRetryable(()=>n1(e)
            );
        };
        const s = (t)=>{
            O("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = t, this.appCheck.addTokenListener(this.o);
        };
        this.g.onInit((t)=>s(t)
        ), // Our users can initialize AppCheck after Firestore, so we give it
        // a chance to register itself with the component framework.
        setTimeout(()=>{
            if (!this.appCheck) {
                const t = this.g.getImmediate({
                    optional: !0
                });
                t ? s(t) : // If AppCheck is still not available, proceed without it.
                O("FirebaseAppCheckTokenProvider", "AppCheck not yet detected");
            }
        }, 0);
    }
    getToken() {
        const t3 = this.forceRefresh;
        return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(t3).then((t)=>t ? (U("string" == typeof t.token), this.p = t.token, new Z(t.token)) : null
        ) : Promise.resolve(null);
    }
    invalidateToken() {
        this.forceRefresh = !0;
    }
    shutdown() {
        this.appCheck && this.appCheck.removeTokenListener(this.o);
    }
}
/**
 * An AppCheck token provider that always yields an empty token.
 * @internal
 */ class et {
    getToken() {
        return Promise.resolve(new Z(""));
    }
    invalidateToken() {}
    start(t, e) {}
    shutdown() {}
}
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */ /**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */ class nt {
    constructor(t4, e){
        this.previousValue = t4, e && (e.sequenceNumberHandler = (t)=>this.I(t)
        , this.T = (t)=>e.writeSequenceNumber(t)
        );
    }
    I(t) {
        return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
    }
    next() {
        const t = ++this.previousValue;
        return this.T && this.T(t), t;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */ function st(t) {
    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
    const e = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
    if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n);
    else // Falls back to Math.random
    for(let e5 = 0; e5 < t; e5++)n[e5] = Math.floor(256 * Math.random());
    return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ nt.A = -1;
class it {
    static R() {
        // Alphanumeric characters
        const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
        // The largest byte value that is a multiple of `char.length`.
        let n = "";
        for(; n.length < 20;){
            const s = st(40);
            for(let i = 0; i < s.length; ++i)// Only accept values that are [0, maxMultiple), this ensures they can
            // be evenly mapped to indices of `chars` via a modulo operation.
            n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
        }
        return n;
    }
}
function rt(t, e) {
    return t < e ? -1 : t > e ? 1 : 0;
}
/** Helper to compare arrays using isEqual(). */ function ot(t5, e, n) {
    return t5.length === e.length && t5.every((t, s)=>n(t, e[s])
    );
}
/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */ function ut(t) {
    // Return the input string, with an additional NUL byte appended.
    return t + "\0";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * For examples and further specifications, refer to the
 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
 */ class at {
    /**
     * Creates a new timestamp.
     *
     * @param seconds - The number of seconds of UTC time since Unix epoch
     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     *     9999-12-31T23:59:59Z inclusive.
     * @param nanoseconds - The non-negative fractions of a second at nanosecond
     *     resolution. Negative second values with fractions must still have
     *     non-negative nanoseconds values that count forward in time. Must be
     *     from 0 to 999,999,999 inclusive.
     */ constructor(/**
     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
     */ t, /**
     * The fractions of a second at nanosecond resolution.*
     */ e){
        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new Q(G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (e >= 1e9) throw new Q(G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (t < -62135596800) throw new Q(G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        // This will break in the year 10,000.
        if (t >= 253402300800) throw new Q(G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
    }
    /**
     * Creates a new timestamp with the current date, with millisecond precision.
     *
     * @returns a new timestamp representing the current date.
     */ static now() {
        return at.fromMillis(Date.now());
    }
    /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */ static fromDate(t) {
        return at.fromMillis(t.getTime());
    }
    /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */ static fromMillis(t) {
        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));
        return new at(e, n);
    }
    /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
     * causes a loss of precision since `Date` objects only support millisecond
     * precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */ toDate() {
        return new Date(this.toMillis());
    }
    /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */ toMillis() {
        return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }
    _compareTo(t) {
        return this.seconds === t.seconds ? rt(this.nanoseconds, t.nanoseconds) : rt(this.seconds, t.seconds);
    }
    /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */ isEqual(t) {
        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }
    /** Returns a textual representation of this `Timestamp`. */ toString() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }
    /** Returns a JSON-serializable representation of this `Timestamp`. */ toJSON() {
        return {
            seconds: this.seconds,
            nanoseconds: this.nanoseconds
        };
    }
    /**
     * Converts this object to a primitive string, which allows `Timestamp` objects
     * to be compared using the `>`, `<=`, `>=` and `>` operators.
     */ valueOf() {
        // This method returns a string of the form <seconds>.<nanoseconds> where
        // <seconds> is translated to have a non-negative value and both <seconds>
        // and <nanoseconds> are left-padded with zeroes to be a consistent length.
        // Strings with this format then have a lexiographical ordering that matches
        // the expected ordering. The <seconds> translation is done to avoid having
        // a leading negative sign (i.e. a leading '-' character) in its string
        // representation, which would affect its lexiographical ordering.
        const t = this.seconds - -62135596800;
        // Note: Up to 12 decimal digits are required to represent all valid
        // 'seconds' values.
        return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */ class ct {
    constructor(t){
        this.timestamp = t;
    }
    static fromTimestamp(t) {
        return new ct(t);
    }
    static min() {
        return new ct(new at(0, 0));
    }
    static max() {
        return new ct(new at(253402300799, 999999999));
    }
    compareTo(t) {
        return this.timestamp._compareTo(t.timestamp);
    }
    isEqual(t) {
        return this.timestamp.isEqual(t.timestamp);
    }
    /** Returns a number representation of the version for use in spec tests. */ toMicroseconds() {
        // Convert to microseconds.
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }
    toString() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }
    toTimestamp() {
        return this.timestamp;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function ht(t) {
    let e = 0;
    for(const n in t)Object.prototype.hasOwnProperty.call(t, n) && e++;
    return e;
}
function lt(t, e) {
    for(const n in t)Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
function ft(t) {
    for(const e in t)if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
    return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Path represents an ordered sequence of string segments.
 */ class dt {
    constructor(t, e, n){
        void 0 === e ? e = 0 : e > t.length && L(), void 0 === n ? n = t.length - e : n > t.length - e && L(), this.segments = t, this.offset = e, this.len = n;
    }
    get length() {
        return this.len;
    }
    isEqual(t) {
        return 0 === dt.comparator(this, t);
    }
    child(t6) {
        const e = this.segments.slice(this.offset, this.limit());
        return t6 instanceof dt ? t6.forEach((t)=>{
            e.push(t);
        }) : e.push(t6), this.construct(e);
    }
    /** The index of one past the last segment of the path. */ limit() {
        return this.offset + this.length;
    }
    popFirst(t) {
        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
    }
    popLast() {
        return this.construct(this.segments, this.offset, this.length - 1);
    }
    firstSegment() {
        return this.segments[this.offset];
    }
    lastSegment() {
        return this.get(this.length - 1);
    }
    get(t) {
        return this.segments[this.offset + t];
    }
    isEmpty() {
        return 0 === this.length;
    }
    isPrefixOf(t) {
        if (t.length < this.length) return !1;
        for(let e = 0; e < this.length; e++)if (this.get(e) !== t.get(e)) return !1;
        return !0;
    }
    isImmediateParentOf(t) {
        if (this.length + 1 !== t.length) return !1;
        for(let e = 0; e < this.length; e++)if (this.get(e) !== t.get(e)) return !1;
        return !0;
    }
    forEach(t) {
        for(let e = this.offset, n = this.limit(); e < n; e++)t(this.segments[e]);
    }
    toArray() {
        return this.segments.slice(this.offset, this.limit());
    }
    static comparator(t, e) {
        const n = Math.min(t.length, e.length);
        for(let s = 0; s < n; s++){
            const n = t.get(s), i = e.get(s);
            if (n < i) return -1;
            if (n > i) return 1;
        }
        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
    }
}
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 *
 * @internal
 */ class _t extends dt {
    construct(t, e, n) {
        return new _t(t, e, n);
    }
    canonicalString() {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        return this.toArray().join("/");
    }
    toString() {
        return this.canonicalString();
    }
    /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */ static fromString(...t7) {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        const e = [];
        for (const n of t7){
            if (n.indexOf("//") >= 0) throw new Q(G.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
            // Strip leading and traling slashed.
            e.push(...n.split("/").filter((t)=>t.length > 0
            ));
        }
        return new _t(e);
    }
    static emptyPath() {
        return new _t([]);
    }
}
const wt = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * A dot-separated path for navigating sub-objects within a document.
 * @internal
 */ class mt extends dt {
    construct(t, e, n) {
        return new mt(t, e, n);
    }
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */ static isValidIdentifier(t) {
        return wt.test(t);
    }
    canonicalString() {
        return this.toArray().map((t)=>(t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), mt.isValidIdentifier(t) || (t = "`" + t + "`"), t)
        ).join(".");
    }
    toString() {
        return this.canonicalString();
    }
    /**
     * Returns true if this field references the key of a document.
     */ isKeyField() {
        return 1 === this.length && "__name__" === this.get(0);
    }
    /**
     * The field designating the key of a document.
     */ static keyField() {
        return new mt([
            "__name__"
        ]);
    }
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */ static fromServerFormat(t) {
        const e = [];
        let n = "", s = 0;
        const i = ()=>{
            if (0 === n.length) throw new Q(G.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
            e.push(n), n = "";
        };
        let r = !1;
        for(; s < t.length;){
            const e = t[s];
            if ("\\" === e) {
                if (s + 1 === t.length) throw new Q(G.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                const e = t[s + 1];
                if ("\\" !== e && "." !== e && "`" !== e) throw new Q(G.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                n += e, s += 2;
            } else "`" === e ? (r = !r, s++) : "." !== e || r ? (n += e, s++) : (i(), s++);
        }
        if (i(), r) throw new Q(G.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
        return new mt(e);
    }
    static emptyPath() {
        return new mt([]);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */ class gt {
    constructor(t){
        this.fields = t, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        t.sort(mt.comparator);
    }
    /**
     * Verifies that `fieldPath` is included by at least one field in this field
     * mask.
     *
     * This is an O(n) operation, where `n` is the size of the field mask.
     */ covers(t) {
        for (const e of this.fields)if (e.isPrefixOf(t)) return !0;
        return !1;
    }
    isEqual(t8) {
        return ot(this.fields, t8.fields, (t, e)=>t.isEqual(e)
        );
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Converts a Base64 encoded string to a binary string. */ /** True if and only if the Base64 conversion functions are available. */ function yt() {
    return "undefined" != typeof atob;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 * @internal
 */ class pt {
    constructor(t){
        this.binaryString = t;
    }
    static fromBase64String(t) {
        const e = atob(t);
        return new pt(e);
    }
    static fromUint8Array(t9) {
        // TODO(indexing); Remove the copy of the byte string here as this method
        // is frequently called during indexing.
        const e6 = /**
 * Helper function to convert an Uint8array to a binary string.
 */ function(t) {
            let e = "";
            for(let n = 0; n < t.length; ++n)e += String.fromCharCode(t[n]);
            return e;
        }(t9);
        return new pt(e6);
    }
    [Symbol.iterator]() {
        let t = 0;
        return {
            next: ()=>t < this.binaryString.length ? {
                    value: this.binaryString.charCodeAt(t++),
                    done: !1
                } : {
                    value: void 0,
                    done: !0
                }
        };
    }
    toBase64() {
        var t;
        return t = this.binaryString, btoa(t);
    }
    toUint8Array() {
        return function(t) {
            const e = new Uint8Array(t.length);
            for(let n = 0; n < t.length; n++)e[n] = t.charCodeAt(n);
            return e;
        }(this.binaryString);
    }
    approximateByteSize() {
        return 2 * this.binaryString.length;
    }
    compareTo(t) {
        return rt(this.binaryString, t.binaryString);
    }
    isEqual(t) {
        return this.binaryString === t.binaryString;
    }
}
pt.EMPTY_BYTE_STRING = new pt("");
const It = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */ function Tt(t) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (U(!!t), "string" == typeof t) {
        // The date string can have higher precision (nanos) than the Date class
        // (millis), so we do some custom parsing here.
        // Parse the nanos right out of the string.
        let e = 0;
        const n = It.exec(t);
        if (U(!!n), n[1]) {
            // Pad the fraction out to 9 digits (nanos).
            let t = n[1];
            t = (t + "000000000").substr(0, 9), e = Number(t);
        }
        // Parse the date to get the seconds.
        const s = new Date(t);
        return {
            seconds: Math.floor(s.getTime() / 1e3),
            nanos: e
        };
    }
    return {
        seconds: Et(t.seconds),
        nanos: Et(t.nanos)
    };
}
/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */ function Et(t) {
    // TODO(bjornick): Handle int64 greater than 53 bits.
    return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */ function At(t) {
    return "string" == typeof t ? pt.fromBase64String(t) : pt.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   transform. They can only exist in the local view of a document. Therefore
 *   they do not need to be parsed or serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */ function Rt(t) {
    var e, n;
    return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
}
/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */ /**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */ function Pt(t) {
    const e = t.mapValue.fields.__previous_value__;
    return Rt(e) ? Pt(e) : e;
}
/**
 * Returns the local time at which this timestamp was first set.
 */ function bt(t) {
    const e = Tt(t.mapValue.fields.__local_write_time__.timestampValue);
    return new at(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Vt {
    /**
     * Constructs a DatabaseInfo using the provided host, databaseId and
     * persistenceKey.
     *
     * @param databaseId - The database to use.
     * @param appId - The Firebase App Id.
     * @param persistenceKey - A unique identifier for this Firestore's local
     * storage (used in conjunction with the databaseId).
     * @param host - The Firestore backend host to connect to.
     * @param ssl - Whether to use SSL when connecting.
     * @param forceLongPolling - Whether to use the forceLongPolling option
     * when using WebChannel as the network transport.
     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
     * option when using WebChannel as the network transport.
     * @param useFetchStreams Whether to use the Fetch API instead of
     * XMLHTTPRequest
     */ constructor(t, e, n, s, i, r, o, u){
        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, this.forceLongPolling = r, this.autoDetectLongPolling = o, this.useFetchStreams = u;
    }
}
/** The default database name for a project. */ /**
 * Represents the database ID a Firestore client is associated with.
 * @internal
 */ class vt {
    constructor(t, e){
        this.projectId = t, this.database = e || "(default)";
    }
    static empty() {
        return new vt("", "");
    }
    get isDefaultDatabase() {
        return "(default)" === this.database;
    }
    isEqual(t) {
        return t instanceof vt && t.projectId === this.projectId && t.database === this.database;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Sentinel value that sorts before any Mutation Batch ID. */ /**
 * Returns whether a variable is either undefined or null.
 */ function St(t) {
    return null == t;
}
/** Returns whether the value represents -0. */ function Dt(t) {
    // Detect if the value is -0.0. Based on polyfill from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    return 0 === t && 1 / t == -1 / 0;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value - The value to test for being an integer and in the safe range
 */ function Ct(t) {
    return "number" == typeof t && Number.isInteger(t) && !Dt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ class xt {
    constructor(t){
        this.path = t;
    }
    static fromPath(t) {
        return new xt(_t.fromString(t));
    }
    static fromName(t) {
        return new xt(_t.fromString(t).popFirst(5));
    }
    static empty() {
        return new xt(_t.emptyPath());
    }
    get collectionGroup() {
        return this.path.popLast().lastSegment();
    }
    /** Returns true if the document is in the specified collectionId. */ hasCollectionId(t) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }
    /** Returns the collection group (i.e. the name of the parent collection) for this key. */ getCollectionGroup() {
        return this.path.get(this.path.length - 2);
    }
    /** Returns the fully qualified path to the parent collection. */ getCollectionPath() {
        return this.path.popLast();
    }
    isEqual(t) {
        return null !== t && 0 === _t.comparator(this.path, t.path);
    }
    toString() {
        return this.path.toString();
    }
    static comparator(t, e) {
        return _t.comparator(t.path, e.path);
    }
    static isDocumentKey(t) {
        return t.length % 2 == 0;
    }
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */ static fromSegments(t) {
        return new xt(new _t(t.slice()));
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const Nt = {
    mapValue: {
        fields: {
            __type__: {
                stringValue: "__max__"
            }
        }
    }
}, kt = {
    nullValue: "NULL_VALUE"
};
/** Extracts the backend's type order for the provided value. */ function Mt(t) {
    return "nullValue" in t ? 0 /* NullValue */  : "booleanValue" in t ? 1 /* BooleanValue */  : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */  : "timestampValue" in t ? 3 /* TimestampValue */  : "stringValue" in t ? 5 /* StringValue */  : "bytesValue" in t ? 6 /* BlobValue */  : "referenceValue" in t ? 7 /* RefValue */  : "geoPointValue" in t ? 8 /* GeoPointValue */  : "arrayValue" in t ? 9 /* ArrayValue */  : "mapValue" in t ? Rt(t) ? 4 /* ServerTimestampValue */  : Ht(t) ? 9 /* ArrayValue */  : 10 /* ObjectValue */  : L();
}
/** Tests `left` and `right` for equality based on the backend semantics. */ function Ot(t10, e7) {
    if (t10 === e7) return !0;
    const n2 = Mt(t10);
    if (n2 !== Mt(e7)) return !1;
    switch(n2){
        case 0 /* NullValue */ :
        case 9007199254740991 /* MaxValue */ :
            return !0;
        case 1 /* BooleanValue */ :
            return t10.booleanValue === e7.booleanValue;
        case 4 /* ServerTimestampValue */ :
            return bt(t10).isEqual(bt(e7));
        case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                const n = Tt(t.timestampValue), s = Tt(e.timestampValue);
                return n.seconds === s.seconds && n.nanos === s.nanos;
            }(t10, e7);
        case 5 /* StringValue */ :
            return t10.stringValue === e7.stringValue;
        case 6 /* BlobValue */ :
            return function(t, e) {
                return At(t.bytesValue).isEqual(At(e.bytesValue));
            }(t10, e7);
        case 7 /* RefValue */ :
            return t10.referenceValue === e7.referenceValue;
        case 8 /* GeoPointValue */ :
            return function(t, e) {
                return Et(t.geoPointValue.latitude) === Et(e.geoPointValue.latitude) && Et(t.geoPointValue.longitude) === Et(e.geoPointValue.longitude);
            }(t10, e7);
        case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return Et(t.integerValue) === Et(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    const n = Et(t.doubleValue), s = Et(e.doubleValue);
                    return n === s ? Dt(n) === Dt(s) : isNaN(n) && isNaN(s);
                }
                return !1;
            }(t10, e7);
        case 9 /* ArrayValue */ :
            return ot(t10.arrayValue.values || [], e7.arrayValue.values || [], Ot);
        case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.mapValue.fields || {}, s = e.mapValue.fields || {};
                if (ht(n) !== ht(s)) return !1;
                for(const t11 in n)if (n.hasOwnProperty(t11) && (void 0 === s[t11] || !Ot(n[t11], s[t11]))) return !1;
                return !0;
            }(t10, e7);
        default:
            return L();
    }
}
function Ft(t12, e) {
    return void 0 !== (t12.values || []).find((t)=>Ot(t, e)
    );
}
function $t(t13, e8) {
    if (t13 === e8) return 0;
    const n3 = Mt(t13), s1 = Mt(e8);
    if (n3 !== s1) return rt(n3, s1);
    switch(n3){
        case 0 /* NullValue */ :
        case 9007199254740991 /* MaxValue */ :
            return 0;
        case 1 /* BooleanValue */ :
            return rt(t13.booleanValue, e8.booleanValue);
        case 2 /* NumberValue */ :
            return function(t, e) {
                const n = Et(t.integerValue || t.doubleValue), s = Et(e.integerValue || e.doubleValue);
                return n < s ? -1 : n > s ? 1 : n === s ? 0 : // one or both are NaN.
                isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
            }(t13, e8);
        case 3 /* TimestampValue */ :
            return Bt(t13.timestampValue, e8.timestampValue);
        case 4 /* ServerTimestampValue */ :
            return Bt(bt(t13), bt(e8));
        case 5 /* StringValue */ :
            return rt(t13.stringValue, e8.stringValue);
        case 6 /* BlobValue */ :
            return function(t, e) {
                const n = At(t), s = At(e);
                return n.compareTo(s);
            }(t13.bytesValue, e8.bytesValue);
        case 7 /* RefValue */ :
            return function(t, e) {
                const n = t.split("/"), s = e.split("/");
                for(let t14 = 0; t14 < n.length && t14 < s.length; t14++){
                    const e = rt(n[t14], s[t14]);
                    if (0 !== e) return e;
                }
                return rt(n.length, s.length);
            }(t13.referenceValue, e8.referenceValue);
        case 8 /* GeoPointValue */ :
            return function(t, e) {
                const n = rt(Et(t.latitude), Et(e.latitude));
                if (0 !== n) return n;
                return rt(Et(t.longitude), Et(e.longitude));
            }(t13.geoPointValue, e8.geoPointValue);
        case 9 /* ArrayValue */ :
            return function(t, e) {
                const n = t.values || [], s = e.values || [];
                for(let t15 = 0; t15 < n.length && t15 < s.length; ++t15){
                    const e = $t(n[t15], s[t15]);
                    if (e) return e;
                }
                return rt(n.length, s.length);
            }(t13.arrayValue, e8.arrayValue);
        case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.fields || {}, s = Object.keys(n), i = e.fields || {}, r = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), r.sort();
                for(let t16 = 0; t16 < s.length && t16 < r.length; ++t16){
                    const e = rt(s[t16], r[t16]);
                    if (0 !== e) return e;
                    const o = $t(n[s[t16]], i[r[t16]]);
                    if (0 !== o) return o;
                }
                return rt(s.length, r.length);
            }(t13.mapValue, e8.mapValue);
        default:
            throw L();
    }
}
function Bt(t, e) {
    if ("string" == typeof t && "string" == typeof e && t.length === e.length) return rt(t, e);
    const n = Tt(t), s = Tt(e), i = rt(n.seconds, s.seconds);
    return 0 !== i ? i : rt(n.nanos, s.nanos);
}
function Lt(t) {
    return Ut(t);
}
function Ut(t17) {
    var e9, n4;
    return "nullValue" in t17 ? "null" : "booleanValue" in t17 ? "" + t17.booleanValue : "integerValue" in t17 ? "" + t17.integerValue : "doubleValue" in t17 ? "" + t17.doubleValue : "timestampValue" in t17 ? function(t) {
        const e = Tt(t);
        return `time(${e.seconds},${e.nanos})`;
    }(t17.timestampValue) : "stringValue" in t17 ? t17.stringValue : "bytesValue" in t17 ? At(t17.bytesValue).toBase64() : "referenceValue" in t17 ? (n4 = t17.referenceValue, xt.fromName(n4).toString()) : "geoPointValue" in t17 ? `geo(${(e9 = t17.geoPointValue).latitude},${e9.longitude})` : "arrayValue" in t17 ? function(t) {
        let e = "[", n = !0;
        for (const s of t.values || [])n ? n = !1 : e += ",", e += Ut(s);
        return e + "]";
    }(t17.arrayValue) : "mapValue" in t17 ? function(t) {
        // Iteration order in JavaScript is not guaranteed. To ensure that we generate
        // matching canonical IDs for identical maps, we need to sort the keys.
        const e = Object.keys(t.fields || {}).sort();
        let n = "{", s = !0;
        for (const i of e)s ? s = !1 : n += ",", n += `${i}:${Ut(t.fields[i])}`;
        return n + "}";
    }(t17.mapValue) : L();
}
function qt(t, e) {
    return {
        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`
    };
}
/** Returns true if `value` is an IntegerValue . */ function Kt(t) {
    return !!t && "integerValue" in t;
}
/** Returns true if `value` is a DoubleValue. */ /** Returns true if `value` is an ArrayValue. */ function Gt(t) {
    return !!t && "arrayValue" in t;
}
/** Returns true if `value` is a NullValue. */ function Qt(t) {
    return !!t && "nullValue" in t;
}
/** Returns true if `value` is NaN. */ function jt(t) {
    return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
/** Returns true if `value` is a MapValue. */ function Wt(t) {
    return !!t && "mapValue" in t;
}
/** Creates a deep copy of `source`. */ function zt(t18) {
    if (t18.geoPointValue) return {
        geoPointValue: Object.assign({}, t18.geoPointValue)
    };
    if (t18.timestampValue && "object" == typeof t18.timestampValue) return {
        timestampValue: Object.assign({}, t18.timestampValue)
    };
    if (t18.mapValue) {
        const e = {
            mapValue: {
                fields: {}
            }
        };
        return lt(t18.mapValue.fields, (t, n)=>e.mapValue.fields[t] = zt(n)
        ), e;
    }
    if (t18.arrayValue) {
        const e = {
            arrayValue: {
                values: []
            }
        };
        for(let n = 0; n < (t18.arrayValue.values || []).length; ++n)e.arrayValue.values[n] = zt(t18.arrayValue.values[n]);
        return e;
    }
    return Object.assign({}, t18);
}
/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */ function Ht(t) {
    return "__max__" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;
}
/** Returns the lowest value for the given value type (inclusive). */ function Jt(t) {
    return "nullValue" in t ? kt : "booleanValue" in t ? {
        booleanValue: !1
    } : "integerValue" in t || "doubleValue" in t ? {
        doubleValue: NaN
    } : "timestampValue" in t ? {
        timestampValue: {
            seconds: Number.MIN_SAFE_INTEGER
        }
    } : "stringValue" in t ? {
        stringValue: ""
    } : "bytesValue" in t ? {
        bytesValue: ""
    } : "referenceValue" in t ? qt(vt.empty(), xt.empty()) : "geoPointValue" in t ? {
        geoPointValue: {
            latitude: -90,
            longitude: -180
        }
    } : "arrayValue" in t ? {
        arrayValue: {}
    } : "mapValue" in t ? {
        mapValue: {}
    } : L();
}
/** Returns the largest value for the given value type (exclusive). */ function Yt(t) {
    return "nullValue" in t ? {
        booleanValue: !1
    } : "booleanValue" in t ? {
        doubleValue: NaN
    } : "integerValue" in t || "doubleValue" in t ? {
        timestampValue: {
            seconds: Number.MIN_SAFE_INTEGER
        }
    } : "timestampValue" in t ? {
        stringValue: ""
    } : "stringValue" in t ? {
        bytesValue: ""
    } : "bytesValue" in t ? qt(vt.empty(), xt.empty()) : "referenceValue" in t ? {
        geoPointValue: {
            latitude: -90,
            longitude: -180
        }
    } : "geoPointValue" in t ? {
        arrayValue: {}
    } : "arrayValue" in t ? {
        mapValue: {}
    } : "mapValue" in t ? Nt : L();
}
function Xt(t, e) {
    return void 0 === t ? e : void 0 === e || $t(t, e) > 0 ? t : e;
}
function Zt(t, e) {
    return void 0 === t ? e : void 0 === e || $t(t, e) < 0 ? t : e;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
 * ability to add and remove fields (via the ObjectValueBuilder).
 */ class te {
    constructor(t){
        this.value = t;
    }
    static empty() {
        return new te({
            mapValue: {}
        });
    }
    /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */ field(t) {
        if (t.isEmpty()) return this.value;
        {
            let e = this.value;
            for(let n = 0; n < t.length - 1; ++n)if (e = (e.mapValue.fields || {})[t.get(n)], !Wt(e)) return null;
            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
        }
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */ set(t, e) {
        this.getFieldsMap(t.popLast())[t.lastSegment()] = zt(e);
    }
    /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */ setAll(t19) {
        let e = mt.emptyPath(), n = {}, s = [];
        t19.forEach((t, i)=>{
            if (!e.isImmediateParentOf(i)) {
                // Insert the accumulated changes at this parent location
                const t = this.getFieldsMap(e);
                this.applyChanges(t, n, s), n = {}, s = [], e = i.popLast();
            }
            t ? n[i.lastSegment()] = zt(t) : s.push(i.lastSegment());
        });
        const i1 = this.getFieldsMap(e);
        this.applyChanges(i1, n, s);
    }
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */ delete(t) {
        const e = this.field(t.popLast());
        Wt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
    }
    isEqual(t) {
        return Ot(this.value, t.value);
    }
    /**
     * Returns the map that contains the leaf element of `path`. If the parent
     * entry does not yet exist, or if it is not a map, a new map will be created.
     */ getFieldsMap(t) {
        let e = this.value;
        e.mapValue.fields || (e.mapValue = {
            fields: {}
        });
        for(let n = 0; n < t.length; ++n){
            let s = e.mapValue.fields[t.get(n)];
            Wt(s) && s.mapValue.fields || (s = {
                mapValue: {
                    fields: {}
                }
            }, e.mapValue.fields[t.get(n)] = s), e = s;
        }
        return e.mapValue.fields;
    }
    /**
     * Modifies `fieldsMap` by adding, replacing or deleting the specified
     * entries.
     */ applyChanges(t, e11, n5) {
        lt(e11, (e, n)=>t[e] = n
        );
        for (const e10 of n5)delete t[e10];
    }
    clone() {
        return new te(zt(this.value));
    }
}
/**
 * Returns a FieldMask built from all fields in a MapValue.
 */ function ee(t20) {
    const e = [];
    return lt(t20.fields, (t, n)=>{
        const s = new mt([
            t
        ]);
        if (Wt(n)) {
            const t = ee(n.mapValue).fields;
            if (0 === t.length) // Preserve the empty map by adding it to the FieldMask.
            e.push(s);
            else // For nested and non-empty ObjectValues, add the FieldPath of the
            // leaf nodes.
            for (const n6 of t)e.push(s.child(n6));
        } else // For nested and non-empty ObjectValues, add the FieldPath of the leaf
        // nodes.
        e.push(s);
    }), new gt(e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a document in Firestore with a key, version, data and whether it
 * has local mutations applied to it.
 *
 * Documents can transition between states via `convertToFoundDocument()`,
 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
 * not transition to one of these states even after all mutations have been
 * applied, `isValidDocument()` returns false and the document should be removed
 * from all views.
 */ class ne {
    constructor(t, e, n, s, i, r){
        this.key = t, this.documentType = e, this.version = n, this.readTime = s, this.data = i, this.documentState = r;
    }
    /**
     * Creates a document with no known version or data, but which can serve as
     * base document for mutations.
     */ static newInvalidDocument(t) {
        return new ne(t, 0 /* INVALID */ , ct.min(), ct.min(), te.empty(), 0 /* SYNCED */ );
    }
    /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */ static newFoundDocument(t, e, n) {
        return new ne(t, 1 /* FOUND_DOCUMENT */ , e, ct.min(), n, 0 /* SYNCED */ );
    }
    /** Creates a new document that is known to not exist at the given version. */ static newNoDocument(t, e) {
        return new ne(t, 2 /* NO_DOCUMENT */ , e, ct.min(), te.empty(), 0 /* SYNCED */ );
    }
    /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */ static newUnknownDocument(t, e) {
        return new ne(t, 3 /* UNKNOWN_DOCUMENT */ , e, ct.min(), te.empty(), 2 /* HAS_COMMITTED_MUTATIONS */ );
    }
    /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */ convertToFoundDocument(t, e) {
        return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, this.documentState = 0 /* SYNCED */ , this;
    }
    /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */ convertToNoDocument(t) {
        return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = te.empty(), this.documentState = 0 /* SYNCED */ , this;
    }
    /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */ convertToUnknownDocument(t) {
        return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = te.empty(), this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
    }
    setHasCommittedMutations() {
        return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
    }
    setHasLocalMutations() {
        return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this;
    }
    setReadTime(t) {
        return this.readTime = t, this;
    }
    get hasLocalMutations() {
        return 1 /* HAS_LOCAL_MUTATIONS */  === this.documentState;
    }
    get hasCommittedMutations() {
        return 2 /* HAS_COMMITTED_MUTATIONS */  === this.documentState;
    }
    get hasPendingWrites() {
        return this.hasLocalMutations || this.hasCommittedMutations;
    }
    isValidDocument() {
        return 0 /* INVALID */  !== this.documentType;
    }
    isFoundDocument() {
        return 1 /* FOUND_DOCUMENT */  === this.documentType;
    }
    isNoDocument() {
        return 2 /* NO_DOCUMENT */  === this.documentType;
    }
    isUnknownDocument() {
        return 3 /* UNKNOWN_DOCUMENT */  === this.documentType;
    }
    isEqual(t) {
        return t instanceof ne && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
    }
    mutableCopy() {
        return new ne(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);
    }
    toString() {
        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
    }
}
/**
 * Compares the value for field `field` in the provided documents. Throws if
 * the field does not exist in both documents.
 */ /**
 * An index definition for field indexes in Firestore.
 *
 * Every index is associated with a collection. The definition contains a list
 * of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or
 * `CONTAINS` for ArrayContains/ArrayContainsAny queries).
 *
 * Unlike the backend, the SDK does not differentiate between collection or
 * collection group-scoped indices. Every index can be used for both single
 * collection and collection group queries.
 */ class se {
    constructor(/**
     * The index ID. Returns -1 if the index ID is not available (e.g. the index
     * has not yet been persisted).
     */ t, /** The collection ID this index applies to. */ e, /** The field segments for this index. */ n, /** Shows how up-to-date the index is for the current user. */ s){
        this.indexId = t, this.collectionGroup = e, this.fields = n, this.indexState = s;
    }
}
/** An ID for an index that has not yet been added to persistence.  */ /** Returns the ArrayContains/ArrayContainsAny segment for this index. */ function ie(t21) {
    return t21.fields.find((t)=>2 /* CONTAINS */  === t.kind
    );
}
/** Returns all directional (ascending/descending) segments for this index. */ function re(t22) {
    return t22.fields.filter((t)=>2 /* CONTAINS */  !== t.kind
    );
}
/**
 * Returns the order of the document key component for the given index.
 *
 * PORTING NOTE: This is only used in the Web IndexedDb implementation.
 */ se.UNKNOWN_ID = -1;
/** An index component consisting of field path and index type.  */ class oe {
    constructor(/** The field path of the component. */ t, /** The fields sorting order. */ e){
        this.fieldPath = t, this.kind = e;
    }
}
/**
 * Stores the "high water mark" that indicates how updated the Index is for the
 * current user.
 */ class ue {
    constructor(/**
     * Indicates when the index was last updated (relative to other indexes).
     */ t, /** The the latest indexed read time, document and batch id. */ e){
        this.sequenceNumber = t, this.offset = e;
    }
    /** The state of an index that has not yet been backfilled. */ static empty() {
        return new ue(0, he.min());
    }
}
/**
 * Creates an offset that matches all documents with a read time higher than
 * `readTime`.
 */ function ae(t, e) {
    // We want to create an offset that matches all documents with a read time
    // greater than the provided read time. To do so, we technically need to
    // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use
    // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use
    // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches
    // all valid document IDs.
    const n = t.toTimestamp().seconds, s = t.toTimestamp().nanoseconds + 1, i = ct.fromTimestamp(1e9 === s ? new at(n + 1, 0) : new at(n, s));
    return new he(i, xt.empty(), e);
}
/** Creates a new offset based on the provided document. */ function ce(t) {
    return new he(t.readTime, t.key, -1);
}
/**
 * Stores the latest read time, document and batch ID that were processed for an
 * index.
 */ class he {
    constructor(/**
     * The latest read time version that has been indexed by Firestore for this
     * field index.
     */ t, /**
     * The key of the last document that was indexed for this query. Use
     * `DocumentKey.empty()` if no document has been indexed.
     */ e, /*
     * The largest mutation batch id that's been processed by Firestore.
     */ n){
        this.readTime = t, this.documentKey = e, this.largestBatchId = n;
    }
    /** Returns an offset that sorts before all regular offsets. */ static min() {
        return new he(ct.min(), xt.empty(), -1);
    }
    /** Returns an offset that sorts after all regular offsets. */ static max() {
        return new he(ct.max(), xt.empty(), -1);
    }
}
function le(t, e) {
    let n = t.readTime.compareTo(e.readTime);
    return 0 !== n ? n : (n = xt.comparator(t.documentKey, e.documentKey), 0 !== n ? n : rt(t.largestBatchId, e.largestBatchId));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Visible for testing
class fe {
    constructor(t, e = null, n = [], s = [], i = null, r = null, o = null){
        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, this.startAt = r, this.endAt = o, this.P = null;
    }
}
/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */ function de(t, e = null, n = [], s = [], i = null, r = null, o = null) {
    return new fe(t, e, n, s, i, r, o);
}
function _e(t24) {
    const e12 = K(t24);
    if (null === e12.P) {
        let t23 = e12.path.canonicalString();
        null !== e12.collectionGroup && (t23 += "|cg:" + e12.collectionGroup), t23 += "|f:", t23 += e12.filters.map((t)=>{
            var e;
            return (e = t).field.canonicalString() + e.op.toString() + Lt(e.value);
        }).join(","), t23 += "|ob:", t23 += e12.orderBy.map((t25)=>(function(t) {
                // TODO(b/29183165): Make this collision robust.
                return t.field.canonicalString() + t.dir;
            })(t25)
        ).join(","), St(e12.limit) || (t23 += "|l:", t23 += e12.limit), e12.startAt && (t23 += "|lb:", t23 += e12.startAt.inclusive ? "b:" : "a:", t23 += e12.startAt.position.map((t)=>Lt(t)
        ).join(",")), e12.endAt && (t23 += "|ub:", t23 += e12.endAt.inclusive ? "a:" : "b:", t23 += e12.endAt.position.map((t)=>Lt(t)
        ).join(",")), e12.P = t23;
    }
    return e12.P;
}
function we(t26) {
    let e13 = t26.path.canonicalString();
    return null !== t26.collectionGroup && (e13 += " collectionGroup=" + t26.collectionGroup), t26.filters.length > 0 && (e13 += `, filters: [${t26.filters.map((t)=>{
        var e;
        return `${(e = t).field.canonicalString()} ${e.op} ${Lt(e.value)}`;
    /** Filter that matches on key fields (i.e. '__name__'). */ }).join(", ")}]`), St(t26.limit) || (e13 += ", limit: " + t26.limit), t26.orderBy.length > 0 && (e13 += `, orderBy: [${t26.orderBy.map((t27)=>(function(t) {
            return `${t.field.canonicalString()} (${t.dir})`;
        })(t27)
    ).join(", ")}]`), t26.startAt && (e13 += ", startAt: ", e13 += t26.startAt.inclusive ? "b:" : "a:", e13 += t26.startAt.position.map((t)=>Lt(t)
    ).join(",")), t26.endAt && (e13 += ", endAt: ", e13 += t26.endAt.inclusive ? "a:" : "b:", e13 += t26.endAt.position.map((t)=>Lt(t)
    ).join(",")), `Target(${e13})`;
}
function me(t, e) {
    if (t.limit !== e.limit) return !1;
    if (t.orderBy.length !== e.orderBy.length) return !1;
    for(let n = 0; n < t.orderBy.length; n++)if (!xe(t.orderBy[n], e.orderBy[n])) return !1;
    if (t.filters.length !== e.filters.length) return !1;
    for(let i = 0; i < t.filters.length; i++)if (n7 = t.filters[i], s = e.filters[i], n7.op !== s.op || !n7.field.isEqual(s.field) || !Ot(n7.value, s.value)) return !1;
    var n7, s;
    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!ke(t.startAt, e.startAt) && ke(t.endAt, e.endAt);
}
function ge(t) {
    return xt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
}
/** Returns the field filters that target the given field path. */ function ye(t28, e) {
    return t28.filters.filter((t)=>t instanceof Te && t.field.isEqual(e)
    );
}
/**
 * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY
 * filters. Returns `null` if there are no such filters.
 */ /**
 * Returns the value to use as the lower bound for ascending index segment at
 * the provided `fieldPath` (or the upper bound for an descending segment).
 */ function pe(t, e, n) {
    let s, i = !0;
    // Process all filters to find a value for the current field segment
    for (const n8 of ye(t, e)){
        let t, e = !0;
        switch(n8.op){
            case "<" /* LESS_THAN */ :
            case "<=" /* LESS_THAN_OR_EQUAL */ :
                t = Jt(n8.value);
                break;
            case "==" /* EQUAL */ :
            case "in" /* IN */ :
            case ">=" /* GREATER_THAN_OR_EQUAL */ :
                t = n8.value;
                break;
            case ">" /* GREATER_THAN */ :
                t = n8.value, e = !1;
                break;
            case "!=" /* NOT_EQUAL */ :
            case "not-in" /* NOT_IN */ :
                t = kt;
        }
        Xt(s, t) === t && (s = t, i = e);
    }
    // If there is an additional bound, compare the values against the existing
    // range to see if we can narrow the scope.
    if (null !== n) {
        for(let r = 0; r < t.orderBy.length; ++r)if (t.orderBy[r].field.isEqual(e)) {
            const t = n.position[r];
            Xt(s, t) === t && (s = t, i = n.inclusive);
            break;
        }
    }
    return {
        value: s,
        inclusive: i
    };
}
/**
 * Returns the value to use as the upper bound for ascending index segment at
 * the provided `fieldPath` (or the lower bound for an descending segment).
 */ function Ie(t, e, n) {
    let s, i = !0;
    // Process all filters to find a value for the current field segment
    for (const n9 of ye(t, e)){
        let t, e = !0;
        switch(n9.op){
            case ">=" /* GREATER_THAN_OR_EQUAL */ :
            case ">" /* GREATER_THAN */ :
                t = Yt(n9.value), e = !1;
                break;
            case "==" /* EQUAL */ :
            case "in" /* IN */ :
            case "<=" /* LESS_THAN_OR_EQUAL */ :
                t = n9.value;
                break;
            case "<" /* LESS_THAN */ :
                t = n9.value, e = !1;
                break;
            case "!=" /* NOT_EQUAL */ :
            case "not-in" /* NOT_IN */ :
                t = Nt;
        }
        Zt(s, t) === t && (s = t, i = e);
    }
    // If there is an additional bound, compare the values against the existing
    // range to see if we can narrow the scope.
    if (null !== n) {
        for(let r = 0; r < t.orderBy.length; ++r)if (t.orderBy[r].field.isEqual(e)) {
            const t = n.position[r];
            Zt(s, t) === t && (s = t, i = n.inclusive);
            break;
        }
    }
    return {
        value: s,
        inclusive: i
    };
}
class Te extends class {
} {
    constructor(t, e, n){
        super(), this.field = t, this.op = e, this.value = n;
    }
    /**
     * Creates a filter based on the provided arguments.
     */ static create(t, e, n) {
        return t.isKeyField() ? "in" /* IN */  === e || "not-in" /* NOT_IN */  === e ? this.V(t, e, n) : new Ee(t, e, n) : "array-contains" /* ARRAY_CONTAINS */  === e ? new be(t, n) : "in" /* IN */  === e ? new Ve(t, n) : "not-in" /* NOT_IN */  === e ? new ve(t, n) : "array-contains-any" /* ARRAY_CONTAINS_ANY */  === e ? new Se(t, n) : new Te(t, e, n);
    }
    static V(t, e, n) {
        return "in" /* IN */  === e ? new Ae(t, n) : new Re(t, n);
    }
    matches(t) {
        const e = t.data.field(this.field);
        // Types do not have to match in NOT_EQUAL filters.
        return "!=" /* NOT_EQUAL */  === this.op ? null !== e && this.v($t(e, this.value)) : null !== e && Mt(this.value) === Mt(e) && this.v($t(e, this.value));
    // Only compare types with matching backend order (such as double and int).
    }
    v(t) {
        switch(this.op){
            case "<" /* LESS_THAN */ :
                return t < 0;
            case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;
            case "==" /* EQUAL */ :
                return 0 === t;
            case "!=" /* NOT_EQUAL */ :
                return 0 !== t;
            case ">" /* GREATER_THAN */ :
                return t > 0;
            case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;
            default:
                return L();
        }
    }
    S() {
        return [
            "<" /* LESS_THAN */ ,
            "<=" /* LESS_THAN_OR_EQUAL */ ,
            ">" /* GREATER_THAN */ ,
            ">=" /* GREATER_THAN_OR_EQUAL */ ,
            "!=" /* NOT_EQUAL */ ,
            "not-in" /* NOT_IN */ 
        ].indexOf(this.op) >= 0;
    }
}
class Ee extends Te {
    constructor(t, e, n){
        super(t, e, n), this.key = xt.fromName(n.referenceValue);
    }
    matches(t) {
        const e = xt.comparator(t.key, this.key);
        return this.v(e);
    }
}
/** Filter that matches on key fields within an array. */ class Ae extends Te {
    constructor(t, e){
        super(t, "in" /* IN */ , e), this.keys = Pe("in" /* IN */ , e);
    }
    matches(t) {
        return this.keys.some((e)=>e.isEqual(t.key)
        );
    }
}
/** Filter that matches on key fields not present within an array. */ class Re extends Te {
    constructor(t, e){
        super(t, "not-in" /* NOT_IN */ , e), this.keys = Pe("not-in" /* NOT_IN */ , e);
    }
    matches(t) {
        return !this.keys.some((e)=>e.isEqual(t.key)
        );
    }
}
function Pe(t29, e) {
    var n;
    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t)=>xt.fromName(t.referenceValue)
    );
}
/** A Filter that implements the array-contains operator. */ class be extends Te {
    constructor(t, e){
        super(t, "array-contains" /* ARRAY_CONTAINS */ , e);
    }
    matches(t) {
        const e = t.data.field(this.field);
        return Gt(e) && Ft(e.arrayValue, this.value);
    }
}
/** A Filter that implements the IN operator. */ class Ve extends Te {
    constructor(t, e){
        super(t, "in" /* IN */ , e);
    }
    matches(t) {
        const e = t.data.field(this.field);
        return null !== e && Ft(this.value.arrayValue, e);
    }
}
/** A Filter that implements the not-in operator. */ class ve extends Te {
    constructor(t, e){
        super(t, "not-in" /* NOT_IN */ , e);
    }
    matches(t) {
        if (Ft(this.value.arrayValue, {
            nullValue: "NULL_VALUE"
        })) return !1;
        const e = t.data.field(this.field);
        return null !== e && !Ft(this.value.arrayValue, e);
    }
}
/** A Filter that implements the array-contains-any operator. */ class Se extends Te {
    constructor(t, e){
        super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , e);
    }
    matches(t30) {
        const e = t30.data.field(this.field);
        return !(!Gt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t)=>Ft(this.value.arrayValue, t)
        );
    }
}
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */ class De {
    constructor(t, e){
        this.position = t, this.inclusive = e;
    }
}
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */ class Ce {
    constructor(t, e = "asc" /* ASCENDING */ ){
        this.field = t, this.dir = e;
    }
}
function xe(t, e) {
    return t.dir === e.dir && t.field.isEqual(e.field);
}
function Ne(t, e, n) {
    let s = 0;
    for(let i = 0; i < t.position.length; i++){
        const r = e[i], o = t.position[i];
        if (r.field.isKeyField()) s = xt.comparator(xt.fromName(o.referenceValue), n.key);
        else s = $t(o, n.data.field(r.field));
        if ("desc" /* DESCENDING */  === r.dir && (s *= -1), 0 !== s) break;
    }
    return s;
}
/**
 * Returns true if a document sorts after a bound using the provided sort
 * order.
 */ function ke(t, e) {
    if (null === t) return null === e;
    if (null === e) return !1;
    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;
    for(let n = 0; n < t.position.length; n++){
        if (!Ot(t.position[n], e.position[n])) return !1;
    }
    return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */ class Me {
    /**
     * Initializes a Query with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     */ constructor(t, e = null, n = [], s = [], i = null, r = "F" /* First */ , o = null, u = null){
        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, this.limit = i, this.limitType = r, this.startAt = o, this.endAt = u, this.D = null, // The corresponding `Target` of this `Query` instance.
        this.C = null, this.startAt, this.endAt;
    }
}
/** Creates a new Query instance with the options provided. */ function Oe(t, e, n, s, i, r, o, u) {
    return new Me(t, e, n, s, i, r, o, u);
}
/** Creates a new Query for a query that matches all documents at `path` */ function Fe(t) {
    return new Me(t);
}
/**
 * Helper to convert a collection group query into a collection query at a
 * specific path. This is used when executing collection group queries, since
 * we have to split the query into a set of collection queries at multiple
 * paths.
 */ function $e(t) {
    return !St(t.limit) && "F" /* First */  === t.limitType;
}
function Be(t) {
    return !St(t.limit) && "L" /* Last */  === t.limitType;
}
function Le(t) {
    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
}
function Ue(t) {
    for (const e of t.filters)if (e.S()) return e.field;
    return null;
}
/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */ /**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */ function qe(t) {
    return null !== t.collectionGroup;
}
/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */ function Ke(t) {
    const e = K(t);
    if (null === e.D) {
        e.D = [];
        const t = Ue(e), n = Le(e);
        if (null !== t && null === n) // In order to implicitly add key ordering, we must also add the
        // inequality filter field for it to be a valid query.
        // Note that the default inequality field and key ordering is ascending.
        t.isKeyField() || e.D.push(new Ce(t)), e.D.push(new Ce(mt.keyField(), "asc" /* ASCENDING */ ));
        else {
            let t = !1;
            for (const n of e.explicitOrderBy)e.D.push(n), n.field.isKeyField() && (t = !0);
            if (!t) {
                // The order of the implicit key ordering always matches the last
                // explicit order by
                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */ ;
                e.D.push(new Ce(mt.keyField(), t));
            }
        }
    }
    return e.D;
}
/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */ function Ge(t) {
    const e = K(t);
    if (!e.C) {
        if ("F" /* First */  === e.limitType) e.C = de(e.path, e.collectionGroup, Ke(e), e.filters, e.limit, e.startAt, e.endAt);
        else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const n of Ke(e)){
                const e = "desc" /* DESCENDING */  === n.dir ? "asc" /* ASCENDING */  : "desc" /* DESCENDING */ ;
                t.push(new Ce(n.field, e));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
            const n10 = e.endAt ? new De(e.endAt.position, !e.endAt.inclusive) : null, s = e.startAt ? new De(e.startAt.position, !e.startAt.inclusive) : null;
            // Now return as a LimitType.First query.
            e.C = de(e.path, e.collectionGroup, t, e.filters, e.limit, n10, s);
        }
    }
    return e.C;
}
function Qe(t, e, n) {
    return new Me(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}
function je(t, e) {
    return me(Ge(t), Ge(e)) && t.limitType === e.limitType;
}
// TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.
function We(t) {
    return `${_e(Ge(t))}|lt:${t.limitType}`;
}
function ze(t) {
    return `Query(target=${we(Ge(t))}; limitType=${t.limitType})`;
}
/** Returns whether `doc` matches the constraints of `query`. */ function He(t31, e14) {
    return e14.isFoundDocument() && function(t, e) {
        const n = e.key.path;
        return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : xt.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
    }(t31, e14) && function(t, e) {
        for (const n of t.explicitOrderBy)// order by key always matches
        if (!n.field.isKeyField() && null === e.data.field(n.field)) return !1;
        return !0;
    }(t31, e14) && function(t, e) {
        for (const n of t.filters)if (!n.matches(e)) return !1;
        return !0;
    }(t31, e14) && function(t32, e15) {
        if (t32.startAt && !/**
 * Returns true if a document sorts before a bound using the provided sort
 * order.
 */ function(t, e, n) {
            const s = Ne(t, e, n);
            return t.inclusive ? s <= 0 : s < 0;
        }(t32.startAt, Ke(t32), e15)) return !1;
        if (t32.endAt && !function(t, e, n) {
            const s = Ne(t, e, n);
            return t.inclusive ? s >= 0 : s > 0;
        }(t32.endAt, Ke(t32), e15)) return !1;
        return !0;
    }(t31, e14);
}
function Je(t) {
    return t.collectionGroup || (t.path.length % 2 == 1 ? t.path.lastSegment() : t.path.get(t.path.length - 2));
}
/**
 * Returns a new comparator function that can be used to compare two documents
 * based on the Query's ordering constraint.
 */ function Ye(t33) {
    return (e, n)=>{
        let s = !1;
        for (const i of Ke(t33)){
            const t = Xe(i, e, n);
            if (0 !== t) return t;
            s = s || i.field.isKeyField();
        }
        return 0;
    };
}
function Xe(t34, e16, n11) {
    const s2 = t34.field.isKeyField() ? xt.comparator(e16.key, n11.key) : function(t, e, n) {
        const s = e.data.field(t), i = n.data.field(t);
        return null !== s && null !== i ? $t(s, i) : L();
    }(t34.field, e16, n11);
    switch(t34.dir){
        case "asc" /* ASCENDING */ :
            return s2;
        case "desc" /* DESCENDING */ :
            return -1 * s2;
        default:
            return L();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */ function Ze(t, e) {
    if (t.N) {
        if (isNaN(e)) return {
            doubleValue: "NaN"
        };
        if (e === 1 / 0) return {
            doubleValue: "Infinity"
        };
        if (e === -1 / 0) return {
            doubleValue: "-Infinity"
        };
    }
    return {
        doubleValue: Dt(e) ? "-0" : e
    };
}
/**
 * Returns an IntegerValue for `value`.
 */ function tn(t) {
    return {
        integerValue: "" + t
    };
}
/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */ function en(t, e) {
    return Ct(e) ? tn(e) : Ze(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Used to represent a field transform on a mutation. */ class nn {
    constructor(){
        // Make sure that the structural type of `TransformOperation` is unique.
        // See https://github.com/microsoft/TypeScript/issues/5451
        this._ = void 0;
    }
}
/**
 * Computes the local transform result against the provided `previousValue`,
 * optionally using the provided localWriteTime.
 */ function sn(t35, e17, n12) {
    return t35 instanceof un ? function(t, e) {
        const n = {
            fields: {
                __type__: {
                    stringValue: "server_timestamp"
                },
                __local_write_time__: {
                    timestampValue: {
                        seconds: t.seconds,
                        nanos: t.nanoseconds
                    }
                }
            }
        };
        return e && (n.fields.__previous_value__ = e), {
            mapValue: n
        };
    }(n12, e17) : t35 instanceof an ? cn(t35, e17) : t35 instanceof hn ? ln(t35, e17) : function(t, e) {
        // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
        // precision and resolves overflows by reducing precision, we do not
        // manually cap overflows at 2^63.
        const n = on(t, e), s = dn(n) + dn(t.k);
        return Kt(n) && Kt(t.k) ? tn(s) : Ze(t.M, s);
    }(t35, e17);
}
/**
 * Computes a final transform result after the transform has been acknowledged
 * by the server, potentially using the server-provided transformResult.
 */ function rn(t, e, n) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return t instanceof an ? cn(t, e) : t instanceof hn ? ln(t, e) : n;
}
/**
 * If this transform operation is not idempotent, returns the base value to
 * persist for this transform. If a base value is returned, the transform
 * operation is always applied to this base value, even if document has
 * already been updated.
 *
 * Base values provide consistent behavior for non-idempotent transforms and
 * allow us to return the same latency-compensated value even if the backend
 * has already applied the transform operation. The base value is null for
 * idempotent transforms, as they can be re-played even if the backend has
 * already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent transforms.
 */ function on(t36, e) {
    var n;
    return t36 instanceof fn ? Kt(n = e) || function(t) {
        return !!t && "doubleValue" in t;
    }(n) ? e : {
        integerValue: 0
    } : null;
}
/** Transforms a value into a server-generated timestamp. */ class un extends nn {
}
/** Transforms an array value via a union operation. */ class an extends nn {
    constructor(t){
        super(), this.elements = t;
    }
}
function cn(t37, e) {
    const n = _n(e);
    for (const e18 of t37.elements)n.some((t)=>Ot(t, e18)
    ) || n.push(e18);
    return {
        arrayValue: {
            values: n
        }
    };
}
/** Transforms an array value via a remove operation. */ class hn extends nn {
    constructor(t){
        super(), this.elements = t;
    }
}
function ln(t38, e) {
    let n = _n(e);
    for (const e19 of t38.elements)n = n.filter((t)=>!Ot(t, e19)
    );
    return {
        arrayValue: {
            values: n
        }
    };
}
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */ class fn extends nn {
    constructor(t, e){
        super(), this.M = t, this.k = e;
    }
}
function dn(t) {
    return Et(t.integerValue || t.doubleValue);
}
function _n(t) {
    return Gt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A field path and the TransformOperation to perform upon it. */ class wn {
    constructor(t, e){
        this.field = t, this.transform = e;
    }
}
function mn(t39, e20) {
    return t39.field.isEqual(e20.field) && function(t, e) {
        return t instanceof an && e instanceof an || t instanceof hn && e instanceof hn ? ot(t.elements, e.elements, Ot) : t instanceof fn && e instanceof fn ? Ot(t.k, e.k) : t instanceof un && e instanceof un;
    }(t39.transform, e20.transform);
}
/** The result of successfully applying a mutation to the backend. */ class gn {
    constructor(/**
     * The version at which the mutation was committed:
     *
     * - For most operations, this is the updateTime in the WriteResult.
     * - For deletes, the commitTime of the WriteResponse (because deletes are
     *   not stored and have no updateTime).
     *
     * Note that these versions can be different: No-op writes will not change
     * the updateTime even though the commitTime advances.
     */ t, /**
     * The resulting fields returned from the backend after a mutation
     * containing field transforms has been committed. Contains one FieldValue
     * for each FieldTransform that was in the mutation.
     *
     * Will be empty if the mutation did not contain any field transforms.
     */ e){
        this.version = t, this.transformResults = e;
    }
}
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */ class yn {
    constructor(t, e){
        this.updateTime = t, this.exists = e;
    }
    /** Creates a new empty Precondition. */ static none() {
        return new yn;
    }
    /** Creates a new Precondition with an exists flag. */ static exists(t) {
        return new yn(void 0, t);
    }
    /** Creates a new Precondition based on a version a document exists at. */ static updateTime(t) {
        return new yn(t);
    }
    /** Returns whether this Precondition is empty. */ get isNone() {
        return void 0 === this.updateTime && void 0 === this.exists;
    }
    isEqual(t) {
        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
    }
}
/** Returns true if the preconditions is valid for the given document. */ function pn(t, e) {
    return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
}
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set and Patch mutations. For Delete mutations, we
 * reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        InvalidDocument(v0)   Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set and Patch mutations. As deletes have no
 * explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
 * the updated version.
 *
 * Field transforms are used only with Patch and Set Mutations. We use the
 * `updateTransforms` message to store transforms, rather than the `transforms`s
 * messages.
 *
 * ## Subclassing Notes
 *
 * Every type of mutation needs to implement its own applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document (see `setMutationApplyToRemoteDocument()` for an
 * example).
 */ class In {
}
/**
 * Applies this mutation to the given document for the purposes of computing a
 * new remote document. If the input document doesn't match the expected state
 * (e.g. it is invalid or outdated), the document type may transition to
 * unknown.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param mutationResult - The result of applying the mutation from the backend.
 */ function Tn(t40, e21, n13) {
    t40 instanceof bn ? function(t, e, n) {
        // Unlike setMutationApplyToLocalView, if we're applying a mutation to a
        // remote document the server has accepted the mutation so the precondition
        // must have held.
        const s = t.value.clone(), i = Sn(t.fieldTransforms, e, n.transformResults);
        s.setAll(i), e.convertToFoundDocument(n.version, s).setHasCommittedMutations();
    }(t40, e21, n13) : t40 instanceof Vn ? function(t, e, n) {
        if (!pn(t.precondition, e)) // Since the mutation was not rejected, we know that the precondition
        // matched on the backend. We therefore must not have the expected version
        // of the document in our cache and convert to an UnknownDocument with a
        // known updateTime.
        return void e.convertToUnknownDocument(n.version);
        const s = Sn(t.fieldTransforms, e, n.transformResults), i = e.data;
        i.setAll(vn(t)), i.setAll(s), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
    }(t40, e21, n13) : function(t, e, n) {
        // Unlike applyToLocalView, if we're applying a mutation to a remote
        // document the server has accepted the mutation so the precondition must
        // have held.
        e.convertToNoDocument(n.version).setHasCommittedMutations();
    }(0, e21, n13);
}
/**
 * Applies this mutation to the given document for the purposes of computing
 * the new local view of a document. If the input document doesn't match the
 * expected state, the document is not modified.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param localWriteTime - A timestamp indicating the local write time of the
 *     batch this mutation is a part of.
 */ function En(t41, e22, n14) {
    t41 instanceof bn ? function(t, e, n) {
        if (!pn(t.precondition, e)) // The mutation failed to apply (e.g. a document ID created with add()
        // caused a name collision).
        return;
        const s = t.value.clone(), i = Dn(t.fieldTransforms, n, e);
        s.setAll(i), e.convertToFoundDocument(Pn(e), s).setHasLocalMutations();
    }(t41, e22, n14) : t41 instanceof Vn ? function(t, e, n) {
        if (!pn(t.precondition, e)) return;
        const s = Dn(t.fieldTransforms, n, e), i = e.data;
        i.setAll(vn(t)), i.setAll(s), e.convertToFoundDocument(Pn(e), i).setHasLocalMutations();
    }(t41, e22, n14) : function(t, e) {
        pn(t.precondition, e) && // We don't call `setHasLocalMutations()` since we want to be backwards
        // compatible with the existing SDK behavior.
        e.convertToNoDocument(ct.min());
    }(t41, e22);
}
/**
 * If this mutation is not idempotent, returns the base value to persist with
 * this mutation. If a base value is returned, the mutation is always applied
 * to this base value, even if document has already been updated.
 *
 * The base value is a sparse object that consists of only the document
 * fields for which this mutation contains a non-idempotent transformation
 * (e.g. a numeric increment). The provided value guarantees consistent
 * behavior for non-idempotent transforms and allow us to return the same
 * latency-compensated value even if the backend has already applied the
 * mutation. The base value is null for idempotent mutations, as they can be
 * re-played even if the backend has already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent mutations.
 */ function An(t, e) {
    let n = null;
    for (const s of t.fieldTransforms){
        const t = e.data.field(s.field), i = on(s.transform, t || null);
        null != i && (null == n && (n = te.empty()), n.set(s.field, i));
    }
    return n || null;
}
function Rn(t42, e23) {
    return t42.type === e23.type && !!t42.key.isEqual(e23.key) && !!t42.precondition.isEqual(e23.precondition) && !!function(t43, e24) {
        return void 0 === t43 && void 0 === e24 || !(!t43 || !e24) && ot(t43, e24, (t, e)=>mn(t, e)
        );
    }(t42.fieldTransforms, e23.fieldTransforms) && (0 /* Set */  === t42.type ? t42.value.isEqual(e23.value) : 1 /* Patch */  !== t42.type || t42.data.isEqual(e23.data) && t42.fieldMask.isEqual(e23.fieldMask));
}
/**
 * Returns the version from the given document for use as the result of a
 * mutation. Mutations are defined to return the version of the base document
 * only if it is an existing document. Deleted and unknown documents have a
 * post-mutation version of SnapshotVersion.min().
 */ function Pn(t) {
    return t.isFoundDocument() ? t.version : ct.min();
}
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */ class bn extends In {
    constructor(t, e, n, s = []){
        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = s, this.type = 0 /* Set */ ;
    }
}
class Vn extends In {
    constructor(t, e, n, s, i = []){
        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = s, this.fieldTransforms = i, this.type = 1 /* Patch */ ;
    }
}
function vn(t) {
    const e = new Map;
    return t.fieldMask.fields.forEach((n)=>{
        if (!n.isEmpty()) {
            const s = t.data.field(n);
            e.set(n, s);
        }
    }), e;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use after a mutation
 * containing transforms has been acknowledged by the server.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param mutableDocument - The current state of the document after applying all
 * previous mutations.
 * @param serverTransformResults - The transform results received by the server.
 * @returns The transform results list.
 */ function Sn(t, e, n) {
    const s = new Map;
    U(t.length === n.length);
    for(let i = 0; i < n.length; i++){
        const r = t[i], o = r.transform, u = e.data.field(r.field);
        s.set(r.field, rn(o, u, n[i]));
    }
    return s;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use when applying a
 * transform locally.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param localWriteTime - The local time of the mutation (used to
 *     generate ServerTimestampValues).
 * @param mutableDocument - The current state of the document after applying all
 *     previous mutations.
 * @returns The transform results list.
 */ function Dn(t, e, n) {
    const s = new Map;
    for (const i of t){
        const t = i.transform, r = n.data.field(i.field);
        s.set(i.field, sn(t, r, e));
    }
    return s;
}
/** A mutation that deletes the document at the given key. */ class Cn extends In {
    constructor(t, e){
        super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];
    }
}
class xn extends In {
    constructor(t, e){
        super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Nn {
    // TODO(b/33078163): just use simplest form of existence filter for now
    constructor(t){
        this.count = t;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers or change this into a const enum.
 */ var kn, Mn;
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */ function On(t) {
    switch(t){
        default:
            return L();
        case G.CANCELLED:
        case G.UNKNOWN:
        case G.DEADLINE_EXCEEDED:
        case G.RESOURCE_EXHAUSTED:
        case G.INTERNAL:
        case G.UNAVAILABLE:
        // Unauthenticated means something went wrong with our token and we need
        // to retry with new credentials which will happen automatically.
        case G.UNAUTHENTICATED:
            return !1;
        case G.INVALID_ARGUMENT:
        case G.NOT_FOUND:
        case G.ALREADY_EXISTS:
        case G.PERMISSION_DENIED:
        case G.FAILED_PRECONDITION:
        // Aborted might be retried in some scenarios, but that is dependant on
        // the context and should handled individually by the calling code.
        // See https://cloud.google.com/apis/design/errors.
        case G.ABORTED:
        case G.OUT_OF_RANGE:
        case G.UNIMPLEMENTED:
        case G.DATA_LOSS:
            return !0;
    }
}
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */ /**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */ function Fn(t) {
    if (void 0 === t) // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    return F("GRPC error has no .code"), G.UNKNOWN;
    switch(t){
        case kn.OK:
            return G.OK;
        case kn.CANCELLED:
            return G.CANCELLED;
        case kn.UNKNOWN:
            return G.UNKNOWN;
        case kn.DEADLINE_EXCEEDED:
            return G.DEADLINE_EXCEEDED;
        case kn.RESOURCE_EXHAUSTED:
            return G.RESOURCE_EXHAUSTED;
        case kn.INTERNAL:
            return G.INTERNAL;
        case kn.UNAVAILABLE:
            return G.UNAVAILABLE;
        case kn.UNAUTHENTICATED:
            return G.UNAUTHENTICATED;
        case kn.INVALID_ARGUMENT:
            return G.INVALID_ARGUMENT;
        case kn.NOT_FOUND:
            return G.NOT_FOUND;
        case kn.ALREADY_EXISTS:
            return G.ALREADY_EXISTS;
        case kn.PERMISSION_DENIED:
            return G.PERMISSION_DENIED;
        case kn.FAILED_PRECONDITION:
            return G.FAILED_PRECONDITION;
        case kn.ABORTED:
            return G.ABORTED;
        case kn.OUT_OF_RANGE:
            return G.OUT_OF_RANGE;
        case kn.UNIMPLEMENTED:
            return G.UNIMPLEMENTED;
        case kn.DATA_LOSS:
            return G.DATA_LOSS;
        default:
            return L();
    }
}
/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status - An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */ (Mn = kn || (kn = {}))[Mn.OK = 0] = "OK", Mn[Mn.CANCELLED = 1] = "CANCELLED", Mn[Mn.UNKNOWN = 2] = "UNKNOWN", Mn[Mn.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", Mn[Mn.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Mn[Mn.NOT_FOUND = 5] = "NOT_FOUND", Mn[Mn.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Mn[Mn.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", Mn[Mn.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Mn[Mn.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", Mn[Mn.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Mn[Mn.ABORTED = 10] = "ABORTED", Mn[Mn.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Mn[Mn.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", Mn[Mn.INTERNAL = 13] = "INTERNAL", Mn[Mn.UNAVAILABLE = 14] = "UNAVAILABLE", Mn[Mn.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A map implementation that uses objects as keys. Objects must have an
 * associated equals function and must be immutable. Entries in the map are
 * stored together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */ class $n {
    constructor(t, e){
        this.mapKeyFn = t, this.equalsFn = e, /**
         * The inner map for a key/value pair. Due to the possibility of collisions we
         * keep a list of entries that we do a linear search through to find an actual
         * match. Note that collisions should be rare, so we still expect near
         * constant time lookups in practice.
         */ this.inner = {}, /** The number of entries stored in the map */ this.innerSize = 0;
    }
    /** Get a value for this key, or undefined if it does not exist. */ get(t) {
        const e = this.mapKeyFn(t), n = this.inner[e];
        if (void 0 !== n) {
            for (const [e, s] of n)if (this.equalsFn(e, t)) return s;
        }
    }
    has(t) {
        return void 0 !== this.get(t);
    }
    /** Put this key and value in the map. */ set(t, e) {
        const n = this.mapKeyFn(t), s = this.inner[n];
        if (void 0 === s) return this.inner[n] = [
            [
                t,
                e
            ]
        ], void this.innerSize++;
        for(let n15 = 0; n15 < s.length; n15++)if (this.equalsFn(s[n15][0], t)) // This is updating an existing entry and does not increase `innerSize`.
        return void (s[n15] = [
            t,
            e
        ]);
        s.push([
            t,
            e
        ]), this.innerSize++;
    }
    /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */ delete(t) {
        const e = this.mapKeyFn(t), n = this.inner[e];
        if (void 0 === n) return !1;
        for(let s = 0; s < n.length; s++)if (this.equalsFn(n[s][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(s, 1), this.innerSize--, !0;
        return !1;
    }
    forEach(t) {
        lt(this.inner, (e, n)=>{
            for (const [e25, s] of n)t(e25, s);
        });
    }
    isEmpty() {
        return ft(this.inner);
    }
    size() {
        return this.innerSize;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.
class Bn {
    constructor(t, e){
        this.comparator = t, this.root = e || Un.EMPTY;
    }
    // Returns a copy of the map, with the specified key/value added or replaced.
    insert(t, e) {
        return new Bn(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, Un.BLACK, null, null));
    }
    // Returns a copy of the map, with the specified key removed.
    remove(t) {
        return new Bn(this.comparator, this.root.remove(t, this.comparator).copy(null, null, Un.BLACK, null, null));
    }
    // Returns the value of the node with the given key, or null.
    get(t) {
        let e = this.root;
        for(; !e.isEmpty();){
            const n = this.comparator(t, e.key);
            if (0 === n) return e.value;
            n < 0 ? e = e.left : n > 0 && (e = e.right);
        }
        return null;
    }
    // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.
    indexOf(t) {
        // Number of nodes that were pruned when descending right
        let e = 0, n = this.root;
        for(; !n.isEmpty();){
            const s = this.comparator(t, n.key);
            if (0 === s) return e + n.left.size;
            s < 0 ? n = n.left : // Count all nodes left of the node plus the node itself
            (e += n.left.size + 1, n = n.right);
        }
        // Node not found
        return -1;
    }
    isEmpty() {
        return this.root.isEmpty();
    }
    // Returns the total number of nodes in the map.
    get size() {
        return this.root.size;
    }
    // Returns the minimum key in the map.
    minKey() {
        return this.root.minKey();
    }
    // Returns the maximum key in the map.
    maxKey() {
        return this.root.maxKey();
    }
    // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    inorderTraversal(t) {
        return this.root.inorderTraversal(t);
    }
    forEach(t) {
        this.inorderTraversal((e, n)=>(t(e, n), !1)
        );
    }
    toString() {
        const t = [];
        return this.inorderTraversal((e, n)=>(t.push(`${e}:${n}`), !1)
        ), `{${t.join(", ")}}`;
    }
    // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    reverseTraversal(t) {
        return this.root.reverseTraversal(t);
    }
    // Returns an iterator over the SortedMap.
    getIterator() {
        return new Ln(this.root, null, this.comparator, !1);
    }
    getIteratorFrom(t) {
        return new Ln(this.root, t, this.comparator, !1);
    }
    getReverseIterator() {
        return new Ln(this.root, null, this.comparator, !0);
    }
    getReverseIteratorFrom(t) {
        return new Ln(this.root, t, this.comparator, !0);
    }
}
// end SortedMap
// An iterator over an LLRBNode.
class Ln {
    constructor(t, e, n, s){
        this.isReverse = s, this.nodeStack = [];
        let i = 1;
        for(; !t.isEmpty();)if (i = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse
        e && s && (i *= -1), i < 0) // This node is less than our start key. ignore it
        t = this.isReverse ? t.left : t.right;
        else {
            if (0 === i) {
                // This node is exactly equal to our start key. Push it on the stack,
                // but stop iterating;
                this.nodeStack.push(t);
                break;
            }
            // This node is greater than our start key, add it to the stack and move
            // to the next one
            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
        }
    }
    getNext() {
        let t = this.nodeStack.pop();
        const e = {
            key: t.key,
            value: t.value
        };
        if (this.isReverse) for(t = t.left; !t.isEmpty();)this.nodeStack.push(t), t = t.right;
        else for(t = t.right; !t.isEmpty();)this.nodeStack.push(t), t = t.left;
        return e;
    }
    hasNext() {
        return this.nodeStack.length > 0;
    }
    peek() {
        if (0 === this.nodeStack.length) return null;
        const t = this.nodeStack[this.nodeStack.length - 1];
        return {
            key: t.key,
            value: t.value
        };
    }
}
// end SortedMapIterator
// Represents a node in a Left-leaning Red-Black tree.
class Un {
    constructor(t, e, n, s, i){
        this.key = t, this.value = e, this.color = null != n ? n : Un.RED, this.left = null != s ? s : Un.EMPTY, this.right = null != i ? i : Un.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    // Returns a copy of the current node, optionally replacing pieces of it.
    copy(t, e, n, s, i) {
        return new Un(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
    }
    isEmpty() {
        return !1;
    }
    // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    inorderTraversal(t) {
        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
    }
    // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    reverseTraversal(t) {
        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
    }
    // Returns the minimum node in the tree.
    min() {
        return this.left.isEmpty() ? this : this.left.min();
    }
    // Returns the maximum key in the tree.
    minKey() {
        return this.min().key;
    }
    // Returns the maximum key in the tree.
    maxKey() {
        return this.right.isEmpty() ? this.key : this.right.maxKey();
    }
    // Returns new tree, with the key/value added.
    insert(t, e, n) {
        let s = this;
        const i = n(t, s.key);
        return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), s.fixUp();
    }
    removeMin() {
        if (this.left.isEmpty()) return Un.EMPTY;
        let t = this;
        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();
    }
    // Returns new tree, with the specified item removed.
    remove(t, e) {
        let n, s = this;
        if (e(t, s.key) < 0) s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), s = s.copy(null, null, null, s.left.remove(t, e), null);
        else {
            if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 0 === e(t, s.key)) {
                if (s.right.isEmpty()) return Un.EMPTY;
                n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
            }
            s = s.copy(null, null, null, null, s.right.remove(t, e));
        }
        return s.fixUp();
    }
    isRed() {
        return this.color;
    }
    // Returns new tree after performing any needed rotations.
    fixUp() {
        let t = this;
        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
    }
    moveRedLeft() {
        let t = this.colorFlip();
        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;
    }
    moveRedRight() {
        let t = this.colorFlip();
        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
    }
    rotateLeft() {
        const t = this.copy(null, null, Un.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, t, null);
    }
    rotateRight() {
        const t = this.copy(null, null, Un.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, t);
    }
    colorFlip() {
        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, t, e);
    }
    // For testing.
    checkMaxDepth() {
        const t = this.check();
        return Math.pow(2, t) <= this.size + 1;
    }
    // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.
    check() {
        if (this.isRed() && this.left.isRed()) throw L();
        if (this.right.isRed()) throw L();
        const t = this.left.check();
        if (t !== this.right.check()) throw L();
        return t + (this.isRed() ? 0 : 1);
    }
}
// end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
Un.EMPTY = null, Un.RED = !0, Un.BLACK = !1;
// end LLRBEmptyNode
Un.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
class {
    constructor(){
        this.size = 0;
    }
    get key() {
        throw L();
    }
    get value() {
        throw L();
    }
    get color() {
        throw L();
    }
    get left() {
        throw L();
    }
    get right() {
        throw L();
    }
    // Returns a copy of the current node.
    copy(t, e, n, s, i) {
        return this;
    }
    // Returns a copy of the tree, with the specified key/value added.
    insert(t, e, n) {
        return new Un(t, e);
    }
    // Returns a copy of the tree, with the specified key removed.
    remove(t, e) {
        return this;
    }
    isEmpty() {
        return !0;
    }
    inorderTraversal(t) {
        return !1;
    }
    reverseTraversal(t) {
        return !1;
    }
    minKey() {
        return null;
    }
    maxKey() {
        return null;
    }
    isRed() {
        return !1;
    }
    // For testing.
    checkMaxDepth() {
        return !0;
    }
    check() {
        return 0;
    }
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */ class qn {
    constructor(t){
        this.comparator = t, this.data = new Bn(this.comparator);
    }
    has(t) {
        return null !== this.data.get(t);
    }
    first() {
        return this.data.minKey();
    }
    last() {
        return this.data.maxKey();
    }
    get size() {
        return this.data.size;
    }
    indexOf(t) {
        return this.data.indexOf(t);
    }
    /** Iterates elements in order defined by "comparator" */ forEach(t) {
        this.data.inorderTraversal((e, n)=>(t(e), !1)
        );
    }
    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */ forEachInRange(t, e) {
        const n = this.data.getIteratorFrom(t[0]);
        for(; n.hasNext();){
            const s = n.getNext();
            if (this.comparator(s.key, t[1]) >= 0) return;
            e(s.key);
        }
    }
    /**
     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
     */ forEachWhile(t, e) {
        let n;
        for(n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext();){
            if (!t(n.getNext().key)) return;
        }
    }
    /** Finds the least element greater than or equal to `elem`. */ firstAfterOrEqual(t) {
        const e = this.data.getIteratorFrom(t);
        return e.hasNext() ? e.getNext().key : null;
    }
    getIterator() {
        return new Kn(this.data.getIterator());
    }
    getIteratorFrom(t) {
        return new Kn(this.data.getIteratorFrom(t));
    }
    /** Inserts or updates an element */ add(t) {
        return this.copy(this.data.remove(t).insert(t, !0));
    }
    /** Deletes an element */ delete(t) {
        return this.has(t) ? this.copy(this.data.remove(t)) : this;
    }
    isEmpty() {
        return this.data.isEmpty();
    }
    unionWith(t44) {
        let e = this;
        // Make sure `result` always refers to the larger one of the two sets.
        return e.size < t44.size && (e = t44, t44 = this), t44.forEach((t)=>{
            e = e.add(t);
        }), e;
    }
    isEqual(t) {
        if (!(t instanceof qn)) return !1;
        if (this.size !== t.size) return !1;
        const e = this.data.getIterator(), n = t.data.getIterator();
        for(; e.hasNext();){
            const t = e.getNext().key, s = n.getNext().key;
            if (0 !== this.comparator(t, s)) return !1;
        }
        return !0;
    }
    toArray() {
        const t = [];
        return this.forEach((e)=>{
            t.push(e);
        }), t;
    }
    toString() {
        const t = [];
        return this.forEach((e)=>t.push(e)
        ), "SortedSet(" + t.toString() + ")";
    }
    copy(t) {
        const e = new qn(this.comparator);
        return e.data = t, e;
    }
}
class Kn {
    constructor(t){
        this.iter = t;
    }
    getNext() {
        return this.iter.getNext().key;
    }
    hasNext() {
        return this.iter.hasNext();
    }
}
/**
 * Compares two sorted sets for equality using their natural ordering. The
 * method computes the intersection and invokes `onAdd` for every element that
 * is in `after` but not `before`. `onRemove` is invoked for every element in
 * `before` but missing from `after`.
 *
 * The method creates a copy of both `before` and `after` and runs in O(n log
 * n), where n is the size of the two lists.
 *
 * @param before - The elements that exist in the original set.
 * @param after - The elements to diff against the original set.
 * @param comparator - The comparator for the elements in before and after.
 * @param onAdd - A function to invoke for every element that is part of `
 * after` but not `before`.
 * @param onRemove - A function to invoke for every element that is part of
 * `before` but not `after`.
 */ /**
 * Returns the next element from the iterator or `undefined` if none available.
 */ function Gn(t) {
    return t.hasNext() ? t.getNext() : void 0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const Qn = new Bn(xt.comparator);
function jn() {
    return Qn;
}
const Wn = new Bn(xt.comparator);
function zn() {
    return Wn;
}
function Hn() {
    return new $n((t)=>t.toString()
    , (t, e)=>t.isEqual(e)
    );
}
const Jn = new Bn(xt.comparator);
const Yn = new qn(xt.comparator);
function Xn(...t) {
    let e = Yn;
    for (const n of t)e = e.add(n);
    return e;
}
const Zn = new qn(rt);
function ts() {
    return Zn;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */ class es {
    constructor(/**
     * The snapshot version this event brings us up to, or MIN if not set.
     */ t, /**
     * A map from target to changes to the target. See TargetChange.
     */ e, /**
     * A set of targets that is known to be inconsistent. Listens for these
     * targets should be re-established without resume tokens.
     */ n, /**
     * A set of which documents have changed or been deleted, along with the
     * doc's new values (if not deleted).
     */ s, /**
     * A set of which document updates are due only to limbo resolution targets.
     */ i){
        this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, this.resolvedLimboDocuments = i;
    }
    /**
     * HACK: Views require RemoteEvents in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized RemoteEvent that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */ // PORTING NOTE: Multi-tab only
    static createSynthesizedRemoteEventForCurrentChange(t, e) {
        const n = new Map;
        return n.set(t, ns.createSynthesizedTargetChangeForCurrentChange(t, e)), new es(ct.min(), n, ts(), jn(), Xn());
    }
}
/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */ class ns {
    constructor(/**
     * An opaque, server-assigned token that allows watching a query to be resumed
     * after disconnecting without retransmitting all the data that matches the
     * query. The resume token essentially identifies a point in time from which
     * the server should resume sending results.
     */ t, /**
     * The "current" (synced) status of this target. Note that "current"
     * has special meaning in the RPC protocol that implies that a target is
     * both up-to-date and consistent with the rest of the watch stream.
     */ e, /**
     * The set of documents that were newly assigned to this target as part of
     * this remote event.
     */ n, /**
     * The set of documents that were already assigned to this target but received
     * an update during this remote event.
     */ s, /**
     * The set of documents that were removed from this target as part of this
     * remote event.
     */ i){
        this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, this.removedDocuments = i;
    }
    /**
     * This method is used to create a synthesized TargetChanges that can be used to
     * apply a CURRENT status change to a View (for queries executed in a different
     * tab) or for new queries (to raise snapshots with correct CURRENT status).
     */ static createSynthesizedTargetChangeForCurrentChange(t, e) {
        return new ns(pt.EMPTY_BYTE_STRING, e, Xn(), Xn(), Xn());
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a changed document and a list of target ids to which this change
 * applies.
 *
 * If document has been deleted NoDocument will be provided.
 */ class ss {
    constructor(/** The new document applies to all of these targets. */ t, /** The new document is removed from all of these targets. */ e, /** The key of the document for this change. */ n, /**
     * The new document or NoDocument if it was deleted. Is null if the
     * document went out of view without the server sending a new document.
     */ s){
        this.O = t, this.removedTargetIds = e, this.key = n, this.F = s;
    }
}
class is {
    constructor(t, e){
        this.targetId = t, this.$ = e;
    }
}
class rs {
    constructor(/** What kind of change occurred to the watch target. */ t, /** The target IDs that were added/removed/set. */ e, /**
     * An opaque, server-assigned token that allows watching a target to be
     * resumed after disconnecting without retransmitting all the data that
     * matches the target. The resume token essentially identifies a point in
     * time from which the server should resume sending results.
     */ n = pt.EMPTY_BYTE_STRING, s = null){
        this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
    }
}
/** Tracks the internal state of a Watch target. */ class os {
    constructor(){
        /**
         * The number of pending responses (adds or removes) that we are waiting on.
         * We only consider targets active that have no pending responses.
         */ this.B = 0, /**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */ this.L = cs(), /** See public getters for explanations of these fields. */ this.U = pt.EMPTY_BYTE_STRING, this.q = !1, /**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */ this.K = !0;
    }
    /**
     * Whether this target has been marked 'current'.
     *
     * 'Current' has special meaning in the RPC protocol: It implies that the
     * Watch backend has sent us all changes up to the point at which the target
     * was added and that the target is consistent with the rest of the watch
     * stream.
     */ get current() {
        return this.q;
    }
    /** The last resume token sent to us for this target. */ get resumeToken() {
        return this.U;
    }
    /** Whether this target has pending target adds or target removes. */ get G() {
        return 0 !== this.B;
    }
    /** Whether we have modified any state that should trigger a snapshot. */ get j() {
        return this.K;
    }
    /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */ W(t) {
        t.approximateByteSize() > 0 && (this.K = !0, this.U = t);
    }
    /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */ H() {
        let t = Xn(), e = Xn(), n = Xn();
        return this.L.forEach((s, i)=>{
            switch(i){
                case 0 /* Added */ :
                    t = t.add(s);
                    break;
                case 2 /* Modified */ :
                    e = e.add(s);
                    break;
                case 1 /* Removed */ :
                    n = n.add(s);
                    break;
                default:
                    L();
            }
        }), new ns(this.U, this.q, t, e, n);
    }
    /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */ J() {
        this.K = !1, this.L = cs();
    }
    Y(t, e) {
        this.K = !0, this.L = this.L.insert(t, e);
    }
    X(t) {
        this.K = !0, this.L = this.L.remove(t);
    }
    Z() {
        this.B += 1;
    }
    tt() {
        this.B -= 1;
    }
    et() {
        this.K = !0, this.q = !0;
    }
}
/**
 * A helper class to accumulate watch changes into a RemoteEvent.
 */ class us {
    constructor(t){
        this.nt = t, /** The internal state of all tracked targets. */ this.st = new Map, /** Keeps track of the documents to update since the last raised snapshot. */ this.it = jn(), /** A mapping of document keys to their set of target IDs. */ this.rt = as(), /**
         * A list of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */ this.ot = new qn(rt);
    }
    /**
     * Processes and adds the DocumentWatchChange to the current set of changes.
     */ ut(t) {
        for (const e of t.O)t.F && t.F.isFoundDocument() ? this.at(e, t.F) : this.ct(e, t.key, t.F);
        for (const e26 of t.removedTargetIds)this.ct(e26, t.key, t.F);
    }
    /** Processes and adds the WatchTargetChange to the current set of changes. */ ht(t) {
        this.forEachTarget(t, (e)=>{
            const n = this.lt(e);
            switch(t.state){
                case 0 /* NoChange */ :
                    this.ft(e) && n.W(t.resumeToken);
                    break;
                case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.tt(), n.G || // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    n.J(), n.W(t.resumeToken);
                    break;
                case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.tt(), n.G || this.removeTarget(e);
                    break;
                case 3 /* Current */ :
                    this.ft(e) && (n.et(), n.W(t.resumeToken));
                    break;
                case 4 /* Reset */ :
                    this.ft(e) && // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    (this.dt(e), n.W(t.resumeToken));
                    break;
                default:
                    L();
            }
        });
    }
    /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */ forEachTarget(t, e) {
        t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.st.forEach((t, n)=>{
            this.ft(n) && e(n);
        });
    }
    /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */ _t(t) {
        const e = t.targetId, n = t.$.count, s = this.wt(e);
        if (s) {
            const t = s.target;
            if (ge(t)) {
                if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    const n = new xt(t.path);
                    this.ct(e, n, ne.newNoDocument(n, ct.min()));
                } else U(1 === n);
            } else this.gt(e) !== n && // Existence filter mismatch: We reset the mapping and raise a new
            // snapshot with `isFromCache:true`.
            (this.dt(e), this.ot = this.ot.add(e));
        }
    }
    /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */ yt(t45) {
        const e27 = new Map;
        this.st.forEach((n, s)=>{
            const i = this.wt(s);
            if (i) {
                if (n.current && ge(i.target)) {
                    // Document queries for document that don't exist can produce an empty
                    // result set. To update our local cache, we synthesize a document
                    // delete if we have not previously received the document. This
                    // resolves the limbo state of the document, removing it from
                    // limboDocumentRefs.
                    // TODO(dimond): Ideally we would have an explicit lookup target
                    // instead resulting in an explicit delete message and we could
                    // remove this special logic.
                    const e = new xt(i.target.path);
                    null !== this.it.get(e) || this.It(s, e) || this.ct(s, e, ne.newNoDocument(e, t45));
                }
                n.j && (e27.set(s, n.H()), n.J());
            }
        });
        let n16 = Xn();
        // We extract the set of limbo-only document updates as the GC logic
        // special-cases documents that do not appear in the target cache.
        // TODO(gsoltis): Expand on this comment once GC is available in the JS
        // client.
        this.rt.forEach((t46, e28)=>{
            let s = !0;
            e28.forEachWhile((t)=>{
                const e = this.wt(t);
                return !e || 2 /* LimboResolution */  === e.purpose || (s = !1, !1);
            }), s && (n16 = n16.add(t46));
        }), this.it.forEach((e, n)=>n.setReadTime(t45)
        );
        const s3 = new es(t45, e27, this.ot, this.it, n16);
        return this.it = jn(), this.rt = as(), this.ot = new qn(rt), s3;
    }
    /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */ // Visible for testing.
    at(t, e) {
        if (!this.ft(t)) return;
        const n = this.It(t, e.key) ? 2 /* Modified */  : 0 /* Added */ ;
        this.lt(t).Y(e.key, n), this.it = this.it.insert(e.key, e), this.rt = this.rt.insert(e.key, this.Tt(e.key).add(t));
    }
    /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */ // Visible for testing.
    ct(t, e, n) {
        if (!this.ft(t)) return;
        const s = this.lt(t);
        this.It(t, e) ? s.Y(e, 1 /* Removed */ ) : // The document may have entered and left the target before we raised a
        // snapshot, so we can just ignore the change.
        s.X(e), this.rt = this.rt.insert(e, this.Tt(e).delete(t)), n && (this.it = this.it.insert(e, n));
    }
    removeTarget(t) {
        this.st.delete(t);
    }
    /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */ gt(t) {
        const e = this.lt(t).H();
        return this.nt.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
    }
    /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */ Z(t) {
        this.lt(t).Z();
    }
    lt(t) {
        let e = this.st.get(t);
        return e || (e = new os, this.st.set(t, e)), e;
    }
    Tt(t) {
        let e = this.rt.get(t);
        return e || (e = new qn(rt), this.rt = this.rt.insert(t, e)), e;
    }
    /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */ ft(t) {
        const e = null !== this.wt(t);
        return e || O("WatchChangeAggregator", "Detected inactive target", t), e;
    }
    /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */ wt(t) {
        const e = this.st.get(t);
        return e && e.G ? null : this.nt.Et(t);
    }
    /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */ dt(t) {
        this.st.set(t, new os);
        this.nt.getRemoteKeysForTarget(t).forEach((e)=>{
            this.ct(t, e, /*updatedDocument=*/ null);
        });
    }
    /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */ It(t, e) {
        return this.nt.getRemoteKeysForTarget(t).has(e);
    }
}
function as() {
    return new Bn(xt.comparator);
}
function cs() {
    return new Bn(xt.comparator);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const hs = (()=>{
    const t = {
        asc: "ASCENDING",
        desc: "DESCENDING"
    };
    return t;
})(), ls = (()=>{
    const t = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
    };
    return t;
})();
/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */ class fs {
    constructor(t, e){
        this.databaseId = t, this.N = e;
    }
}
/**
 * Returns a value for a Date that's appropriate to put into a proto.
 */ function ds(t, e) {
    if (t.N) return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
    return {
        seconds: "" + e.seconds,
        nanos: e.nanoseconds
    };
}
/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */ function _s(t, e) {
    return t.N ? e.toBase64() : e.toUint8Array();
}
/**
 * Returns a ByteString based on the proto string value.
 */ function ws(t, e) {
    return ds(t, e.toTimestamp());
}
function ms(t47) {
    return U(!!t47), ct.fromTimestamp(function(t) {
        const e = Tt(t);
        return new at(e.seconds, e.nanos);
    }(t47));
}
function gs(t48, e) {
    return (function(t) {
        return new _t([
            "projects",
            t.projectId,
            "databases",
            t.database
        ]);
    })(t48).child("documents").child(e).canonicalString();
}
function ys(t) {
    const e = _t.fromString(t);
    return U(Gs(e)), e;
}
function ps(t, e) {
    return gs(t.databaseId, e.path);
}
function Is(t, e) {
    const n = ys(e);
    if (n.get(1) !== t.databaseId.projectId) throw new Q(G.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
    if (n.get(3) !== t.databaseId.database) throw new Q(G.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
    return new xt(Rs(n));
}
function Ts(t, e) {
    return gs(t.databaseId, e);
}
function Es(t) {
    const e = ys(t);
    // In v1beta1 queries for collections at the root did not have a trailing
    // "/documents". In v1 all resource paths contain "/documents". Preserve the
    // ability to read the v1beta1 form for compatibility with queries persisted
    // in the local target cache.
    return 4 === e.length ? _t.emptyPath() : Rs(e);
}
function As(t) {
    return new _t([
        "projects",
        t.databaseId.projectId,
        "databases",
        t.databaseId.database
    ]).canonicalString();
}
function Rs(t) {
    return U(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
}
/** Creates a Document proto from key and fields (but no create/update time) */ function Ps(t, e, n) {
    return {
        name: ps(t, e),
        fields: n.value.mapValue.fields
    };
}
function bs(t, e, n) {
    const s = Is(t, e.name), i = ms(e.updateTime), r = new te({
        mapValue: {
            fields: e.fields
        }
    }), o = ne.newFoundDocument(s, i, r);
    return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;
}
function Vs(t49, e29) {
    return "found" in e29 ? function(t, e) {
        U(!!e.found), e.found.name, e.found.updateTime;
        const n = Is(t, e.found.name), s = ms(e.found.updateTime), i = new te({
            mapValue: {
                fields: e.found.fields
            }
        });
        return ne.newFoundDocument(n, s, i);
    }(t49, e29) : "missing" in e29 ? function(t, e) {
        U(!!e.missing), U(!!e.readTime);
        const n = Is(t, e.missing), s = ms(e.readTime);
        return ne.newNoDocument(n, s);
    }(t49, e29) : L();
}
function vs(t50, e30) {
    let n;
    if ("targetChange" in e30) {
        e30.targetChange;
        // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
        // if unset
        const s = function(t) {
            return "NO_CHANGE" === t ? 0 /* NoChange */  : "ADD" === t ? 1 /* Added */  : "REMOVE" === t ? 2 /* Removed */  : "CURRENT" === t ? 3 /* Current */  : "RESET" === t ? 4 /* Reset */  : L();
        }(e30.targetChange.targetChangeType || "NO_CHANGE"), i = e30.targetChange.targetIds || [], r = function(t, e) {
            return t.N ? (U(void 0 === e || "string" == typeof e), pt.fromBase64String(e || "")) : (U(void 0 === e || e instanceof Uint8Array), pt.fromUint8Array(e || new Uint8Array));
        }(t50, e30.targetChange.resumeToken), o = e30.targetChange.cause, u = o && function(t) {
            const e = void 0 === t.code ? G.UNKNOWN : Fn(t.code);
            return new Q(e, t.message || "");
        }(o);
        n = new rs(s, i, r, u || null);
    } else if ("documentChange" in e30) {
        e30.documentChange;
        const s = e30.documentChange;
        s.document, s.document.name, s.document.updateTime;
        const i = Is(t50, s.document.name), r = ms(s.document.updateTime), o = new te({
            mapValue: {
                fields: s.document.fields
            }
        }), u = ne.newFoundDocument(i, r, o), a = s.targetIds || [], c = s.removedTargetIds || [];
        n = new ss(a, c, u.key, u);
    } else if ("documentDelete" in e30) {
        e30.documentDelete;
        const s = e30.documentDelete;
        s.document;
        const i = Is(t50, s.document), r = s.readTime ? ms(s.readTime) : ct.min(), o = ne.newNoDocument(i, r), u = s.removedTargetIds || [];
        n = new ss([], u, o.key, o);
    } else if ("documentRemove" in e30) {
        e30.documentRemove;
        const s = e30.documentRemove;
        s.document;
        const i = Is(t50, s.document), r = s.removedTargetIds || [];
        n = new ss([], r, i, null);
    } else {
        if (!("filter" in e30)) return L();
        {
            e30.filter;
            const t = e30.filter;
            t.targetId;
            const s = t.count || 0, i = new Nn(s), r = t.targetId;
            n = new is(r, i);
        }
    }
    return n;
}
function Ss(t51, e31) {
    let n17;
    if (e31 instanceof bn) n17 = {
        update: Ps(t51, e31.key, e31.value)
    };
    else if (e31 instanceof Cn) n17 = {
        delete: ps(t51, e31.key)
    };
    else if (e31 instanceof Vn) n17 = {
        update: Ps(t51, e31.key, e31.data),
        updateMask: Ks(e31.fieldMask)
    };
    else {
        if (!(e31 instanceof xn)) return L();
        n17 = {
            verify: ps(t51, e31.key)
        };
    }
    return e31.fieldTransforms.length > 0 && (n17.updateTransforms = e31.fieldTransforms.map((t)=>(function(t, e) {
            const n = e.transform;
            if (n instanceof un) return {
                fieldPath: e.field.canonicalString(),
                setToServerValue: "REQUEST_TIME"
            };
            if (n instanceof an) return {
                fieldPath: e.field.canonicalString(),
                appendMissingElements: {
                    values: n.elements
                }
            };
            if (n instanceof hn) return {
                fieldPath: e.field.canonicalString(),
                removeAllFromArray: {
                    values: n.elements
                }
            };
            if (n instanceof fn) return {
                fieldPath: e.field.canonicalString(),
                increment: n.k
            };
            throw L();
        })(0, t)
    )), e31.precondition.isNone || (n17.currentDocument = function(t, e) {
        return void 0 !== e.updateTime ? {
            updateTime: ws(t, e.updateTime)
        } : void 0 !== e.exists ? {
            exists: e.exists
        } : L();
    }(t51, e31.precondition)), n17;
}
function Ds(t52, e32) {
    const n18 = e32.currentDocument ? function(t) {
        return void 0 !== t.updateTime ? yn.updateTime(ms(t.updateTime)) : void 0 !== t.exists ? yn.exists(t.exists) : yn.none();
    }(e32.currentDocument) : yn.none(), s4 = e32.updateTransforms ? e32.updateTransforms.map((e33)=>(function(t, e) {
            let n = null;
            if ("setToServerValue" in e) U("REQUEST_TIME" === e.setToServerValue), n = new un;
            else if ("appendMissingElements" in e) {
                const t = e.appendMissingElements.values || [];
                n = new an(t);
            } else if ("removeAllFromArray" in e) {
                const t = e.removeAllFromArray.values || [];
                n = new hn(t);
            } else "increment" in e ? n = new fn(t, e.increment) : L();
            const s = mt.fromServerFormat(e.fieldPath);
            return new wn(s, n);
        })(t52, e33)
    ) : [];
    if (e32.update) {
        e32.update.name;
        const i = Is(t52, e32.update.name), r = new te({
            mapValue: {
                fields: e32.update.fields
            }
        });
        if (e32.updateMask) {
            const t53 = function(t56) {
                const e = t56.fieldPaths || [];
                return new gt(e.map((t)=>mt.fromServerFormat(t)
                ));
            }(e32.updateMask);
            return new Vn(i, r, t53, n18, s4);
        }
        return new bn(i, r, n18, s4);
    }
    if (e32.delete) {
        const s = Is(t52, e32.delete);
        return new Cn(s, n18);
    }
    if (e32.verify) {
        const s = Is(t52, e32.verify);
        return new xn(s, n18);
    }
    return L();
}
function Cs(t57, e34) {
    return t57 && t57.length > 0 ? (U(void 0 !== e34), t57.map((t58)=>(function(t, e) {
            // NOTE: Deletes don't have an updateTime.
            let n = t.updateTime ? ms(t.updateTime) : ms(e);
            return n.isEqual(ct.min()) && // The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            (n = ms(e)), new gn(n, t.transformResults || []);
        })(t58, e34)
    )) : [];
}
function xs(t, e) {
    return {
        documents: [
            Ts(t, e.path)
        ]
    };
}
function Ns(t59, e35) {
    // Dissect the path into parent, collectionId, and optional key filter.
    const n = {
        structuredQuery: {}
    }, s = e35.path;
    null !== e35.collectionGroup ? (n.parent = Ts(t59, s), n.structuredQuery.from = [
        {
            collectionId: e35.collectionGroup,
            allDescendants: !0
        }
    ]) : (n.parent = Ts(t59, s.popLast()), n.structuredQuery.from = [
        {
            collectionId: s.lastSegment()
        }
    ]);
    const i = function(t60) {
        if (0 === t60.length) return;
        const e = t60.map((t61)=>// visible for testing
            (function(t) {
                if ("==" /* EQUAL */  === t.op) {
                    if (jt(t.value)) return {
                        unaryFilter: {
                            field: Bs(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (Qt(t.value)) return {
                        unaryFilter: {
                            field: Bs(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */  === t.op) {
                    if (jt(t.value)) return {
                        unaryFilter: {
                            field: Bs(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (Qt(t.value)) return {
                        unaryFilter: {
                            field: Bs(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: Bs(t.field),
                        op: $s(t.op),
                        value: t.value
                    }
                };
            })(t61)
        );
        if (1 === e.length) return e[0];
        return {
            compositeFilter: {
                op: "AND",
                filters: e
            }
        };
    }(e35.filters);
    i && (n.structuredQuery.where = i);
    const r = function(t62) {
        if (0 === t62.length) return;
        return t62.map((t63)=>// visible for testing
            (function(t) {
                return {
                    field: Bs(t.field),
                    direction: Fs(t.dir)
                };
            })(t63)
        );
    }(e35.orderBy);
    r && (n.structuredQuery.orderBy = r);
    const o = function(t, e) {
        return t.N || St(e) ? e : {
            value: e
        };
    }(t59, e35.limit);
    var u;
    return null !== o && (n.structuredQuery.limit = o), e35.startAt && (n.structuredQuery.startAt = {
        before: (u = e35.startAt).inclusive,
        values: u.position
    }), e35.endAt && (n.structuredQuery.endAt = function(t) {
        return {
            before: !t.inclusive,
            values: t.position
        };
    }(e35.endAt)), n;
}
function ks(t64) {
    let e36 = Es(t64.parent);
    const n19 = t64.structuredQuery, s = n19.from ? n19.from.length : 0;
    let i = null;
    if (s > 0) {
        U(1 === s);
        const t = n19.from[0];
        t.allDescendants ? i = t.collectionId : e36 = e36.child(t.collectionId);
    }
    let r = [];
    n19.where && (r = Os(n19.where));
    let o = [];
    n19.orderBy && (o = n19.orderBy.map((t65)=>(function(t66) {
            return new Ce(Ls(t66.field), // visible for testing
            function(t) {
                switch(t){
                    case "ASCENDING":
                        return "asc" /* ASCENDING */ ;
                    case "DESCENDING":
                        return "desc" /* DESCENDING */ ;
                    default:
                        return;
                }
            }(t66.direction));
        })(t65)
    ));
    let u = null;
    n19.limit && (u = function(t) {
        let e;
        return e = "object" == typeof t ? t.value : t, St(e) ? null : e;
    }(n19.limit));
    let a = null;
    n19.startAt && (a = function(t) {
        const e = !!t.before, n = t.values || [];
        return new De(n, e);
    }(n19.startAt));
    let c = null;
    return n19.endAt && (c = function(t) {
        const e = !t.before, n = t.values || [];
        return new De(n, e);
    }(n19.endAt)), Oe(e36, i, o, r, u, "F" /* First */ , a, c);
}
function Ms(t, e37) {
    const n = function(t, e) {
        switch(e){
            case 0 /* Listen */ :
                return null;
            case 1 /* ExistenceFilterMismatch */ :
                return "existence-filter-mismatch";
            case 2 /* LimboResolution */ :
                return "limbo-document";
            default:
                return L();
        }
    }(0, e37.purpose);
    return null == n ? null : {
        "goog-listen-tags": n
    };
}
function Os(t67) {
    return t67 ? void 0 !== t67.unaryFilter ? [
        qs(t67)
    ] : void 0 !== t67.fieldFilter ? [
        Us(t67)
    ] : void 0 !== t67.compositeFilter ? t67.compositeFilter.filters.map((t)=>Os(t)
    ).reduce((t, e)=>t.concat(e)
    ) : L() : [];
}
function Fs(t) {
    return hs[t];
}
function $s(t) {
    return ls[t];
}
function Bs(t) {
    return {
        fieldPath: t.canonicalString()
    };
}
function Ls(t) {
    return mt.fromServerFormat(t.fieldPath);
}
function Us(t68) {
    return Te.create(Ls(t68.fieldFilter.field), function(t) {
        switch(t){
            case "EQUAL":
                return "==" /* EQUAL */ ;
            case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */ ;
            case "GREATER_THAN":
                return ">" /* GREATER_THAN */ ;
            case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */ ;
            case "LESS_THAN":
                return "<" /* LESS_THAN */ ;
            case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */ ;
            case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */ ;
            case "IN":
                return "in" /* IN */ ;
            case "NOT_IN":
                return "not-in" /* NOT_IN */ ;
            case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */ ;
            default:
                return L();
        }
    }(t68.fieldFilter.op), t68.fieldFilter.value);
}
function qs(t) {
    switch(t.unaryFilter.op){
        case "IS_NAN":
            const e = Ls(t.unaryFilter.field);
            return Te.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });
        case "IS_NULL":
            const n = Ls(t.unaryFilter.field);
            return Te.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });
        case "IS_NOT_NAN":
            const s = Ls(t.unaryFilter.field);
            return Te.create(s, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });
        case "IS_NOT_NULL":
            const i = Ls(t.unaryFilter.field);
            return Te.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });
        default:
            return L();
    }
}
function Ks(t69) {
    const e = [];
    return t69.fields.forEach((t)=>e.push(t.canonicalString())
    ), {
        fieldPaths: e
    };
}
function Gs(t) {
    // Resource names have at least 4 components (project ID, database ID)
    return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */ function Qs(t) {
    let e = "";
    for(let n = 0; n < t.length; n++)e.length > 0 && (e = Ws(e)), e = js(t.get(n), e);
    return Ws(e);
}
/** Encodes a single segment of a resource path into the given result */ function js(t, e) {
    let n = e;
    const s = t.length;
    for(let e38 = 0; e38 < s; e38++){
        const s = t.charAt(e38);
        switch(s){
            case "\0":
                n += "";
                break;
            case "":
                n += "";
                break;
            default:
                n += s;
        }
    }
    return n;
}
/** Encodes a path separator into the given result */ function Ws(t) {
    return t + "";
}
/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */ function zs(t) {
    // Event the empty path must encode as a path of at least length 2. A path
    // with exactly 2 must be the empty path.
    const e = t.length;
    if (U(e >= 2), 2 === e) return U("" === t.charAt(0) && "" === t.charAt(1)), _t.emptyPath();
    // Escape characters cannot exist past the second-to-last position in the
    // source value.
    const n = e - 2, s = [];
    let i = "";
    for(let r = 0; r < e;){
        // The last two characters of a valid encoded path must be a separator, so
        // there must be an end to this segment.
        const e = t.indexOf("", r);
        (e < 0 || e > n) && L();
        switch(t.charAt(e + 1)){
            case "":
                const n20 = t.substring(r, e);
                let o;
                0 === i.length ? // Avoid copying for the common case of a segment that excludes \0
                // and \001
                o = n20 : (i += n20, o = i, i = ""), s.push(o);
                break;
            case "":
                i += t.substring(r, e), i += "\0";
                break;
            case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(r, e + 1);
                break;
            default:
                L();
        }
        r = e + 2;
    }
    return new _t(s);
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const Hs = [
    "userId",
    "batchId"
];
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Name of the IndexedDb object store.
 *
 * Note that the name 'owner' is chosen to ensure backwards compatibility with
 * older clients that only supported single locked access to the persistence
 * layer.
 */ /**
 * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
 * index to iterate over all at document mutations for a given path or lower.
 */ function Js(t, e) {
    return [
        t,
        Qs(e)
    ];
}
/**
 * Creates a full index key of [userId, encodedPath, batchId] for inserting
 * and deleting into the DbDocumentMutations index.
 */ function Ys(t, e, n) {
    return [
        t,
        Qs(e),
        n
    ];
}
/**
 * Because we store all the useful information for this store in the key,
 * there is no useful information to store as the value. The raw (unencoded)
 * path cannot be stored because IndexedDb doesn't store prototype
 * information.
 */ const Xs = {}, Zs = [
    "prefixPath",
    "collectionGroup",
    "readTime",
    "documentId"
], ti = [
    "prefixPath",
    "collectionGroup",
    "documentId"
], ei = [
    "collectionGroup",
    "readTime",
    "prefixPath",
    "documentId"
], ni = [
    "canonicalId",
    "targetId"
], si = [
    "targetId",
    "path"
], ii = [
    "path",
    "targetId"
], ri = [
    "collectionId",
    "parent"
], oi = [
    "indexId",
    "uid"
], ui = [
    "uid",
    "sequenceNumber"
], ai = [
    "indexId",
    "uid",
    "arrayValue",
    "directionalValue",
    "orderedDocumentKey",
    "documentKey"
], ci = [
    "indexId",
    "uid",
    "orderedDocumentKey"
], hi = [
    "userId",
    "collectionPath",
    "documentId"
], li = [
    "userId",
    "collectionPath",
    "largestBatchId"
], fi = [
    "userId",
    "collectionGroup",
    "largestBatchId"
], di = [
    "mutationQueues",
    "mutations",
    "documentMutations",
    "remoteDocuments",
    "targets",
    "owner",
    "targetGlobal",
    "targetDocuments",
    "clientMetadata",
    "remoteDocumentGlobal",
    "collectionParents",
    "bundles",
    "namedQueries"
], _i = [
    ...di,
    "documentOverlays"
], wi = [
    "mutationQueues",
    "mutations",
    "documentMutations",
    "remoteDocumentsV14",
    "targets",
    "owner",
    "targetGlobal",
    "targetDocuments",
    "clientMetadata",
    "remoteDocumentGlobal",
    "collectionParents",
    "bundles",
    "namedQueries",
    "documentOverlays"
], mi = [
    ...wi,
    "indexConfiguration",
    "indexState",
    "indexEntries"
];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const gi = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
/**
 * A base class representing a persistence transaction, encapsulating both the
 * transaction's sequence numbers as well as a list of onCommitted listeners.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */ class yi {
    constructor(){
        this.onCommittedListeners = [];
    }
    addOnCommittedListener(t) {
        this.onCommittedListeners.push(t);
    }
    raiseOnCommittedEvent() {
        this.onCommittedListeners.forEach((t)=>t()
        );
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * PersistencePromise is essentially a re-implementation of Promise except
 * it has a .next() method instead of .then() and .next() and .catch() callbacks
 * are executed synchronously when a PersistencePromise resolves rather than
 * asynchronously (Promise implementations use setImmediate() or similar).
 *
 * This is necessary to interoperate with IndexedDB which will automatically
 * commit transactions if control is returned to the event loop without
 * synchronously initiating another operation on the transaction.
 *
 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
 * Promises.
 */ class pi {
    constructor(t70){
        // NOTE: next/catchCallback will always point to our own wrapper functions,
        // not the user's raw next() or catch() callbacks.
        this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.isDone = !1, // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.callbackAttached = !1, t70((t)=>{
            this.isDone = !0, this.result = t, this.nextCallback && // value should be defined unless T is Void, but we can't express
            // that in the type system.
            this.nextCallback(t);
        }, (t)=>{
            this.isDone = !0, this.error = t, this.catchCallback && this.catchCallback(t);
        });
    }
    catch(t) {
        return this.next(void 0, t);
    }
    next(t71, e39) {
        return this.callbackAttached && L(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(e39, this.error) : this.wrapSuccess(t71, this.result) : new pi((n, s)=>{
            this.nextCallback = (e)=>{
                this.wrapSuccess(t71, e).next(n, s);
            }, this.catchCallback = (t)=>{
                this.wrapFailure(e39, t).next(n, s);
            };
        });
    }
    toPromise() {
        return new Promise((t, e)=>{
            this.next(t, e);
        });
    }
    wrapUserFunction(t) {
        try {
            const e = t();
            return e instanceof pi ? e : pi.resolve(e);
        } catch (t72) {
            return pi.reject(t72);
        }
    }
    wrapSuccess(t, e) {
        return t ? this.wrapUserFunction(()=>t(e)
        ) : pi.resolve(e);
    }
    wrapFailure(t, e) {
        return t ? this.wrapUserFunction(()=>t(e)
        ) : pi.reject(e);
    }
    static resolve(t) {
        return new pi((e, n)=>{
            e(t);
        });
    }
    static reject(t) {
        return new pi((e, n)=>{
            n(t);
        });
    }
    static waitFor(// Accept all Promise types in waitFor().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t73) {
        return new pi((e, n)=>{
            let s = 0, i = 0, r = !1;
            t73.forEach((t74)=>{
                ++s, t74.next(()=>{
                    ++i, r && i === s && e();
                }, (t)=>n(t)
                );
            }), r = !0, i === s && e();
        });
    }
    /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */ static or(t75) {
        let e = pi.resolve(!1);
        for (const n of t75)e = e.next((t)=>t ? pi.resolve(t) : n()
        );
        return e;
    }
    static forEach(t76, e) {
        const n = [];
        return t76.forEach((t, s)=>{
            n.push(e.call(this, t, s));
        }), this.waitFor(n);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // References to `window` are guarded by SimpleDb.isAvailable()
/* eslint-disable no-restricted-globals */ /**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */ class Ii {
    constructor(t, e40){
        this.action = t, this.transaction = e40, this.aborted = !1, /**
         * A `Promise` that resolves with the result of the IndexedDb transaction.
         */ this.At = new j, this.transaction.oncomplete = ()=>{
            this.At.resolve();
        }, this.transaction.onabort = ()=>{
            e40.error ? this.At.reject(new Ai(t, e40.error)) : this.At.resolve();
        }, this.transaction.onerror = (e)=>{
            const n = vi(e.target.error);
            this.At.reject(new Ai(t, n));
        };
    }
    static open(t, e, n, s) {
        try {
            return new Ii(e, t.transaction(s, n));
        } catch (t77) {
            throw new Ai(e, t77);
        }
    }
    get Rt() {
        return this.At.promise;
    }
    abort(t) {
        t && this.At.reject(t), this.aborted || (O("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), this.aborted = !0, this.transaction.abort());
    }
    Pt() {
        // If the browser supports V3 IndexedDB, we invoke commit() explicitly to
        // speed up index DB processing if the event loop remains blocks.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const t = this.transaction;
        this.aborted || "function" != typeof t.commit || t.commit();
    }
    /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */ store(t) {
        const e = this.transaction.objectStore(t);
        return new Pi(e);
    }
}
/**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */ class Ti {
    /*
     * Creates a new SimpleDb wrapper for IndexedDb database `name`.
     *
     * Note that `version` must not be a downgrade. IndexedDB does not support
     * downgrading the schema version. We currently do not support any way to do
     * versioning outside of IndexedDB's versioning mechanism, as only
     * version-upgrade transactions are allowed to do things like create
     * objectstores.
     */ constructor(t, e, n){
        this.name = t, this.version = e, this.bt = n;
        // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
        // whatever reason it's much harder to hit after 12.2 so we only proactively
        // log on 12.2.
        12.2 === Ti.Vt(_util.getUA()) && F("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    /** Deletes the specified database. */ static delete(t) {
        return O("SimpleDb", "Removing database:", t), bi(window.indexedDB.deleteDatabase(t)).toPromise();
    }
    /** Returns true if IndexedDB is available in the current environment. */ static vt() {
        if (!_util.isIndexedDBAvailable()) return !1;
        if (Ti.St()) return !0;
        // We extensively use indexed array values and compound keys,
        // which IE and Edge do not support. However, they still have indexedDB
        // defined on the window, so we need to check for them here and make sure
        // to return that persistence is not enabled for those browsers.
        // For tracking support of this feature, see here:
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
        // Check the UA string to find out the browser.
        const t = _util.getUA(), e = Ti.Vt(t), n = 0 < e && e < 10, s = Ti.Dt(t), i = 0 < s && s < 4.5;
        // IE 10
        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
        // IE 11
        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
        // Edge
        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
        // iOS Safari: Disable for users running iOS version < 10.
        return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
    }
    /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */ static St() {
        var t;
        return "undefined" != typeof process && "YES" === ((t = {}, void 0 === t) ? void 0 : t.Ct);
    }
    /** Helper to get a typed SimpleDbStore from a transaction. */ static xt(t, e) {
        return t.store(e);
    }
    // visible for testing
    /** Parse User Agent to determine iOS version. Returns -1 if not found. */ static Vt(t) {
        const e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(n);
    }
    // visible for testing
    /** Parse User Agent to determine Android version. Returns -1 if not found. */ static Dt(t) {
        const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(n);
    }
    /**
     * Opens the specified database, creating or upgrading it if necessary.
     */ async Nt(t78) {
        return this.db || (O("SimpleDb", "Opening database:", this.name), this.db = await new Promise((e41, n21)=>{
            // TODO(mikelehen): Investigate browser compatibility.
            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
            // suggests IE9 and older WebKit browsers handle upgrade
            // differently. They expect setVersion, as described here:
            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
            const s5 = indexedDB.open(this.name, this.version);
            s5.onsuccess = (t)=>{
                const n = t.target.result;
                e41(n);
            }, s5.onblocked = ()=>{
                n21(new Ai(t78, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
            }, s5.onerror = (e)=>{
                const s = e.target.error;
                "VersionError" === s.name ? n21(new Q(G.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === s.name ? n21(new Q(G.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + s)) : n21(new Ai(t78, s));
            }, s5.onupgradeneeded = (t)=>{
                O("SimpleDb", 'Database "' + this.name + '" requires upgrade from version:', t.oldVersion);
                const e = t.target.result;
                this.bt.kt(e, s5.transaction, t.oldVersion, this.version).next(()=>{
                    O("SimpleDb", "Database upgrade to version " + this.version + " complete");
                });
            };
        })), this.Mt && (this.db.onversionchange = (t)=>this.Mt(t)
        ), this.db;
    }
    Ot(t) {
        this.Mt = t, this.db && (this.db.onversionchange = (e)=>t(e)
        );
    }
    async runTransaction(t79, e, n, s) {
        const i = "readonly" === e;
        let r = 0;
        for(;;){
            ++r;
            try {
                this.db = await this.Nt(t79);
                const e = Ii.open(this.db, t79, i ? "readonly" : "readwrite", n), r = s(e).next((t)=>(e.Pt(), t)
                ).catch((t)=>// Abort the transaction if there was an error.
                    (e.abort(t), pi.reject(t))
                ).toPromise();
                // As noted above, errors are propagated by aborting the transaction. So
                // we swallow any error here to avoid the browser logging it as unhandled.
                return r.catch(()=>{}), // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                // fire), but still return the original transactionFnResult back to the
                // caller.
                await e.Rt, r;
            } catch (t) {
                // TODO(schmidt-sebastian): We could probably be smarter about this and
                // not retry exceptions that are likely unrecoverable (such as quota
                // exceeded errors).
                // Note: We cannot use an instanceof check for FirestoreException, since the
                // exception is wrapped in a generic error by our async/await handling.
                const e = "FirebaseError" !== t.name && r < 3;
                if (O("SimpleDb", "Transaction failed with error:", t.message, "Retrying:", e), this.close(), !e) return Promise.reject(t);
            }
        }
    }
    close() {
        this.db && this.db.close(), this.db = void 0;
    }
}
/**
 * A controller for iterating over a key range or index. It allows an iterate
 * callback to delete the currently-referenced object, or jump to a new key
 * within the key range or index.
 */ class Ei {
    constructor(t){
        this.Ft = t, this.$t = !1, this.Bt = null;
    }
    get isDone() {
        return this.$t;
    }
    get Lt() {
        return this.Bt;
    }
    set cursor(t) {
        this.Ft = t;
    }
    /**
     * This function can be called to stop iteration at any point.
     */ done() {
        this.$t = !0;
    }
    /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */ Ut(t) {
        this.Bt = t;
    }
    /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */ delete() {
        return bi(this.Ft.delete());
    }
}
/** An error that wraps exceptions that thrown during IndexedDB execution. */ class Ai extends Q {
    constructor(t, e){
        super(G.UNAVAILABLE, `IndexedDB transaction '${t}' failed: ${e}`), this.name = "IndexedDbTransactionError";
    }
}
/** Verifies whether `e` is an IndexedDbTransactionError. */ function Ri(t) {
    // Use name equality, as instanceof checks on errors don't work with errors
    // that wrap other errors.
    return "IndexedDbTransactionError" === t.name;
}
/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */ class Pi {
    constructor(t){
        this.store = t;
    }
    put(t, e) {
        let n;
        return void 0 !== e ? (O("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (O("SimpleDb", "PUT", this.store.name, "<auto-key>", t), n = this.store.put(t)), bi(n);
    }
    /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value - The object to write.
     * @returns The key of the value to add.
     */ add(t) {
        O("SimpleDb", "ADD", this.store.name, t, t);
        return bi(this.store.add(t));
    }
    /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @returns The object with the specified key or null if no object exists.
     */ get(t) {
        // We're doing an unsafe cast to ValueType.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return bi(this.store.get(t)).next((e)=>// Normalize nonexistence to null.
            (void 0 === e && (e = null), O("SimpleDb", "GET", this.store.name, t, e), e)
        );
    }
    delete(t) {
        O("SimpleDb", "DELETE", this.store.name, t);
        return bi(this.store.delete(t));
    }
    /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */ count() {
        O("SimpleDb", "COUNT", this.store.name);
        return bi(this.store.count());
    }
    qt(t81, e42) {
        const n22 = this.options(t81, e42);
        // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly
        // 20% faster. Unfortunately, getAll() does not support custom indices.
        if (n22.index || "function" != typeof this.store.getAll) {
            const t = this.cursor(n22), e = [];
            return this.Kt(t, (t, n)=>{
                e.push(n);
            }).next(()=>e
            );
        }
        {
            const t80 = this.store.getAll(n22.range);
            return new pi((e, n)=>{
                t80.onerror = (t)=>{
                    n(t.target.error);
                }, t80.onsuccess = (t)=>{
                    e(t.target.result);
                };
            });
        }
    }
    /**
     * Loads the first `count` elements from the provided index range. Loads all
     * elements if no limit is provided.
     */ Gt(t82, e43) {
        const n = this.store.getAll(t82, null === e43 ? void 0 : e43);
        return new pi((t83, e44)=>{
            n.onerror = (t)=>{
                e44(t.target.error);
            }, n.onsuccess = (e)=>{
                t83(e.target.result);
            };
        });
    }
    Qt(t, e) {
        O("SimpleDb", "DELETE ALL", this.store.name);
        const n23 = this.options(t, e);
        n23.jt = !1;
        const s = this.cursor(n23);
        return this.Kt(s, (t, e, n)=>n.delete()
        );
    }
    Wt(t, e) {
        let n;
        e ? n = t : (n = {}, e = t);
        const s = this.cursor(n);
        return this.Kt(s, e);
    }
    /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */ zt(t84) {
        const e45 = this.cursor({});
        return new pi((n, s6)=>{
            e45.onerror = (t)=>{
                const e = vi(t.target.error);
                s6(e);
            }, e45.onsuccess = (e)=>{
                const s = e.target.result;
                s ? t84(s.primaryKey, s.value).next((t)=>{
                    t ? s.continue() : n();
                }) : n();
            };
        });
    }
    Kt(t85, e) {
        const n = [];
        return new pi((s, i2)=>{
            t85.onerror = (t)=>{
                i2(t.target.error);
            }, t85.onsuccess = (t)=>{
                const i = t.target.result;
                if (!i) return void s();
                const r = new Ei(i), o = e(i.primaryKey, i.value, r);
                if (o instanceof pi) {
                    const t86 = o.catch((t)=>(r.done(), pi.reject(t))
                    );
                    n.push(t86);
                }
                r.isDone ? s() : null === r.Lt ? i.continue() : i.continue(r.Lt);
            };
        }).next(()=>pi.waitFor(n)
        );
    }
    options(t, e) {
        let n;
        return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
            index: n,
            range: e
        };
    }
    cursor(t) {
        let e = "next";
        if (t.reverse && (e = "prev"), t.index) {
            const n = this.store.index(t.index);
            return t.jt ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
        }
        return this.store.openCursor(t.range, e);
    }
}
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */ function bi(t87) {
    return new pi((e46, n24)=>{
        t87.onsuccess = (t)=>{
            const n = t.target.result;
            e46(n);
        }, t87.onerror = (t)=>{
            const e = vi(t.target.error);
            n24(e);
        };
    });
}
// Guard so we only report the error once.
let Vi = !1;
function vi(t) {
    const e = Ti.Vt(_util.getUA());
    if (e >= 12.2 && e < 13) {
        const e = "An internal error was encountered in the Indexed Database server";
        if (t.message.indexOf(e) >= 0) {
            // Wrap error in a more descriptive one.
            const t = new Q("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
            return Vi || (Vi = !0, // Throw a global exception outside of this promise chain, for the user to
            // potentially catch.
            setTimeout(()=>{
                throw t;
            }, 0)), t;
        }
    }
    return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Si extends yi {
    constructor(t, e){
        super(), this.Ht = t, this.currentSequenceNumber = e;
    }
}
function Di(t, e) {
    const n = K(t);
    return Ti.xt(n.Ht, e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A batch of mutations that will be sent as one unit to the backend.
 */ class Ci {
    /**
     * @param batchId - The unique ID of this mutation batch.
     * @param localWriteTime - The original write time of this mutation.
     * @param baseMutations - Mutations that are used to populate the base
     * values when this mutation is applied locally. This can be used to locally
     * overwrite values that are persisted in the remote document cache. Base
     * mutations are never sent to the backend.
     * @param mutations - The user-provided mutations in this mutation batch.
     * User-provided mutations are applied both locally and remotely on the
     * backend.
     */ constructor(t, e, n, s){
        this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
    }
    /**
     * Applies all the mutations in this MutationBatch to the specified document
     * to compute the state of the remote document
     *
     * @param document - The document to apply mutations to.
     * @param batchResult - The result of applying the MutationBatch to the
     * backend.
     */ applyToRemoteDocument(t, e) {
        const n = e.mutationResults;
        for(let e47 = 0; e47 < this.mutations.length; e47++){
            const s = this.mutations[e47];
            if (s.key.isEqual(t.key)) Tn(s, t, n[e47]);
        }
    }
    /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param document - The document to apply mutations to.
     */ applyToLocalView(t) {
        // First, apply the base state. This allows us to apply non-idempotent
        // transform against a consistent set of values.
        for (const e of this.baseMutations)e.key.isEqual(t.key) && En(e, t, this.localWriteTime);
        // Second, apply all user-provided mutations.
        for (const e48 of this.mutations)e48.key.isEqual(t.key) && En(e48, t, this.localWriteTime);
    }
    /**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */ applyToLocalDocumentSet(t) {
        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
        // directly (as done in `applyToLocalView()`), we can reduce the complexity
        // to O(n).
        this.mutations.forEach((e)=>{
            const n = t.get(e.key), s = n;
            // TODO(mutabledocuments): This method should take a MutableDocumentMap
            // and we should remove this cast.
            this.applyToLocalView(s), n.isValidDocument() || s.convertToNoDocument(ct.min());
        });
    }
    keys() {
        return this.mutations.reduce((t, e)=>t.add(e.key)
        , Xn());
    }
    isEqual(t88) {
        return this.batchId === t88.batchId && ot(this.mutations, t88.mutations, (t, e)=>Rn(t, e)
        ) && ot(this.baseMutations, t88.baseMutations, (t, e)=>Rn(t, e)
        );
    }
}
/** The result of applying a mutation batch to the backend. */ class xi {
    constructor(t, e, n, /**
     * A pre-computed mapping from each mutated document to the resulting
     * version.
     */ s){
        this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
    }
    /**
     * Creates a new MutationBatchResult for the given batch and results. There
     * must be one result for each mutation in the batch. This static factory
     * caches a document=&gt;version mapping (docVersions).
     */ static from(t, e, n) {
        U(t.mutations.length === n.length);
        let s = Jn;
        const i = t.mutations;
        for(let t89 = 0; t89 < i.length; t89++)s = s.insert(i[t89].key, n[t89].version);
        return new xi(t, e, n, s);
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Representation of an overlay computed by Firestore.
 *
 * Holds information about a mutation and the largest batch id in Firestore when
 * the mutation was created.
 */ class Ni {
    constructor(t, e){
        this.largestBatchId = t, this.mutation = e;
    }
    getKey() {
        return this.mutation.key;
    }
    isEqual(t) {
        return null !== t && this.mutation === t.mutation;
    }
    toString() {
        return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable set of metadata that the local store tracks for each target.
 */ class ki {
    constructor(/** The target being listened to. */ t, /**
     * The target ID to which the target corresponds; Assigned by the
     * LocalStore for user listens and by the SyncEngine for limbo watches.
     */ e, /** The purpose of the target. */ n, /**
     * The sequence number of the last transaction during which this target data
     * was modified.
     */ s, /** The latest snapshot version seen for this target. */ i = ct.min(), r = ct.min(), o = pt.EMPTY_BYTE_STRING){
        this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
    }
    /** Creates a new target data instance with an updated sequence number. */ withSequenceNumber(t) {
        return new ki(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }
    /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */ withResumeToken(t, e) {
        return new ki(this.target, this.targetId, this.purpose, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
    }
    /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */ withLastLimboFreeSnapshotVersion(t) {
        return new ki(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Serializer for values stored in the LocalStore. */ class Mi {
    constructor(t){
        this.Jt = t;
    }
}
/** Decodes a remote document from storage locally to a Document. */ function Oi(t90, e49) {
    let n;
    if (e49.document) n = bs(t90.Jt, e49.document, !!e49.hasCommittedMutations);
    else if (e49.noDocument) {
        const t = xt.fromSegments(e49.noDocument.path), s = Li(e49.noDocument.readTime);
        n = ne.newNoDocument(t, s), e49.hasCommittedMutations && n.setHasCommittedMutations();
    } else {
        if (!e49.unknownDocument) return L();
        {
            const t = xt.fromSegments(e49.unknownDocument.path), s = Li(e49.unknownDocument.version);
            n = ne.newUnknownDocument(t, s);
        }
    }
    return e49.readTime && n.setReadTime(function(t) {
        const e = new at(t[0], t[1]);
        return ct.fromTimestamp(e);
    }(e49.readTime)), n;
}
/** Encodes a document for storage locally. */ function Fi(t91, e50) {
    const n = e50.key, s = {
        prefixPath: n.getCollectionPath().popLast().toArray(),
        collectionGroup: n.collectionGroup,
        documentId: n.path.lastSegment(),
        readTime: $i(e50.readTime),
        hasCommittedMutations: e50.hasCommittedMutations
    };
    if (e50.isFoundDocument()) s.document = function(t, e) {
        return {
            name: ps(t, e.key),
            fields: e.data.value.mapValue.fields,
            updateTime: ds(t, e.version.toTimestamp())
        };
    }(t91.Jt, e50);
    else if (e50.isNoDocument()) s.noDocument = {
        path: n.path.toArray(),
        readTime: Bi(e50.version)
    };
    else {
        if (!e50.isUnknownDocument()) return L();
        s.unknownDocument = {
            path: n.path.toArray(),
            version: Bi(e50.version)
        };
    }
    return s;
}
function $i(t) {
    const e = t.toTimestamp();
    return [
        e.seconds,
        e.nanoseconds
    ];
}
function Bi(t) {
    const e = t.toTimestamp();
    return {
        seconds: e.seconds,
        nanoseconds: e.nanoseconds
    };
}
function Li(t) {
    const e = new at(t.seconds, t.nanoseconds);
    return ct.fromTimestamp(e);
}
/** Encodes a batch of mutations into a DbMutationBatch for local storage. */ /** Decodes a DbMutationBatch into a MutationBatch */ function Ui(t, e51) {
    const n = (e51.baseMutations || []).map((e)=>Ds(t.Jt, e)
    );
    // Squash old transform mutations into existing patch or set mutations.
    // The replacement of representing `transforms` with `update_transforms`
    // on the SDK means that old `transform` mutations stored in IndexedDB need
    // to be updated to `update_transforms`.
    // TODO(b/174608374): Remove this code once we perform a schema migration.
    for(let t92 = 0; t92 < e51.mutations.length - 1; ++t92){
        const n = e51.mutations[t92];
        if (t92 + 1 < e51.mutations.length && void 0 !== e51.mutations[t92 + 1].transform) {
            const s = e51.mutations[t92 + 1];
            n.updateTransforms = s.transform.fieldTransforms, e51.mutations.splice(t92 + 1, 1), ++t92;
        }
    }
    const s = e51.mutations.map((e)=>Ds(t.Jt, e)
    ), i = at.fromMillis(e51.localWriteTimeMs);
    return new Ci(e51.batchId, i, n, s);
}
/** Decodes a DbTarget into TargetData */ function qi(t93) {
    const e = Li(t93.readTime), n = void 0 !== t93.lastLimboFreeSnapshotVersion ? Li(t93.lastLimboFreeSnapshotVersion) : ct.min();
    let s;
    var i;
    return void 0 !== t93.query.documents ? (U(1 === (i = t93.query).documents.length), s = Ge(Fe(Es(i.documents[0])))) : s = function(t) {
        return Ge(ks(t));
    }(t93.query), new ki(s, t93.targetId, 0 /* Listen */ , t93.lastListenSequenceNumber, e, n, pt.fromBase64String(t93.resumeToken));
}
/** Encodes TargetData into a DbTarget for storage locally. */ function Ki(t, e) {
    const n = Bi(e.snapshotVersion), s = Bi(e.lastLimboFreeSnapshotVersion);
    let i;
    i = ge(e.target) ? xs(t.Jt, e.target) : Ns(t.Jt, e.target);
    // We can't store the resumeToken as a ByteString in IndexedDb, so we
    // convert it to a base64 string for storage.
    const r = e.resumeToken.toBase64();
    // lastListenSequenceNumber is always 0 until we do real GC.
    return {
        targetId: e.targetId,
        canonicalId: _e(e.target),
        readTime: n,
        resumeToken: r,
        lastListenSequenceNumber: e.sequenceNumber,
        lastLimboFreeSnapshotVersion: s,
        query: i
    };
}
/**
 * A helper function for figuring out what kind of query has been stored.
 */ /**
 * Encodes a `BundledQuery` from bundle proto to a Query object.
 *
 * This reconstructs the original query used to build the bundle being loaded,
 * including features exists only in SDKs (for example: limit-to-last).
 */ function Gi(t) {
    const e = ks({
        parent: t.parent,
        structuredQuery: t.structuredQuery
    });
    return "LAST" === t.limitType ? Qe(e, e.limit, "L" /* Last */ ) : e;
}
/** Encodes a NamedQuery proto object to a NamedQuery model object. */ /** Encodes a DbDocumentOverlay object to an Overlay model object. */ function Qi(t, e) {
    return new Ni(e.largestBatchId, Ds(t.Jt, e.overlayMutation));
}
/** Decodes an Overlay model object into a DbDocumentOverlay object. */ /**
 * Returns the DbDocumentOverlayKey corresponding to the given user and
 * document key.
 */ function ji(t, e) {
    const n = e.path.lastSegment();
    return [
        t,
        Qs(e.path.popLast()),
        n
    ];
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Wi {
    getBundleMetadata(t94, e52) {
        return zi(t94).get(e52).next((t)=>{
            if (t) return {
                id: (e = t).bundleId,
                createTime: Li(e.createTime),
                version: e.version
            };
            /** Encodes a DbBundle to a BundleMetadata object. */ var e;
        /** Encodes a BundleMetadata to a DbBundle. */ });
    }
    saveBundleMetadata(t, e) {
        var n;
        return zi(t).put({
            bundleId: (n = e).id,
            createTime: Bi(ms(n.createTime)),
            version: n.version
        });
    /** Encodes a DbNamedQuery to a NamedQuery. */ }
    getNamedQuery(t95, e53) {
        return Hi(t95).get(e53).next((t)=>{
            if (t) return {
                name: (e = t).name,
                query: Gi(e.bundledQuery),
                readTime: Li(e.readTime)
            };
            var e;
        /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */ });
    }
    saveNamedQuery(t96, e) {
        return Hi(t96).put(function(t) {
            return {
                name: t.name,
                readTime: Bi(ms(t.readTime)),
                bundledQuery: t.bundledQuery
            };
        }(e));
    }
}
/**
 * Helper to get a typed SimpleDbStore for the bundles object store.
 */ function zi(t) {
    return Di(t, "bundles");
}
/**
 * Helper to get a typed SimpleDbStore for the namedQueries object store.
 */ function Hi(t) {
    return Di(t, "namedQueries");
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Implementation of DocumentOverlayCache using IndexedDb.
 */ class Ji {
    /**
     * @param serializer - The document serializer.
     * @param userId - The userId for which we are accessing overlays.
     */ constructor(t, e){
        this.M = t, this.userId = e;
    }
    static Yt(t, e) {
        const n = e.uid || "";
        return new Ji(t, n);
    }
    getOverlay(t97, e) {
        return Yi(t97).get(ji(this.userId, e)).next((t)=>t ? Qi(this.M, t) : null
        );
    }
    saveOverlays(t, e, n) {
        const s = [];
        return n.forEach((n, i)=>{
            const r = new Ni(e, i);
            s.push(this.Xt(t, r));
        }), pi.waitFor(s);
    }
    removeOverlaysForBatchId(t98, e54, n) {
        const s7 = new Set;
        // Get the set of unique collection paths.
        e54.forEach((t)=>s7.add(Qs(t.getCollectionPath()))
        );
        const i = [];
        return s7.forEach((e)=>{
            const s = IDBKeyRange.bound([
                this.userId,
                e,
                n
            ], [
                this.userId,
                e,
                n + 1
            ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
            i.push(Yi(t98).Qt("collectionPathOverlayIndex", s));
        }), pi.waitFor(i);
    }
    getOverlaysForCollection(t99, e55, n) {
        const s = Hn(), i = Qs(e55), r = IDBKeyRange.bound([
            this.userId,
            i,
            n
        ], [
            this.userId,
            i,
            Number.POSITIVE_INFINITY
        ], /*lowerOpen=*/ !0);
        return Yi(t99).qt("collectionPathOverlayIndex", r).next((t)=>{
            for (const e of t){
                const t = Qi(this.M, e);
                s.set(t.getKey(), t);
            }
            return s;
        });
    }
    getOverlaysForCollectionGroup(t, e56, n25, s) {
        const i = Hn();
        let r;
        // We want batch IDs larger than `sinceBatchId`, and so the lower bound
        // is not inclusive.
        const o1 = IDBKeyRange.bound([
            this.userId,
            e56,
            n25
        ], [
            this.userId,
            e56,
            Number.POSITIVE_INFINITY
        ], /*lowerOpen=*/ !0);
        return Yi(t).Wt({
            index: "collectionGroupOverlayIndex",
            range: o1
        }, (t, e, n)=>{
            // We do not want to return partial batch overlays, even if the size
            // of the result set exceeds the given `count` argument. Therefore, we
            // continue to aggregate results even after the result size exceeds
            // `count` if there are more overlays from the `currentBatchId`.
            const o = Qi(this.M, e);
            i.size() < s || o.largestBatchId === r ? (i.set(o.getKey(), o), r = o.largestBatchId) : n.done();
        }).next(()=>i
        );
    }
    Xt(t100, e57) {
        return Yi(t100).put(function(t, e, n) {
            const [s, i, r] = ji(e, n.mutation.key);
            return {
                userId: e,
                collectionPath: i,
                documentId: r,
                collectionGroup: n.mutation.key.getCollectionGroup(),
                largestBatchId: n.largestBatchId,
                overlayMutation: Ss(t.Jt, n.mutation)
            };
        }(this.M, this.userId, e57));
    }
}
/**
 * Helper to get a typed SimpleDbStore for the document overlay object store.
 */ function Yi(t) {
    return Di(t, "documentOverlays");
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Note: This code is copied from the backend. Code that is not used by
// Firestore was removed.
/** Firestore index value writer.  */ class Xi {
    constructor(){}
    // The write methods below short-circuit writing terminators for values
    // containing a (terminating) truncated value.
    // As an example, consider the resulting encoding for:
    // ["bar", [2, "foo"]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TERM, TERM, TERM)
    // ["bar", [2, truncated("foo")]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TRUNC)
    // ["bar", truncated(["foo"])] -> (STRING, "bar", TERM, ARRAY. STRING, "foo", TERM, TRUNC)
    /** Writes an index value.  */ Zt(t, e) {
        this.te(t, e), // Write separator to split index values
        // (see go/firestore-storage-format#encodings).
        e.ee();
    }
    te(t, e) {
        if ("nullValue" in t) this.ne(e, 5);
        else if ("booleanValue" in t) this.ne(e, 10), e.se(t.booleanValue ? 1 : 0);
        else if ("integerValue" in t) this.ne(e, 15), e.se(Et(t.integerValue));
        else if ("doubleValue" in t) {
            const n = Et(t.doubleValue);
            isNaN(n) ? this.ne(e, 13) : (this.ne(e, 15), Dt(n) ? // -0.0, 0 and 0.0 are all considered the same
            e.se(0) : e.se(n));
        } else if ("timestampValue" in t) {
            const n = t.timestampValue;
            this.ne(e, 20), "string" == typeof n ? e.ie(n) : (e.ie(`${n.seconds || ""}`), e.se(n.nanos || 0));
        } else if ("stringValue" in t) this.re(t.stringValue, e), this.oe(e);
        else if ("bytesValue" in t) this.ne(e, 30), e.ue(At(t.bytesValue)), this.oe(e);
        else if ("referenceValue" in t) this.ae(t.referenceValue, e);
        else if ("geoPointValue" in t) {
            const n = t.geoPointValue;
            this.ne(e, 45), e.se(n.latitude || 0), e.se(n.longitude || 0);
        } else "mapValue" in t ? Ht(t) ? this.ne(e, Number.MAX_SAFE_INTEGER) : (this.ce(t.mapValue, e), this.oe(e)) : "arrayValue" in t ? (this.he(t.arrayValue, e), this.oe(e)) : L();
    }
    re(t, e) {
        this.ne(e, 25), this.le(t, e);
    }
    le(t, e) {
        e.ie(t);
    }
    ce(t, e) {
        const n = t.fields || {};
        this.ne(e, 55);
        for (const t101 of Object.keys(n))this.re(t101, e), this.te(n[t101], e);
    }
    he(t, e) {
        const n = t.values || [];
        this.ne(e, 50);
        for (const t102 of n)this.te(t102, e);
    }
    ae(t103, e) {
        this.ne(e, 37);
        xt.fromName(t103).path.forEach((t)=>{
            this.ne(e, 60), this.le(t, e);
        });
    }
    ne(t, e) {
        t.se(e);
    }
    oe(t) {
        // While the SDK does not implement truncation, the truncation marker is
        // used to terminate all variable length values (which are strings, bytes,
        // references, arrays and maps).
        t.se(2);
    }
}
Xi.fe = new Xi;
/**
 * Counts the number of zeros in a byte.
 *
 * Visible for testing.
 */ function Zi(t) {
    if (0 === t) return 8;
    let e = 0;
    return t >> 4 == 0 && // Test if the first four bits are zero.
    (e += 4, t <<= 4), t >> 6 == 0 && // Test if the first two (or next two) bits are zero.
    (e += 2, t <<= 2), t >> 7 == 0 && // Test if the remaining bit is zero.
    (e += 1), e;
}
/** Counts the number of leading zeros in the given byte array. */ /**
 * Returns the number of bytes required to store "value". Leading zero bytes
 * are skipped.
 */ function tr(t104) {
    // This is just the number of bytes for the unsigned representation of the number.
    const e58 = 64 - function(t) {
        let e = 0;
        for(let n = 0; n < 8; ++n){
            const s = Zi(255 & t[n]);
            if (e += s, 8 !== s) break;
        }
        return e;
    }(t104);
    return Math.ceil(e58 / 8);
}
/**
 * OrderedCodeWriter is a minimal-allocation implementation of the writing
 * behavior defined by the backend.
 *
 * The code is ported from its Java counterpart.
 */ class er {
    constructor(){
        this.buffer = new Uint8Array(1024), this.position = 0;
    }
    de(t) {
        const e = t[Symbol.iterator]();
        let n = e.next();
        for(; !n.done;)this._e(n.value), n = e.next();
        this.we();
    }
    me(t) {
        const e = t[Symbol.iterator]();
        let n = e.next();
        for(; !n.done;)this.ge(n.value), n = e.next();
        this.ye();
    }
    /** Writes utf8 bytes into this byte sequence, ascending. */ pe(t) {
        for (const e of t){
            const t = e.charCodeAt(0);
            if (t < 128) this._e(t);
            else if (t < 2048) this._e(960 | t >>> 6), this._e(128 | 63 & t);
            else if (e < "\ud800" || "\udbff" < e) this._e(480 | t >>> 12), this._e(128 | 63 & t >>> 6), this._e(128 | 63 & t);
            else {
                const t = e.codePointAt(0);
                this._e(240 | t >>> 18), this._e(128 | 63 & t >>> 12), this._e(128 | 63 & t >>> 6), this._e(128 | 63 & t);
            }
        }
        this.we();
    }
    /** Writes utf8 bytes into this byte sequence, descending */ Ie(t) {
        for (const e of t){
            const t = e.charCodeAt(0);
            if (t < 128) this.ge(t);
            else if (t < 2048) this.ge(960 | t >>> 6), this.ge(128 | 63 & t);
            else if (e < "\ud800" || "\udbff" < e) this.ge(480 | t >>> 12), this.ge(128 | 63 & t >>> 6), this.ge(128 | 63 & t);
            else {
                const t = e.codePointAt(0);
                this.ge(240 | t >>> 18), this.ge(128 | 63 & t >>> 12), this.ge(128 | 63 & t >>> 6), this.ge(128 | 63 & t);
            }
        }
        this.ye();
    }
    Te(t) {
        // Values are encoded with a single byte length prefix, followed by the
        // actual value in big-endian format with leading 0 bytes dropped.
        const e = this.Ee(t), n = tr(e);
        this.Ae(1 + n), this.buffer[this.position++] = 255 & n;
        // Write the length
        for(let t105 = e.length - n; t105 < e.length; ++t105)this.buffer[this.position++] = 255 & e[t105];
    }
    Re(t) {
        // Values are encoded with a single byte length prefix, followed by the
        // inverted value in big-endian format with leading 0 bytes dropped.
        const e = this.Ee(t), n = tr(e);
        this.Ae(1 + n), this.buffer[this.position++] = ~(255 & n);
        // Write the length
        for(let t106 = e.length - n; t106 < e.length; ++t106)this.buffer[this.position++] = ~(255 & e[t106]);
    }
    /**
     * Writes the "infinity" byte sequence that sorts after all other byte
     * sequences written in ascending order.
     */ Pe() {
        this.be(255), this.be(255);
    }
    /**
     * Writes the "infinity" byte sequence that sorts before all other byte
     * sequences written in descending order.
     */ Ve() {
        this.ve(255), this.ve(255);
    }
    /**
     * Resets the buffer such that it is the same as when it was newly
     * constructed.
     */ reset() {
        this.position = 0;
    }
    seed(t) {
        this.Ae(t.length), this.buffer.set(t, this.position), this.position += t.length;
    }
    /** Makes a copy of the encoded bytes in this buffer.  */ Se() {
        return this.buffer.slice(0, this.position);
    }
    /**
     * Encodes `val` into an encoding so that the order matches the IEEE 754
     * floating-point comparison results with the following exceptions:
     *   -0.0 < 0.0
     *   all non-NaN < NaN
     *   NaN = NaN
     */ Ee(t108) {
        const e59 = /** Converts a JavaScript number to a byte array (using big endian encoding). */ function(t) {
            const e = new DataView(new ArrayBuffer(8));
            return e.setFloat64(0, t, /* littleEndian= */ !1), new Uint8Array(e.buffer);
        }(t108), n = 0 != (128 & e59[0]);
        // Check if the first bit is set. We use a bit mask since value[0] is
        // encoded as a number from 0 to 255.
        // Revert the two complement to get natural ordering
        e59[0] ^= n ? 255 : 128;
        for(let t107 = 1; t107 < e59.length; ++t107)e59[t107] ^= n ? 255 : 0;
        return e59;
    }
    /** Writes a single byte ascending to the buffer. */ _e(t) {
        const e = 255 & t;
        0 === e ? (this.be(0), this.be(255)) : 255 === e ? (this.be(255), this.be(0)) : this.be(e);
    }
    /** Writes a single byte descending to the buffer.  */ ge(t) {
        const e = 255 & t;
        0 === e ? (this.ve(0), this.ve(255)) : 255 === e ? (this.ve(255), this.ve(0)) : this.ve(t);
    }
    we() {
        this.be(0), this.be(1);
    }
    ye() {
        this.ve(0), this.ve(1);
    }
    be(t) {
        this.Ae(1), this.buffer[this.position++] = t;
    }
    ve(t) {
        this.Ae(1), this.buffer[this.position++] = ~t;
    }
    Ae(t) {
        const e = t + this.position;
        if (e <= this.buffer.length) return;
        // Try doubling.
        let n = 2 * this.buffer.length;
        // Still not big enough? Just allocate the right size.
        n < e && (n = e);
        // Create the new buffer.
        const s = new Uint8Array(n);
        s.set(this.buffer), this.buffer = s;
    }
}
class nr {
    constructor(t){
        this.De = t;
    }
    ue(t) {
        this.De.de(t);
    }
    ie(t) {
        this.De.pe(t);
    }
    se(t) {
        this.De.Te(t);
    }
    ee() {
        this.De.Pe();
    }
}
class sr {
    constructor(t){
        this.De = t;
    }
    ue(t) {
        this.De.me(t);
    }
    ie(t) {
        this.De.Ie(t);
    }
    se(t) {
        this.De.Re(t);
    }
    ee() {
        this.De.Ve();
    }
}
/**
 * Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the
 * actual encoding.
 */ class ir {
    constructor(){
        this.De = new er, this.Ce = new nr(this.De), this.xe = new sr(this.De);
    }
    seed(t) {
        this.De.seed(t);
    }
    Ne(t) {
        return 0 /* ASCENDING */  === t ? this.Ce : this.xe;
    }
    Se() {
        return this.De.Se();
    }
    reset() {
        this.De.reset();
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Represents an index entry saved by the SDK in persisted storage. */ class rr {
    constructor(t, e, n, s){
        this.indexId = t, this.documentKey = e, this.arrayValue = n, this.directionalValue = s;
    }
    /**
     * Returns an IndexEntry entry that sorts immediately after the current
     * directional value.
     */ ke() {
        const t = this.directionalValue.length, e = 0 === t || 255 === this.directionalValue[t - 1] ? t + 1 : t, n = new Uint8Array(e);
        return n.set(this.directionalValue, 0), e !== t ? n.set([
            0
        ], this.directionalValue.length) : ++n[n.length - 1], new rr(this.indexId, this.documentKey, this.arrayValue, n);
    }
}
function or(t, e) {
    let n = t.indexId - e.indexId;
    return 0 !== n ? n : (n = ur(t.arrayValue, e.arrayValue), 0 !== n ? n : (n = ur(t.directionalValue, e.directionalValue), 0 !== n ? n : xt.comparator(t.documentKey, e.documentKey)));
}
function ur(t, e) {
    for(let n = 0; n < t.length && n < e.length; ++n){
        const s = t[n] - e[n];
        if (0 !== s) return s;
    }
    return t.length - e.length;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A light query planner for Firestore.
 *
 * This class matches a `FieldIndex` against a Firestore Query `Target`. It
 * determines whether a given index can be used to serve the specified target.
 *
 * The following table showcases some possible index configurations:
 *
 * Query                                               | Index
 * -----------------------------------------------------------------------------
 * where('a', '==', 'a').where('b', '==', 'b')         | a ASC, b DESC
 * where('a', '==', 'a').where('b', '==', 'b')         | a ASC
 * where('a', '==', 'a').where('b', '==', 'b')         | b DESC
 * where('a', '>=', 'a').orderBy('a')                  | a ASC
 * where('a', '>=', 'a').orderBy('a', 'desc')          | a DESC
 * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC, b ASC
 * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC
 * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS, b ASCENDING
 * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS
 */ class ar {
    constructor(t){
        this.collectionId = null != t.collectionGroup ? t.collectionGroup : t.path.lastSegment(), this.Me = t.orderBy, this.Oe = [];
        for (const e of t.filters){
            const t = e;
            t.S() ? this.Fe = t : this.Oe.push(t);
        }
    }
    /**
     * Returns whether the index can be used to serve the TargetIndexMatcher's
     * target.
     *
     * An index is considered capable of serving the target when:
     * - The target uses all index segments for its filters and orderBy clauses.
     *   The target can have additional filter and orderBy clauses, but not
     *   fewer.
     * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also
     *   have a corresponding `CONTAINS` segment.
     * - All directional index segments can be mapped to the target as a series of
     *   equality filters, a single inequality filter and a series of orderBy
     *   clauses.
     * - The segments that represent the equality filters may appear out of order.
     * - The optional segment for the inequality filter must appear after all
     *   equality segments.
     * - The segments that represent that orderBy clause of the target must appear
     *   in order after all equality and inequality segments. Single orderBy
     *   clauses cannot be skipped, but a continuous orderBy suffix may be
     *   omitted.
     */ $e(t) {
        // If there is an array element, find a matching filter.
        const e = ie(t);
        if (void 0 !== e && !this.Be(e)) return !1;
        const n = re(t);
        let s = 0, i = 0;
        // Process all equalities first. Equalities can appear out of order.
        for(; s < n.length && this.Be(n[s]); ++s);
        // If we already have processed all segments, all segments are used to serve
        // the equality filters and we do not need to map any segments to the
        // target's inequality and orderBy clauses.
        if (s === n.length) return !0;
        // If there is an inequality filter, the next segment must match both the
        // filter and the first orderBy clause.
        if (void 0 !== this.Fe) {
            const t = n[s];
            if (!this.Le(this.Fe, t) || !this.Ue(this.Me[i++], t)) return !1;
            ++s;
        }
        // All remaining segments need to represent the prefix of the target's
        // orderBy.
        for(; s < n.length; ++s){
            const t = n[s];
            if (i >= this.Me.length || !this.Ue(this.Me[i++], t)) return !1;
        }
        return !0;
    }
    Be(t) {
        for (const e of this.Oe)if (this.Le(e, t)) return !0;
        return !1;
    }
    Le(t, e) {
        if (void 0 === t || !t.field.isEqual(e.fieldPath)) return !1;
        const n = "array-contains" /* ARRAY_CONTAINS */  === t.op || "array-contains-any" /* ARRAY_CONTAINS_ANY */  === t.op;
        return 2 /* CONTAINS */  === e.kind === n;
    }
    Ue(t, e) {
        return !!t.field.isEqual(e.fieldPath) && (0 /* ASCENDING */  === e.kind && "asc" /* ASCENDING */  === t.dir || 1 /* DESCENDING */  === e.kind && "desc" /* DESCENDING */  === t.dir);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory implementation of IndexManager.
 */ class cr {
    constructor(){
        this.qe = new hr;
    }
    addToCollectionParentIndex(t, e) {
        return this.qe.add(e), pi.resolve();
    }
    getCollectionParents(t, e) {
        return pi.resolve(this.qe.getEntries(e));
    }
    addFieldIndex(t, e) {
        // Field indices are not supported with memory persistence.
        return pi.resolve();
    }
    deleteFieldIndex(t, e) {
        // Field indices are not supported with memory persistence.
        return pi.resolve();
    }
    getDocumentsMatchingTarget(t, e) {
        // Field indices are not supported with memory persistence.
        return pi.resolve(null);
    }
    getFieldIndex(t, e) {
        // Field indices are not supported with memory persistence.
        return pi.resolve(null);
    }
    getFieldIndexes(t, e) {
        // Field indices are not supported with memory persistence.
        return pi.resolve([]);
    }
    getNextCollectionGroupToUpdate(t) {
        // Field indices are not supported with memory persistence.
        return pi.resolve(null);
    }
    updateCollectionGroup(t, e, n) {
        // Field indices are not supported with memory persistence.
        return pi.resolve();
    }
    updateIndexEntries(t, e) {
        // Field indices are not supported with memory persistence.
        return pi.resolve();
    }
}
/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */ class hr {
    constructor(){
        this.index = {};
    }
    // Returns false if the entry already existed.
    add(t) {
        const e = t.lastSegment(), n = t.popLast(), s = this.index[e] || new qn(_t.comparator), i = !s.has(n);
        return this.index[e] = s.add(n), i;
    }
    has(t) {
        const e = t.lastSegment(), n = t.popLast(), s = this.index[e];
        return s && s.has(n);
    }
    getEntries(t) {
        return (this.index[t] || new qn(_t.comparator)).toArray();
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const lr = new Uint8Array(0);
/**
 * A persisted implementation of IndexManager.
 *
 * PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index
 * data as it supports multi-tab access.
 */ class fr {
    constructor(t109, e60){
        this.user = t109, this.databaseId = e60, /**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be
         * used to satisfy reads.
         */ this.Ke = new hr, /**
         * Maps from a target to its equivalent list of sub-targets. Each sub-target
         * contains only one term from the target's disjunctive normal form (DNF).
         */ this.Ge = new $n((t)=>_e(t)
        , (t, e)=>me(t, e)
        ), this.uid = t109.uid || "";
    }
    /**
     * Adds a new entry to the collection parent index.
     *
     * Repeated calls for the same collectionPath should be avoided within a
     * transaction as IndexedDbIndexManager only caches writes once a transaction
     * has been committed.
     */ addToCollectionParentIndex(t, e) {
        if (!this.Ke.has(e)) {
            const n = e.lastSegment(), s = e.popLast();
            t.addOnCommittedListener(()=>{
                // Add the collection to the in memory cache only if the transaction was
                // successfully committed.
                this.Ke.add(e);
            });
            const i = {
                collectionId: n,
                parent: Qs(s)
            };
            return dr(t).put(i);
        }
        return pi.resolve();
    }
    getCollectionParents(t110, e) {
        const n = [], s8 = IDBKeyRange.bound([
            e,
            ""
        ], [
            ut(e),
            ""
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
        return dr(t110).qt(s8).next((t)=>{
            for (const s of t){
                // This collectionId guard shouldn't be necessary (and isn't as long
                // as we're running in a real browser), but there's a bug in
                // indexeddbshim that breaks our range in our tests running in node:
                // https://github.com/axemclion/IndexedDBShim/issues/334
                if (s.collectionId !== e) break;
                n.push(zs(s.parent));
            }
            return n;
        });
    }
    addFieldIndex(t111, e) {
        // TODO(indexing): Verify that the auto-incrementing index ID works in
        // Safari & Firefox.
        const n = wr(t111), s = function(t112) {
            return {
                indexId: t112.indexId,
                collectionGroup: t112.collectionGroup,
                fields: t112.fields.map((t)=>[
                        t.fieldPath.canonicalString(),
                        t.kind
                    ]
                )
            };
        }(e);
        // `indexId` is auto-populated by IndexedDb
        return delete s.indexId, n.add(s).next();
    }
    deleteFieldIndex(t, e) {
        const n = wr(t), s = mr(t), i = _r(t);
        return n.delete(e.indexId).next(()=>s.delete(IDBKeyRange.bound([
                e.indexId
            ], [
                e.indexId + 1
            ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0))
        ).next(()=>i.delete(IDBKeyRange.bound([
                e.indexId
            ], [
                e.indexId + 1
            ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0))
        );
    }
    getDocumentsMatchingTarget(t113, e61) {
        const n26 = _r(t113);
        let s9 = !0;
        const i3 = new Map;
        return pi.forEach(this.Qe(e61), (e)=>this.getFieldIndex(t113, e).next((t)=>{
                s9 && (s9 = !!t), i3.set(e, t);
            })
        ).next(()=>{
            if (s9) {
                let t114 = Xn();
                const s10 = [];
                return pi.forEach(i3, (i4, r)=>{
                    /** Returns a debug representation of the field index */ var o;
                    O("IndexedDbIndexManager", `Using index ${(o = i4, `id=${o.indexId}|cg=${o.collectionGroup}|f=${o.fields.map((t)=>`${t.fieldPath}:${t.kind}`
                    ).join(",")}`)} to execute ${_e(e61)}`);
                    const u = function(t, e) {
                        const n = ie(e);
                        if (void 0 === n) return null;
                        for (const e62 of ye(t, n.fieldPath))switch(e62.op){
                            case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                                return e62.value.arrayValue.values || [];
                            case "array-contains" /* ARRAY_CONTAINS */ :
                                return [
                                    e62.value
                                ];
                        }
                        return null;
                    }(r, i4), a = function(t, e) {
                        const n = new Map;
                        for (const s of re(e))for (const e63 of ye(t, s.fieldPath))switch(e63.op){
                            case "==" /* EQUAL */ :
                            case "in" /* IN */ :
                                // Encode equality prefix, which is encoded in the index value before
                                // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to
                                // `value != 'ab'`).
                                n.set(s.fieldPath.canonicalString(), e63.value);
                                break;
                            case "not-in" /* NOT_IN */ :
                            case "!=" /* NOT_EQUAL */ :
                                // NotIn/NotEqual is always a suffix. There cannot be any remaining
                                // segments and hence we can return early here.
                                return n.set(s.fieldPath.canonicalString(), e63.value), Array.from(n.values());
                        }
                        return null;
                    }(r, i4), c = function(t, e) {
                        const n = [];
                        let s = !0;
                        // For each segment, retrieve a lower bound if there is a suitable filter or
                        // startAt.
                        for (const i of re(e)){
                            const e = 0 /* ASCENDING */  === i.kind ? pe(t, i.fieldPath, t.startAt) : Ie(t, i.fieldPath, t.startAt);
                            if (!e.value) // No lower bound exists
                            return null;
                            n.push(e.value), s && (s = e.inclusive);
                        }
                        return new De(n, s);
                    }(r, i4), h = function(t, e) {
                        const n = [];
                        let s = !0;
                        // For each segment, retrieve an upper bound if there is a suitable filter or
                        // endAt.
                        for (const i of re(e)){
                            const e = 0 /* ASCENDING */  === i.kind ? Ie(t, i.fieldPath, t.endAt) : pe(t, i.fieldPath, t.endAt);
                            if (!e.value) // No upper bound exists
                            return null;
                            n.push(e.value), s && (s = e.inclusive);
                        }
                        return new De(n, s);
                    }(r, i4), l = this.je(i4, r, c), f = this.je(i4, r, h), d = this.We(i4, r, a), _ = this.ze(i4.indexId, u, l, !!c && c.inclusive, f, !!h && h.inclusive, d);
                    return pi.forEach(_, (i)=>n26.Gt(i, e61.limit).next((e64)=>{
                            e64.forEach((e)=>{
                                const n = xt.fromSegments(e.documentKey);
                                t114.has(n) || (t114 = t114.add(n), s10.push(n));
                            });
                        })
                    );
                }).next(()=>s10
                );
            }
            return pi.resolve(null);
        });
    }
    Qe(t) {
        let e = this.Ge.get(t);
        return e || // TODO(orquery): Implement DNF transform
        (e = [
            t
        ], this.Ge.set(t, e), e);
    }
    /**
     * Constructs a key range query on `DbIndexEntryStore` that unions all
     * bounds.
     */ ze(t, e65, n, s, i, r, o) {
        // The number of total index scans we union together. This is similar to a
        // distributed normal form, but adapted for array values. We create a single
        // index range per value in an ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filter
        // combined with the values from the query bounds.
        const u = (null != e65 ? e65.length : 1) * Math.max(null != n ? n.length : 1, null != i ? i.length : 1), a = u / (null != e65 ? e65.length : 1), c = [];
        for(let h = 0; h < u; ++h){
            const u = e65 ? this.He(e65[h / a]) : lr, l = n ? this.Je(t, u, n[h % a], s) : this.Ye(t), f = i ? this.Xe(t, u, i[h % a], r) : this.Ye(t + 1);
            c.push(...this.createRange(l, f, o.map((e)=>this.Je(t, u, e, /* inclusive= */ !0)
            )));
        }
        return c;
    }
    /** Generates the lower bound for `arrayValue` and `directionalValue`. */ Je(t, e, n, s) {
        const i = new rr(t, xt.empty(), e, n);
        return s ? i : i.ke();
    }
    /** Generates the upper bound for `arrayValue` and `directionalValue`. */ Xe(t, e, n, s) {
        const i = new rr(t, xt.empty(), e, n);
        return s ? i.ke() : i;
    }
    /**
     * Generates an empty bound that scopes the index scan to the current index
     * and user.
     */ Ye(t) {
        return new rr(t, xt.empty(), lr, lr);
    }
    getFieldIndex(t116, e66) {
        const n = new ar(e66), s = null != e66.collectionGroup ? e66.collectionGroup : e66.path.lastSegment();
        return this.getFieldIndexes(t116, s).next((t117)=>{
            const e67 = t117.filter((t)=>n.$e(t)
            );
            // Return the index that matches the most number of segments.
            return e67.sort((t, e)=>e.fields.length - t.fields.length
            ), e67.length > 0 ? e67[0] : null;
        });
    }
    /**
     * Returns the byte encoded form of the directional values in the field index.
     * Returns `null` if the document does not have all fields specified in the
     * index.
     */ Ze(t, e) {
        const n = new ir;
        for (const s of re(t)){
            const t = e.data.field(s.fieldPath);
            if (null == t) return null;
            const i = n.Ne(s.kind);
            Xi.fe.Zt(t, i);
        }
        return n.Se();
    }
    /** Encodes a single value to the ascending index format. */ He(t) {
        const e = new ir;
        return Xi.fe.Zt(t, e.Ne(0 /* ASCENDING */ )), e.Se();
    }
    /**
     * Returns an encoded form of the document key that sorts based on the key
     * ordering of the field index.
     */ tn(t118, e68) {
        const n = new ir;
        return Xi.fe.Zt(qt(this.databaseId, e68), n.Ne(function(t) {
            const e = re(t);
            return 0 === e.length ? 0 /* ASCENDING */  : e[e.length - 1].kind;
        }(t118))), n.Se();
    }
    /**
     * Encodes the given field values according to the specification in `target`.
     * For IN queries, a list of possible values is returned.
     */ We(t, e, n) {
        if (null === n) return [];
        let s = [];
        s.push(new ir);
        let i = 0;
        for (const r of re(t)){
            const t = n[i++];
            for (const n27 of s)if (this.en(e, r.fieldPath) && Gt(t)) s = this.nn(s, r, t);
            else {
                const e = n27.Ne(r.kind);
                Xi.fe.Zt(t, e);
            }
        }
        return this.sn(s);
    }
    /**
     * Encodes the given bounds according to the specification in `target`. For IN
     * queries, a list of possible values is returned.
     */ je(t, e, n) {
        return null == n ? null : this.We(t, e, n.position);
    }
    /** Returns the byte representation for the provided encoders. */ sn(t) {
        const e = [];
        for(let n = 0; n < t.length; ++n)e[n] = t[n].Se();
        return e;
    }
    /**
     * Creates a separate encoder for each element of an array.
     *
     * The method appends each value to all existing encoders (e.g. filter("a",
     * "==", "a1").filter("b", "in", ["b1", "b2"]) becomes ["a1,b1", "a1,b2"]). A
     * list of new encoders is returned.
     */ nn(t, e, n) {
        const s = [
            ...t
        ], i = [];
        for (const t119 of n.arrayValue.values || [])for (const n28 of s){
            const s = new ir;
            s.seed(n28.Se()), Xi.fe.Zt(t119, s.Ne(e.kind)), i.push(s);
        }
        return i;
    }
    en(t120, e) {
        return !!t120.filters.find((t)=>t instanceof Te && t.field.isEqual(e) && ("in" /* IN */  === t.op || "not-in" /* NOT_IN */  === t.op)
        );
    }
    getFieldIndexes(t121, e69) {
        const n29 = wr(t121), s12 = mr(t121);
        return (e69 ? n29.qt("collectionGroupIndex", IDBKeyRange.bound(e69, e69)) : n29.qt()).next((t122)=>{
            const e70 = [];
            return pi.forEach(t122, (t123)=>s12.get([
                    t123.indexId,
                    this.uid
                ]).next((n30)=>{
                    e70.push(function(t124, e71) {
                        const n = e71 ? new ue(e71.sequenceNumber, new he(Li(e71.readTime), new xt(zs(e71.documentKey)), e71.largestBatchId)) : ue.empty(), s = t124.fields.map(([t, e])=>new oe(mt.fromServerFormat(t), e)
                        );
                        return new se(t124.indexId, t124.collectionGroup, s, n);
                    }(t123, n30));
                })
            ).next(()=>e70
            );
        });
    }
    getNextCollectionGroupToUpdate(t125) {
        return this.getFieldIndexes(t125).next((t126)=>0 === t126.length ? null : (t126.sort((t, e)=>{
                const n = t.indexState.sequenceNumber - e.indexState.sequenceNumber;
                return 0 !== n ? n : rt(t.collectionGroup, e.collectionGroup);
            }), t126[0].collectionGroup)
        );
    }
    updateCollectionGroup(t127, e72, n31) {
        const s13 = wr(t127), i = mr(t127);
        return this.rn(t127).next((t128)=>s13.qt("collectionGroupIndex", IDBKeyRange.bound(e72, e72)).next((e73)=>pi.forEach(e73, (e74)=>i.put(function(t, e, n, s) {
                        return {
                            indexId: t,
                            uid: e.uid || "",
                            sequenceNumber: n,
                            readTime: Bi(s.readTime),
                            documentKey: Qs(s.documentKey.path),
                            largestBatchId: s.largestBatchId
                        };
                    }(e74.indexId, this.user, t128, n31))
                )
            )
        );
    }
    updateIndexEntries(t, e75) {
        // Porting Note: `getFieldIndexes()` on Web does not cache index lookups as
        // it could be used across different IndexedDB transactions. As any cached
        // data might be invalidated by other multi-tab clients, we can only trust
        // data within a single IndexedDB transaction. We therefore add a cache
        // here.
        const n32 = new Map;
        return pi.forEach(e75, (e76, s)=>{
            const i5 = n32.get(e76.collectionGroup);
            return (i5 ? pi.resolve(i5) : this.getFieldIndexes(t, e76.collectionGroup)).next((i6)=>(n32.set(e76.collectionGroup, i6), pi.forEach(i6, (n)=>this.on(t, e76, n).next((e)=>{
                        const i = this.un(s, n);
                        return e.isEqual(i) ? pi.resolve() : this.an(t, s, n, e, i);
                    })
                ))
            );
        });
    }
    cn(t, e, n, s) {
        return _r(t).put({
            indexId: s.indexId,
            uid: this.uid,
            arrayValue: s.arrayValue,
            directionalValue: s.directionalValue,
            orderedDocumentKey: this.tn(n, e.key),
            documentKey: e.key.path.toArray()
        });
    }
    hn(t, e, n, s) {
        return _r(t).delete([
            s.indexId,
            this.uid,
            s.arrayValue,
            s.directionalValue,
            this.tn(n, e.key),
            e.key.path.toArray()
        ]);
    }
    on(t, e, n) {
        const s14 = _r(t);
        let i = new qn(or);
        return s14.Wt({
            index: "documentKeyIndex",
            range: IDBKeyRange.only([
                n.indexId,
                this.uid,
                this.tn(n, e)
            ])
        }, (t, s)=>{
            i = i.add(new rr(n.indexId, e, s.arrayValue, s.directionalValue));
        }).next(()=>i
        );
    }
    /** Creates the index entries for the given document. */ un(t, e) {
        let n = new qn(or);
        const s = this.Ze(e, t);
        if (null == s) return n;
        const i = ie(e);
        if (null != i) {
            const r = t.data.field(i.fieldPath);
            if (Gt(r)) for (const i7 of r.arrayValue.values || [])n = n.add(new rr(e.indexId, t.key, this.He(i7), s));
        } else n = n.add(new rr(e.indexId, t.key, lr, s));
        return n;
    }
    /**
     * Updates the index entries for the provided document by deleting entries
     * that are no longer referenced in `newEntries` and adding all newly added
     * entries.
     */ an(t129, e77, n33, s15, i8) {
        O("IndexedDbIndexManager", "Updating index entries for document '%s'", e77.key);
        const r1 = [];
        return function(t, e, n, s, i) {
            const r = t.getIterator(), o = e.getIterator();
            let u = Gn(r), a = Gn(o);
            // Walk through the two sets at the same time, using the ordering defined by
            // `comparator`.
            for(; u || a;){
                let t = !1, e = !1;
                if (u && a) {
                    const s = n(u, a);
                    s < 0 ? // The element was removed if the next element in our ordered
                    // walkthrough is only in `before`.
                    e = !0 : s > 0 && // The element was added if the next element in our ordered walkthrough
                    // is only in `after`.
                    (t = !0);
                } else null != u ? e = !0 : t = !0;
                t ? (s(a), a = Gn(o)) : e ? (i(u), u = Gn(r)) : (u = Gn(r), a = Gn(o));
            }
        }(s15, i8, or, /* onAdd= */ (s)=>{
            r1.push(this.cn(t129, e77, n33, s));
        }, /* onRemove= */ (s)=>{
            r1.push(this.hn(t129, e77, n33, s));
        }), pi.waitFor(r1);
    }
    rn(t) {
        let e = 1;
        return mr(t).Wt({
            index: "sequenceNumberIndex",
            reverse: !0,
            range: IDBKeyRange.upperBound([
                this.uid,
                Number.MAX_SAFE_INTEGER
            ])
        }, (t, n, s)=>{
            s.done(), e = n.sequenceNumber + 1;
        }).next(()=>e
        );
    }
    /**
     * Returns a new set of IDB ranges that splits the existing range and excludes
     * any values that match the `notInValue` from these ranges. As an example,
     * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.
     */ createRange(t131, e78, n34) {
        // The notIb values need to be sorted and unique so that we can return a
        // sorted set of non-overlapping ranges.
        n34 = n34.sort((t, e)=>or(t, e)
        ).filter((t, e, n)=>!e || 0 !== or(t, n[e - 1])
        );
        const s = [];
        s.push(t131);
        for (const i of n34){
            const n = or(i, t131), r = or(i, e78);
            if (0 === n) // `notInValue` is the lower bound. We therefore need to raise the bound
            // to the next value.
            s[0] = t131.ke();
            else if (n > 0 && r < 0) // `notInValue` is in the middle of the range
            s.push(i), s.push(i.ke());
            else if (r > 0) break;
        }
        s.push(e78);
        const i9 = [];
        for(let t130 = 0; t130 < s.length; t130 += 2)i9.push(IDBKeyRange.bound([
            s[t130].indexId,
            this.uid,
            s[t130].arrayValue,
            s[t130].directionalValue,
            lr,
            []
        ], [
            s[t130 + 1].indexId,
            this.uid,
            s[t130 + 1].arrayValue,
            s[t130 + 1].directionalValue,
            lr,
            []
        ]));
        return i9;
    }
}
/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */ function dr(t) {
    return Di(t, "collectionParents");
}
/**
 * Helper to get a typed SimpleDbStore for the index entry object store.
 */ function _r(t) {
    return Di(t, "indexEntries");
}
/**
 * Helper to get a typed SimpleDbStore for the index configuration object store.
 */ function wr(t) {
    return Di(t, "indexConfiguration");
}
/**
 * Helper to get a typed SimpleDbStore for the index state object store.
 */ function mr(t) {
    return Di(t, "indexState");
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const gr = {
    didRun: !1,
    sequenceNumbersCollected: 0,
    targetsRemoved: 0,
    documentsRemoved: 0
};
class yr {
    constructor(// When we attempt to collect, we will only do so if the cache size is greater than this
    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
    t, // The percentage of sequence numbers that we will attempt to collect
    e, // A cap on the total number of sequence numbers that will be collected. This prevents
    // us from collecting a huge number of sequence numbers if the cache has grown very large.
    n){
        this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
    }
    static withCacheSize(t) {
        return new yr(t, yr.DEFAULT_COLLECTION_PERCENTILE, yr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Delete a mutation batch and the associated document mutations.
 * @returns A PersistencePromise of the document mutations that were removed.
 */ function pr(t, e, n35) {
    const s = t.store("mutations"), i = t.store("documentMutations"), r = [], o = IDBKeyRange.only(n35.batchId);
    let u = 0;
    const a = s.Wt({
        range: o
    }, (t, e, n)=>(u++, n.delete())
    );
    r.push(a.next(()=>{
        U(1 === u);
    }));
    const c = [];
    for (const t132 of n35.mutations){
        const s = Ys(e, t132.key.path, n35.batchId);
        r.push(i.delete(s)), c.push(t132.key);
    }
    return pi.waitFor(r).next(()=>c
    );
}
/**
 * Returns an approximate size for the given document.
 */ function Ir(t) {
    if (!t) return 0;
    let e;
    if (t.document) e = t.document;
    else if (t.unknownDocument) e = t.unknownDocument;
    else {
        if (!t.noDocument) throw L();
        e = t.noDocument;
    }
    return JSON.stringify(e).length;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A mutation queue for a specific user, backed by IndexedDB. */ yr.DEFAULT_COLLECTION_PERCENTILE = 10, yr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, yr.DEFAULT = new yr(41943040, yr.DEFAULT_COLLECTION_PERCENTILE, yr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), yr.DISABLED = new yr(-1, 0, 0);
class Tr {
    constructor(/**
     * The normalized userId (e.g. null UID => "" userId) used to store /
     * retrieve mutations.
     */ t, e, n, s){
        this.userId = t, this.M = e, this.indexManager = n, this.referenceDelegate = s, /**
         * Caches the document keys for pending mutation batches. If the mutation
         * has been removed from IndexedDb, the cached value may continue to
         * be used to retrieve the batch's document keys. To remove a cached value
         * locally, `removeCachedMutationKeys()` should be invoked either directly
         * or through `removeMutationBatches()`.
         *
         * With multi-tab, when the primary client acknowledges or rejects a mutation,
         * this cache is used by secondary clients to invalidate the local
         * view of the documents that were previously affected by the mutation.
         */ // PORTING NOTE: Multi-tab only.
        this.ln = {};
    }
    /**
     * Creates a new mutation queue for the given user.
     * @param user - The user for which to create a mutation queue.
     * @param serializer - The serializer to use when persisting to IndexedDb.
     */ static Yt(t, e, n, s) {
        // TODO(mcg): Figure out what constraints there are on userIDs
        // In particular, are there any reserved characters? are empty ids allowed?
        // For the moment store these together in the same mutations table assuming
        // that empty userIDs aren't allowed.
        U("" !== t.uid);
        const i = t.isAuthenticated() ? t.uid : "";
        return new Tr(i, e, n, s);
    }
    checkEmpty(t) {
        let e = !0;
        const n = IDBKeyRange.bound([
            this.userId,
            Number.NEGATIVE_INFINITY
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return Ar(t).Wt({
            index: "userMutationsIndex",
            range: n
        }, (t, n, s)=>{
            e = !1, s.done();
        }).next(()=>e
        );
    }
    addMutationBatch(t133, e79, n36, s16) {
        const i10 = Rr(t133), r = Ar(t133);
        // The IndexedDb implementation in Chrome (and Firefox) does not handle
        // compound indices that include auto-generated keys correctly. To ensure
        // that the index entry is added correctly in all browsers, we perform two
        // writes: The first write is used to retrieve the next auto-generated Batch
        // ID, and the second write populates the index and stores the actual
        // mutation batch.
        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
        // We write an empty object to obtain key
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return r.add({}).next((o)=>{
            U("number" == typeof o);
            const u = new Ci(o, e79, n36, s16), a = function(t, e80, n) {
                const s = n.baseMutations.map((e)=>Ss(t.Jt, e)
                ), i = n.mutations.map((e)=>Ss(t.Jt, e)
                );
                return {
                    userId: e80,
                    batchId: n.batchId,
                    localWriteTimeMs: n.localWriteTime.toMillis(),
                    baseMutations: s,
                    mutations: i
                };
            }(this.M, this.userId, u), c = [];
            let h = new qn((t, e)=>rt(t.canonicalString(), e.canonicalString())
            );
            for (const t134 of s16){
                const e = Ys(this.userId, t134.key.path, o);
                h = h.add(t134.key.path.popLast()), c.push(r.put(a)), c.push(i10.put(e, Xs));
            }
            return h.forEach((e)=>{
                c.push(this.indexManager.addToCollectionParentIndex(t133, e));
            }), t133.addOnCommittedListener(()=>{
                this.ln[o] = u.keys();
            }), pi.waitFor(c).next(()=>u
            );
        });
    }
    lookupMutationBatch(t135, e) {
        return Ar(t135).get(e).next((t)=>t ? (U(t.userId === this.userId), Ui(this.M, t)) : null
        );
    }
    /**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */ // PORTING NOTE: Multi-tab only.
    fn(t136, e) {
        return this.ln[e] ? pi.resolve(this.ln[e]) : this.lookupMutationBatch(t136, e).next((t)=>{
            if (t) {
                const n = t.keys();
                return this.ln[e] = n, n;
            }
            return null;
        });
    }
    getNextMutationBatchAfterBatchId(t, e81) {
        const n = e81 + 1, s17 = IDBKeyRange.lowerBound([
            this.userId,
            n
        ]);
        let i = null;
        return Ar(t).Wt({
            index: "userMutationsIndex",
            range: s17
        }, (t, e, s)=>{
            e.userId === this.userId && (U(e.batchId >= n), i = Ui(this.M, e)), s.done();
        }).next(()=>i
        );
    }
    getHighestUnacknowledgedBatchId(t) {
        const e82 = IDBKeyRange.upperBound([
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        let n = -1;
        return Ar(t).Wt({
            index: "userMutationsIndex",
            range: e82,
            reverse: !0
        }, (t, e, s)=>{
            n = e.batchId, s.done();
        }).next(()=>n
        );
    }
    getAllMutationBatches(t137) {
        const e = IDBKeyRange.bound([
            this.userId,
            -1
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return Ar(t137).qt("userMutationsIndex", e).next((t138)=>t138.map((t)=>Ui(this.M, t)
            )
        );
    }
    getAllMutationBatchesAffectingDocumentKey(t139, e) {
        // Scan the document-mutation index starting with a prefix starting with
        // the given documentKey.
        const n37 = Js(this.userId, e.path), s = IDBKeyRange.lowerBound(n37), i = [];
        return Rr(t139).Wt({
            range: s
        }, (n, s, r)=>{
            const [o, u, a] = n, c = zs(u);
            // Only consider rows matching exactly the specific key of
            // interest. Note that because we order by path first, and we
            // order terminators before path separators, we'll encounter all
            // the index rows for documentKey contiguously. In particular, all
            // the rows for documentKey will occur before any rows for
            // documents nested in a subcollection beneath documentKey so we
            // can stop as soon as we hit any such row.
            if (o === this.userId && e.path.isEqual(c)) // Look up the mutation batch in the store.
            return Ar(t139).get(a).next((t)=>{
                if (!t) throw L();
                U(t.userId === this.userId), i.push(Ui(this.M, t));
            });
            r.done();
        }).next(()=>i
        );
    }
    getAllMutationBatchesAffectingDocumentKeys(t140, e83) {
        let n = new qn(rt);
        const s = [];
        return e83.forEach((e)=>{
            const i11 = Js(this.userId, e.path), r2 = IDBKeyRange.lowerBound(i11), o2 = Rr(t140).Wt({
                range: r2
            }, (t, s, i)=>{
                const [r, o, u] = t, a = zs(o);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                r === this.userId && e.path.isEqual(a) ? n = n.add(u) : i.done();
            });
            s.push(o2);
        }), pi.waitFor(s).next(()=>this.dn(t140, n)
        );
    }
    getAllMutationBatchesAffectingQuery(t141, e) {
        const n = e.path, s = n.length + 1, i12 = Js(this.userId, n), r3 = IDBKeyRange.lowerBound(i12);
        // Collect up unique batchIDs encountered during a scan of the index. Use a
        // SortedSet to accumulate batch IDs so they can be traversed in order in a
        // scan of the main table.
        let o = new qn(rt);
        return Rr(t141).Wt({
            range: r3
        }, (t, e, i)=>{
            const [r, u, a] = t, c = zs(u);
            r === this.userId && n.isPrefixOf(c) ? // Rows with document keys more than one segment longer than the
            // query path can't be matches. For example, a query on 'rooms'
            // can't match the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            c.length === s && (o = o.add(a)) : i.done();
        }).next(()=>this.dn(t141, o)
        );
    }
    dn(t142, e84) {
        const n = [], s = [];
        // TODO(rockwood): Implement this using iterate.
        return e84.forEach((e)=>{
            s.push(Ar(t142).get(e).next((t)=>{
                if (null === t) throw L();
                U(t.userId === this.userId), n.push(Ui(this.M, t));
            }));
        }), pi.waitFor(s).next(()=>n
        );
    }
    removeMutationBatch(t, e85) {
        return pr(t.Ht, this.userId, e85).next((n)=>(t.addOnCommittedListener(()=>{
                this._n(e85.batchId);
            }), pi.forEach(n, (e)=>this.referenceDelegate.markPotentiallyOrphaned(t, e)
            ))
        );
    }
    /**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */ // PORTING NOTE: Multi-tab only
    _n(t) {
        delete this.ln[t];
    }
    performConsistencyCheck(t143) {
        return this.checkEmpty(t143).next((e86)=>{
            if (!e86) return pi.resolve();
            // Verify that there are no entries in the documentMutations index if
            // the queue is empty.
            const n38 = IDBKeyRange.lowerBound([
                this.userId
            ]);
            const s = [];
            return Rr(t143).Wt({
                range: n38
            }, (t, e, n)=>{
                if (t[0] === this.userId) {
                    const e = zs(t[1]);
                    s.push(e);
                } else n.done();
            }).next(()=>{
                U(0 === s.length);
            });
        });
    }
    containsKey(t, e) {
        return Er(t, this.userId, e);
    }
    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
    /** Returns the mutation queue's metadata from IndexedDb. */ wn(t144) {
        return Pr(t144).get(this.userId).next((t)=>t || {
                userId: this.userId,
                lastAcknowledgedBatchId: -1,
                lastStreamToken: ""
            }
        );
    }
}
/**
 * @returns true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */ function Er(t145, e, n) {
    const s18 = Js(e, n.path), i = s18[1], r4 = IDBKeyRange.lowerBound(s18);
    let o = !1;
    return Rr(t145).Wt({
        range: r4,
        jt: !0
    }, (t, n, s)=>{
        const [r, u, /*batchID*/ a] = t;
        r === e && u === i && (o = !0), s.done();
    }).next(()=>o
    );
}
/** Returns true if any mutation queue contains the given document. */ /**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */ function Ar(t) {
    return Di(t, "mutations");
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function Rr(t) {
    return Di(t, "documentMutations");
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function Pr(t) {
    return Di(t, "mutationQueues");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Offset to ensure non-overlapping target ids. */ /**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the target cache, and one for
 * for the sync engine (to generate limbo documents targets). These
 * generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */ class br {
    constructor(t){
        this.mn = t;
    }
    next() {
        return this.mn += 2, this.mn;
    }
    static gn() {
        // The target cache generator must return '2' in its first call to `next()`
        // as there is no differentiation in the protocol layer between an unset
        // number and the number '0'. If we were to sent a target with target ID
        // '0', the backend would consider it unset and replace it with its own ID.
        return new br(0);
    }
    static yn() {
        // Sync engine assigns target IDs for limbo document detection.
        return new br(-1);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Vr {
    constructor(t, e){
        this.referenceDelegate = t, this.M = e;
    }
    // PORTING NOTE: We don't cache global metadata for the target cache, since
    // some of it (in particular `highestTargetId`) can be modified by secondary
    // tabs. We could perhaps be more granular (and e.g. still cache
    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
    // to IndexedDb whenever we need to read metadata. We can revisit if it turns
    // out to have a meaningful performance impact.
    allocateTargetId(t) {
        return this.pn(t).next((e)=>{
            const n = new br(e.highestTargetId);
            return e.highestTargetId = n.next(), this.In(t, e).next(()=>e.highestTargetId
            );
        });
    }
    getLastRemoteSnapshotVersion(t146) {
        return this.pn(t146).next((t)=>ct.fromTimestamp(new at(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds))
        );
    }
    getHighestSequenceNumber(t147) {
        return this.pn(t147).next((t)=>t.highestListenSequenceNumber
        );
    }
    setTargetsMetadata(t, e, n) {
        return this.pn(t).next((s)=>(s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.toTimestamp()), e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), this.In(t, s))
        );
    }
    addTargetData(t, e) {
        return this.Tn(t, e).next(()=>this.pn(t).next((n)=>(n.targetCount += 1, this.En(e, n), this.In(t, n))
            )
        );
    }
    updateTargetData(t, e) {
        return this.Tn(t, e);
    }
    removeTargetData(t, e87) {
        return this.removeMatchingKeysForTargetId(t, e87.targetId).next(()=>vr(t).delete(e87.targetId)
        ).next(()=>this.pn(t)
        ).next((e)=>(U(e.targetCount > 0), e.targetCount -= 1, this.In(t, e))
        );
    }
    /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */ removeTargets(t, e, n) {
        let s = 0;
        const i = [];
        return vr(t).Wt((r, o)=>{
            const u = qi(o);
            u.sequenceNumber <= e && null === n.get(u.targetId) && (s++, i.push(this.removeTargetData(t, u)));
        }).next(()=>pi.waitFor(i)
        ).next(()=>s
        );
    }
    /**
     * Call provided function with each `TargetData` that we have cached.
     */ forEachTarget(t, e) {
        return vr(t).Wt((t, n)=>{
            const s = qi(n);
            e(s);
        });
    }
    pn(t148) {
        return Sr(t148).get("targetGlobalKey").next((t)=>(U(null !== t), t)
        );
    }
    In(t, e) {
        return Sr(t).put("targetGlobalKey", e);
    }
    Tn(t, e) {
        return vr(t).put(Ki(this.M, e));
    }
    /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */ En(t, e) {
        let n = !1;
        return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, n = !0), n;
    }
    getTargetCount(t149) {
        return this.pn(t149).next((t)=>t.targetCount
        );
    }
    getTargetData(t, e) {
        // Iterating by the canonicalId may yield more than one result because
        // canonicalId values are not required to be unique per target. This query
        // depends on the queryTargets index to be efficient.
        const n39 = _e(e), s19 = IDBKeyRange.bound([
            n39,
            Number.NEGATIVE_INFINITY
        ], [
            n39,
            Number.POSITIVE_INFINITY
        ]);
        let i = null;
        return vr(t).Wt({
            range: s19,
            index: "queryTargetsIndex"
        }, (t, n, s)=>{
            const r = qi(n);
            // After finding a potential match, check that the target is
            // actually equal to the requested target.
            me(e, r.target) && (i = r, s.done());
        }).next(()=>i
        );
    }
    addMatchingKeys(t, e88, n) {
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
        const s = [], i = Dr(t);
        return e88.forEach((e)=>{
            const r = Qs(e.path);
            s.push(i.put({
                targetId: n,
                path: r
            })), s.push(this.referenceDelegate.addReference(t, n, e));
        }), pi.waitFor(s);
    }
    removeMatchingKeys(t, e89, n) {
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
        const s = Dr(t);
        return pi.forEach(e89, (e)=>{
            const i = Qs(e.path);
            return pi.waitFor([
                s.delete([
                    n,
                    i
                ]),
                this.referenceDelegate.removeReference(t, n, e)
            ]);
        });
    }
    removeMatchingKeysForTargetId(t, e) {
        const n = Dr(t), s = IDBKeyRange.bound([
            e
        ], [
            e + 1
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
        return n.delete(s);
    }
    getMatchingKeysForTargetId(t150, e) {
        const n = IDBKeyRange.bound([
            e
        ], [
            e + 1
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0), s20 = Dr(t150);
        let i = Xn();
        return s20.Wt({
            range: n,
            jt: !0
        }, (t, e, n)=>{
            const s = zs(t[1]), r = new xt(s);
            i = i.add(r);
        }).next(()=>i
        );
    }
    containsKey(t151, e) {
        const n = Qs(e.path), s21 = IDBKeyRange.bound([
            n
        ], [
            ut(n)
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
        let i = 0;
        return Dr(t151).Wt({
            index: "documentTargetsIndex",
            jt: !0,
            range: s21
        }, ([t, e], n, s)=>{
            // Having a sentinel row for a document does not count as containing that document;
            // For the target cache, containing the document means the document is part of some
            // target.
            0 !== t && (i++, s.done());
        }).next(()=>i > 0
        );
    }
    /**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId - The target ID of the TargetData entry to look up.
     * @returns The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */ // PORTING NOTE: Multi-tab only.
    Et(t152, e) {
        return vr(t152).get(e).next((t)=>t ? qi(t) : null
        );
    }
}
/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */ function vr(t) {
    return Di(t, "targets");
}
/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */ function Sr(t) {
    return Di(t, "targetGlobal");
}
/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */ function Dr(t) {
    return Di(t, "targetDocuments");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err - An error returned by a LocalStore operation.
 * @returns A Promise that resolves after we recovered, or the original error.
 */ async function Cr(t) {
    if (t.code !== G.FAILED_PRECONDITION || t.message !== gi) throw t;
    O("LocalStore", "Unexpectedly lost primary lease");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function xr([t, e], [n, s]) {
    const i = rt(t, n);
    return 0 === i ? rt(e, s) : i;
}
/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */ class Nr {
    constructor(t){
        this.An = t, this.buffer = new qn(xr), this.Rn = 0;
    }
    Pn() {
        return ++this.Rn;
    }
    bn(t) {
        const e = [
            t,
            this.Pn()
        ];
        if (this.buffer.size < this.An) this.buffer = this.buffer.add(e);
        else {
            const t = this.buffer.last();
            xr(e, t) < 0 && (this.buffer = this.buffer.delete(t).add(e));
        }
    }
    get maxValue() {
        // Guaranteed to be non-empty. If we decide we are not collecting any
        // sequence numbers, nthSequenceNumber below short-circuits. If we have
        // decided that we are collecting n sequence numbers, it's because n is some
        // percentage of the existing sequence numbers. That means we should never
        // be in a situation where we are collecting sequence numbers but don't
        // actually have any.
        return this.buffer.last()[0];
    }
}
/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */ class kr {
    constructor(t, e){
        this.garbageCollector = t, this.asyncQueue = e, this.Vn = !1, this.vn = null;
    }
    start(t) {
        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.Sn(t);
    }
    stop() {
        this.vn && (this.vn.cancel(), this.vn = null);
    }
    get started() {
        return null !== this.vn;
    }
    Sn(t153) {
        const e = this.Vn ? 3e5 : 6e4;
        O("LruGarbageCollector", `Garbage collection scheduled in ${e}ms`), this.vn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection" /* LruGarbageCollection */ , e, async ()=>{
            this.vn = null, this.Vn = !0;
            try {
                await t153.collectGarbage(this.garbageCollector);
            } catch (t) {
                Ri(t) ? O("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", t) : await Cr(t);
            }
            await this.Sn(t153);
        });
    }
}
/** Implements the steps for LRU garbage collection. */ class Mr {
    constructor(t, e){
        this.Dn = t, this.params = e;
    }
    calculateTargetCount(t154, e) {
        return this.Dn.Cn(t154).next((t)=>Math.floor(e / 100 * t)
        );
    }
    nthSequenceNumber(t155, e) {
        if (0 === e) return pi.resolve(nt.A);
        const n = new Nr(e);
        return this.Dn.forEachTarget(t155, (t)=>n.bn(t.sequenceNumber)
        ).next(()=>this.Dn.xn(t155, (t)=>n.bn(t)
            )
        ).next(()=>n.maxValue
        );
    }
    removeTargets(t, e, n) {
        return this.Dn.removeTargets(t, e, n);
    }
    removeOrphanedDocuments(t, e) {
        return this.Dn.removeOrphanedDocuments(t, e);
    }
    collect(t, e) {
        return -1 === this.params.cacheSizeCollectionThreshold ? (O("LruGarbageCollector", "Garbage collection skipped; disabled"), pi.resolve(gr)) : this.getCacheSize(t).next((n)=>n < this.params.cacheSizeCollectionThreshold ? (O("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), gr) : this.Nn(t, e)
        );
    }
    getCacheSize(t) {
        return this.Dn.getCacheSize(t);
    }
    Nn(t156, e90) {
        let n, s22, i, r, o, a, c;
        const h = Date.now();
        return this.calculateTargetCount(t156, this.params.percentileToCollect).next((e)=>// Cap at the configured max
            (e > this.params.maximumSequenceNumbersToCollect ? (O("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${e}`), s22 = this.params.maximumSequenceNumbersToCollect) : s22 = e, r = Date.now(), this.nthSequenceNumber(t156, s22))
        ).next((s)=>(n = s, o = Date.now(), this.removeTargets(t156, n, e90))
        ).next((e)=>(i = e, a = Date.now(), this.removeOrphanedDocuments(t156, n))
        ).next((t)=>{
            if (c = Date.now(), k() <= _logger.LogLevel.DEBUG) O("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${r - h}ms\n\tDetermined least recently used ${s22} in ` + (o - r) + "ms\n" + `\tRemoved ${i} targets in ` + (a - o) + "ms\n" + `\tRemoved ${t} documents in ` + (c - a) + "ms\n" + `Total Duration: ${c - h}ms`);
            return pi.resolve({
                didRun: !0,
                sequenceNumbersCollected: s22,
                targetsRemoved: i,
                documentsRemoved: t
            });
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Provides LRU functionality for IndexedDB persistence. */ class Or {
    constructor(t157, e91){
        this.db = t157, this.garbageCollector = function(t, e) {
            return new Mr(t, e);
        }(this, e91);
    }
    Cn(t158) {
        const e92 = this.kn(t158);
        return this.db.getTargetCache().getTargetCount(t158).next((t)=>e92.next((e)=>t + e
            )
        );
    }
    kn(t) {
        let e = 0;
        return this.xn(t, (t)=>{
            e++;
        }).next(()=>e
        );
    }
    forEachTarget(t, e) {
        return this.db.getTargetCache().forEachTarget(t, e);
    }
    xn(t, e) {
        return this.Mn(t, (t, n)=>e(n)
        );
    }
    addReference(t, e, n) {
        return Fr(t, n);
    }
    removeReference(t, e, n) {
        return Fr(t, n);
    }
    removeTargets(t, e, n) {
        return this.db.getTargetCache().removeTargets(t, e, n);
    }
    markPotentiallyOrphaned(t, e) {
        return Fr(t, e);
    }
    /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */ On(t159, e93) {
        return function(t160, e) {
            let n = !1;
            return Pr(t160).zt((s)=>Er(t160, s, e).next((t)=>(t && (n = !0), pi.resolve(!t))
                )
            ).next(()=>n
            );
        }(t159, e93);
    }
    removeOrphanedDocuments(t, e94) {
        const n = this.db.getRemoteDocumentCache().newChangeBuffer(), s = [];
        let i = 0;
        return this.Mn(t, (r, o)=>{
            if (o <= e94) {
                const e95 = this.On(t, r).next((e)=>{
                    if (!e) // Our size accounting requires us to read all documents before
                    // removing them.
                    return i++, n.getEntry(t, r).next(()=>(n.removeEntry(r, ct.min()), Dr(t).delete([
                            0,
                            Qs(r.path)
                        ]))
                    );
                });
                s.push(e95);
            }
        }).next(()=>pi.waitFor(s)
        ).next(()=>n.apply(t)
        ).next(()=>i
        );
    }
    removeTarget(t, e) {
        const n = e.withSequenceNumber(t.currentSequenceNumber);
        return this.db.getTargetCache().updateTargetData(t, n);
    }
    updateLimboDocument(t, e) {
        return Fr(t, e);
    }
    /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */ Mn(t161, e) {
        const n = Dr(t161);
        let s, i = nt.A;
        return n.Wt({
            index: "documentTargetsIndex"
        }, ([t, n], { path: r , sequenceNumber: o  })=>{
            0 === t ? // if nextToReport is valid, report it, this is a new key so the
            // last one must not be a member of any targets.
            (i !== nt.A && e(new xt(zs(s)), i), // set nextToReport to be this sequence number. It's the next one we
            // might report, if we don't find any targets for this document.
            // Note that the sequence number must be defined when the targetId
            // is 0.
            i = o, s = r) : // set nextToReport to be invalid, we know we don't need to report
            // this one since we found a target for it.
            i = nt.A;
        }).next(()=>{
            // Since we report sequence numbers after getting to the next key, we
            // need to check if the last key we iterated over was an orphaned
            // document and report it.
            i !== nt.A && e(new xt(zs(s)), i);
        });
    }
    getCacheSize(t) {
        return this.db.getRemoteDocumentCache().getSize(t);
    }
}
function Fr(t162, e97) {
    return Dr(t162).put(/**
 * @returns A value suitable for writing a sentinel row in the target-document
 * store.
 */ function(t, e) {
        return {
            targetId: 0,
            path: Qs(t.path),
            sequenceNumber: e
        };
    }(e97, t162.currentSequenceNumber));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */ class $r {
    constructor(){
        // A mapping of document key to the new cache entry that should be written.
        this.changes = new $n((t)=>t.toString()
        , (t, e)=>t.isEqual(e)
        ), this.changesApplied = !1;
    }
    /**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */ addEntry(t) {
        this.assertNotApplied(), this.changes.set(t.key, t);
    }
    /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */ removeEntry(t, e) {
        this.assertNotApplied(), this.changes.set(t, ne.newInvalidDocument(t).setReadTime(e));
    }
    /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document or an invalid document if we have nothing
     * cached.
     */ getEntry(t, e) {
        this.assertNotApplied();
        const n = this.changes.get(e);
        return void 0 !== n ? pi.resolve(n) : this.getFromCache(t, e);
    }
    /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys - The keys of the entries to look up.
     * @returns A map of cached documents, indexed by key. If an entry cannot be
     *     found, the corresponding key will be mapped to an invalid document.
     */ getEntries(t, e) {
        return this.getAllFromCache(t, e);
    }
    /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */ apply(t) {
        return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
    }
    /** Helper to assert this.changes is not null  */ assertNotApplied() {}
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newIndexedDbRemoteDocumentCache()`.
 */ class Br {
    constructor(t){
        this.M = t;
    }
    setIndexManager(t) {
        this.indexManager = t;
    }
    /**
     * Adds the supplied entries to the cache.
     *
     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */ addEntry(t, e, n) {
        return qr(t).put(n);
    }
    /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */ removeEntry(t163, e98, n40) {
        return qr(t163).delete(/**
 * Returns a key that can be used for document lookups via the primary key of
 * the DbRemoteDocument object store.
 */ function(t, e) {
            const n = t.path.toArray();
            return [
                /* prefix path */ n.slice(0, n.length - 2),
                /* collection id */ n[n.length - 2],
                $i(e),
                /* document id */ n[n.length - 1]
            ];
        }(e98, n40));
    }
    /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */ updateMetadata(t, e) {
        return this.getMetadata(t).next((n)=>(n.byteSize += e, this.Fn(t, n))
        );
    }
    getEntry(t, e) {
        let n = ne.newInvalidDocument(e);
        return qr(t).Wt({
            index: "documentKeyIndex",
            range: IDBKeyRange.only(Kr(e))
        }, (t, s)=>{
            n = this.$n(e, s);
        }).next(()=>n
        );
    }
    /**
     * Looks up an entry in the cache.
     *
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document entry and its size.
     */ Bn(t, e) {
        let n = {
            size: 0,
            document: ne.newInvalidDocument(e)
        };
        return qr(t).Wt({
            index: "documentKeyIndex",
            range: IDBKeyRange.only(Kr(e))
        }, (t, s)=>{
            n = {
                document: this.$n(e, s),
                size: Ir(s)
            };
        }).next(()=>n
        );
    }
    getEntries(t164, e99) {
        let n = jn();
        return this.Ln(t164, e99, (t, e)=>{
            const s = this.$n(t, e);
            n = n.insert(t, s);
        }).next(()=>n
        );
    }
    /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys - The set of keys entries to look up.
     * @returns A map of documents indexed by key and a map of sizes indexed by
     *     key (zero if the document does not exist).
     */ Un(t165, e100) {
        let n = jn(), s = new Bn(xt.comparator);
        return this.Ln(t165, e100, (t, e)=>{
            const i = this.$n(t, e);
            n = n.insert(t, i), s = s.insert(t, Ir(e));
        }).next(()=>({
                documents: n,
                qn: s
            })
        );
    }
    Ln(t166, e101, n) {
        if (e101.isEmpty()) return pi.resolve();
        let s23 = new qn(Qr);
        e101.forEach((t)=>s23 = s23.add(t)
        );
        const i13 = IDBKeyRange.bound(Kr(s23.first()), Kr(s23.last())), r = s23.getIterator();
        let o = r.getNext();
        return qr(t166).Wt({
            index: "documentKeyIndex",
            range: i13
        }, (t, e, s)=>{
            const i = xt.fromSegments([
                ...e.prefixPath,
                e.collectionGroup,
                e.documentId
            ]);
            // Go through keys not found in cache.
            for(; o && Qr(o, i) < 0;)n(o, null), o = r.getNext();
            o && o.isEqual(i) && // Key found in cache.
            (n(o, e), o = r.hasNext() ? r.getNext() : null), // Skip to the next key (if there is one).
            o ? s.Ut(Kr(o)) : s.done();
        }).next(()=>{
            // The rest of the keys are not in the cache. One case where `iterate`
            // above won't go through them is when the cache is empty.
            for(; o;)n(o, null), o = r.hasNext() ? r.getNext() : null;
        });
    }
    getAllFromCollection(t167, e102, n41) {
        const s = [
            e102.popLast().toArray(),
            e102.lastSegment(),
            $i(n41.readTime),
            n41.documentKey.path.isEmpty() ? "" : n41.documentKey.path.lastSegment()
        ], i = [
            e102.popLast().toArray(),
            e102.lastSegment(),
            [
                Number.MAX_SAFE_INTEGER,
                Number.MAX_SAFE_INTEGER
            ],
            ""
        ];
        return qr(t167).qt(IDBKeyRange.bound(s, i, !0)).next((t)=>{
            let e = jn();
            for (const n of t){
                const t = this.$n(xt.fromSegments(n.prefixPath.concat(n.collectionGroup, n.documentId)), n);
                e = e.insert(t.key, t);
            }
            return e;
        });
    }
    getAllFromCollectionGroup(t, e103, n42, s) {
        let i = jn();
        const r5 = Gr(e103, n42), o = Gr(e103, he.max());
        return qr(t).Wt({
            index: "collectionGroupIndex",
            range: IDBKeyRange.bound(r5, o, !0)
        }, (t, e, n)=>{
            const r = this.$n(xt.fromSegments(e.prefixPath.concat(e.collectionGroup, e.documentId)), e);
            i = i.insert(r.key, r), i.size === s && n.done();
        }).next(()=>i
        );
    }
    newChangeBuffer(t) {
        return new Lr(this, !!t && t.trackRemovals);
    }
    getSize(t168) {
        return this.getMetadata(t168).next((t)=>t.byteSize
        );
    }
    getMetadata(t169) {
        return Ur(t169).get("remoteDocumentGlobalKey").next((t)=>(U(!!t), t)
        );
    }
    Fn(t, e) {
        return Ur(t).put("remoteDocumentGlobalKey", e);
    }
    /**
     * Decodes `dbRemoteDoc` and returns the document (or an invalid document if
     * the document corresponds to the format used for sentinel deletes).
     */ $n(t, e) {
        if (e) {
            const t = Oi(this.M, e);
            // Whether the document is a sentinel removal and should only be used in the
            // `getNewDocumentChanges()`
            if (!(t.isNoDocument() && t.version.isEqual(ct.min()))) return t;
        }
        return ne.newInvalidDocument(t);
    }
}
/** Creates a new IndexedDbRemoteDocumentCache. */ /**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
 *
 * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
 * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
 * when we apply the changes.
 */ class Lr extends $r {
    /**
     * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
     * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
     * `getNewDocumentChanges()`.
     */ constructor(t170, e104){
        super(), this.Kn = t170, this.trackRemovals = e104, // A map of document sizes and read times prior to applying the changes in
        // this buffer.
        this.Gn = new $n((t)=>t.toString()
        , (t, e)=>t.isEqual(e)
        );
    }
    applyChanges(t171) {
        const e105 = [];
        let n43 = 0, s = new qn((t, e)=>rt(t.canonicalString(), e.canonicalString())
        );
        return this.changes.forEach((i, r)=>{
            const o = this.Gn.get(i);
            if (e105.push(this.Kn.removeEntry(t171, i, o.readTime)), r.isValidDocument()) {
                const u = Fi(this.Kn.M, r);
                s = s.add(i.path.popLast());
                const a = Ir(u);
                n43 += a - o.size, e105.push(this.Kn.addEntry(t171, i, u));
            } else if (n43 -= o.size, this.trackRemovals) {
                // In order to track removals, we store a "sentinel delete" in the
                // RemoteDocumentCache. This entry is represented by a NoDocument
                // with a version of 0 and ignored by `maybeDecodeDocument()` but
                // preserved in `getNewDocumentChanges()`.
                const n = Fi(this.Kn.M, r.convertToNoDocument(ct.min()));
                e105.push(this.Kn.addEntry(t171, i, n));
            }
        }), s.forEach((n)=>{
            e105.push(this.Kn.indexManager.addToCollectionParentIndex(t171, n));
        }), e105.push(this.Kn.updateMetadata(t171, n43)), pi.waitFor(e105);
    }
    getFromCache(t172, e) {
        // Record the size of everything we load from the cache so we can compute a delta later.
        return this.Kn.Bn(t172, e).next((t)=>(this.Gn.set(e, {
                size: t.size,
                readTime: t.document.readTime
            }), t.document)
        );
    }
    getAllFromCache(t173, e106) {
        // Record the size of everything we load from the cache so we can compute
        // a delta later.
        return this.Kn.Un(t173, e106).next(({ documents: t , qn: e107  })=>// Note: `getAllFromCache` returns two maps instead of a single map from
            // keys to `DocumentSizeEntry`s. This is to allow returning the
            // `MutableDocumentMap` directly, without a conversion.
            (e107.forEach((e, n)=>{
                this.Gn.set(e, {
                    size: n,
                    readTime: t.get(e).readTime
                });
            }), t)
        );
    }
}
function Ur(t) {
    return Di(t, "remoteDocumentGlobal");
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */ function qr(t) {
    return Di(t, "remoteDocumentsV14");
}
/**
 * Returns a key that can be used for document lookups on the
 * `DbRemoteDocumentDocumentKeyIndex` index.
 */ function Kr(t) {
    const e = t.path.toArray();
    return [
        /* prefix path */ e.slice(0, e.length - 2),
        /* collection id */ e[e.length - 2],
        /* document id */ e[e.length - 1]
    ];
}
function Gr(t, e) {
    const n = e.documentKey.path.toArray();
    return [
        /* collection id */ t,
        $i(e.readTime),
        /* prefix path */ n.slice(0, n.length - 2),
        /* document id */ n.length > 0 ? n[n.length - 1] : ""
    ];
}
/**
 * Comparator that compares document keys according to the primary key sorting
 * used by the `DbRemoteDocumentDocument` store (by prefix path, collection id
 * and then document ID).
 *
 * Visible for testing.
 */ function Qr(t, e) {
    const n = t.path.toArray(), s = e.path.toArray();
    // The ordering is based on https://chromium.googlesource.com/chromium/blink/+/fe5c21fef94dae71c1c3344775b8d8a7f7e6d9ec/Source/modules/indexeddb/IDBKey.cpp#74
    let i = 0;
    for(let t174 = 0; t174 < n.length - 2 && t174 < s.length - 2; ++t174)if (i = rt(n[t174], s[t174]), i) return i;
    return i = rt(n.length, s.length), i || (i = rt(n[n.length - 2], s[s.length - 2]), i || rt(n[n.length - 1], s[s.length - 1]));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO(indexing): Remove this constant
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Performs database creation and schema upgrades. */ class jr {
    constructor(t){
        this.M = t;
    }
    /**
     * Performs database creation and schema upgrades.
     *
     * Note that in production, this method is only ever used to upgrade the schema
     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
     * and local feature development.
     */ kt(t175, e108, n44, s24) {
        const i14 = new Ii("createOrUpgrade", e108);
        n44 < 1 && s24 >= 1 && (function(t) {
            t.createObjectStore("owner");
        }(t175), function(t) {
            t.createObjectStore("mutationQueues", {
                keyPath: "userId"
            });
            t.createObjectStore("mutations", {
                keyPath: "batchId",
                autoIncrement: !0
            }).createIndex("userMutationsIndex", Hs, {
                unique: !0
            }), t.createObjectStore("documentMutations");
        }(t175), Wr(t175), function(t) {
            t.createObjectStore("remoteDocuments");
        }(t175));
        // Migration 2 to populate the targetGlobal object no longer needed since
        // migration 3 unconditionally clears it.
        let r = pi.resolve();
        return n44 < 3 && s24 >= 3 && // Brand new clients don't need to drop and recreate--only clients that
        // potentially have corrupt data.
        (0 !== n44 && (!function(t) {
            t.deleteObjectStore("targetDocuments"), t.deleteObjectStore("targets"), t.deleteObjectStore("targetGlobal");
        }(t175), Wr(t175)), r = r.next(()=>/**
 * Creates the target global singleton row.
 *
 * @param txn - The version upgrade transaction for indexeddb
 */ (function(t) {
                const e = t.store("targetGlobal"), n = {
                    highestTargetId: 0,
                    highestListenSequenceNumber: 0,
                    lastRemoteSnapshotVersion: ct.min().toTimestamp(),
                    targetCount: 0
                };
                return e.put("targetGlobalKey", n);
            })(i14)
        )), n44 < 4 && s24 >= 4 && (0 !== n44 && // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        (r = r.next(()=>(function(t176, e) {
                return e.store("mutations").qt().next((n)=>{
                    t176.deleteObjectStore("mutations");
                    t176.createObjectStore("mutations", {
                        keyPath: "batchId",
                        autoIncrement: !0
                    }).createIndex("userMutationsIndex", Hs, {
                        unique: !0
                    });
                    const s = e.store("mutations"), i = n.map((t)=>s.put(t)
                    );
                    return pi.waitFor(i);
                });
            })(t175, i14)
        )), r = r.next(()=>{
            !function(t) {
                t.createObjectStore("clientMetadata", {
                    keyPath: "clientId"
                });
            }(t175);
        })), n44 < 5 && s24 >= 5 && (r = r.next(()=>this.Qn(i14)
        )), n44 < 6 && s24 >= 6 && (r = r.next(()=>((function(t) {
                t.createObjectStore("remoteDocumentGlobal");
            })(t175), this.jn(i14))
        )), n44 < 7 && s24 >= 7 && (r = r.next(()=>this.Wn(i14)
        )), n44 < 8 && s24 >= 8 && (r = r.next(()=>this.zn(t175, i14)
        )), n44 < 9 && s24 >= 9 && (r = r.next(()=>{
            // Multi-Tab used to manage its own changelog, but this has been moved
            // to the DbRemoteDocument object store itself. Since the previous change
            // log only contained transient data, we can drop its object store.
            !function(t) {
                t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
            }(t175);
        // Note: Schema version 9 used to create a read time index for the
        // RemoteDocumentCache. This is now done with schema version 13.
        })), n44 < 10 && s24 >= 10 && (r = r.next(()=>this.Hn(i14)
        )), n44 < 11 && s24 >= 11 && (r = r.next(()=>{
            !function(t) {
                t.createObjectStore("bundles", {
                    keyPath: "bundleId"
                });
            }(t175), function(t) {
                t.createObjectStore("namedQueries", {
                    keyPath: "name"
                });
            }(t175);
        })), n44 < 12 && s24 >= 12 && (r = r.next(()=>{
            !function(t) {
                const e = t.createObjectStore("documentOverlays", {
                    keyPath: hi
                });
                e.createIndex("collectionPathOverlayIndex", li, {
                    unique: !1
                }), e.createIndex("collectionGroupOverlayIndex", fi, {
                    unique: !1
                });
            }(t175);
        })), n44 < 13 && s24 >= 13 && (r = r.next(()=>(function(t) {
                const e = t.createObjectStore("remoteDocumentsV14", {
                    keyPath: Zs
                });
                e.createIndex("documentKeyIndex", ti), e.createIndex("collectionGroupIndex", ei);
            })(t175)
        ).next(()=>this.Jn(t175, i14)
        ).next(()=>t175.deleteObjectStore("remoteDocuments")
        )), n44 < 14 && s24 >= 14 && (r = r.next(()=>{
            !function(t) {
                t.createObjectStore("indexConfiguration", {
                    keyPath: "indexId",
                    autoIncrement: !0
                }).createIndex("collectionGroupIndex", "collectionGroup", {
                    unique: !1
                });
                t.createObjectStore("indexState", {
                    keyPath: oi
                }).createIndex("sequenceNumberIndex", ui, {
                    unique: !1
                });
                t.createObjectStore("indexEntries", {
                    keyPath: ai
                }).createIndex("documentKeyIndex", ci, {
                    unique: !1
                });
            }(t175);
        })), r;
    }
    jn(t) {
        let e = 0;
        return t.store("remoteDocuments").Wt((t, n)=>{
            e += Ir(n);
        }).next(()=>{
            const n = {
                byteSize: e
            };
            return t.store("remoteDocumentGlobal").put("remoteDocumentGlobalKey", n);
        });
    }
    Qn(t) {
        const e109 = t.store("mutationQueues"), n45 = t.store("mutations");
        return e109.qt().next((e110)=>pi.forEach(e110, (e)=>{
                const s25 = IDBKeyRange.bound([
                    e.userId,
                    -1
                ], [
                    e.userId,
                    e.lastAcknowledgedBatchId
                ]);
                return n45.qt("userMutationsIndex", s25).next((n46)=>pi.forEach(n46, (n)=>{
                        U(n.userId === e.userId);
                        const s = Ui(this.M, n);
                        return pr(t, e.userId, s).next(()=>{});
                    })
                );
            })
        );
    }
    /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */ Wn(t177) {
        const e = t177.store("targetDocuments"), n47 = t177.store("remoteDocuments");
        return t177.store("targetGlobal").get("targetGlobalKey").next((t178)=>{
            const s = [];
            return n47.Wt((n48, i)=>{
                const r = new _t(n48), o = function(t) {
                    return [
                        0,
                        Qs(t)
                    ];
                }(r);
                s.push(e.get(o).next((n49)=>n49 ? pi.resolve() : ((n)=>e.put({
                            targetId: 0,
                            path: Qs(n),
                            sequenceNumber: t178.highestListenSequenceNumber
                        })
                    )(r)
                ));
            }).next(()=>pi.waitFor(s)
            );
        });
    }
    zn(t179, e111) {
        // Create the index.
        t179.createObjectStore("collectionParents", {
            keyPath: ri
        });
        const n50 = e111.store("collectionParents"), s26 = new hr, i = (t)=>{
            if (s26.add(t)) {
                const e = t.lastSegment(), s = t.popLast();
                return n50.put({
                    collectionId: e,
                    parent: Qs(s)
                });
            }
        };
        // Helper to add an index entry iff we haven't already written it.
        // Index existing remote documents.
        return e111.store("remoteDocuments").Wt({
            jt: !0
        }, (t, e)=>{
            const n = new _t(t);
            return i(n.popLast());
        }).next(()=>e111.store("documentMutations").Wt({
                jt: !0
            }, ([t, e, n], s)=>{
                const r = zs(e);
                return i(r.popLast());
            })
        );
    }
    Hn(t) {
        const e = t.store("targets");
        return e.Wt((t, n)=>{
            const s = qi(n), i = Ki(this.M, s);
            return e.put(i);
        });
    }
    Jn(t, e) {
        const n51 = e.store("remoteDocuments"), s = [];
        return n51.Wt((t, n)=>{
            const i = e.store("remoteDocumentsV14"), r = (o = n, o.document ? new xt(_t.fromString(o.document.name).popFirst(5)) : o.noDocument ? xt.fromSegments(o.noDocument.path) : o.unknownDocument ? xt.fromSegments(o.unknownDocument.path) : L()).path.toArray();
            var o;
            /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const u = {
                prefixPath: r.slice(0, r.length - 2),
                collectionGroup: r[r.length - 2],
                documentId: r[r.length - 1],
                readTime: n.readTime || [
                    0,
                    0
                ],
                unknownDocument: n.unknownDocument,
                noDocument: n.noDocument,
                document: n.document,
                hasCommittedMutations: !!n.hasCommittedMutations
            };
            s.push(i.put(u));
        }).next(()=>pi.waitFor(s)
        );
    }
}
function Wr(t) {
    t.createObjectStore("targetDocuments", {
        keyPath: si
    }).createIndex("documentTargetsIndex", ii, {
        unique: !0
    });
    // NOTE: This is unique only because the TargetId is the suffix.
    t.createObjectStore("targets", {
        keyPath: "targetId"
    }).createIndex("queryTargetsIndex", ni, {
        unique: !0
    }), t.createObjectStore("targetGlobal");
}
const zr = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */ /**
 * An IndexedDB-backed instance of Persistence. Data is stored persistently
 * across sessions.
 *
 * On Web only, the Firestore SDKs support shared access to its persistence
 * layer. This allows multiple browser tabs to read and write to IndexedDb and
 * to synchronize state even without network connectivity. Shared access is
 * currently optional and not enabled unless all clients invoke
 * `enablePersistence()` with `{synchronizeTabs:true}`.
 *
 * In multi-tab mode, if multiple clients are active at the same time, the SDK
 * will designate one client as the “primary client”. An effort is made to pick
 * a visible, network-connected and active client, and this client is
 * responsible for letting other clients know about its presence. The primary
 * client writes a unique client-generated identifier (the client ID) to
 * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
 * update this entry, another client can acquire the lease and take over as
 * primary.
 *
 * Some persistence operations in the SDK are designated as primary-client only
 * operations. This includes the acknowledgment of mutations and all updates of
 * remote documents. The effects of these operations are written to persistence
 * and then broadcast to other tabs via LocalStorage (see
 * `WebStorageSharedClientState`), which then refresh their state from
 * persistence.
 *
 * Similarly, the primary client listens to notifications sent by secondary
 * clients to discover persistence changes written by secondary clients, such as
 * the addition of new mutations and query targets.
 *
 * If multi-tab is not enabled and another tab already obtained the primary
 * lease, IndexedDbPersistence enters a failed state and all subsequent
 * operations will automatically fail.
 *
 * Additionally, there is an optimization so that when a tab is closed, the
 * primary lease is released immediately (this is especially important to make
 * sure that a refreshed tab is able to immediately re-acquire the primary
 * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
 * since it is an asynchronous API. So in addition to attempting to give up the
 * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
 * LocalStorage which acts as an indicator that another tab should go ahead and
 * take the primary lease immediately regardless of the current lease timestamp.
 *
 * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
 * longer optional.
 */ class Hr {
    constructor(/**
     * Whether to synchronize the in-memory state of multiple tabs and share
     * access to local persistence.
     */ t180, e, n, s, i, r, o, u, a, /**
     * If set to true, forcefully obtains database access. Existing tabs will
     * no longer be able to access IndexedDB.
     */ c, h = 13){
        if (this.allowTabSynchronization = t180, this.persistenceKey = e, this.clientId = n, this.Yn = i, this.window = r, this.document = o, this.Xn = a, this.Zn = c, this.ts = h, this.es = null, this.ns = !1, this.isPrimary = !1, this.networkEnabled = !0, /** Our window.unload handler, if registered. */ this.ss = null, this.inForeground = !1, /** Our 'visibilitychange' listener if registered. */ this.rs = null, /** The client metadata refresh task. */ this.os = null, /** The last time we garbage collected the client metadata object store. */ this.us = Number.NEGATIVE_INFINITY, /** A listener to notify on primary state changes. */ this.cs = (t)=>Promise.resolve()
        , !Hr.vt()) throw new Q(G.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
        this.referenceDelegate = new Or(this, s), this.hs = e + "main", this.M = new Mi(u), this.ls = new Ti(this.hs, this.ts, new jr(this.M)), this.fs = new Vr(this.referenceDelegate, this.M), this.ds = function(t) {
            return new Br(t);
        }(this.M), this._s = new Wi, this.window && this.window.localStorage ? this.ws = this.window.localStorage : (this.ws = null, !1 === c && F("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
    }
    /**
     * Attempt to start IndexedDb persistence.
     *
     * @returns Whether persistence was enabled.
     */ start() {
        // NOTE: This is expected to fail sometimes (in the case of another tab
        // already having the persistence lock), so it's the first thing we should
        // do.
        return this.gs().then(()=>{
            if (!this.isPrimary && !this.allowTabSynchronization) // Fail `start()` if `synchronizeTabs` is disabled and we cannot
            // obtain the primary lease.
            throw new Q(G.FAILED_PRECONDITION, zr);
            return this.ys(), this.ps(), this.Is(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (t)=>this.fs.getHighestSequenceNumber(t)
            );
        }).then((t)=>{
            this.es = new nt(t, this.Xn);
        }).then(()=>{
            this.ns = !0;
        }).catch((t)=>(this.ls && this.ls.close(), Promise.reject(t))
        );
    }
    /**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ Ts(t) {
        return this.cs = async (e)=>{
            if (this.started) return t(e);
        }, t(this.isPrimary);
    }
    /**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ setDatabaseDeletedListener(t) {
        this.ls.Ot(async (e)=>{
            // Check if an attempt is made to delete IndexedDB.
            null === e.newVersion && await t();
        });
    }
    /**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ setNetworkEnabled(t) {
        this.networkEnabled !== t && (this.networkEnabled = t, // Schedule a primary lease refresh for immediate execution. The eventual
        // lease update will be propagated via `primaryStateListener`.
        this.Yn.enqueueAndForget(async ()=>{
            this.started && await this.gs();
        }));
    }
    /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */ gs() {
        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (t181)=>Yr(t181).put({
                clientId: this.clientId,
                updateTimeMs: Date.now(),
                networkEnabled: this.networkEnabled,
                inForeground: this.inForeground
            }).next(()=>{
                if (this.isPrimary) return this.Es(t181).next((t)=>{
                    t || (this.isPrimary = !1, this.Yn.enqueueRetryable(()=>this.cs(!1)
                    ));
                });
            }).next(()=>this.As(t181)
            ).next((e)=>this.isPrimary && !e ? this.Rs(t181).next(()=>!1
                ) : !!e && this.Ps(t181).next(()=>!0
                )
            )
        ).catch((t)=>{
            if (Ri(t)) // Proceed with the existing state. Any subsequent access to
            // IndexedDB will verify the lease.
            return O("IndexedDbPersistence", "Failed to extend owner lease: ", t), this.isPrimary;
            if (!this.allowTabSynchronization) throw t;
            return O("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t), /* isPrimary= */ !1;
        }).then((t)=>{
            this.isPrimary !== t && this.Yn.enqueueRetryable(()=>this.cs(t)
            ), this.isPrimary = t;
        });
    }
    Es(t182) {
        return Jr(t182).get("owner").next((t)=>pi.resolve(this.bs(t))
        );
    }
    Vs(t) {
        return Yr(t).delete(this.clientId);
    }
    /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */ async vs() {
        if (this.isPrimary && !this.Ss(this.us, 18e5)) {
            this.us = Date.now();
            const t183 = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (t185)=>{
                const e = Di(t185, "clientMetadata");
                return e.qt().next((t186)=>{
                    const n = this.Ds(t186, 18e5), s = t186.filter((t)=>-1 === n.indexOf(t)
                    );
                    // Delete metadata for clients that are no longer considered active.
                    return pi.forEach(s, (t)=>e.delete(t.clientId)
                    ).next(()=>s
                    );
                });
            }).catch(()=>[]
            );
            // Delete potential leftover entries that may continue to mark the
            // inactive clients as zombied in LocalStorage.
            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
            // the client atomically, but we can't. So we opt to delete the IndexedDb
            // entries first to avoid potentially reviving a zombied client.
            if (this.ws) for (const e112 of t183)this.ws.removeItem(this.Cs(e112.clientId));
        }
    }
    /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */ Is() {
        this.os = this.Yn.enqueueAfterDelay("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, ()=>this.gs().then(()=>this.vs()
            ).then(()=>this.Is()
            )
        );
    }
    /** Checks whether `client` is the local client. */ bs(t) {
        return !!t && t.ownerId === this.clientId;
    }
    /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */ As(t187) {
        if (this.Zn) return pi.resolve(!0);
        return Jr(t187).get("owner").next((e114)=>{
            // A client is eligible for the primary lease if:
            // - its network is enabled and the client's tab is in the foreground.
            // - its network is enabled and no other client's tab is in the
            //   foreground.
            // - every clients network is disabled and the client's tab is in the
            //   foreground.
            // - every clients network is disabled and no other client's tab is in
            //   the foreground.
            // - the `forceOwningTab` setting was passed in.
            if (null !== e114 && this.Ss(e114.leaseTimestampMs, 5e3) && !this.xs(e114.ownerId)) {
                if (this.bs(e114) && this.networkEnabled) return !0;
                if (!this.bs(e114)) {
                    if (!e114.allowTabSynchronization) // Fail the `canActAsPrimary` check if the current leaseholder has
                    // not opted into multi-tab synchronization. If this happens at
                    // client startup, we reject the Promise returned by
                    // `enablePersistence()` and the user can continue to use Firestore
                    // with in-memory persistence.
                    // If this fails during a lease refresh, we will instead block the
                    // AsyncQueue from executing further operations. Note that this is
                    // acceptable since mixing & matching different `synchronizeTabs`
                    // settings is not supported.
                    // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                    // no longer be turned off.
                    throw new Q(G.FAILED_PRECONDITION, zr);
                    return !1;
                }
            }
            return !(!this.networkEnabled || !this.inForeground) || Yr(t187).qt().next((t188)=>void 0 === this.Ds(t188, 5e3).find((t)=>{
                    if (this.clientId !== t.clientId) {
                        const e = !this.networkEnabled && t.networkEnabled, n = !this.inForeground && t.inForeground, s = this.networkEnabled === t.networkEnabled;
                        if (e || n && s) return !0;
                    }
                    return !1;
                })
            );
        }).next((t)=>(this.isPrimary !== t && O("IndexedDbPersistence", `Client ${t ? "is" : "is not"} eligible for a primary lease.`), t)
        );
    }
    async shutdown() {
        // The shutdown() operations are idempotent and can be called even when
        // start() aborted (e.g. because it couldn't acquire the persistence lease).
        this.ns = !1, this.Ns(), this.os && (this.os.cancel(), this.os = null), this.ks(), this.Ms(), // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
        // has obtained the primary lease.
        await this.ls.runTransaction("shutdown", "readwrite", [
            "owner",
            "clientMetadata"
        ], (t)=>{
            const e = new Si(t, nt.A);
            return this.Rs(e).next(()=>this.Vs(e)
            );
        }), this.ls.close(), // Remove the entry marking the client as zombied from LocalStorage since
        // we successfully deleted its metadata from IndexedDb.
        this.Os();
    }
    /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */ Ds(t189, e) {
        return t189.filter((t)=>this.Ss(t.updateTimeMs, e) && !this.xs(t.clientId)
        );
    }
    /**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ Fs() {
        return this.runTransaction("getActiveClients", "readonly", (t190)=>Yr(t190).qt().next((t191)=>this.Ds(t191, 18e5).map((t)=>t.clientId
                )
            )
        );
    }
    get started() {
        return this.ns;
    }
    getMutationQueue(t, e) {
        return Tr.Yt(t, this.M, e, this.referenceDelegate);
    }
    getTargetCache() {
        return this.fs;
    }
    getRemoteDocumentCache() {
        return this.ds;
    }
    getIndexManager(t) {
        return new fr(t, this.M.Jt.databaseId);
    }
    getDocumentOverlayCache(t) {
        return Ji.Yt(this.M, t);
    }
    getBundleCache() {
        return this._s;
    }
    runTransaction(t192, e115, n) {
        O("IndexedDbPersistence", "Starting transaction:", t192);
        const s27 = "readonly" === e115 ? "readonly" : "readwrite", i = 14 === (r = this.ts) ? mi : 13 === r ? wi : 12 === r ? _i : 11 === r ? di : void L();
        /** Returns the object stores for the provided schema. */ var r;
        let o;
        // Do all transactions as readwrite against all object stores, since we
        // are the only reader/writer.
        return this.ls.runTransaction(t192, s27, i, (s)=>(o = new Si(s, this.es ? this.es.next() : nt.A), "readwrite-primary" === e115 ? this.Es(o).next((t)=>!!t || this.As(o)
            ).next((e)=>{
                if (!e) throw F(`Failed to obtain primary lease for action '${t192}'.`), this.isPrimary = !1, this.Yn.enqueueRetryable(()=>this.cs(!1)
                ), new Q(G.FAILED_PRECONDITION, gi);
                return n(o);
            }).next((t)=>this.Ps(o).next(()=>t
                )
            ) : this.$s(o).next(()=>n(o)
            ))
        ).then((t)=>(o.raiseOnCommittedEvent(), t)
        );
    }
    /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */ // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.
    $s(t193) {
        return Jr(t193).get("owner").next((t)=>{
            if (null !== t && this.Ss(t.leaseTimestampMs, 5e3) && !this.xs(t.ownerId) && !this.bs(t) && !(this.Zn || this.allowTabSynchronization && t.allowTabSynchronization)) throw new Q(G.FAILED_PRECONDITION, zr);
        });
    }
    /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */ Ps(t) {
        const e = {
            ownerId: this.clientId,
            allowTabSynchronization: this.allowTabSynchronization,
            leaseTimestampMs: Date.now()
        };
        return Jr(t).put("owner", e);
    }
    static vt() {
        return Ti.vt();
    }
    /** Checks the primary lease and removes it if we are the current primary. */ Rs(t194) {
        const e = Jr(t194);
        return e.get("owner").next((t)=>this.bs(t) ? (O("IndexedDbPersistence", "Releasing primary lease."), e.delete("owner")) : pi.resolve()
        );
    }
    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ Ss(t, e) {
        const n = Date.now();
        return !(t < n - e) && (!(t > n) || (F(`Detected an update time that is in the future: ${t} > ${n}`), !1));
    }
    ys() {
        null !== this.document && "function" == typeof this.document.addEventListener && (this.rs = ()=>{
            this.Yn.enqueueAndForget(()=>(this.inForeground = "visible" === this.document.visibilityState, this.gs())
            );
        }, this.document.addEventListener("visibilitychange", this.rs), this.inForeground = "visible" === this.document.visibilityState);
    }
    ks() {
        this.rs && (this.document.removeEventListener("visibilitychange", this.rs), this.rs = null);
    }
    /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */ ps() {
        var t;
        "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.ss = ()=>{
            // Note: In theory, this should be scheduled on the AsyncQueue since it
            // accesses internal state. We execute this code directly during shutdown
            // to make sure it gets a chance to run.
            this.Ns(), _util.isSafari() && navigator.appVersion.match(/Version\/1[45]/) && // On Safari 14 and 15, we do not run any cleanup actions as it might
            // trigger a bug that prevents Safari from re-opening IndexedDB during
            // the next page load.
            // See https://bugs.webkit.org/show_bug.cgi?id=226547
            this.Yn.enterRestrictedMode(/* purgeExistingTasks= */ !0), this.Yn.enqueueAndForget(()=>this.shutdown()
            );
        }, this.window.addEventListener("pagehide", this.ss));
    }
    Ms() {
        this.ss && (this.window.removeEventListener("pagehide", this.ss), this.ss = null);
    }
    /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */ xs(t) {
        var e;
        try {
            const n = null !== (null === (e = this.ws) || void 0 === e ? void 0 : e.getItem(this.Cs(t)));
            return O("IndexedDbPersistence", `Client '${t}' ${n ? "is" : "is not"} zombied in LocalStorage`), n;
        } catch (t195) {
            // Gracefully handle if LocalStorage isn't working.
            return F("IndexedDbPersistence", "Failed to get zombied client id.", t195), !1;
        }
    }
    /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */ Ns() {
        if (this.ws) try {
            this.ws.setItem(this.Cs(this.clientId), String(Date.now()));
        } catch (t) {
            // Gracefully handle if LocalStorage isn't available / working.
            F("Failed to set zombie client id.", t);
        }
    }
    /** Removes the zombied client entry if it exists. */ Os() {
        if (this.ws) try {
            this.ws.removeItem(this.Cs(this.clientId));
        } catch (t) {
        // Ignore
        }
    }
    Cs(t) {
        return `firestore_zombie_${this.persistenceKey}_${t}`;
    }
}
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */ function Jr(t) {
    return Di(t, "owner");
}
/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */ function Yr(t) {
    return Di(t, "clientMetadata");
}
/**
 * Generates a string used as a prefix when storing data in IndexedDB and
 * LocalStorage.
 */ function Xr(t, e) {
    // Use two different prefix formats:
    //   * firestore / persistenceKey / projectID . databaseID / ...
    //   * firestore / persistenceKey / projectID / ...
    // projectIDs are DNS-compatible names and cannot contain dots
    // so there's no danger of collisions.
    let n = t.projectId;
    return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */ class Zr {
    constructor(t, e, n){
        this.ds = t, this.Bs = e, this.indexManager = n;
    }
    /**
     * Get the local view of the document identified by `key`.
     *
     * @returns Local view of the document or null if we don't have any cached
     * state for it.
     */ Ls(t, e) {
        return this.Bs.getAllMutationBatchesAffectingDocumentKey(t, e).next((n)=>this.Us(t, e, n)
        );
    }
    /** Internal version of `getDocument` that allows reusing batches. */ Us(t196, e116, n) {
        return this.ds.getEntry(t196, e116).next((t)=>{
            for (const e of n)e.applyToLocalView(t);
            return t;
        });
    }
    // Returns the view of the given `docs` as they would appear after applying
    // all mutations in the given `batches`.
    qs(t, e) {
        t.forEach((t, n)=>{
            for (const t197 of e)t197.applyToLocalView(n);
        });
    }
    /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */ Ks(t, e117) {
        return this.ds.getEntries(t, e117).next((e)=>this.Gs(t, e).next(()=>e
            )
        );
    }
    /**
     * Applies the local view the given `baseDocs` without retrieving documents
     * from the local store.
     */ Gs(t198, e) {
        return this.Bs.getAllMutationBatchesAffectingDocumentKeys(t198, e).next((t)=>this.qs(e, t)
        );
    }
    /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction - The persistence transaction.
     * @param query - The query to match documents against.
     * @param offset - Read time and key to start scanning by (exclusive).
     */ Qs(t199, e, n) {
        /**
 * Returns whether the query matches a single document by path (rather than a
 * collection).
 */ return function(t) {
            return xt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
        }(e) ? this.js(t199, e.path) : qe(e) ? this.Ws(t199, e, n) : this.zs(t199, e, n);
    }
    js(t200, e118) {
        // Just do a simple document lookup.
        return this.Ls(t200, new xt(e118)).next((t)=>{
            let e = zn();
            return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
        });
    }
    Ws(t201, e119, n) {
        const s = e119.collectionGroup;
        let i = zn();
        return this.indexManager.getCollectionParents(t201, s).next((r6)=>pi.forEach(r6, (r)=>{
                const o = function(t, e) {
                    return new Me(e, /*collectionGroup=*/ null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                }(e119, r.child(s));
                return this.zs(t201, o, n).next((t202)=>{
                    t202.forEach((t, e)=>{
                        i = i.insert(t, e);
                    });
                });
            }).next(()=>i
            )
        );
    }
    zs(t204, e120, n52) {
        // Query the remote documents and overlay mutations.
        let s;
        return this.ds.getAllFromCollection(t204, e120.path, n52).next((n)=>(s = n, this.Bs.getAllMutationBatchesAffectingQuery(t204, e120))
        ).next((t)=>{
            for (const e of t)for (const t203 of e.mutations){
                const n = t203.key;
                let i = s.get(n);
                null == i && // Create invalid document to apply mutations on top of
                (i = ne.newInvalidDocument(n), s = s.insert(n, i)), En(t203, i, e.localWriteTime), i.isFoundDocument() || (s = s.remove(n));
            }
        }).next(()=>// Finally, filter out any documents that don't actually match
            // the query.
            (s.forEach((t, n)=>{
                He(e120, n) || (s = s.remove(t));
            }), s)
        );
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A set of changes to what documents are currently in view and out of view for
 * a given query. These changes are sent to the LocalStore by the View (via
 * the SyncEngine) and are used to pin / unpin documents as appropriate.
 */ class to {
    constructor(t, e, n, s){
        this.targetId = t, this.fromCache = e, this.Hs = n, this.Js = s;
    }
    static Ys(t, e) {
        let n = Xn(), s = Xn();
        for (const t205 of e.docChanges)switch(t205.type){
            case 0 /* Added */ :
                n = n.add(t205.doc.key);
                break;
            case 1 /* Removed */ :
                s = s.add(t205.doc.key);
        }
        return new to(t, e.fromCache, n, s);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A query engine that takes advantage of the target document mapping in the
 * QueryCache. Query execution is optimized by only reading the documents that
 * previously matched a query plus any documents that were edited after the
 * query was last listened to.
 *
 * There are some cases when this optimization is not guaranteed to produce
 * the same results as full collection scans. In these cases, query
 * processing falls back to full scans. These cases are:
 *
 * - Limit queries where a document that matched the query previously no longer
 *   matches the query.
 *
 * - Limit queries where a document edit may cause the document to sort below
 *   another document that is in the local cache.
 *
 * - Queries that have never been CURRENT or free of limbo documents.
 */ class eo {
    /** Sets the document view to query against. */ Xs(t) {
        this.Zs = t;
    }
    /** Returns all local documents matching the specified query. */ Qs(t206, e121, n, s) {
        // Queries that match all documents don't benefit from using
        // key-based lookups. It is more efficient to scan all documents in a
        // collection, rather than to perform individual lookups.
        return function(t) {
            return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
        }(e121) || n.isEqual(ct.min()) ? this.ti(t206, e121) : this.Zs.Ks(t206, s).next((i)=>{
            const r = this.ei(e121, i);
            return ($e(e121) || Be(e121)) && this.ni(e121.limitType, r, s, n) ? this.ti(t206, e121) : (k() <= _logger.LogLevel.DEBUG && O("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), ze(e121)), this.Zs.Qs(t206, e121, ae(n, -1)).next((t)=>// We merge `previousResults` into `updateResults`, since
                // `updateResults` is already a DocumentMap. If a document is
                // contained in both lists, then its contents are the same.
                (r.forEach((e)=>{
                    t = t.insert(e.key, e);
                }), t)
            ));
        });
    // Queries that have never seen a snapshot without limbo free documents
    // should also be run as a full collection scan.
    }
    /** Applies the query filter and sorting to the provided documents.  */ ei(t, e) {
        // Sort the documents and re-apply the query filter since previously
        // matching documents do not necessarily still match the query.
        let n = new qn(Ye(t));
        return e.forEach((e, s)=>{
            He(t, s) && (n = n.add(s));
        }), n;
    }
    /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param sortedPreviousResults - The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys - The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion - The version of the snapshot when the
     * query was last synchronized.
     */ ni(t, e, n, s) {
        // The query needs to be refilled if a previously matching document no
        // longer matches.
        if (n.size !== e.size) return !0;
        // Limit queries are not eligible for index-free query execution if there is
        // a potential that an older document from cache now sorts before a document
        // that was previously part of the limit. This, however, can only happen if
        // the document at the edge of the limit goes out of limit.
        // If a document that is not the limit boundary sorts differently,
        // the boundary of the limit itself did not change and documents from cache
        // will continue to be "rejected" by this boundary. Therefore, we can ignore
        // any modifications that don't affect the last document.
        const i = "F" /* First */  === t ? e.last() : e.first();
        return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
    }
    ti(t, e) {
        return k() <= _logger.LogLevel.DEBUG && O("QueryEngine", "Using full collection scan to execute query:", ze(e)), this.Zs.Qs(t, e, he.min());
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Implements `LocalStore` interface.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */ class no {
    constructor(/** Manages our in-memory or durable persistence. */ t207, e, n, s){
        this.persistence = t207, this.si = e, this.M = s, /**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */ this.ii = new Bn(rt), /** Maps a target to its targetID. */ // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.ri = new $n((t)=>_e(t)
        , me), /**
         * A per collection group index of the last read time processed by
         * `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */ this.oi = new Map, this.ui = t207.getRemoteDocumentCache(), this.fs = t207.getTargetCache(), this._s = t207.getBundleCache(), this.ai(n);
    }
    ai(t) {
        // TODO(indexing): Add spec tests that test these components change after a
        // user change
        this.indexManager = this.persistence.getIndexManager(t), this.Bs = this.persistence.getMutationQueue(t, this.indexManager), this.ci = new Zr(this.ui, this.Bs, this.indexManager), this.ui.setIndexManager(this.indexManager), this.si.Xs(this.ci);
    }
    collectGarbage(t) {
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e)=>t.collect(e, this.ii)
        );
    }
}
function so(/** Manages our in-memory or durable persistence. */ t, e, n, s) {
    return new no(t, e, n, s);
}
/**
 * Tells the LocalStore that the currently authenticated user has changed.
 *
 * In response the local store switches the mutation queue to the new user and
 * returns any resulting document changes.
 */ // PORTING NOTE: Android and iOS only return the documents affected by the
// change.
async function io(t208, e122) {
    const n = K(t208);
    return await n.persistence.runTransaction("Handle user change", "readonly", (t210)=>{
        // Swap out the mutation queue, grabbing the pending mutation batches
        // before and after.
        let s;
        return n.Bs.getAllMutationBatches(t210).next((i)=>(s = i, n.ai(e122), n.Bs.getAllMutationBatches(t210))
        ).next((e)=>{
            const i = [], r = [];
            // Union the old/new changed keys.
            let o = Xn();
            for (const t211 of s){
                i.push(t211.batchId);
                for (const e of t211.mutations)o = o.add(e.key);
            }
            for (const t209 of e){
                r.push(t209.batchId);
                for (const e of t209.mutations)o = o.add(e.key);
            }
            // Return the set of all (potentially) changed documents and the list
            // of mutation batch IDs that were affected by change.
            return n.ci.Ks(t210, o).next((t)=>({
                    hi: t,
                    removedBatchIds: i,
                    addedBatchIds: r
                })
            );
        });
    });
}
/* Accepts locally generated Mutations and commit them to storage. */ /**
 * Acknowledges the given batch.
 *
 * On the happy path when a batch is acknowledged, the local store will
 *
 *  + remove the batch from the mutation queue;
 *  + apply the changes to the remote document cache;
 *  + recalculate the latency compensated view implied by those changes (there
 *    may be mutations in the queue that affect the documents but haven't been
 *    acknowledged yet); and
 *  + give the changed documents back the sync engine
 *
 * @returns The resulting (modified) documents.
 */ function ro(t212, e123) {
    const n53 = K(t212);
    return n53.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t213)=>{
        const s28 = e123.batch.keys(), i15 = n53.ui.newChangeBuffer({
            trackRemovals: !0
        });
        return (function(t214, e124, n, s) {
            const i = n.batch, r7 = i.keys();
            let o = pi.resolve();
            return r7.forEach((t)=>{
                o = o.next(()=>s.getEntry(e124, t)
                ).next((e)=>{
                    const r = n.docVersions.get(t);
                    U(null !== r), e.version.compareTo(r) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && // We use the commitVersion as the readTime rather than the
                    // document's updateTime since the updateTime is not advanced
                    // for updates that do not modify the underlying document.
                    (e.setReadTime(n.commitVersion), s.addEntry(e)));
                });
            }), o.next(()=>t214.Bs.removeMutationBatch(e124, i)
            );
        })(n53, t213, e123, i15).next(()=>i15.apply(t213)
        ).next(()=>n53.Bs.performConsistencyCheck(t213)
        ).next(()=>n53.ci.Ks(t213, s28)
        );
    });
}
/**
 * Removes mutations from the MutationQueue for the specified batch;
 * LocalDocuments will be recalculated.
 *
 * @returns The resulting modified documents.
 */ /**
 * Returns the last consistent snapshot processed (used by the RemoteStore to
 * determine whether to buffer incoming snapshots from the backend).
 */ function oo(t215) {
    const e = K(t215);
    return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t)=>e.fs.getLastRemoteSnapshotVersion(t)
    );
}
/**
 * Updates the "ground-state" (remote) documents. We assume that the remote
 * event reflects any write batches that have been acknowledged or rejected
 * (i.e. we do not re-apply local mutations to updates from this event).
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */ function uo(t216, e125) {
    const n54 = K(t216), s29 = e125.snapshotVersion;
    let i = n54.ii;
    return n54.persistence.runTransaction("Apply remote event", "readwrite-primary", (t217)=>{
        const r8 = n54.ui.newChangeBuffer({
            trackRemovals: !0
        });
        // Reset newTargetDataByTargetMap in case this transaction gets re-run.
        i = n54.ii;
        const o = [];
        e125.targetChanges.forEach((r, u)=>{
            const a = i.get(u);
            if (!a) return;
            // Only update the remote keys if the target is still active. This
            // ensures that we can persist the updated target data along with
            // the updated assignment.
            o.push(n54.fs.removeMatchingKeys(t217, r.removedDocuments, u).next(()=>n54.fs.addMatchingKeys(t217, r.addedDocuments, u)
            ));
            let c = a.withSequenceNumber(t217.currentSequenceNumber);
            e125.targetMismatches.has(u) ? c = c.withResumeToken(pt.EMPTY_BYTE_STRING, ct.min()).withLastLimboFreeSnapshotVersion(ct.min()) : r.resumeToken.approximateByteSize() > 0 && (c = c.withResumeToken(r.resumeToken, s29)), i = i.insert(u, c), // Update the target data if there are target changes (or if
            // sufficient time has passed since the last update).
            /**
 * Returns true if the newTargetData should be persisted during an update of
 * an active target. TargetData should always be persisted when a target is
 * being released and should not call this function.
 *
 * While the target is active, TargetData updates can be omitted when nothing
 * about the target has changed except metadata like the resume token or
 * snapshot version. Occasionally it's worth the extra write to prevent these
 * values from getting too stale after a crash, but this doesn't have to be
 * too frequent.
 */ function(t, e, n) {
                // Always persist target data if we don't already have a resume token.
                if (0 === t.resumeToken.approximateByteSize()) return !0;
                // Don't allow resume token changes to be buffered indefinitely. This
                // allows us to be reasonably up-to-date after a crash and avoids needing
                // to loop over all active queries on shutdown. Especially in the browser
                // we may not get time to do anything interesting while the current tab is
                // closing.
                if (e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8) return !0;
                // Otherwise if the only thing that has changed about a target is its resume
                // token it's not worth persisting. Note that the RemoteStore keeps an
                // in-memory view of the currently active targets which includes the current
                // resume token, so stream failure or user changes will still use an
                // up-to-date resume token regardless of what we do here.
                return n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0;
            }(a, c, r) && o.push(n54.fs.updateTargetData(t217, c));
        });
        let u1 = jn();
        // HACK: The only reason we allow a null snapshot version is so that we
        // can synthesize remote events when we get permission denied errors while
        // trying to resolve the state of a locally cached document that is in
        // limbo.
        if (e125.documentUpdates.forEach((s)=>{
            e125.resolvedLimboDocuments.has(s) && o.push(n54.persistence.referenceDelegate.updateLimboDocument(t217, s));
        }), // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
        // documents in advance in a single call.
        o.push(ao(t217, r8, e125.documentUpdates).next((t)=>{
            u1 = t;
        })), !s29.isEqual(ct.min())) {
            const e = n54.fs.getLastRemoteSnapshotVersion(t217).next((e)=>n54.fs.setTargetsMetadata(t217, t217.currentSequenceNumber, s29)
            );
            o.push(e);
        }
        return pi.waitFor(o).next(()=>r8.apply(t217)
        ).next(()=>n54.ci.Gs(t217, u1)
        ).next(()=>u1
        );
    }).then((t)=>(n54.ii = i, t)
    );
}
/**
 * Populates document change buffer with documents from backend or a bundle.
 * Returns the document changes resulting from applying those documents.
 *
 * @param txn - Transaction to use to read existing documents from storage.
 * @param documentBuffer - Document buffer to collect the resulted changes to be
 *        applied to storage.
 * @param documents - Documents to be applied.
 * @param globalVersion - A `SnapshotVersion` representing the read time if all
 *        documents have the same read time.
 * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
 *        have their own read time.
 *
 * Note: this function will use `documentVersions` if it is defined;
 * when it is not defined, resorts to `globalVersion`.
 */ function ao(t218, e, n55) {
    let s30 = Xn();
    return n55.forEach((t)=>s30 = s30.add(t)
    ), e.getEntries(t218, s30).next((t)=>{
        let s = jn();
        return n55.forEach((n, i)=>{
            const r = t.get(n);
            // Note: The order of the steps below is important, since we want
            // to ensure that rejected limbo resolutions (which fabricate
            // NoDocuments with SnapshotVersion.min()) never add documents to
            // cache.
            i.isNoDocument() && i.version.isEqual(ct.min()) ? // NoDocuments with SnapshotVersion.min() are used in manufactured
            // events. We remove these documents from cache since we lost
            // access.
            (e.removeEntry(n, i.readTime), s = s.insert(n, i)) : !r.isValidDocument() || i.version.compareTo(r.version) > 0 || 0 === i.version.compareTo(r.version) && r.hasPendingWrites ? (e.addEntry(i), s = s.insert(n, i)) : O("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", r.version, " Watch version:", i.version);
        }), s;
    });
}
/**
 * Gets the mutation batch after the passed in batchId in the mutation queue
 * or null if empty.
 * @param afterBatchId - If provided, the batch to search after.
 * @returns The next mutation or null if there wasn't one.
 */ function co(t219, e) {
    const n = K(t219);
    return n.persistence.runTransaction("Get next mutation batch", "readonly", (t)=>(void 0 === e && (e = -1), n.Bs.getNextMutationBatchAfterBatchId(t, e))
    );
}
/**
 * Reads the current value of a Document with a given key or null if not
 * found - used for testing.
 */ /**
 * Assigns the given target an internal ID so that its results can be pinned so
 * they don't get GC'd. A target must be allocated in the local store before
 * the store can be used to manage its view.
 *
 * Allocating an already allocated `Target` will return the existing `TargetData`
 * for that `Target`.
 */ function ho(t220, e) {
    const n = K(t220);
    return n.persistence.runTransaction("Allocate target", "readwrite", (t)=>{
        let s;
        return n.fs.getTargetData(t, e).next((i16)=>i16 ? // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            (s = i16, pi.resolve(s)) : n.fs.allocateTargetId(t).next((i)=>(s = new ki(e, i, 0 /* Listen */ , t.currentSequenceNumber), n.fs.addTargetData(t, s).next(()=>s
                ))
            )
        );
    }).then((t)=>{
        // If Multi-Tab is enabled, the existing target data may be newer than
        // the in-memory data
        const s = n.ii.get(t.targetId);
        return (null === s || t.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.ii = n.ii.insert(t.targetId, t), n.ri.set(e, t.targetId)), t;
    });
}
/**
 * Returns the TargetData as seen by the LocalStore, including updates that may
 * have not yet been persisted to the TargetCache.
 */ // Visible for testing.
/**
 * Unpins all the documents associated with the given target. If
 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
 * directly removes the associated target data from the target cache.
 *
 * Releasing a non-existing `Target` is a no-op.
 */ // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
async function lo(t221, e, n) {
    const s = K(t221), i = s.ii.get(e), r = n ? "readwrite" : "readwrite-primary";
    try {
        n || await s.persistence.runTransaction("Release target", r, (t)=>s.persistence.referenceDelegate.removeTarget(t, i)
        );
    } catch (t) {
        if (!Ri(t)) throw t;
        // All `releaseTarget` does is record the final metadata state for the
        // target, but we've been recording this periodically during target
        // activity. If we lose this write this could cause a very slight
        // difference in the order of target deletion during GC, but we
        // don't define exact LRU semantics so this is acceptable.
        O("LocalStore", `Failed to update sequence numbers for target ${e}: ${t}`);
    }
    s.ii = s.ii.remove(e), s.ri.delete(i.target);
}
/**
 * Runs the specified query against the local store and returns the results,
 * potentially taking advantage of query data from previous executions (such
 * as the set of remote keys).
 *
 * @param usePreviousResults - Whether results from previous executions can
 * be used to optimize this query execution.
 */ function fo(t222, e126, n56) {
    const s31 = K(t222);
    let i17 = ct.min(), r = Xn();
    return s31.persistence.runTransaction("Execute query", "readonly", (t223)=>(function(t, e, n) {
            const s = K(t), i = s.ri.get(n);
            return void 0 !== i ? pi.resolve(s.ii.get(i)) : s.fs.getTargetData(e, n);
        })(s31, t223, Ge(e126)).next((e)=>{
            if (e) return i17 = e.lastLimboFreeSnapshotVersion, s31.fs.getMatchingKeysForTargetId(t223, e.targetId).next((t)=>{
                r = t;
            });
        }).next(()=>s31.si.Qs(t223, e126, n56 ? i17 : ct.min(), n56 ? r : Xn())
        ).next((t)=>(mo(s31, Je(e126), t), {
                documents: t,
                li: r
            })
        )
    );
}
// PORTING NOTE: Multi-Tab only.
function _o(t224, e) {
    const n = K(t224), s = K(n.fs), i = n.ii.get(e);
    return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (t225)=>s.Et(t225, e).next((t)=>t ? t.target : null
        )
    );
}
/**
 * Returns the set of documents that have been updated since the last call.
 * If this is the first call, returns the set of changes since client
 * initialization. Further invocations will return document that have changed
 * since the prior call.
 */ // PORTING NOTE: Multi-Tab only.
function wo(t226, e) {
    const n = K(t226), s = n.oi.get(e) || ct.min();
    // Get the current maximum read time for the collection. This should always
    // exist, but to reduce the chance for regressions we default to
    // SnapshotVersion.Min()
    // TODO(indexing): Consider removing the default value.
    return n.persistence.runTransaction("Get new document changes", "readonly", (t)=>n.ui.getAllFromCollectionGroup(t, e, ae(s, -1), /* limit= */ Number.MAX_SAFE_INTEGER)
    ).then((t)=>(mo(n, e, t), t)
    );
}
/** Sets the collection group's maximum read time from the given documents. */ // PORTING NOTE: Multi-Tab only.
function mo(t, e127, n) {
    let s = ct.min();
    n.forEach((t, e)=>{
        e.readTime.compareTo(s) > 0 && (s = e.readTime);
    }), t.oi.set(e127, s);
}
/**
 * Creates a new target using the given bundle name, which will be used to
 * hold the keys of all documents from the bundle in query-document mappings.
 * This ensures that the loaded documents do not get garbage collected
 * right away.
 */ /**
 * Applies the documents from a bundle to the "ground-state" (remote)
 * documents.
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */ async function go(t228, e128, n, s) {
    const i = K(t228);
    let r = Xn(), o = jn();
    for (const t227 of n){
        const n = e128.fi(t227.metadata.name);
        t227.document && (r = r.add(n));
        const s = e128.di(t227);
        s.setReadTime(e128._i(t227.metadata.readTime)), o = o.insert(n, s);
    }
    const u = i.ui.newChangeBuffer({
        trackRemovals: !0
    }), a = await ho(i, function(t) {
        // It is OK that the path used for the query is not valid, because this will
        // not be read and queried.
        return Ge(Fe(_t.fromString(`__bundle__/docs/${t}`)));
    }(s));
    // Allocates a target to hold all document keys from the bundle, such that
    // they will not get garbage collected right away.
    return i.persistence.runTransaction("Apply bundle documents", "readwrite", (t)=>ao(t, u, o).next((e)=>(u.apply(t), e)
        ).next((e)=>i.fs.removeMatchingKeysForTargetId(t, a.targetId).next(()=>i.fs.addMatchingKeys(t, r, a.targetId)
            ).next(()=>i.ci.Gs(t, e)
            ).next(()=>e
            )
        )
    );
}
/**
 * Returns a promise of a boolean to indicate if the given bundle has already
 * been loaded and the create time is newer than the current loading bundle.
 */ /**
 * Saves the given `NamedQuery` to local persistence.
 */ async function yo(t229, e, n = Xn()) {
    // Allocate a target for the named query such that it can be resumed
    // from associated read time if users use it to listen.
    // NOTE: this also means if no corresponding target exists, the new target
    // will remain active and will not get collected, unless users happen to
    // unlisten the query somehow.
    const s = await ho(t229, Ge(Gi(e.bundledQuery))), i = K(t229);
    return i.persistence.runTransaction("Save named query", "readwrite", (t)=>{
        const r = ms(e.readTime);
        // Simply save the query itself if it is older than what the SDK already
        // has.
        if (s.snapshotVersion.compareTo(r) >= 0) return i._s.saveNamedQuery(t, e);
        // Update existing target data because the query from the bundle is newer.
        const o = s.withResumeToken(pt.EMPTY_BYTE_STRING, r);
        return i.ii = i.ii.insert(o.targetId, o), i.fs.updateTargetData(t, o).next(()=>i.fs.removeMatchingKeysForTargetId(t, s.targetId)
        ).next(()=>i.fs.addMatchingKeys(t, n, s.targetId)
        ).next(()=>i._s.saveNamedQuery(t, e)
        );
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class po {
    constructor(t){
        this.M = t, this.wi = new Map, this.mi = new Map;
    }
    getBundleMetadata(t, e) {
        return pi.resolve(this.wi.get(e));
    }
    saveBundleMetadata(t, e) {
        /** Decodes a BundleMetadata proto into a BundleMetadata object. */ var n;
        return this.wi.set(e.id, {
            id: (n = e).id,
            version: n.version,
            createTime: ms(n.createTime)
        }), pi.resolve();
    }
    getNamedQuery(t, e) {
        return pi.resolve(this.mi.get(e));
    }
    saveNamedQuery(t230, e) {
        return this.mi.set(e.name, function(t) {
            return {
                name: t.name,
                query: Gi(t.bundledQuery),
                readTime: ms(t.readTime)
            };
        }(e)), pi.resolve();
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory implementation of DocumentOverlayCache.
 */ class Io {
    constructor(){
        // A map sorted by DocumentKey, whose value is a pair of the largest batch id
        // for the overlay and the overlay itself.
        this.overlays = new Bn(xt.comparator), this.gi = new Map;
    }
    getOverlay(t, e) {
        return pi.resolve(this.overlays.get(e));
    }
    saveOverlays(t, e, n) {
        return n.forEach((n, s)=>{
            this.Xt(t, e, s);
        }), pi.resolve();
    }
    removeOverlaysForBatchId(t231, e, n) {
        const s = this.gi.get(n);
        return void 0 !== s && (s.forEach((t)=>this.overlays = this.overlays.remove(t)
        ), this.gi.delete(n)), pi.resolve();
    }
    getOverlaysForCollection(t, e, n) {
        const s = Hn(), i = e.length + 1, r = new xt(e.child("")), o = this.overlays.getIteratorFrom(r);
        for(; o.hasNext();){
            const t = o.getNext().value, r = t.getKey();
            if (!e.isPrefixOf(r.path)) break;
            // Documents from sub-collections
            r.path.length === i && t.largestBatchId > n && s.set(t.getKey(), t);
        }
        return pi.resolve(s);
    }
    getOverlaysForCollectionGroup(t232, e129, n, s) {
        let i = new Bn((t, e)=>t - e
        );
        const r = this.overlays.getIterator();
        for(; r.hasNext();){
            const t = r.getNext().value;
            if (t.getKey().getCollectionGroup() === e129 && t.largestBatchId > n) {
                let e = i.get(t.largestBatchId);
                null === e && (e = Hn(), i = i.insert(t.largestBatchId, e)), e.set(t.getKey(), t);
            }
        }
        const o = Hn(), u = i.getIterator();
        for(; u.hasNext();){
            if (u.getNext().value.forEach((t, e)=>o.set(t, e)
            ), o.size() >= s) break;
        }
        return pi.resolve(o);
    }
    Xt(t, e, n) {
        if (null === n) return;
        // Remove the association of the overlay to its batch id.
        const s = this.overlays.get(n.key);
        if (null !== s) {
            const t = this.gi.get(s.largestBatchId).delete(n.key);
            this.gi.set(s.largestBatchId, t);
        }
        this.overlays = this.overlays.insert(n.key, new Ni(e, n));
        // Create the association of this overlay to the given largestBatchId.
        let i = this.gi.get(e);
        void 0 === i && (i = Xn(), this.gi.set(e, i)), this.gi.set(e, i.add(n.key));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */ class To {
    constructor(){
        // A set of outstanding references to a document sorted by key.
        this.yi = new qn(Eo.pi), // A set of outstanding references to a document sorted by target id.
        this.Ii = new qn(Eo.Ti);
    }
    /** Returns true if the reference set contains no references. */ isEmpty() {
        return this.yi.isEmpty();
    }
    /** Adds a reference to the given document key for the given ID. */ addReference(t, e) {
        const n = new Eo(t, e);
        this.yi = this.yi.add(n), this.Ii = this.Ii.add(n);
    }
    /** Add references to the given document keys for the given ID. */ Ei(t233, e) {
        t233.forEach((t)=>this.addReference(t, e)
        );
    }
    /**
     * Removes a reference to the given document key for the given
     * ID.
     */ removeReference(t, e) {
        this.Ai(new Eo(t, e));
    }
    Ri(t234, e) {
        t234.forEach((t)=>this.removeReference(t, e)
        );
    }
    /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */ Pi(t235) {
        const e = new xt(new _t([])), n = new Eo(e, t235), s = new Eo(e, t235 + 1), i = [];
        return this.Ii.forEachInRange([
            n,
            s
        ], (t)=>{
            this.Ai(t), i.push(t.key);
        }), i;
    }
    bi() {
        this.yi.forEach((t)=>this.Ai(t)
        );
    }
    Ai(t) {
        this.yi = this.yi.delete(t), this.Ii = this.Ii.delete(t);
    }
    Vi(t236) {
        const e = new xt(new _t([])), n = new Eo(e, t236), s = new Eo(e, t236 + 1);
        let i = Xn();
        return this.Ii.forEachInRange([
            n,
            s
        ], (t)=>{
            i = i.add(t.key);
        }), i;
    }
    containsKey(t) {
        const e = new Eo(t, 0), n = this.yi.firstAfterOrEqual(e);
        return null !== n && t.isEqual(n.key);
    }
}
class Eo {
    constructor(t, e){
        this.key = t, this.vi = e;
    }
    /** Compare by key then by ID */ static pi(t, e) {
        return xt.comparator(t.key, e.key) || rt(t.vi, e.vi);
    }
    /** Compare by ID then by key */ static Ti(t, e) {
        return rt(t.vi, e.vi) || xt.comparator(t.key, e.key);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Ao {
    constructor(t, e){
        this.indexManager = t, this.referenceDelegate = e, /**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */ this.Bs = [], /** Next value to use when assigning sequential IDs to each mutation batch. */ this.Si = 1, /** An ordered mapping between documents and the mutations batch IDs. */ this.Di = new qn(Eo.pi);
    }
    checkEmpty(t) {
        return pi.resolve(0 === this.Bs.length);
    }
    addMutationBatch(t, e, n, s) {
        const i = this.Si;
        this.Si++, this.Bs.length > 0 && this.Bs[this.Bs.length - 1];
        const r = new Ci(i, e, n, s);
        this.Bs.push(r);
        // Track references by document key and index collection parents.
        for (const e130 of s)this.Di = this.Di.add(new Eo(e130.key, i)), this.indexManager.addToCollectionParentIndex(t, e130.key.path.popLast());
        return pi.resolve(r);
    }
    lookupMutationBatch(t, e) {
        return pi.resolve(this.Ci(e));
    }
    getNextMutationBatchAfterBatchId(t, e) {
        const n = e + 1, s = this.xi(n), i = s < 0 ? 0 : s;
        // The requested batchId may still be out of range so normalize it to the
        // start of the queue.
        return pi.resolve(this.Bs.length > i ? this.Bs[i] : null);
    }
    getHighestUnacknowledgedBatchId() {
        return pi.resolve(0 === this.Bs.length ? -1 : this.Si - 1);
    }
    getAllMutationBatches(t) {
        return pi.resolve(this.Bs.slice());
    }
    getAllMutationBatchesAffectingDocumentKey(t237, e131) {
        const n = new Eo(e131, 0), s = new Eo(e131, Number.POSITIVE_INFINITY), i = [];
        return this.Di.forEachInRange([
            n,
            s
        ], (t)=>{
            const e = this.Ci(t.vi);
            i.push(e);
        }), pi.resolve(i);
    }
    getAllMutationBatchesAffectingDocumentKeys(t238, e132) {
        let n = new qn(rt);
        return e132.forEach((t239)=>{
            const e = new Eo(t239, 0), s = new Eo(t239, Number.POSITIVE_INFINITY);
            this.Di.forEachInRange([
                e,
                s
            ], (t)=>{
                n = n.add(t.vi);
            });
        }), pi.resolve(this.Ni(n));
    }
    getAllMutationBatchesAffectingQuery(t240, e133) {
        // Use the query path as a prefix for testing if a document matches the
        // query.
        const n = e133.path, s = n.length + 1;
        // Construct a document reference for actually scanning the index. Unlike
        // the prefix the document key in this reference must have an even number of
        // segments. The empty segment can be used a suffix of the query path
        // because it precedes all other segments in an ordered traversal.
        let i = n;
        xt.isDocumentKey(i) || (i = i.child(""));
        const r = new Eo(new xt(i), 0);
        // Find unique batchIDs referenced by all documents potentially matching the
        // query.
        let o = new qn(rt);
        return this.Di.forEachWhile((t)=>{
            const e = t.key.path;
            return !!n.isPrefixOf(e) && // Rows with document keys more than one segment longer than the query
            // path can't be matches. For example, a query on 'rooms' can't match
            // the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            (e.length === s && (o = o.add(t.vi)), !0);
        }, r), pi.resolve(this.Ni(o));
    }
    Ni(t241) {
        // Construct an array of matching batches, sorted by batchID to ensure that
        // multiple mutations affecting the same document key are applied in order.
        const e = [];
        return t241.forEach((t)=>{
            const n = this.Ci(t);
            null !== n && e.push(n);
        }), e;
    }
    removeMutationBatch(t, e) {
        U(0 === this.ki(e.batchId, "removed")), this.Bs.shift();
        let n = this.Di;
        return pi.forEach(e.mutations, (s)=>{
            const i = new Eo(s.key, e.batchId);
            return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(t, s.key);
        }).next(()=>{
            this.Di = n;
        });
    }
    _n(t) {
    // No-op since the memory mutation queue does not maintain a separate cache.
    }
    containsKey(t, e) {
        const n = new Eo(e, 0), s = this.Di.firstAfterOrEqual(n);
        return pi.resolve(e.isEqual(s && s.key));
    }
    performConsistencyCheck(t) {
        return this.Bs.length, pi.resolve();
    }
    /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId - The batchId to search for
     * @param action - A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */ ki(t, e) {
        return this.xi(t);
    }
    /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @returns The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */ xi(t) {
        if (0 === this.Bs.length) // As an index this is past the end of the queue
        return 0;
        // Examine the front of the queue to figure out the difference between the
        // batchId and indexes in the array. Note that since the queue is ordered
        // by batchId, if the first batch has a larger batchId then the requested
        // batchId doesn't exist in the queue.
        return t - this.Bs[0].batchId;
    }
    /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */ Ci(t) {
        const e = this.xi(t);
        if (e < 0 || e >= this.Bs.length) return null;
        return this.Bs[e];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newMemoryRemoteDocumentCache()`.
 */ class Ro {
    /**
     * @param sizer - Used to assess the size of a document. For eager GC, this is
     * expected to just return 0 to avoid unnecessarily doing the work of
     * calculating the size.
     */ constructor(t){
        this.Mi = t, /** Underlying cache of documents and their read times. */ this.docs = new Bn(xt.comparator), /** Size of all cached documents. */ this.size = 0;
    }
    setIndexManager(t) {
        this.indexManager = t;
    }
    /**
     * Adds the supplied entry to the cache and updates the cache size as appropriate.
     *
     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */ addEntry(t, e) {
        const n = e.key, s = this.docs.get(n), i = s ? s.size : 0, r = this.Mi(e);
        return this.docs = this.docs.insert(n, {
            document: e.mutableCopy(),
            size: r
        }), this.size += r - i, this.indexManager.addToCollectionParentIndex(t, n.path.popLast());
    }
    /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */ removeEntry(t) {
        const e = this.docs.get(t);
        e && (this.docs = this.docs.remove(t), this.size -= e.size);
    }
    getEntry(t, e) {
        const n = this.docs.get(e);
        return pi.resolve(n ? n.document.mutableCopy() : ne.newInvalidDocument(e));
    }
    getEntries(t242, e134) {
        let n = jn();
        return e134.forEach((t)=>{
            const e = this.docs.get(t);
            n = n.insert(t, e ? e.document.mutableCopy() : ne.newInvalidDocument(t));
        }), pi.resolve(n);
    }
    getAllFromCollection(t, e, n) {
        let s = jn();
        // Documents are ordered by key, so we can use a prefix scan to narrow down
        // the documents we need to match the query against.
        const i = new xt(e.child("")), r = this.docs.getIteratorFrom(i);
        for(; r.hasNext();){
            const { key: t , value: { document: i  }  } = r.getNext();
            if (!e.isPrefixOf(t.path)) break;
            t.path.length > e.length + 1 || le(ce(i), n) <= 0 || (s = s.insert(i.key, i.mutableCopy()));
        }
        return pi.resolve(s);
    }
    getAllFromCollectionGroup(t, e, n, s) {
        // This method should only be called from the IndexBackfiller if persistence
        // is enabled.
        L();
    }
    Oi(t243, e) {
        return pi.forEach(this.docs, (t)=>e(t)
        );
    }
    newChangeBuffer(t) {
        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
        // a separate changelog and does not need special handling for removals.
        return new Po(this);
    }
    getSize(t) {
        return pi.resolve(this.size);
    }
}
/**
 * Creates a new memory-only RemoteDocumentCache.
 *
 * @param sizer - Used to assess the size of a document. For eager GC, this is
 * expected to just return 0 to avoid unnecessarily doing the work of
 * calculating the size.
 */ /**
 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
 */ class Po extends $r {
    constructor(t){
        super(), this.Kn = t;
    }
    applyChanges(t) {
        const e = [];
        return this.changes.forEach((n, s)=>{
            s.isValidDocument() ? e.push(this.Kn.addEntry(t, s)) : this.Kn.removeEntry(n);
        }), pi.waitFor(e);
    }
    getFromCache(t, e) {
        return this.Kn.getEntry(t, e);
    }
    getAllFromCache(t, e) {
        return this.Kn.getEntries(t, e);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class bo {
    constructor(t244){
        this.persistence = t244, /**
         * Maps a target to the data about that target
         */ this.Fi = new $n((t)=>_e(t)
        , me), /** The last received snapshot version. */ this.lastRemoteSnapshotVersion = ct.min(), /** The highest numbered target ID encountered. */ this.highestTargetId = 0, /** The highest sequence number encountered. */ this.$i = 0, /**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */ this.Bi = new To, this.targetCount = 0, this.Li = br.gn();
    }
    forEachTarget(t, e) {
        return this.Fi.forEach((t, n)=>e(n)
        ), pi.resolve();
    }
    getLastRemoteSnapshotVersion(t) {
        return pi.resolve(this.lastRemoteSnapshotVersion);
    }
    getHighestSequenceNumber(t) {
        return pi.resolve(this.$i);
    }
    allocateTargetId(t) {
        return this.highestTargetId = this.Li.next(), pi.resolve(this.highestTargetId);
    }
    setTargetsMetadata(t, e, n) {
        return n && (this.lastRemoteSnapshotVersion = n), e > this.$i && (this.$i = e), pi.resolve();
    }
    Tn(t) {
        this.Fi.set(t.target, t);
        const e = t.targetId;
        e > this.highestTargetId && (this.Li = new br(e), this.highestTargetId = e), t.sequenceNumber > this.$i && (this.$i = t.sequenceNumber);
    }
    addTargetData(t, e) {
        return this.Tn(e), this.targetCount += 1, pi.resolve();
    }
    updateTargetData(t, e) {
        return this.Tn(e), pi.resolve();
    }
    removeTargetData(t, e) {
        return this.Fi.delete(e.target), this.Bi.Pi(e.targetId), this.targetCount -= 1, pi.resolve();
    }
    removeTargets(t, e, n) {
        let s = 0;
        const i = [];
        return this.Fi.forEach((r, o)=>{
            o.sequenceNumber <= e && null === n.get(o.targetId) && (this.Fi.delete(r), i.push(this.removeMatchingKeysForTargetId(t, o.targetId)), s++);
        }), pi.waitFor(i).next(()=>s
        );
    }
    getTargetCount(t) {
        return pi.resolve(this.targetCount);
    }
    getTargetData(t, e) {
        const n = this.Fi.get(e) || null;
        return pi.resolve(n);
    }
    addMatchingKeys(t, e, n) {
        return this.Bi.Ei(e, n), pi.resolve();
    }
    removeMatchingKeys(t, e135, n) {
        this.Bi.Ri(e135, n);
        const s = this.persistence.referenceDelegate, i = [];
        return s && e135.forEach((e)=>{
            i.push(s.markPotentiallyOrphaned(t, e));
        }), pi.waitFor(i);
    }
    removeMatchingKeysForTargetId(t, e) {
        return this.Bi.Pi(e), pi.resolve();
    }
    getMatchingKeysForTargetId(t, e) {
        const n = this.Bi.Vi(e);
        return pi.resolve(n);
    }
    containsKey(t, e) {
        return pi.resolve(this.Bi.containsKey(e));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A memory-backed instance of Persistence. Data is stored only in RAM and
 * not persisted across sessions.
 */ class Vo {
    /**
     * The constructor accepts a factory for creating a reference delegate. This
     * allows both the delegate and this instance to have strong references to
     * each other without having nullable fields that would then need to be
     * checked or asserted on every access.
     */ constructor(t245, e){
        this.Ui = {}, this.overlays = {}, this.es = new nt(0), this.ns = !1, this.ns = !0, this.referenceDelegate = t245(this), this.fs = new bo(this);
        this.indexManager = new cr, this.ds = function(t) {
            return new Ro(t);
        }((t)=>this.referenceDelegate.qi(t)
        ), this.M = new Mi(e), this._s = new po(this.M);
    }
    start() {
        return Promise.resolve();
    }
    shutdown() {
        // No durable state to ensure is closed on shutdown.
        return this.ns = !1, Promise.resolve();
    }
    get started() {
        return this.ns;
    }
    setDatabaseDeletedListener() {
    // No op.
    }
    setNetworkEnabled() {
    // No op.
    }
    getIndexManager(t) {
        // We do not currently support indices for memory persistence, so we can
        // return the same shared instance of the memory index manager.
        return this.indexManager;
    }
    getDocumentOverlayCache(t) {
        let e = this.overlays[t.toKey()];
        return e || (e = new Io, this.overlays[t.toKey()] = e), e;
    }
    getMutationQueue(t, e) {
        let n = this.Ui[t.toKey()];
        return n || (n = new Ao(e, this.referenceDelegate), this.Ui[t.toKey()] = n), n;
    }
    getTargetCache() {
        return this.fs;
    }
    getRemoteDocumentCache() {
        return this.ds;
    }
    getBundleCache() {
        return this._s;
    }
    runTransaction(t246, e, n) {
        O("MemoryPersistence", "Starting transaction:", t246);
        const s = new vo(this.es.next());
        return this.referenceDelegate.Ki(), n(s).next((t)=>this.referenceDelegate.Gi(s).next(()=>t
            )
        ).toPromise().then((t)=>(s.raiseOnCommittedEvent(), t)
        );
    }
    Qi(t, e) {
        return pi.or(Object.values(this.Ui).map((n)=>()=>n.containsKey(t, e)
        ));
    }
}
/**
 * Memory persistence is not actually transactional, but future implementations
 * may have transaction-scoped state.
 */ class vo extends yi {
    constructor(t){
        super(), this.currentSequenceNumber = t;
    }
}
class So {
    constructor(t){
        this.persistence = t, /** Tracks all documents that are active in Query views. */ this.ji = new To, /** The list of documents that are potentially GCed after each transaction. */ this.Wi = null;
    }
    static zi(t) {
        return new So(t);
    }
    get Hi() {
        if (this.Wi) return this.Wi;
        throw L();
    }
    addReference(t, e, n) {
        return this.ji.addReference(n, e), this.Hi.delete(n.toString()), pi.resolve();
    }
    removeReference(t, e, n) {
        return this.ji.removeReference(n, e), this.Hi.add(n.toString()), pi.resolve();
    }
    markPotentiallyOrphaned(t, e) {
        return this.Hi.add(e.toString()), pi.resolve();
    }
    removeTarget(t247, e) {
        this.ji.Pi(e.targetId).forEach((t)=>this.Hi.add(t.toString())
        );
        const n = this.persistence.getTargetCache();
        return n.getMatchingKeysForTargetId(t247, e.targetId).next((t248)=>{
            t248.forEach((t)=>this.Hi.add(t.toString())
            );
        }).next(()=>n.removeTargetData(t247, e)
        );
    }
    Ki() {
        this.Wi = new Set;
    }
    Gi(t249) {
        // Remove newly orphaned documents.
        const e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
        return pi.forEach(this.Hi, (n)=>{
            const s = xt.fromPath(n);
            return this.Ji(t249, s).next((t)=>{
                t || e.removeEntry(s, ct.min());
            });
        }).next(()=>(this.Wi = null, e.apply(t249))
        );
    }
    updateLimboDocument(t250, e) {
        return this.Ji(t250, e).next((t)=>{
            t ? this.Hi.delete(e.toString()) : this.Hi.add(e.toString());
        });
    }
    qi(t) {
        // For eager GC, we don't care about the document size, there are no size thresholds.
        return 0;
    }
    Ji(t, e) {
        return pi.or([
            ()=>pi.resolve(this.ji.containsKey(e))
            ,
            ()=>this.persistence.getTargetCache().containsKey(t, e)
            ,
            ()=>this.persistence.Qi(t, e)
        ]);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>
/** Assembles the key for a client state in WebStorage */ function Do(t, e) {
    return `firestore_clients_${t}_${e}`;
}
// The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.
/** Assembles the key for a mutation batch in WebStorage */ function Co(t, e, n) {
    let s = `firestore_mutations_${t}_${n}`;
    return e.isAuthenticated() && (s += `_${e.uid}`), s;
}
// The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>
/** Assembles the key for a query state in WebStorage */ function xo(t, e) {
    return `firestore_targets_${t}_${e}`;
}
// The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>
/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */ // Visible for testing
class No {
    constructor(t, e, n, s){
        this.user = t, this.batchId = e, this.state = n, this.error = s;
    }
    /**
     * Parses a MutationMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Yi(t, e, n) {
        const s = JSON.parse(n);
        let i, r = "object" == typeof s && -1 !== [
            "pending",
            "acknowledged",
            "rejected"
        ].indexOf(s.state) && (void 0 === s.error || "object" == typeof s.error);
        return r && s.error && (r = "string" == typeof s.error.message && "string" == typeof s.error.code, r && (i = new Q(s.error.code, s.error.message))), r ? new No(t, e, s.state, i) : (F("SharedClientState", `Failed to parse mutation state for ID '${e}': ${n}`), null);
    }
    Xi() {
        const t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }
}
/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */ // Visible for testing
class ko {
    constructor(t, e, n){
        this.targetId = t, this.state = e, this.error = n;
    }
    /**
     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Yi(t, e) {
        const n = JSON.parse(e);
        let s, i = "object" == typeof n && -1 !== [
            "not-current",
            "current",
            "rejected"
        ].indexOf(n.state) && (void 0 === n.error || "object" == typeof n.error);
        return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, i && (s = new Q(n.error.code, n.error.message))), i ? new ko(t, n.state, s) : (F("SharedClientState", `Failed to parse target state for ID '${t}': ${e}`), null);
    }
    Xi() {
        const t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }
}
/**
 * This class represents the immutable ClientState for a client read from
 * WebStorage, containing the list of active query targets.
 */ class Mo {
    constructor(t, e){
        this.clientId = t, this.activeTargetIds = e;
    }
    /**
     * Parses a RemoteClientState from the JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Yi(t, e) {
        const n = JSON.parse(e);
        let s = "object" == typeof n && n.activeTargetIds instanceof Array, i = ts();
        for(let t251 = 0; s && t251 < n.activeTargetIds.length; ++t251)s = Ct(n.activeTargetIds[t251]), i = i.add(n.activeTargetIds[t251]);
        return s ? new Mo(t, i) : (F("SharedClientState", `Failed to parse client data for instance '${t}': ${e}`), null);
    }
}
/**
 * This class represents the online state for all clients participating in
 * multi-tab. The online state is only written to by the primary client, and
 * used in secondary clients to update their query views.
 */ class Oo {
    constructor(t, e){
        this.clientId = t, this.onlineState = e;
    }
    /**
     * Parses a SharedOnlineState from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Yi(t) {
        const e = JSON.parse(t);
        return "object" == typeof e && -1 !== [
            "Unknown",
            "Online",
            "Offline"
        ].indexOf(e.onlineState) && "string" == typeof e.clientId ? new Oo(e.clientId, e.onlineState) : (F("SharedClientState", `Failed to parse online state: ${t}`), null);
    }
}
/**
 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
 * mutable and keeps track of all pending mutations, which allows us to
 * update the range of pending mutation batch IDs as new mutations are added or
 * removed.
 *
 * The data in `LocalClientState` is not read from WebStorage and instead
 * updated via its instance methods. The updated state can be serialized via
 * `toWebStorageJSON()`.
 */ // Visible for testing.
class Fo {
    constructor(){
        this.activeTargetIds = ts();
    }
    Zi(t) {
        this.activeTargetIds = this.activeTargetIds.add(t);
    }
    tr(t) {
        this.activeTargetIds = this.activeTargetIds.delete(t);
    }
    /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */ Xi() {
        const t = {
            activeTargetIds: this.activeTargetIds.toArray(),
            updateTimeMs: Date.now()
        };
        return JSON.stringify(t);
    }
}
/**
 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
 * backing store for the SharedClientState. It keeps track of all active
 * clients and supports modifications of the local client's data.
 */ class $o {
    constructor(t252, e, n, s, i){
        this.window = t252, this.Yn = e, this.persistenceKey = n, this.er = s, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.nr = this.sr.bind(this), this.ir = new Bn(rt), this.started = !1, /**
         * Captures WebStorage events that occur before `start()` is called. These
         * events are replayed once `WebStorageSharedClientState` is started.
         */ this.rr = [];
        // Escape the special characters mentioned here:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
        const r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.window.localStorage, this.currentUser = i, this.ur = Do(this.persistenceKey, this.er), this.ar = /** Assembles the key for the current sequence number. */ function(t) {
            return `firestore_sequence_number_${t}`;
        }(this.persistenceKey), this.ir = this.ir.insert(this.er, new Fo), this.cr = new RegExp(`^firestore_clients_${r}_([^_]*)$`), this.hr = new RegExp(`^firestore_mutations_${r}_(\\d+)(?:_(.*))?$`), this.lr = new RegExp(`^firestore_targets_${r}_(\\d+)$`), this.dr = /** Assembles the key for the online state of the primary tab. */ function(t) {
            return `firestore_online_state_${t}`;
        }(this.persistenceKey), this._r = function(t) {
            return `firestore_bundle_loaded_v2_${t}`;
        }(this.persistenceKey), // Rather than adding the storage observer during start(), we add the
        // storage observer during initialization. This ensures that we collect
        // events before other components populate their initial state (during their
        // respective start() calls). Otherwise, we might for example miss a
        // mutation that is added after LocalStore's start() processed the existing
        // mutations but before we observe WebStorage events.
        this.window.addEventListener("storage", this.nr);
    }
    /** Returns 'true' if WebStorage is available in the current environment. */ static vt(t) {
        return !(!t || !t.localStorage);
    }
    async start() {
        // Retrieve the list of existing clients to backfill the data in
        // SharedClientState.
        const t = await this.syncEngine.Fs();
        for (const e of t){
            if (e === this.er) continue;
            const t = this.getItem(Do(this.persistenceKey, e));
            if (t) {
                const n = Mo.Yi(e, t);
                n && (this.ir = this.ir.insert(n.clientId, n));
            }
        }
        this.wr();
        // Check if there is an existing online state and call the callback handler
        // if applicable.
        const e136 = this.storage.getItem(this.dr);
        if (e136) {
            const t = this.mr(e136);
            t && this.gr(t);
        }
        for (const t253 of this.rr)this.sr(t253);
        this.rr = [], // Register a window unload hook to remove the client metadata entry from
        // WebStorage even if `shutdown()` was not called.
        this.window.addEventListener("pagehide", ()=>this.shutdown()
        ), this.started = !0;
    }
    writeSequenceNumber(t) {
        this.setItem(this.ar, JSON.stringify(t));
    }
    getAllActiveQueryTargets() {
        return this.yr(this.ir);
    }
    isActiveQueryTarget(t) {
        let e = !1;
        return this.ir.forEach((n, s)=>{
            s.activeTargetIds.has(t) && (e = !0);
        }), e;
    }
    addPendingMutation(t) {
        this.pr(t, "pending");
    }
    updateMutationState(t, e, n) {
        this.pr(t, e, n), // Once a final mutation result is observed by other clients, they no longer
        // access the mutation's metadata entry. Since WebStorage replays events
        // in order, it is safe to delete the entry right after updating it.
        this.Ir(t);
    }
    addLocalQueryTarget(t) {
        let e = "not-current";
        // Lookup an existing query state if the target ID was already registered
        // by another tab
        if (this.isActiveQueryTarget(t)) {
            const n = this.storage.getItem(xo(this.persistenceKey, t));
            if (n) {
                const s = ko.Yi(t, n);
                s && (e = s.state);
            }
        }
        return this.Tr.Zi(t), this.wr(), e;
    }
    removeLocalQueryTarget(t) {
        this.Tr.tr(t), this.wr();
    }
    isLocalQueryTarget(t) {
        return this.Tr.activeTargetIds.has(t);
    }
    clearQueryState(t) {
        this.removeItem(xo(this.persistenceKey, t));
    }
    updateQueryState(t, e, n) {
        this.Er(t, e, n);
    }
    handleUserChange(t254, e, n) {
        e.forEach((t)=>{
            this.Ir(t);
        }), this.currentUser = t254, n.forEach((t)=>{
            this.addPendingMutation(t);
        });
    }
    setOnlineState(t) {
        this.Ar(t);
    }
    notifyBundleLoaded(t) {
        this.Rr(t);
    }
    shutdown() {
        this.started && (this.window.removeEventListener("storage", this.nr), this.removeItem(this.ur), this.started = !1);
    }
    getItem(t) {
        const e = this.storage.getItem(t);
        return O("SharedClientState", "READ", t, e), e;
    }
    setItem(t, e) {
        O("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
    }
    removeItem(t) {
        O("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
    }
    sr(t255) {
        // Note: The function is typed to take Event to be interface-compatible with
        // `Window.addEventListener`.
        const e137 = t255;
        if (e137.storageArea === this.storage) {
            if (O("SharedClientState", "EVENT", e137.key, e137.newValue), e137.key === this.ur) return void F("Received WebStorage notification for local change. Another client might have garbage-collected our state");
            this.Yn.enqueueRetryable(async ()=>{
                if (this.started) {
                    if (null !== e137.key) {
                        if (this.cr.test(e137.key)) {
                            if (null == e137.newValue) {
                                const t = this.Pr(e137.key);
                                return this.br(t, null);
                            }
                            {
                                const t = this.Vr(e137.key, e137.newValue);
                                if (t) return this.br(t.clientId, t);
                            }
                        } else if (this.hr.test(e137.key)) {
                            if (null !== e137.newValue) {
                                const t = this.vr(e137.key, e137.newValue);
                                if (t) return this.Sr(t);
                            }
                        } else if (this.lr.test(e137.key)) {
                            if (null !== e137.newValue) {
                                const t = this.Dr(e137.key, e137.newValue);
                                if (t) return this.Cr(t);
                            }
                        } else if (e137.key === this.dr) {
                            if (null !== e137.newValue) {
                                const t = this.mr(e137.newValue);
                                if (t) return this.gr(t);
                            }
                        } else if (e137.key === this.ar) {
                            const t256 = function(t) {
                                let e = nt.A;
                                if (null != t) try {
                                    const n = JSON.parse(t);
                                    U("number" == typeof n), e = n;
                                } catch (t259) {
                                    F("SharedClientState", "Failed to read sequence number from WebStorage", t259);
                                }
                                return e;
                            }(e137.newValue);
                            t256 !== nt.A && this.sequenceNumberHandler(t256);
                        } else if (e137.key === this._r) {
                            const t260 = this.Nr(e137.newValue);
                            await Promise.all(t260.map((t)=>this.syncEngine.kr(t)
                            ));
                        }
                    }
                } else this.rr.push(e137);
            });
        }
    }
    get Tr() {
        return this.ir.get(this.er);
    }
    wr() {
        this.setItem(this.ur, this.Tr.Xi());
    }
    pr(t, e, n) {
        const s = new No(this.currentUser, t, e, n), i = Co(this.persistenceKey, this.currentUser, t);
        this.setItem(i, s.Xi());
    }
    Ir(t) {
        const e = Co(this.persistenceKey, this.currentUser, t);
        this.removeItem(e);
    }
    Ar(t) {
        const e = {
            clientId: this.er,
            onlineState: t
        };
        this.storage.setItem(this.dr, JSON.stringify(e));
    }
    Er(t, e, n) {
        const s = xo(this.persistenceKey, t), i = new ko(t, e, n);
        this.setItem(s, i.Xi());
    }
    Rr(t) {
        const e = JSON.stringify(Array.from(t));
        this.setItem(this._r, e);
    }
    /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */ Pr(t) {
        const e = this.cr.exec(t);
        return e ? e[1] : null;
    }
    /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */ Vr(t, e) {
        const n = this.Pr(t);
        return Mo.Yi(n, e);
    }
    /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ vr(t, e) {
        const n = this.hr.exec(t), s = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
        return No.Yi(new C(i), s, e);
    }
    /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ Dr(t, e) {
        const n = this.lr.exec(t), s = Number(n[1]);
        return ko.Yi(s, e);
    }
    /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ mr(t) {
        return Oo.Yi(t);
    }
    Nr(t) {
        return JSON.parse(t);
    }
    async Sr(t) {
        if (t.user.uid === this.currentUser.uid) return this.syncEngine.Mr(t.batchId, t.state, t.error);
        O("SharedClientState", `Ignoring mutation for non-active user ${t.user.uid}`);
    }
    Cr(t) {
        return this.syncEngine.Or(t.targetId, t.state, t.error);
    }
    br(t263, e) {
        const n = e ? this.ir.insert(t263, e) : this.ir.remove(t263), s = this.yr(this.ir), i = this.yr(n), r = [], o = [];
        return i.forEach((t)=>{
            s.has(t) || r.push(t);
        }), s.forEach((t)=>{
            i.has(t) || o.push(t);
        }), this.syncEngine.Fr(r, o).then(()=>{
            this.ir = n;
        });
    }
    gr(t) {
        // We check whether the client that wrote this online state is still active
        // by comparing its client ID to the list of clients kept active in
        // IndexedDb. If a client does not update their IndexedDb client state
        // within 5 seconds, it is considered inactive and we don't emit an online
        // state event.
        this.ir.get(t.clientId) && this.onlineStateHandler(t.onlineState);
    }
    yr(t) {
        let e = ts();
        return t.forEach((t, n)=>{
            e = e.unionWith(n.activeTargetIds);
        }), e;
    }
}
class Bo {
    constructor(){
        this.$r = new Fo, this.Br = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
    }
    addPendingMutation(t) {
    // No op.
    }
    updateMutationState(t, e, n) {
    // No op.
    }
    addLocalQueryTarget(t) {
        return this.$r.Zi(t), this.Br[t] || "not-current";
    }
    updateQueryState(t, e, n) {
        this.Br[t] = e;
    }
    removeLocalQueryTarget(t) {
        this.$r.tr(t);
    }
    isLocalQueryTarget(t) {
        return this.$r.activeTargetIds.has(t);
    }
    clearQueryState(t) {
        delete this.Br[t];
    }
    getAllActiveQueryTargets() {
        return this.$r.activeTargetIds;
    }
    isActiveQueryTarget(t) {
        return this.$r.activeTargetIds.has(t);
    }
    start() {
        return this.$r = new Fo, Promise.resolve();
    }
    handleUserChange(t, e, n) {
    // No op.
    }
    setOnlineState(t) {
    // No op.
    }
    shutdown() {}
    writeSequenceNumber(t) {}
    notifyBundleLoaded(t) {
    // No op.
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Lo {
    Lr(t) {
    // No-op.
    }
    shutdown() {
    // No-op.
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
/* eslint-disable no-restricted-globals */ /**
 * Browser implementation of ConnectivityMonitor.
 */ class Uo {
    constructor(){
        this.Ur = ()=>this.qr()
        , this.Kr = ()=>this.Gr()
        , this.Qr = [], this.jr();
    }
    Lr(t) {
        this.Qr.push(t);
    }
    shutdown() {
        window.removeEventListener("online", this.Ur), window.removeEventListener("offline", this.Kr);
    }
    jr() {
        window.addEventListener("online", this.Ur), window.addEventListener("offline", this.Kr);
    }
    qr() {
        O("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
        for (const t of this.Qr)t(0 /* AVAILABLE */ );
    }
    Gr() {
        O("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
        for (const t of this.Qr)t(1 /* UNAVAILABLE */ );
    }
    // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.
    /** Checks that all used attributes of window are available. */ static vt() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const qo = {
    BatchGetDocuments: "batchGet",
    Commit: "commit",
    RunQuery: "runQuery"
};
/**
 * Maps RPC names to the corresponding REST endpoint name.
 *
 * We use array notation to avoid mangling.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides a simple helper class that implements the Stream interface to
 * bridge to other implementations that are streams but do not implement the
 * interface. The stream callbacks are invoked with the callOn... methods.
 */ class Ko {
    constructor(t){
        this.Wr = t.Wr, this.zr = t.zr;
    }
    Hr(t) {
        this.Jr = t;
    }
    Yr(t) {
        this.Xr = t;
    }
    onMessage(t) {
        this.Zr = t;
    }
    close() {
        this.zr();
    }
    send(t) {
        this.Wr(t);
    }
    eo() {
        this.Jr();
    }
    no(t) {
        this.Xr(t);
    }
    so(t) {
        this.Zr(t);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Go extends /**
 * Base class for all Rest-based connections to the backend (WebChannel and
 * HTTP).
 */ class {
    constructor(t){
        this.databaseInfo = t, this.databaseId = t.databaseId;
        const e = t.ssl ? "https" : "http";
        this.io = e + "://" + t.host, this.ro = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
    }
    oo(t273, e147, n, s, i) {
        const r = this.uo(t273, e147);
        O("RestConnection", "Sending: ", r, n);
        const o = {};
        return this.ao(o, s, i), this.co(t273, r, o, n).then((t)=>(O("RestConnection", "Received: ", t), t)
        , (e)=>{
            throw $("RestConnection", `${t273} failed with error: `, e, "url: ", r, "request:", n), e;
        });
    }
    ho(t, e, n, s, i) {
        // The REST API automatically aggregates all of the streamed results, so we
        // can just use the normal invoke() method.
        return this.oo(t, e, n, s, i);
    }
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */ ao(t, e148, n59) {
        t["X-Goog-Api-Client"] = "gl-js/ fire/" + x, // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), e148 && e148.headers.forEach((e, n)=>t[n] = e
        ), n59 && n59.headers.forEach((e, n)=>t[n] = e
        );
    }
    uo(t, e) {
        const n = qo[t];
        return `${this.io}/v1/${e}:${n}`;
    }
} {
    constructor(t){
        super(t), this.forceLongPolling = t.forceLongPolling, this.autoDetectLongPolling = t.autoDetectLongPolling, this.useFetchStreams = t.useFetchStreams;
    }
    co(t264, e138, n57, s) {
        return new Promise((i, r)=>{
            const o = new _webchannelWrapper.XhrIo;
            o.listenOnce(_webchannelWrapper.EventType.COMPLETE, ()=>{
                try {
                    switch(o.getLastErrorCode()){
                        case _webchannelWrapper.ErrorCode.NO_ERROR:
                            const e141 = o.getResponseJson();
                            O("Connection", "XHR received:", JSON.stringify(e141)), i(e141);
                            break;
                        case _webchannelWrapper.ErrorCode.TIMEOUT:
                            O("Connection", 'RPC "' + t264 + '" timed out'), r(new Q(G.DEADLINE_EXCEEDED, "Request time out"));
                            break;
                        case _webchannelWrapper.ErrorCode.HTTP_ERROR:
                            const n = o.getStatus();
                            if (O("Connection", 'RPC "' + t264 + '" failed with status:', n, "response text:", o.getResponseText()), n > 0) {
                                const t265 = o.getResponseJson().error;
                                if (t265 && t265.status && t265.message) {
                                    const e139 = function(t) {
                                        const e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(G).indexOf(e) >= 0 ? e : G.UNKNOWN;
                                    }(t265.status);
                                    r(new Q(e139, t265.message));
                                } else r(new Q(G.UNKNOWN, "Server responded with status " + o.getStatus()));
                            } else // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            r(new Q(G.UNAVAILABLE, "Connection failed."));
                            break;
                        default:
                            L();
                    }
                } finally{
                    O("Connection", 'RPC "' + t264 + '" completed.');
                }
            });
            const u = JSON.stringify(s);
            o.send(e138, "POST", u, n57, 15);
        });
    }
    lo(t268, e143, n58) {
        const s32 = [
            this.io,
            "/",
            "google.firestore.v1.Firestore",
            "/",
            t268,
            "/channel"
        ], i18 = _webchannelWrapper.createWebChannelTransport(), r = _webchannelWrapper.getStatEventTarget(), o = {
            // Required for backend stickiness, routing behavior is based on this
            // parameter.
            httpSessionIdParam: "gsessionid",
            initMessageHeaders: {},
            messageUrlParams: {
                // This param is used to improve routing and project isolation by the
                // backend and must be included in every request.
                database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
            },
            sendRawJson: !0,
            supportsCrossDomainXhr: !0,
            internalChannelParams: {
                // Override the default timeout (randomized between 10-20 seconds) since
                // a large write batch on a slow internet connection may take a long
                // time to send to the backend. Rather than have WebChannel impose a
                // tight timeout which could lead to infinite timeouts and retries, we
                // set it very large (5-10 minutes) and rely on the browser's builtin
                // timeouts to kick in if the request isn't working.
                forwardChannelRequestTimeoutMs: 6e5
            },
            forceLongPolling: this.forceLongPolling,
            detectBufferingProxy: this.autoDetectLongPolling
        };
        this.useFetchStreams && (o.xmlHttpFactory = new _webchannelWrapper.FetchXmlHttpFactory({})), this.ao(o.initMessageHeaders, e143, n58), // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the httpHeadersOverwriteParam option to specify that
        // the headers should instead be encoded into a special "$httpHeaders" query
        // parameter, which is recognized by the webchannel backend. This is
        // formally defined here:
        // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
        // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
        // doesn't have an Origin header. So we have to exclude a few browser environments that are
        // known to (sometimes) not include an Origin. See
        // https://github.com/firebase/firebase-js-sdk/issues/1491.
        _util.isMobileCordova() || _util.isReactNative() || _util.isElectron() || _util.isIE() || _util.isUWP() || _util.isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
        const u = s32.join("");
        O("Connection", "Creating WebChannel: " + u, o);
        const a = i18.createWebChannel(u, o);
        // WebChannel supports sending the first message with the handshake - saving
        // a network round trip. However, it will have to call send in the same
        // JS event loop as open. In order to enforce this, we delay actually
        // opening the WebChannel until send is called. Whether we have called
        // open is tracked with this variable.
        let c = !1, h = !1;
        // A flag to determine whether the stream was closed (by us or through an
        // error/close event) to avoid delivering multiple close events or sending
        // on a closed stream
        const l = new Ko({
            Wr: (t)=>{
                h ? O("Connection", "Not sending because WebChannel is closed:", t) : (c || (O("Connection", "Opening WebChannel transport."), a.open(), c = !0), O("Connection", "WebChannel sending:", t), a.send(t));
            },
            zr: ()=>a.close()
        }), y = (t269, e, n)=>{
            // TODO(dimond): closure typing seems broken because WebChannel does
            // not implement goog.events.Listenable
            t269.listen(e, (t)=>{
                try {
                    n(t);
                } catch (t270) {
                    setTimeout(()=>{
                        throw t270;
                    }, 0);
                }
            });
        };
        // Closure events are guarded and exceptions are swallowed, so catch any
        // exception and rethrow using a setTimeout so they become visible again.
        // Note that eventually this function could go away if we are confident
        // enough the code is exception free.
        return y(a, _webchannelWrapper.WebChannel.EventType.OPEN, ()=>{
            h || O("Connection", "WebChannel transport opened.");
        }), y(a, _webchannelWrapper.WebChannel.EventType.CLOSE, ()=>{
            h || (h = !0, O("Connection", "WebChannel transport closed"), l.no());
        }), y(a, _webchannelWrapper.WebChannel.EventType.ERROR, (t)=>{
            h || (h = !0, $("Connection", "WebChannel transport errored:", t), l.no(new Q(G.UNAVAILABLE, "The operation could not be completed")));
        }), y(a, _webchannelWrapper.WebChannel.EventType.MESSAGE, (t)=>{
            var e146;
            if (!h) {
                const n = t.data[0];
                U(!!n);
                // TODO(b/35143891): There is a bug in One Platform that caused errors
                // (and only errors) to be wrapped in an extra array. To be forward
                // compatible with the bug we need to check either condition. The latter
                // can be removed once the fix has been rolled out.
                // Use any because msgData.error is not typed.
                const s = n, i = s.error || (null === (e146 = s[0]) || void 0 === e146 ? void 0 : e146.error);
                if (i) {
                    O("Connection", "WebChannel received error:", i);
                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
                    const t271 = i.status;
                    let e144 = /**
 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
 *
 * @returns The Code equivalent to the given status string or undefined if
 *     there is no match.
 */ function(t) {
                        // lookup by string
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const e = kn[t];
                        if (void 0 !== e) return Fn(e);
                    }(t271), n = i.message;
                    void 0 === e144 && (e144 = G.INTERNAL, n = "Unknown error status: " + t271 + " with message " + i.message), // Mark closed so no further events are propagated
                    h = !0, l.no(new Q(e144, n)), a.close();
                } else O("Connection", "WebChannel received:", n), l.so(n);
            }
        }), y(r, _webchannelWrapper.Event.STAT_EVENT, (t)=>{
            t.stat === _webchannelWrapper.Stat.PROXY ? O("Connection", "Detected buffering proxy") : t.stat === _webchannelWrapper.Stat.NOPROXY && O("Connection", "Detected no buffering proxy");
        }), setTimeout(()=>{
            // Technically we could/should wait for the WebChannel opened event,
            // but because we want to send the first message with the WebChannel
            // handshake we pretend the channel opened here (asynchronously), and
            // then delay the actual open until the first message is sent.
            l.eo();
        }, 0), l;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Initializes the WebChannelConnection for the browser. */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The Platform's 'window' implementation or null if not available. */ function Qo() {
    // `window` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof window ? window : null;
}
/** The Platform's 'document' implementation or null if not available. */ function jo() {
    // `document` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof document ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Wo(t) {
    return new fs(t, /* useProto3Json= */ !0);
}
/**
 * An instance of the Platform's 'TextEncoder' implementation.
 */ /**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */ class zo {
    constructor(/**
     * The AsyncQueue to run backoff operations on.
     */ t, /**
     * The ID to use when scheduling backoff operations on the AsyncQueue.
     */ e, /**
     * The initial delay (used as the base delay on the first retry attempt).
     * Note that jitter will still be applied, so the actual delay could be as
     * little as 0.5*initialDelayMs.
     */ n = 1e3, s = 1.5, i = 6e4){
        this.Yn = t, this.timerId = e, this.fo = n, this._o = s, this.wo = i, this.mo = 0, this.yo = null, /** The last backoff attempt, as epoch milliseconds. */ this.po = Date.now(), this.reset();
    }
    /**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */ reset() {
        this.mo = 0;
    }
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */ Io() {
        this.mo = this.wo;
    }
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */ To(t) {
        // Cancel any pending backoff operation.
        this.cancel();
        // First schedule using the current base (which may be 0 and should be
        // honored as such).
        const e = Math.floor(this.mo + this.Eo()), n = Math.max(0, Date.now() - this.po), s = Math.max(0, e - n);
        // Guard against lastAttemptTime being in the future due to a clock change.
        s > 0 && O("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.mo} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), this.yo = this.Yn.enqueueAfterDelay(this.timerId, s, ()=>(this.po = Date.now(), t())
        ), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.mo *= this._o, this.mo < this.fo && (this.mo = this.fo), this.mo > this.wo && (this.mo = this.wo);
    }
    Ao() {
        null !== this.yo && (this.yo.skipDelay(), this.yo = null);
    }
    cancel() {
        null !== this.yo && (this.yo.cancel(), this.yo = null);
    }
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ Eo() {
        return (Math.random() - .5) * this.mo;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */ class Ho {
    constructor(t, e, n, s, i, r, o, u){
        this.Yn = t, this.Ro = n, this.Po = s, this.bo = i, this.authCredentialsProvider = r, this.appCheckCredentialsProvider = o, this.listener = u, this.state = 0 /* Initial */ , /**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */ this.Vo = 0, this.vo = null, this.So = null, this.stream = null, this.Do = new zo(t, e);
    }
    /**
     * Returns true if start() has been called and no error has occurred. True
     * indicates the stream is open or in the process of opening (which
     * encompasses respecting backoff, getting auth tokens, and starting the
     * actual RPC). Use isOpen() to determine if the stream is open and ready for
     * outbound requests.
     */ Co() {
        return 1 /* Starting */  === this.state || 5 /* Backoff */  === this.state || this.xo();
    }
    /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */ xo() {
        return 2 /* Open */  === this.state || 3 /* Healthy */  === this.state;
    }
    /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */ start() {
        4 /* Error */  !== this.state ? this.auth() : this.No();
    }
    /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */ async stop() {
        this.Co() && await this.close(0 /* Initial */ );
    }
    /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */ ko() {
        this.state = 0 /* Initial */ , this.Do.reset();
    }
    /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */ Mo() {
        // Starts the idle time if we are in state 'Open' and are not yet already
        // running a timer (in which case the previous idle timeout still applies).
        this.xo() && null === this.vo && (this.vo = this.Yn.enqueueAfterDelay(this.Ro, 6e4, ()=>this.Oo()
        ));
    }
    /** Sends a message to the underlying stream. */ Fo(t) {
        this.$o(), this.stream.send(t);
    }
    /** Called by the idle timer when the stream should close due to inactivity. */ async Oo() {
        if (this.xo()) // When timing out an idle stream there's no reason to force the stream into backoff when
        // it restarts so set the stream state to Initial instead of Error.
        return this.close(0 /* Initial */ );
    }
    /** Marks the stream as active again. */ $o() {
        this.vo && (this.vo.cancel(), this.vo = null);
    }
    /** Cancels the health check delayed operation. */ Bo() {
        this.So && (this.So.cancel(), this.So = null);
    }
    /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState - the intended state of the stream after closing.
     * @param error - the error the connection was closed with.
     */ async close(t, e) {
        // Cancel any outstanding timers (they're guaranteed not to execute).
        this.$o(), this.Bo(), this.Do.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
        // underlying stream), guaranteeing they won't execute.
        this.Vo++, 4 /* Error */  !== t ? // If this is an intentional close ensure we don't delay our next connection attempt.
        this.Do.reset() : e && e.code === G.RESOURCE_EXHAUSTED ? // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
        (F(e.toString()), F("Using maximum backoff delay to prevent overloading the backend."), this.Do.Io()) : e && e.code === G.UNAUTHENTICATED && 3 /* Healthy */  !== this.state && // "unauthenticated" error means the token was rejected. This should rarely
        // happen since both Auth and AppCheck ensure a sufficient TTL when we
        // request a token. If a user manually resets their system clock this can
        // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
        // before we received the first message and we need to invalidate the token
        // to ensure that we fetch a new token.
        (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
        null !== this.stream && (this.Lo(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
        // inhibit backoff or otherwise manipulate the state in its non-started state.
        this.state = t, // Notify the listener that the stream closed.
        await this.listener.Yr(e);
    }
    /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */ Lo() {}
    auth() {
        this.state = 1 /* Starting */ ;
        const t274 = this.Uo(this.Vo), e149 = this.Vo;
        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
        Promise.all([
            this.authCredentialsProvider.getToken(),
            this.appCheckCredentialsProvider.getToken()
        ]).then(([t, n])=>{
            // Stream can be stopped while waiting for authentication.
            // TODO(mikelehen): We really should just use dispatchIfNotClosed
            // and let this dispatch onto the queue, but that opened a spec test can
            // of worms that I don't want to deal with in this PR.
            this.Vo === e149 && // Normally we'd have to schedule the callback on the AsyncQueue.
            // However, the following calls are safe to be called outside the
            // AsyncQueue since they don't chain asynchronous calls
            this.qo(t, n);
        }, (e)=>{
            t274(()=>{
                const t = new Q(G.UNKNOWN, "Fetching auth token failed: " + e.message);
                return this.Ko(t);
            });
        });
    }
    qo(t275, e) {
        const n = this.Uo(this.Vo);
        this.stream = this.Go(t275, e), this.stream.Hr(()=>{
            n(()=>(this.state = 2 /* Open */ , this.So = this.Yn.enqueueAfterDelay(this.Po, 1e4, ()=>(this.xo() && (this.state = 3 /* Healthy */ ), Promise.resolve())
                ), this.listener.Hr())
            );
        }), this.stream.Yr((t)=>{
            n(()=>this.Ko(t)
            );
        }), this.stream.onMessage((t)=>{
            n(()=>this.onMessage(t)
            );
        });
    }
    No() {
        this.state = 5 /* Backoff */ , this.Do.To(async ()=>{
            this.state = 0 /* Initial */ , this.start();
        });
    }
    // Visible for tests
    Ko(t) {
        // In theory the stream could close cleanly, however, in our current model
        // we never expect this to happen because if we stop a stream ourselves,
        // this callback will never be called. To prevent cases where we retry
        // without a backoff accidentally, we set the stream to error in all cases.
        return O("PersistentStream", `close with error: ${t}`), this.stream = null, this.close(4 /* Error */ , t);
    }
    /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */ Uo(t) {
        return (e)=>{
            this.Yn.enqueueAndForget(()=>this.Vo === t ? e() : (O("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve())
            );
        };
    }
}
/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */ class Jo extends Ho {
    constructor(t, e, n, s, i, r){
        super(t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), this.M = i;
    }
    Go(t, e) {
        return this.bo.lo("Listen", t, e);
    }
    onMessage(t276) {
        // A successful response means the stream is healthy
        this.Do.reset();
        const e150 = vs(this.M, t276), n = function(t) {
            // We have only reached a consistent snapshot for the entire stream if there
            // is a read_time set and it applies to all targets (i.e. the list of
            // targets is empty). The backend is guaranteed to send such responses.
            if (!("targetChange" in t)) return ct.min();
            const e = t.targetChange;
            return e.targetIds && e.targetIds.length ? ct.min() : e.readTime ? ms(e.readTime) : ct.min();
        }(t276);
        return this.listener.Qo(e150, n);
    }
    /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */ jo(t277) {
        const e151 = {};
        e151.database = As(this.M), e151.addTarget = function(t, e) {
            let n;
            const s = e.target;
            return n = ge(s) ? {
                documents: xs(t, s)
            } : {
                query: Ns(t, s)
            }, n.targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = _s(t, e.resumeToken) : e.snapshotVersion.compareTo(ct.min()) > 0 && // TODO(wuandy): Consider removing above check because it is most likely true.
            // Right now, many tests depend on this behaviour though (leaving min() out
            // of serialization).
            (n.readTime = ds(t, e.snapshotVersion.toTimestamp())), n;
        }(this.M, t277);
        const n60 = Ms(this.M, t277);
        n60 && (e151.labels = n60), this.Fo(e151);
    }
    /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */ Wo(t) {
        const e = {};
        e.database = As(this.M), e.removeTarget = t, this.Fo(e);
    }
}
/**
 * A Stream that implements the Write RPC.
 *
 * The Write RPC requires the caller to maintain special streamToken
 * state in between calls, to help the server understand which responses the
 * client has processed by the time the next request is made. Every response
 * will contain a streamToken; this value must be passed to the next
 * request.
 *
 * After calling start() on this stream, the next request must be a handshake,
 * containing whatever streamToken is on hand. Once a response to this
 * request is received, all pending mutations may be submitted. When
 * submitting multiple batches of mutations at the same time, it's
 * okay to use the same streamToken for the calls to writeMutations.
 *
 * TODO(b/33271235): Use proto types
 */ class Yo extends Ho {
    constructor(t, e, n, s, i, r){
        super(t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), this.M = i, this.zo = !1;
    }
    /**
     * Tracks whether or not a handshake has been successfully exchanged and
     * the stream is ready to accept mutations.
     */ get Ho() {
        return this.zo;
    }
    // Override of PersistentStream.start
    start() {
        this.zo = !1, this.lastStreamToken = void 0, super.start();
    }
    Lo() {
        this.zo && this.Jo([]);
    }
    Go(t, e) {
        return this.bo.lo("Write", t, e);
    }
    onMessage(t) {
        if (// Always capture the last stream token.
        U(!!t.streamToken), this.lastStreamToken = t.streamToken, this.zo) {
            // A successful first write response means the stream is healthy,
            // Note, that we could consider a successful handshake healthy, however,
            // the write itself might be causing an error we want to back off from.
            this.Do.reset();
            const e = Cs(t.writeResults, t.commitTime), n = ms(t.commitTime);
            return this.listener.Yo(n, e);
        }
        // The first response is always the handshake response
        return U(!t.writeResults || 0 === t.writeResults.length), this.zo = !0, this.listener.Xo();
    }
    /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */ Zo() {
        // TODO(dimond): Support stream resumption. We intentionally do not set the
        // stream token on the handshake, ignoring any stream token we might have.
        const t = {};
        t.database = As(this.M), this.Fo(t);
    }
    /** Sends a group of mutations to the Firestore backend to apply. */ Jo(t278) {
        const e = {
            streamToken: this.lastStreamToken,
            writes: t278.map((t)=>Ss(this.M, t)
            )
        };
        this.Fo(e);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Datastore and its related methods are a wrapper around the external Google
 * Cloud Datastore grpc API, which provides an interface that is more convenient
 * for the rest of the client SDK architecture to consume.
 */ /**
 * An implementation of Datastore that exposes additional state for internal
 * consumption.
 */ class Xo extends class {
} {
    constructor(t, e, n, s){
        super(), this.authCredentials = t, this.appCheckCredentials = e, this.bo = n, this.M = s, this.tu = !1;
    }
    eu() {
        if (this.tu) throw new Q(G.FAILED_PRECONDITION, "The client has already been terminated.");
    }
    /** Invokes the provided RPC with auth and AppCheck tokens. */ oo(t279, e, n) {
        return this.eu(), Promise.all([
            this.authCredentials.getToken(),
            this.appCheckCredentials.getToken()
        ]).then(([s, i])=>this.bo.oo(t279, e, n, s, i)
        ).catch((t)=>{
            throw "FirebaseError" === t.name ? (t.code === G.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new Q(G.UNKNOWN, t.toString());
        });
    }
    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */ ho(t280, e, n) {
        return this.eu(), Promise.all([
            this.authCredentials.getToken(),
            this.appCheckCredentials.getToken()
        ]).then(([s, i])=>this.bo.ho(t280, e, n, s, i)
        ).catch((t)=>{
            throw "FirebaseError" === t.name ? (t.code === G.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new Q(G.UNKNOWN, t.toString());
        });
    }
    terminate() {
        this.tu = !0;
    }
}
// TODO(firestorexp): Make sure there is only one Datastore instance per
// firestore-exp client.
/**
 * A component used by the RemoteStore to track the OnlineState (that is,
 * whether or not the client as a whole should be considered to be online or
 * offline), implementing the appropriate heuristics.
 *
 * In particular, when the client is trying to connect to the backend, we
 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
 * a connection to succeed. If we have too many failures or the timeout elapses,
 * then we set the OnlineState to Offline, and the client will behave as if
 * it is offline (get()s will return cached data, etc.).
 */ class Zo {
    constructor(t, e){
        this.asyncQueue = t, this.onlineStateHandler = e, /** The current OnlineState. */ this.state = "Unknown" /* Unknown */ , /**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */ this.nu = 0, /**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */ this.su = null, /**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */ this.iu = !0;
    }
    /**
     * Called by RemoteStore when a watch stream is started (including on each
     * backoff attempt).
     *
     * If this is the first attempt, it sets the OnlineState to Unknown and starts
     * the onlineStateTimer.
     */ ru() {
        0 === this.nu && (this.ou("Unknown" /* Unknown */ ), this.su = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* OnlineStateTimeout */ , 1e4, ()=>(this.su = null, this.uu("Backend didn't respond within 10 seconds."), this.ou("Offline" /* Offline */ ), Promise.resolve())
        ));
    }
    /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */ au(t) {
        "Online" /* Online */  === this.state ? this.ou("Unknown" /* Unknown */ ) : (this.nu++, this.nu >= 1 && (this.cu(), this.uu(`Connection failed 1 times. Most recent error: ${t.toString()}`), this.ou("Offline" /* Offline */ )));
    }
    /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */ set(t) {
        this.cu(), this.nu = 0, "Online" /* Online */  === t && // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        (this.iu = !1), this.ou(t);
    }
    ou(t) {
        t !== this.state && (this.state = t, this.onlineStateHandler(t));
    }
    uu(t) {
        const e = `Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
        this.iu ? (F(e), this.iu = !1) : O("OnlineStateTracker", e);
    }
    cu() {
        null !== this.su && (this.su.cancel(), this.su = null);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class tu {
    constructor(/**
     * The local store, used to fill the write pipeline with outbound mutations.
     */ t281, /** The client-side proxy for interacting with the backend. */ e152, n, s, i){
        this.localStore = t281, this.datastore = e152, this.asyncQueue = n, this.remoteSyncer = {}, /**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */ this.hu = [], /**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */ this.lu = new Map, /**
         * A set of reasons for why the RemoteStore may be offline. If empty, the
         * RemoteStore may start its network connections.
         */ this.fu = new Set, /**
         * Event handlers that get called when the network is disabled or enabled.
         *
         * PORTING NOTE: These functions are used on the Web client to create the
         * underlying streams (to support tree-shakeable streams). On Android and iOS,
         * the streams are created during construction of RemoteStore.
         */ this.du = [], this._u = i, this._u.Lr((t282)=>{
            n.enqueueAndForget(async ()=>{
                // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
                // network becomes unreachable as we don't have any other way to tear
                // down our streams.
                cu(this) && (O("RemoteStore", "Restarting streams for network reachability change."), await async function(t) {
                    const e = K(t);
                    e.fu.add(4 /* ConnectivityChange */ ), await nu(e), e.wu.set("Unknown" /* Unknown */ ), e.fu.delete(4 /* ConnectivityChange */ ), await eu(e);
                }(this));
            });
        }), this.wu = new Zo(n, s);
    }
}
async function eu(t) {
    if (cu(t)) for (const e of t.du)await e(/* enabled= */ !0);
}
/**
 * Temporarily disables the network. The network can be re-enabled using
 * enableNetwork().
 */ async function nu(t) {
    for (const e of t.du)await e(/* enabled= */ !1);
}
/**
 * Starts new listen for the given target. Uses resume token if provided. It
 * is a no-op if the target of given `TargetData` is already being listened to.
 */ function su(t, e) {
    const n = K(t);
    n.lu.has(e.targetId) || // Mark this as something the client is currently listening for.
    (n.lu.set(e.targetId, e), au(n) ? // The listen will be sent in onWatchStreamOpen
    uu(n) : Vu(n).xo() && ru(n, e));
}
/**
 * Removes the listen from server. It is a no-op if the given target id is
 * not being listened to.
 */ function iu(t, e) {
    const n = K(t), s = Vu(n);
    n.lu.delete(e), s.xo() && ou(n, e), 0 === n.lu.size && (s.xo() ? s.Mo() : cu(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
    // have no listeners, since without any listens to send we cannot
    // confirm if the stream is healthy and upgrade to OnlineState.Online.
    n.wu.set("Unknown" /* Unknown */ ));
}
/**
 * We need to increment the the expected number of pending responses we're due
 * from watch so we wait for the ack to process any messages from this target.
 */ function ru(t, e) {
    t.mu.Z(e.targetId), Vu(t).jo(e);
}
/**
 * We need to increment the expected number of pending responses we're due
 * from watch so we wait for the removal on the server before we process any
 * messages from this target.
 */ function ou(t, e) {
    t.mu.Z(e), Vu(t).Wo(e);
}
function uu(t) {
    t.mu = new us({
        getRemoteKeysForTarget: (e)=>t.remoteSyncer.getRemoteKeysForTarget(e)
        ,
        Et: (e)=>t.lu.get(e) || null
    }), Vu(t).start(), t.wu.ru();
}
/**
 * Returns whether the watch stream should be started because it's necessary
 * and has not yet been started.
 */ function au(t) {
    return cu(t) && !Vu(t).Co() && t.lu.size > 0;
}
function cu(t) {
    return 0 === K(t).fu.size;
}
function hu(t) {
    t.mu = void 0;
}
async function lu(t) {
    t.lu.forEach((e, n)=>{
        ru(t, e);
    });
}
async function fu(t, e) {
    hu(t), // If we still need the watch stream, retry the connection.
    au(t) ? (t.wu.au(e), uu(t)) : // No need to restart watch stream because there are no active targets.
    // The online state is set to unknown because there is no active attempt
    // at establishing a connection
    t.wu.set("Unknown" /* Unknown */ );
}
async function du(t283, e153, n61) {
    if (// Mark the client as online since we got a message from the server
    t283.wu.set("Online" /* Online */ ), e153 instanceof rs && 2 /* Removed */  === e153.state && e153.cause) // There was an error on a target, don't wait for a consistent snapshot
    // to raise events
    try {
        await /** Handles an error on a target */ async function(t, e) {
            const n = e.cause;
            for (const s of e.targetIds)// A watched target might have been removed already.
            t.lu.has(s) && (await t.remoteSyncer.rejectListen(s, n), t.lu.delete(s), t.mu.removeTarget(s));
        }(t283, e153);
    } catch (n62) {
        O("RemoteStore", "Failed to remove targets %s: %s ", e153.targetIds.join(","), n62), await _u(t283, n62);
    }
    else if (e153 instanceof ss ? t283.mu.ut(e153) : e153 instanceof is ? t283.mu._t(e153) : t283.mu.ht(e153), !n61.isEqual(ct.min())) try {
        const e154 = await oo(t283.localStore);
        n61.compareTo(e154) >= 0 && // We have received a target change with a global snapshot if the snapshot
        // version is not equal to SnapshotVersion.min().
        await /**
 * Takes a batch of changes from the Datastore, repackages them as a
 * RemoteEvent, and passes that on to the listener, which is typically the
 * SyncEngine.
 */ function(t, e156) {
            const n63 = t.mu.yt(e156);
            // Update in-memory resume tokens. LocalStore will update the
            // persistent view of these when applying the completed RemoteEvent.
            return n63.targetChanges.forEach((n, s)=>{
                if (n.resumeToken.approximateByteSize() > 0) {
                    const i = t.lu.get(s);
                    // A watched target might have been removed already.
                    i && t.lu.set(s, i.withResumeToken(n.resumeToken, e156));
                }
            }), // Re-establish listens for the targets that have been invalidated by
            // existence filter mismatches.
            n63.targetMismatches.forEach((e)=>{
                const n = t.lu.get(e);
                if (!n) // A watched target might have been removed already.
                return;
                // Clear the resume token for the target, since we're in a known mismatch
                // state.
                t.lu.set(e, n.withResumeToken(pt.EMPTY_BYTE_STRING, n.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
                // deliberately don't send a resume token so that we get a full update.
                ou(t, e);
                // Mark the target we send as being on behalf of an existence filter
                // mismatch, but don't actually retain that in listenTargets. This ensures
                // that we flag the first re-listen this way without impacting future
                // listens of this target (that might happen e.g. on reconnect).
                const s = new ki(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                ru(t, s);
            }), t.remoteSyncer.applyRemoteEvent(n63);
        }(t283, n61);
    } catch (e) {
        O("RemoteStore", "Failed to raise snapshot:", e), await _u(t283, e);
    }
}
/**
 * Recovery logic for IndexedDB errors that takes the network offline until
 * `op` succeeds. Retries are scheduled with backoff using
 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
 * validated via a generic operation.
 *
 * The returned Promise is resolved once the network is disabled and before
 * any retry attempt.
 */ async function _u(t, e, n) {
    if (!Ri(e)) throw e;
    t.fu.add(1 /* IndexedDbFailed */ ), // Disable network and raise offline snapshots
    await nu(t), t.wu.set("Offline" /* Offline */ ), n || // Use a simple read operation to determine if IndexedDB recovered.
    // Ideally, we would expose a health check directly on SimpleDb, but
    // RemoteStore only has access to persistence through LocalStore.
    (n = ()=>oo(t.localStore)
    ), // Probe IndexedDB periodically and re-enable network
    t.asyncQueue.enqueueRetryable(async ()=>{
        O("RemoteStore", "Retrying IndexedDB access"), await n(), t.fu.delete(1 /* IndexedDbFailed */ ), await eu(t);
    });
}
/**
 * Executes `op`. If `op` fails, takes the network offline until `op`
 * succeeds. Returns after the first attempt.
 */ function wu(t, e) {
    return e().catch((n)=>_u(t, n, e)
    );
}
async function mu(t) {
    const e = K(t), n = vu(e);
    let s = e.hu.length > 0 ? e.hu[e.hu.length - 1].batchId : -1;
    for(; gu(e);)try {
        const t = await co(e.localStore, s);
        if (null === t) {
            0 === e.hu.length && n.Mo();
            break;
        }
        s = t.batchId, yu(e, t);
    } catch (t284) {
        await _u(e, t284);
    }
    pu(e) && Iu(e);
}
/**
 * Returns true if we can add to the write pipeline (i.e. the network is
 * enabled and the write pipeline is not full).
 */ function gu(t) {
    return cu(t) && t.hu.length < 10;
}
/**
 * Queues additional writes to be sent to the write stream, sending them
 * immediately if the write stream is established.
 */ function yu(t, e) {
    t.hu.push(e);
    const n = vu(t);
    n.xo() && n.Ho && n.Jo(e.mutations);
}
function pu(t) {
    return cu(t) && !vu(t).Co() && t.hu.length > 0;
}
function Iu(t) {
    vu(t).start();
}
async function Tu(t) {
    vu(t).Zo();
}
async function Eu(t) {
    const e = vu(t);
    // Send the write pipeline now that the stream is established.
    for (const n of t.hu)e.Jo(n.mutations);
}
async function Au(t, e, n) {
    const s = t.hu.shift(), i = xi.from(s, e, n);
    await wu(t, ()=>t.remoteSyncer.applySuccessfulWrite(i)
    ), // It's possible that with the completion of this mutation another
    // slot has freed up.
    await mu(t);
}
async function Ru(t285, e157) {
    // If the write stream closed after the write handshake completes, a write
    // operation failed and we fail the pending operation.
    e157 && vu(t285).Ho && // This error affects the actual write.
    await async function(t, e) {
        // Only handle permanent errors here. If it's transient, just let the retry
        // logic kick in.
        if (n = e.code, On(n) && n !== G.ABORTED) {
            // This was a permanent error, the request itself was the problem
            // so it's not going to succeed if we resend it.
            const n = t.hu.shift();
            // In this case it's also unlikely that the server itself is melting
            // down -- this was just a bad request so inhibit backoff on the next
            // restart.
            vu(t).ko(), await wu(t, ()=>t.remoteSyncer.rejectFailedWrite(n.batchId, e)
            ), // It's possible that with the completion of this mutation
            // another slot has freed up.
            await mu(t);
        }
        var n;
    }(t285, e157), // The write stream might have been started by refilling the write
    // pipeline for failed writes
    pu(t285) && Iu(t285);
}
async function Pu(t, e) {
    const n = K(t);
    n.asyncQueue.verifyOperationInProgress(), O("RemoteStore", "RemoteStore received new credentials");
    const s = cu(n);
    // Tear down and re-create our network streams. This will ensure we get a
    // fresh auth token for the new user and re-fill the write pipeline with
    // new mutations from the LocalStore (since mutations are per-user).
    n.fu.add(3 /* CredentialChange */ ), await nu(n), s && // Don't set the network status to Unknown if we are offline.
    n.wu.set("Unknown" /* Unknown */ ), await n.remoteSyncer.handleCredentialChange(e), n.fu.delete(3 /* CredentialChange */ ), await eu(n);
}
/**
 * Toggles the network state when the client gains or loses its primary lease.
 */ async function bu(t, e) {
    const n = K(t);
    e ? (n.fu.delete(2 /* IsSecondary */ ), await eu(n)) : e || (n.fu.add(2 /* IsSecondary */ ), await nu(n), n.wu.set("Unknown" /* Unknown */ ));
}
/**
 * If not yet initialized, registers the WatchStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */ function Vu(t286) {
    return t286.gu || // Create stream (but note that it is not started yet).
    (t286.gu = function(t, e, n) {
        const s = K(t);
        return s.eu(), new Jo(e, s.bo, s.authCredentials, s.appCheckCredentials, s.M, n);
    }(t286.datastore, t286.asyncQueue, {
        Hr: lu.bind(null, t286),
        Yr: fu.bind(null, t286),
        Qo: du.bind(null, t286)
    }), t286.du.push(async (e)=>{
        e ? (t286.gu.ko(), au(t286) ? uu(t286) : t286.wu.set("Unknown" /* Unknown */ )) : (await t286.gu.stop(), hu(t286));
    })), t286.gu;
}
/**
 * If not yet initialized, registers the WriteStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */ function vu(t287) {
    return t287.yu || // Create stream (but note that it is not started yet).
    (t287.yu = function(t, e, n) {
        const s = K(t);
        return s.eu(), new Yo(e, s.bo, s.authCredentials, s.appCheckCredentials, s.M, n);
    }(t287.datastore, t287.asyncQueue, {
        Hr: Tu.bind(null, t287),
        Yr: Ru.bind(null, t287),
        Xo: Eu.bind(null, t287),
        Yo: Au.bind(null, t287)
    }), t287.du.push(async (e)=>{
        e ? (t287.yu.ko(), // This will start the write stream if necessary.
        await mu(t287)) : (await t287.yu.stop(), t287.hu.length > 0 && (O("RemoteStore", `Stopping write stream with ${t287.hu.length} pending writes`), t287.hu = []));
    })), t287.yu;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */ class Su {
    constructor(t, e, n, s, i){
        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, this.deferred = new j, this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch((t)=>{});
    }
    /**
     * Creates and returns a DelayedOperation that has been scheduled to be
     * executed on the provided asyncQueue after the provided delayMs.
     *
     * @param asyncQueue - The queue to schedule the operation on.
     * @param id - A Timer ID identifying the type of operation this is.
     * @param delayMs - The delay (ms) before the operation should be scheduled.
     * @param op - The operation to run.
     * @param removalCallback - A callback to be called synchronously once the
     *   operation is executed or canceled, notifying the AsyncQueue to remove it
     *   from its delayedOperations list.
     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
     *   the DelayedOperation class public.
     */ static createAndSchedule(t, e, n, s, i) {
        const r = Date.now() + n, o = new Su(t, e, r, s, i);
        return o.start(n), o;
    }
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */ start(t) {
        this.timerHandle = setTimeout(()=>this.handleDelayElapsed()
        , t);
    }
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */ skipDelay() {
        return this.handleDelayElapsed();
    }
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */ cancel(t) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new Q(G.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
    }
    handleDelayElapsed() {
        this.asyncQueue.enqueueAndForget(()=>null !== this.timerHandle ? (this.clearTimeout(), this.op().then((t)=>this.deferred.resolve(t)
            )) : Promise.resolve()
        );
    }
    clearTimeout() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    }
}
/**
 * Returns a FirestoreError that can be surfaced to the user if the provided
 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
 */ function Du(t, e) {
    if (F("AsyncQueue", `${e}: ${t}`), Ri(t)) return new Q(G.UNAVAILABLE, `${e}: ${t}`);
    throw t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */ class Cu {
    /** The default ordering is by key if the comparator is omitted */ constructor(t288){
        // We are adding document key comparator to the end as it's the only
        // guaranteed unique property of a document.
        this.comparator = t288 ? (e, n)=>t288(e, n) || xt.comparator(e.key, n.key)
         : (t, e)=>xt.comparator(t.key, e.key)
        , this.keyedMap = zn(), this.sortedSet = new Bn(this.comparator);
    }
    /**
     * Returns an empty copy of the existing DocumentSet, using the same
     * comparator.
     */ static emptySet(t) {
        return new Cu(t.comparator);
    }
    has(t) {
        return null != this.keyedMap.get(t);
    }
    get(t) {
        return this.keyedMap.get(t);
    }
    first() {
        return this.sortedSet.minKey();
    }
    last() {
        return this.sortedSet.maxKey();
    }
    isEmpty() {
        return this.sortedSet.isEmpty();
    }
    /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */ indexOf(t) {
        const e = this.keyedMap.get(t);
        return e ? this.sortedSet.indexOf(e) : -1;
    }
    get size() {
        return this.sortedSet.size;
    }
    /** Iterates documents in order defined by "comparator" */ forEach(t) {
        this.sortedSet.inorderTraversal((e, n)=>(t(e), !1)
        );
    }
    /** Inserts or updates a document with the same key */ add(t) {
        // First remove the element if we have it.
        const e = this.delete(t.key);
        return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
    }
    /** Deletes a document with a given key */ delete(t) {
        const e = this.get(t);
        return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
    }
    isEqual(t) {
        if (!(t instanceof Cu)) return !1;
        if (this.size !== t.size) return !1;
        const e = this.sortedSet.getIterator(), n = t.sortedSet.getIterator();
        for(; e.hasNext();){
            const t = e.getNext().key, s = n.getNext().key;
            if (!t.isEqual(s)) return !1;
        }
        return !0;
    }
    toString() {
        const t = [];
        return this.forEach((e)=>{
            t.push(e.toString());
        }), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
    }
    copy(t, e) {
        const n = new Cu;
        return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */ class xu {
    constructor(){
        this.pu = new Bn(xt.comparator);
    }
    track(t) {
        const e = t.doc.key, n = this.pu.get(e);
        n ? // Merge the new change with the existing change.
        0 /* Added */  !== t.type && 3 /* Metadata */  === n.type ? this.pu = this.pu.insert(e, t) : 3 /* Metadata */  === t.type && 1 /* Removed */  !== n.type ? this.pu = this.pu.insert(e, {
            type: n.type,
            doc: t.doc
        }) : 2 /* Modified */  === t.type && 2 /* Modified */  === n.type ? this.pu = this.pu.insert(e, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : 2 /* Modified */  === t.type && 0 /* Added */  === n.type ? this.pu = this.pu.insert(e, {
            type: 0 /* Added */ ,
            doc: t.doc
        }) : 1 /* Removed */  === t.type && 0 /* Added */  === n.type ? this.pu = this.pu.remove(e) : 1 /* Removed */  === t.type && 2 /* Modified */  === n.type ? this.pu = this.pu.insert(e, {
            type: 1 /* Removed */ ,
            doc: n.doc
        }) : 0 /* Added */  === t.type && 1 /* Removed */  === n.type ? this.pu = this.pu.insert(e, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        L() : this.pu = this.pu.insert(e, t);
    }
    Iu() {
        const t = [];
        return this.pu.inorderTraversal((e, n)=>{
            t.push(n);
        }), t;
    }
}
class Nu {
    constructor(t, e, n, s, i, r, o, u){
        this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = u;
    }
    /** Returns a view snapshot as if all documents in the snapshot were added. */ static fromInitialDocuments(t289, e, n, s) {
        const i = [];
        return e.forEach((t)=>{
            i.push({
                type: 0 /* Added */ ,
                doc: t
            });
        }), new Nu(t289, e, Cu.emptySet(e), i, n, s, /* syncStateChanged= */ !0, /* excludesMetadataChanges= */ !1);
    }
    get hasPendingWrites() {
        return !this.mutatedKeys.isEmpty();
    }
    isEqual(t) {
        if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && je(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
        const e = this.docChanges, n = t.docChanges;
        if (e.length !== n.length) return !1;
        for(let t290 = 0; t290 < e.length; t290++)if (e[t290].type !== n[t290].type || !e[t290].doc.isEqual(n[t290].doc)) return !1;
        return !0;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */ class ku {
    constructor(){
        this.Tu = void 0, this.listeners = [];
    }
}
class Mu {
    constructor(){
        this.queries = new $n((t)=>We(t)
        , je), this.onlineState = "Unknown" /* Unknown */ , this.Eu = new Set;
    }
}
async function Ou(t, e) {
    const n = K(t), s = e.query;
    let i = !1, r = n.queries.get(s);
    if (r || (i = !0, r = new ku), i) try {
        r.Tu = await n.onListen(s);
    } catch (t291) {
        const n = Du(t291, `Initialization of query '${ze(e.query)}' failed`);
        return void e.onError(n);
    }
    if (n.queries.set(s, r), r.listeners.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
    e.Au(n.onlineState), r.Tu) e.Ru(r.Tu) && Lu(n);
}
async function Fu(t, e) {
    const n = K(t), s = e.query;
    let i = !1;
    const r = n.queries.get(s);
    if (r) {
        const t = r.listeners.indexOf(e);
        t >= 0 && (r.listeners.splice(t, 1), i = 0 === r.listeners.length);
    }
    if (i) return n.queries.delete(s), n.onUnlisten(s);
}
function $u(t, e) {
    const n = K(t);
    let s = !1;
    for (const t292 of e){
        const e = t292.query, i = n.queries.get(e);
        if (i) {
            for (const e of i.listeners)e.Ru(t292) && (s = !0);
            i.Tu = t292;
        }
    }
    s && Lu(n);
}
function Bu(t, e, n) {
    const s = K(t), i = s.queries.get(e);
    if (i) for (const t293 of i.listeners)t293.onError(n);
    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
    // after an error.
    s.queries.delete(e);
}
// Call all global snapshot listeners that have been set.
function Lu(t294) {
    t294.Eu.forEach((t)=>{
        t.next();
    });
}
/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */ class Uu {
    constructor(t, e, n){
        this.query = t, this.Pu = e, /**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */ this.bu = !1, this.Vu = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {};
    }
    /**
     * Applies the new ViewSnapshot to this listener, raising a user-facing event
     * if applicable (depending on what changed, whether the user has opted into
     * metadata-only changes, etc.). Returns true if a user-facing event was
     * indeed raised.
     */ Ru(t) {
        if (!this.options.includeMetadataChanges) {
            // Remove the metadata only changes.
            const e = [];
            for (const n of t.docChanges)3 /* Metadata */  !== n.type && e.push(n);
            t = new Nu(t.query, t.docs, t.oldDocs, e, t.mutatedKeys, t.fromCache, t.syncStateChanged, /* excludesMetadataChanges= */ !0);
        }
        let e = !1;
        return this.bu ? this.vu(t) && (this.Pu.next(t), e = !0) : this.Su(t, this.onlineState) && (this.Du(t), e = !0), this.Vu = t, e;
    }
    onError(t) {
        this.Pu.error(t);
    }
    /** Returns whether a snapshot was raised. */ Au(t) {
        this.onlineState = t;
        let e = !1;
        return this.Vu && !this.bu && this.Su(this.Vu, t) && (this.Du(this.Vu), e = !0), e;
    }
    Su(t, e) {
        // Always raise the first event when we're synced
        if (!t.fromCache) return !0;
        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
        // or Online if we wait long enough).
        const n = "Offline" /* Offline */  !== e;
        // Don't raise the event if we're online, aren't synced yet (checked
        // above) and are waiting for a sync.
        return (!this.options.Cu || !n) && (!t.docs.isEmpty() || "Offline" /* Offline */  === e);
    // Raise data from cache if we have any documents or we are offline
    }
    vu(t) {
        // We don't need to handle includeDocumentMetadataChanges here because
        // the Metadata only changes have already been stripped out if needed.
        // At this point the only changes we will see are the ones we should
        // propagate.
        if (t.docChanges.length > 0) return !0;
        const e = this.Vu && this.Vu.hasPendingWrites !== t.hasPendingWrites;
        return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges;
    // Generally we should have hit one of the cases above, but it's possible
    // to get here if there were only metadata docChanges and they got
    // stripped out.
    }
    Du(t) {
        t = Nu.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.bu = !0, this.Pu.next(t);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A complete element in the bundle stream, together with the byte length it
 * occupies in the stream.
 */ class qu {
    constructor(t, // How many bytes this element takes to store in the bundle.
    e){
        this.payload = t, this.byteLength = e;
    }
    xu() {
        return "metadata" in this.payload;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper to convert objects from bundles to model objects in the SDK.
 */ class Ku {
    constructor(t){
        this.M = t;
    }
    fi(t) {
        return Is(this.M, t);
    }
    /**
     * Converts a BundleDocument to a MutableDocument.
     */ di(t) {
        return t.metadata.exists ? bs(this.M, t.document, !1) : ne.newNoDocument(this.fi(t.metadata.name), this._i(t.metadata.readTime));
    }
    _i(t) {
        return ms(t);
    }
}
/**
 * A class to process the elements from a bundle, load them into local
 * storage and provide progress update while loading.
 */ class Gu {
    constructor(t, e, n){
        this.Nu = t, this.localStore = e, this.M = n, /** Batched queries to be saved into storage */ this.queries = [], /** Batched documents to be saved into storage */ this.documents = [], /** The collection groups affected by this bundle. */ this.collectionGroups = new Set, this.progress = Qu(t);
    }
    /**
     * Adds an element from the bundle to the loader.
     *
     * Returns a new progress if adding the element leads to a new progress,
     * otherwise returns null.
     */ ku(t) {
        this.progress.bytesLoaded += t.byteLength;
        let e = this.progress.documentsLoaded;
        if (t.payload.namedQuery) this.queries.push(t.payload.namedQuery);
        else if (t.payload.documentMetadata) {
            this.documents.push({
                metadata: t.payload.documentMetadata
            }), t.payload.documentMetadata.exists || ++e;
            const n = _t.fromString(t.payload.documentMetadata.name);
            this.collectionGroups.add(n.get(n.length - 2));
        } else t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, ++e);
        return e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
    }
    Mu(t) {
        const e = new Map, n = new Ku(this.M);
        for (const s of t)if (s.metadata.queries) {
            const t = n.fi(s.metadata.name);
            for (const n64 of s.metadata.queries){
                const s = (e.get(n64) || Xn()).add(t);
                e.set(n64, s);
            }
        }
        return e;
    }
    /**
     * Update the progress to 'Success' and return the updated progress.
     */ async complete() {
        const t = await go(this.localStore, new Ku(this.M), this.documents, this.Nu.id), e = this.Mu(this.documents);
        for (const t295 of this.queries)await yo(this.localStore, t295, e.get(t295.name));
        return this.progress.taskState = "Success", {
            progress: this.progress,
            Ou: this.collectionGroups,
            Fu: t
        };
    }
}
/**
 * Returns a `LoadBundleTaskProgress` representing the initial progress of
 * loading a bundle.
 */ function Qu(t) {
    return {
        taskState: "Running",
        documentsLoaded: 0,
        bytesLoaded: 0,
        totalDocuments: t.totalDocuments,
        totalBytes: t.totalBytes
    };
}
/**
 * Returns a `LoadBundleTaskProgress` representing the progress that the loading
 * has succeeded.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ju {
    constructor(t){
        this.key = t;
    }
}
class Wu {
    constructor(t){
        this.key = t;
    }
}
/**
 * View is responsible for computing the final merged truth of what docs are in
 * a query. It gets notified of local and remote changes to docs, and applies
 * the query filters and limits to determine the most correct possible results.
 */ class zu {
    constructor(t, /** Documents included in the remote target */ e){
        this.query = t, this.$u = e, this.Bu = null, /**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */ this.current = !1, /** Documents in the view but not in the remote target */ this.Lu = Xn(), /** Document Keys that have local changes */ this.mutatedKeys = Xn(), this.Uu = Ye(t), this.qu = new Cu(this.Uu);
    }
    /**
     * The set of remote documents that the server has told us belongs to the target associated with
     * this view.
     */ get Ku() {
        return this.$u;
    }
    /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges - The doc changes to apply to this view.
     * @param previousChanges - If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @returns a new set of docs, changes, and refill flag.
     */ Gu(t296, e158) {
        const n = e158 ? e158.Qu : new xu, s = e158 ? e158.qu : this.qu;
        let i = e158 ? e158.mutatedKeys : this.mutatedKeys, r = s, o = !1;
        // Track the last doc in a (full) limit. This is necessary, because some
        // update (a delete, or an update moving a doc past the old limit) might
        // mean there is some other document in the local cache that either should
        // come (1) between the old last limit doc and the new last document, in the
        // case of updates, or (2) after the new last document, in the case of
        // deletes. So we keep this doc at the old limit to compare the updates to.
        // Note that this should never get used in a refill (when previousChanges is
        // set), because there will only be adds -- no deletes or updates.
        const u = $e(this.query) && s.size === this.query.limit ? s.last() : null, a = Be(this.query) && s.size === this.query.limit ? s.first() : null;
        // Drop documents out to meet limit/limitToLast requirement.
        if (t296.inorderTraversal((t, e)=>{
            const c = s.get(t), h = He(this.query, e) ? e : null, l = !!c && this.mutatedKeys.has(c.key), f = !!h && (h.hasLocalMutations || // We only consider committed mutations for documents that were
            // mutated during the lifetime of the view.
            this.mutatedKeys.has(h.key) && h.hasCommittedMutations);
            let d = !1;
            // Calculate change
            if (c && h) c.data.isEqual(h.data) ? l !== f && (n.track({
                type: 3 /* Metadata */ ,
                doc: h
            }), d = !0) : this.ju(c, h) || (n.track({
                type: 2 /* Modified */ ,
                doc: h
            }), d = !0, (u && this.Uu(h, u) > 0 || a && this.Uu(h, a) < 0) && // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            (o = !0));
            else !c && h ? (n.track({
                type: 0 /* Added */ ,
                doc: h
            }), d = !0) : c && !h && (n.track({
                type: 1 /* Removed */ ,
                doc: c
            }), d = !0, (u || a) && // A doc was removed from a full limit query. We'll need to
            // requery from the local cache to see if we know about some other
            // doc that should be in the results.
            (o = !0));
            d && (h ? (r = r.add(h), i = f ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
        }), $e(this.query) || Be(this.query)) for(; r.size > this.query.limit;){
            const t = $e(this.query) ? r.last() : r.first();
            r = r.delete(t.key), i = i.delete(t.key), n.track({
                type: 1 /* Removed */ ,
                doc: t
            });
        }
        return {
            qu: r,
            Qu: n,
            ni: o,
            mutatedKeys: i
        };
    }
    ju(t, e) {
        // We suppress the initial change event for documents that were modified as
        // part of a write acknowledgment (e.g. when the value of a server transform
        // is applied) as Watch will send us the same document again.
        // By suppressing the event, we only raise two user visible events (one with
        // `hasPendingWrites` and the final state of the document) instead of three
        // (one with `hasPendingWrites`, the modified document with
        // `hasPendingWrites` and the final state of the document).
        return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
    }
    /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges - The set of changes to make to the view's docs.
     * @param updateLimboDocuments - Whether to update limbo documents based on
     *        this change.
     * @param targetChange - A target change to apply for computing limbo docs and
     *        sync state.
     * @returns A new ViewChange with the given docs, changes, and sync state.
     */ // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
    applyChanges(t297, e159, n65) {
        const s = this.qu;
        this.qu = t297.qu, this.mutatedKeys = t297.mutatedKeys;
        // Sort changes based on type and query comparator
        const i = t297.Qu.Iu();
        i.sort((t298, e160)=>(function(t299, e) {
                const n = (t)=>{
                    switch(t){
                        case 0 /* Added */ :
                            return 1;
                        case 2 /* Modified */ :
                        case 3 /* Metadata */ :
                            // A metadata change is converted to a modified change at the public
                            // api layer.  Since we sort by document key and then change type,
                            // metadata and modified changes must be sorted equivalently.
                            return 2;
                        case 1 /* Removed */ :
                            return 0;
                        default:
                            return L();
                    }
                };
                return n(t299) - n(e);
            })(t298.type, e160.type) || this.Uu(t298.doc, e160.doc)
        ), this.Wu(n65);
        const r = e159 ? this.zu() : [], o = 0 === this.Lu.size && this.current ? 1 /* Synced */  : 0 /* Local */ , u = o !== this.Bu;
        if (this.Bu = o, 0 !== i.length || u) return {
            snapshot: new Nu(this.query, t297.qu, s, i, t297.mutatedKeys, 0 /* Local */  === o, u, /* excludesMetadataChanges= */ !1),
            Hu: r
        };
        // no changes
        return {
            Hu: r
        };
    }
    /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */ Au(t) {
        return this.current && "Offline" /* Offline */  === t ? // If we're offline, set `current` to false and then call applyChanges()
        // to refresh our syncState and generate a ViewChange as appropriate. We
        // are guaranteed to get a new TargetChange that sets `current` back to
        // true once the client is back online.
        (this.current = !1, this.applyChanges({
            qu: this.qu,
            Qu: new xu,
            mutatedKeys: this.mutatedKeys,
            ni: !1
        }, /* updateLimboDocuments= */ !1)) : {
            Hu: []
        };
    }
    /**
     * Returns whether the doc for the given key should be in limbo.
     */ Ju(t) {
        // If the remote end says it's part of this query, it's not in limbo.
        return !this.$u.has(t) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
        !!this.qu.has(t) && !this.qu.get(t).hasLocalMutations;
    }
    /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */ Wu(t300) {
        t300 && (t300.addedDocuments.forEach((t)=>this.$u = this.$u.add(t)
        ), t300.modifiedDocuments.forEach((t)=>{}), t300.removedDocuments.forEach((t)=>this.$u = this.$u.delete(t)
        ), this.current = t300.current);
    }
    zu() {
        // We can only determine limbo documents when we're in-sync with the server.
        if (!this.current) return [];
        // TODO(klimt): Do this incrementally so that it's not quadratic when
        // updating many documents.
        const t301 = this.Lu;
        this.Lu = Xn(), this.qu.forEach((t)=>{
            this.Ju(t.key) && (this.Lu = this.Lu.add(t.key));
        });
        // Diff the new limbo docs with the old limbo docs.
        const e = [];
        return t301.forEach((t)=>{
            this.Lu.has(t) || e.push(new Wu(t));
        }), this.Lu.forEach((n)=>{
            t301.has(n) || e.push(new ju(n));
        }), e;
    }
    /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @returns The ViewChange that resulted from this synchronization.
     */ // PORTING NOTE: Multi-tab only.
    Yu(t) {
        this.$u = t.li, this.Lu = Xn();
        const e = this.Gu(t.documents);
        return this.applyChanges(e, /*updateLimboDocuments=*/ !0);
    }
    /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */ // PORTING NOTE: Multi-tab only.
    Xu() {
        return Nu.fromInitialDocuments(this.query, this.qu, this.mutatedKeys, 0 /* Local */  === this.Bu);
    }
}
/**
 * QueryView contains all of the data that SyncEngine needs to keep track of for
 * a particular query.
 */ class Hu {
    constructor(/**
     * The query itself.
     */ t, /**
     * The target number created by the client that is used in the watch
     * stream to identify this query.
     */ e, /**
     * The view is responsible for computing the final merged truth of what
     * docs are in the query. It gets notified of local and remote changes,
     * and applies the query filters and limits to determine the most correct
     * possible results.
     */ n){
        this.query = t, this.targetId = e, this.view = n;
    }
}
/** Tracks a limbo resolution. */ class Ju {
    constructor(t){
        this.key = t, /**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */ this.Zu = !1;
    }
}
/**
 * An implementation of `SyncEngine` coordinating with other parts of SDK.
 *
 * The parts of SyncEngine that act as a callback to RemoteStore need to be
 * registered individually. This is done in `syncEngineWrite()` and
 * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
 * serve as entry points to RemoteStore's functionality.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */ class Yu {
    constructor(t302, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
    s, i, r){
        this.localStore = t302, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.ta = {}, this.ea = new $n((t)=>We(t)
        , je), this.na = new Map, /**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query. The strings in this set are the result of calling
         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
         *
         * The `Set` type was chosen because it provides efficient lookup and removal
         * of arbitrary elements and it also maintains insertion order, providing the
         * desired queue-like FIFO semantics.
         */ this.sa = new Set, /**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */ this.ia = new Bn(xt.comparator), /**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */ this.ra = new Map, this.oa = new To, /** Stores user completion handlers, indexed by User and BatchId. */ this.ua = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */ this.aa = new Map, this.ca = br.yn(), this.onlineState = "Unknown" /* Unknown */ , // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.ha = void 0;
    }
    get isPrimaryClient() {
        return !0 === this.ha;
    }
}
/**
 * Initiates the new listen, resolves promise when listen enqueued to the
 * server. All the subsequent view snapshots or errors are sent to the
 * subscribed handlers. Returns the initial snapshot.
 */ async function Xu(t, e) {
    const n = Va(t);
    let s, i;
    const r = n.ea.get(e);
    if (r) // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
    // already exists when EventManager calls us for the first time. This
    // happens when the primary tab is already listening to this query on
    // behalf of another tab and the user of the primary also starts listening
    // to the query. EventManager will not have an assigned target ID in this
    // case and calls `listen` to obtain this ID.
    s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.Xu();
    else {
        const t = await ho(n.localStore, Ge(e));
        n.isPrimaryClient && su(n.remoteStore, t);
        const r = n.sharedClientState.addLocalQueryTarget(t.targetId);
        s = t.targetId, i = await Zu(n, e, s, "current" === r);
    }
    return i;
}
/**
 * Registers a view for a previously unknown query and computes its initial
 * snapshot.
 */ async function Zu(t303, e161, n66, s33) {
    // PORTING NOTE: On Web only, we inject the code that registers new Limbo
    // targets based on view changes. This allows us to only depend on Limbo
    // changes when user code includes queries.
    t303.la = (e162, n67, s34)=>(async function(t304, e, n, s) {
            let i = e.view.Gu(n);
            i.ni && // The query has a limit and some docs were removed, so we need
            // to re-run the query against the local store to make sure we
            // didn't lose any good docs that had been past the limit.
            (i = await fo(t304.localStore, e.query, /* usePreviousResults= */ !1).then(({ documents: t  })=>e.view.Gu(t, i)
            ));
            const r = s && s.targetChanges.get(e.targetId), o = e.view.applyChanges(i, /* updateLimboDocuments= */ t304.isPrimaryClient, r);
            return fa(t304, e.targetId, o.Hu), o.snapshot;
        })(t303, e162, n67, s34)
    ;
    const i19 = await fo(t303.localStore, e161, /* usePreviousResults= */ !0), r9 = new zu(e161, i19.li), o3 = r9.Gu(i19.documents), u = ns.createSynthesizedTargetChangeForCurrentChange(n66, s33 && "Offline" /* Offline */  !== t303.onlineState), a = r9.applyChanges(o3, /* updateLimboDocuments= */ t303.isPrimaryClient, u);
    fa(t303, n66, a.Hu);
    const c = new Hu(e161, n66, r9);
    return t303.ea.set(e161, c), t303.na.has(n66) ? t303.na.get(n66).push(e161) : t303.na.set(n66, [
        e161
    ]), a.snapshot;
}
/** Stops listening to the query. */ async function ta(t305, e) {
    const n = K(t305), s = n.ea.get(e), i = n.na.get(s.targetId);
    if (i.length > 1) return n.na.set(s.targetId, i.filter((t)=>!je(t, e)
    )), void n.ea.delete(e);
    // No other queries are mapped to the target, clean up the query and the target.
    if (n.isPrimaryClient) {
        // We need to remove the local query target first to allow us to verify
        // whether any other client is still interested in this target.
        n.sharedClientState.removeLocalQueryTarget(s.targetId);
        n.sharedClientState.isActiveQueryTarget(s.targetId) || await lo(n.localStore, s.targetId, /*keepPersistedTargetData=*/ !1).then(()=>{
            n.sharedClientState.clearQueryState(s.targetId), iu(n.remoteStore, s.targetId), ha(n, s.targetId);
        }).catch(Cr);
    } else ha(n, s.targetId), await lo(n.localStore, s.targetId, /*keepPersistedTargetData=*/ !0);
}
/**
 * Initiates the write of local mutation batch which involves adding the
 * writes to the mutation queue, notifying the remote store about new
 * mutations and raising events for any changes this write caused.
 *
 * The promise returned by this call is resolved when the above steps
 * have completed, *not* when the write was acked by the backend. The
 * userCallback is resolved once the write was acked/rejected by the
 * backend (or failed locally for any other reason).
 */ async function ea(t307, e163, n68) {
    const s35 = va(t307);
    try {
        const t306 = await function(t308, e164) {
            const n = K(t308), s = at.now(), i20 = e164.reduce((t, e)=>t.add(e.key)
            , Xn());
            let r;
            return n.persistence.runTransaction("Locally write mutations", "readwrite", (t309)=>n.ci.Ks(t309, i20).next((i)=>{
                    r = i;
                    // For non-idempotent mutations (such as `FieldValue.increment()`),
                    // we record the base state in a separate patch mutation. This is
                    // later used to guarantee consistent values and prevents flicker
                    // even if the backend sends us an update that already includes our
                    // transform.
                    const o = [];
                    for (const t of e164){
                        const e = An(t, r.get(t.key));
                        null != e && // NOTE: The base state should only be applied if there's some
                        // existing document to override, so use a Precondition of
                        // exists=true
                        o.push(new Vn(t.key, e, ee(e.value.mapValue), yn.exists(!0)));
                    }
                    return n.Bs.addMutationBatch(t309, s, o, e164);
                })
            ).then((t)=>(t.applyToLocalDocumentSet(r), {
                    batchId: t.batchId,
                    changes: r
                })
            );
        }(s35.localStore, e163);
        s35.sharedClientState.addPendingMutation(t306.batchId), function(t, e, n) {
            let s = t.ua[t.currentUser.toKey()];
            s || (s = new Bn(rt));
            s = s.insert(e, n), t.ua[t.currentUser.toKey()] = s;
        }(s35, t306.batchId, n68), await wa(s35, t306.changes), await mu(s35.remoteStore);
    } catch (t) {
        // If we can't persist the mutation, we reject the user callback and
        // don't send the mutation. The user can then retry the write.
        const e = Du(t, "Failed to persist write");
        n68.reject(e);
    }
}
/**
 * Applies one remote event to the sync engine, notifying any views of the
 * changes, and releasing any pending mutation batches that would become
 * visible because of the snapshot version the remote event contains.
 */ async function na(t311, e165) {
    const n = K(t311);
    try {
        const t310 = await uo(n.localStore, e165);
        // Update `receivedDocument` as appropriate for any limbo targets.
        e165.targetChanges.forEach((t, e)=>{
            const s = n.ra.get(e);
            s && // Since this is a limbo resolution lookup, it's for a single document
            // and it could be added, modified, or removed, but not a combination.
            (U(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), t.addedDocuments.size > 0 ? s.Zu = !0 : t.modifiedDocuments.size > 0 ? U(s.Zu) : t.removedDocuments.size > 0 && (U(s.Zu), s.Zu = !1));
        }), await wa(n, t310, e165);
    } catch (t) {
        await Cr(t);
    }
}
/**
 * Applies an OnlineState change to the sync engine and notifies any views of
 * the change.
 */ function sa(t, e166, n69) {
    const s36 = K(t);
    // If we are the secondary client, we explicitly ignore the remote store's
    // online state (the local client may go offline, even though the primary
    // tab remains online) and only apply the primary tab's online state from
    // SharedClientState.
    if (s36.isPrimaryClient && 0 /* RemoteStore */  === n69 || !s36.isPrimaryClient && 1 /* SharedClientState */  === n69) {
        const t312 = [];
        s36.ea.forEach((n, s)=>{
            const i = s.view.Au(e166);
            i.snapshot && t312.push(i.snapshot);
        }), function(t, e) {
            const n70 = K(t);
            n70.onlineState = e;
            let s = !1;
            n70.queries.forEach((t, n)=>{
                for (const t313 of n.listeners)// Run global snapshot listeners if a consistent snapshot has been emitted.
                t313.Au(e) && (s = !0);
            }), s && Lu(n70);
        }(s36.eventManager, e166), t312.length && s36.ta.Qo(t312), s36.onlineState = e166, s36.isPrimaryClient && s36.sharedClientState.setOnlineState(e166);
    }
}
/**
 * Rejects the listen for the given targetID. This can be triggered by the
 * backend for any active target.
 *
 * @param syncEngine - The sync engine implementation.
 * @param targetId - The targetID corresponds to one previously initiated by the
 * user as part of TargetData passed to listen() on RemoteStore.
 * @param err - A description of the condition that has forced the rejection.
 * Nearly always this will be an indication that the user is no longer
 * authorized to see the data matching the target.
 */ async function ia(t, e, n) {
    const s = K(t);
    // PORTING NOTE: Multi-tab only.
    s.sharedClientState.updateQueryState(e, "rejected", n);
    const i = s.ra.get(e), r = i && i.key;
    if (r) {
        // TODO(klimt): We really only should do the following on permission
        // denied errors, but we don't have the cause code here.
        // It's a limbo doc. Create a synthetic event saying it was deleted.
        // This is kind of a hack. Ideally, we would have a method in the local
        // store to purge a document. However, it would be tricky to keep all of
        // the local store's invariants with another method.
        let t = new Bn(xt.comparator);
        // TODO(b/217189216): This limbo document should ideally have a read time,
        // so that it is picked up by any read-time based scans. The backend,
        // however, does not send a read time for target removals.
        t = t.insert(r, ne.newNoDocument(r, ct.min()));
        const n = Xn().add(r), i = new es(ct.min(), /* targetChanges= */ new Map, /* targetMismatches= */ new qn(rt), t, n);
        await na(s, i), // Since this query failed, we won't want to manually unlisten to it.
        // We only remove it from bookkeeping after we successfully applied the
        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
        // this query when the RemoteStore restarts the Watch stream, which should
        // re-trigger the target failure.
        s.ia = s.ia.remove(r), s.ra.delete(e), _a(s);
    } else await lo(s.localStore, e, /* keepPersistedTargetData */ !1).then(()=>ha(s, e, n)
    ).catch(Cr);
}
async function ra(t, e) {
    const n = K(t), s = e.batch.batchId;
    try {
        const t = await ro(n.localStore, e);
        // The local store may or may not be able to apply the write result and
        // raise events immediately (depending on whether the watcher is caught
        // up), so we raise user callbacks first so that they consistently happen
        // before listen events.
        ca(n, s, /*error=*/ null), aa(n, s), n.sharedClientState.updateMutationState(s, "acknowledged"), await wa(n, t);
    } catch (t314) {
        await Cr(t314);
    }
}
async function oa(t316, e167, n71) {
    const s37 = K(t316);
    try {
        const t315 = await function(t317, e168) {
            const n = K(t317);
            return n.persistence.runTransaction("Reject batch", "readwrite-primary", (t)=>{
                let s;
                return n.Bs.lookupMutationBatch(t, e168).next((e)=>(U(null !== e), s = e.keys(), n.Bs.removeMutationBatch(t, e))
                ).next(()=>n.Bs.performConsistencyCheck(t)
                ).next(()=>n.ci.Ks(t, s)
                );
            });
        }(s37.localStore, e167);
        // The local store may or may not be able to apply the write result and
        // raise events immediately (depending on whether the watcher is caught up),
        // so we raise user callbacks first so that they consistently happen before
        // listen events.
        ca(s37, e167, n71), aa(s37, e167), s37.sharedClientState.updateMutationState(e167, "rejected", n71), await wa(s37, t315);
    } catch (n) {
        await Cr(n);
    }
}
/**
 * Registers a user callback that resolves when all pending mutations at the moment of calling
 * are acknowledged .
 */ async function ua(t319, e169) {
    const n = K(t319);
    cu(n.remoteStore) || O("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
    try {
        const t318 = await function(t320) {
            const e = K(t320);
            return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (t)=>e.Bs.getHighestUnacknowledgedBatchId(t)
            );
        }(n.localStore);
        if (-1 === t318) // Trigger the callback right away if there is no pending writes at the moment.
        return void e169.resolve();
        const s = n.aa.get(t318) || [];
        s.push(e169), n.aa.set(t318, s);
    } catch (t) {
        const n = Du(t, "Initialization of waitForPendingWrites() operation failed");
        e169.reject(n);
    }
}
/**
 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
 * if there are any.
 */ function aa(t321, e) {
    (t321.aa.get(e) || []).forEach((t)=>{
        t.resolve();
    }), t321.aa.delete(e);
}
/** Reject all outstanding callbacks waiting for pending writes to complete. */ function ca(t, e, n) {
    const s = K(t);
    let i = s.ua[s.currentUser.toKey()];
    // NOTE: Mutations restored from persistence won't have callbacks, so it's
    // okay for there to be no callback for this ID.
    if (i) {
        const t = i.get(e);
        t && (n ? t.reject(n) : t.resolve(), i = i.remove(e)), s.ua[s.currentUser.toKey()] = i;
    }
}
function ha(t, e170, n = null) {
    t.sharedClientState.removeLocalQueryTarget(e170);
    for (const s of t.na.get(e170))t.ea.delete(s), n && t.ta.fa(s, n);
    if (t.na.delete(e170), t.isPrimaryClient) t.oa.Pi(e170).forEach((e)=>{
        t.oa.containsKey(e) || // We removed the last reference for this key
        la(t, e);
    });
}
function la(t, e) {
    t.sa.delete(e.path.canonicalString());
    // It's possible that the target already got removed because the query failed. In that case,
    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
    const n = t.ia.get(e);
    null !== n && (iu(t.remoteStore, n), t.ia = t.ia.remove(e), t.ra.delete(n), _a(t));
}
function fa(t, e, n) {
    for (const s of n)if (s instanceof ju) t.oa.addReference(s.key, e), da(t, s);
    else if (s instanceof Wu) {
        O("SyncEngine", "Document no longer in limbo: " + s.key), t.oa.removeReference(s.key, e);
        t.oa.containsKey(s.key) || // We removed the last reference for this key
        la(t, s.key);
    } else L();
}
function da(t, e) {
    const n = e.key, s = n.path.canonicalString();
    t.ia.get(n) || t.sa.has(s) || (O("SyncEngine", "New document in limbo: " + n), t.sa.add(s), _a(t));
}
/**
 * Starts listens for documents in limbo that are enqueued for resolution,
 * subject to a maximum number of concurrent resolutions.
 *
 * Without bounding the number of concurrent resolutions, the server can fail
 * with "resource exhausted" errors which can lead to pathological client
 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
 */ function _a(t) {
    for(; t.sa.size > 0 && t.ia.size < t.maxConcurrentLimboResolutions;){
        const e = t.sa.values().next().value;
        t.sa.delete(e);
        const n = new xt(_t.fromString(e)), s = t.ca.next();
        t.ra.set(s, new Ju(n)), t.ia = t.ia.insert(n, s), su(t.remoteStore, new ki(Ge(Fe(n.path)), s, 2 /* LimboResolution */ , nt.A));
    }
}
async function wa(t322, e171, n72) {
    const s38 = K(t322), i21 = [], r = [], o = [];
    s38.ea.isEmpty() || (s38.ea.forEach((t323, u)=>{
        o.push(s38.la(u, e171, n72).then((t)=>{
            if (t) {
                s38.isPrimaryClient && s38.sharedClientState.updateQueryState(u.targetId, t.fromCache ? "not-current" : "current"), i21.push(t);
                const e = to.Ys(u.targetId, t);
                r.push(e);
            }
        }));
    }), await Promise.all(o), s38.ta.Qo(i21), await async function(t325, e172) {
        const n = K(t325);
        try {
            await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t)=>pi.forEach(e172, (e)=>pi.forEach(e.Hs, (s)=>n.persistence.referenceDelegate.addReference(t, e.targetId, s)
                    ).next(()=>pi.forEach(e.Js, (s)=>n.persistence.referenceDelegate.removeReference(t, e.targetId, s)
                        )
                    )
                )
            );
        } catch (t) {
            if (!Ri(t)) throw t;
            // If `notifyLocalViewChanges` fails, we did not advance the sequence
            // number for the documents that were included in this transaction.
            // This might trigger them to be deleted earlier than they otherwise
            // would have, but it should not invalidate the integrity of the data.
            O("LocalStore", "Failed to update sequence numbers: " + t);
        }
        for (const t324 of e172){
            const e = t324.targetId;
            if (!t324.fromCache) {
                const t = n.ii.get(e), s = t.snapshotVersion, i = t.withLastLimboFreeSnapshotVersion(s);
                // Advance the last limbo free snapshot version
                n.ii = n.ii.insert(e, i);
            }
        }
    }(s38.localStore, r));
}
async function ma(t327, e173) {
    const n = K(t327);
    if (!n.currentUser.isEqual(e173)) {
        O("SyncEngine", "User change. New user:", e173.toKey());
        const t326 = await io(n.localStore, e173);
        n.currentUser = e173, // Fails tasks waiting for pending writes requested by previous user.
        function(t328, e) {
            t328.aa.forEach((t329)=>{
                t329.forEach((t)=>{
                    t.reject(new Q(G.CANCELLED, e));
                });
            }), t328.aa.clear();
        }(n, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
        n.sharedClientState.handleUserChange(e173, t326.removedBatchIds, t326.addedBatchIds), await wa(n, t326.hi);
    }
}
function ga(t, e) {
    const n = K(t), s = n.ra.get(e);
    if (s && s.Zu) return Xn().add(s.key);
    {
        let t = Xn();
        const s = n.na.get(e);
        if (!s) return t;
        for (const e174 of s){
            const s = n.ea.get(e174);
            t = t.unionWith(s.view.Ku);
        }
        return t;
    }
}
/**
 * Reconcile the list of synced documents in an existing view with those
 * from persistence.
 */ async function ya(t, e) {
    const n = K(t), s = await fo(n.localStore, e.query, /* usePreviousResults= */ !0), i = e.view.Yu(s);
    return n.isPrimaryClient && fa(n, e.targetId, i.Hu), i;
}
/**
 * Retrieves newly changed documents from remote document cache and raises
 * snapshots if needed.
 */ // PORTING NOTE: Multi-Tab only.
async function pa(t330, e) {
    const n = K(t330);
    return wo(n.localStore, e).then((t)=>wa(n, t)
    );
}
/** Applies a mutation state to an existing batch.  */ // PORTING NOTE: Multi-Tab only.
async function Ia(t331, e175, n73, s39) {
    const i = K(t331), r = await function(t332, e176) {
        const n = K(t332), s = K(n.Bs);
        return n.persistence.runTransaction("Lookup mutation documents", "readonly", (t)=>s.fn(t, e176).next((e)=>e ? n.ci.Ks(t, e) : pi.resolve(null)
            )
        );
    }(i.localStore, e175);
    null !== r ? ("pending" === n73 ? // If we are the primary client, we need to send this write to the
    // backend. Secondary clients will ignore these writes since their remote
    // connection is disabled.
    await mu(i.remoteStore) : "acknowledged" === n73 || "rejected" === n73 ? // NOTE: Both these methods are no-ops for batches that originated from
    // other clients.
    (ca(i, e175, s39 || null), aa(i, e175), function(t, e) {
        K(K(t).Bs)._n(e);
    }(i.localStore, e175)) : L(), await wa(i, r)) : // A throttled tab may not have seen the mutation before it was completed
    // and removed from the mutation queue, in which case we won't have cached
    // the affected documents. In this case we can safely ignore the update
    // since that means we didn't apply the mutation locally at all (if we
    // had, we would have cached the affected documents), and so we will just
    // see any resulting document changes via normal remote document updates
    // as applicable.
    O("SyncEngine", "Cannot apply mutation batch with id: " + e175);
}
/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
async function Ta(t, e178) {
    const n74 = K(t);
    if (Va(n74), va(n74), !0 === e178 && !0 !== n74.ha) {
        // Secondary tabs only maintain Views for their local listeners and the
        // Views internal state may not be 100% populated (in particular
        // secondary tabs don't track syncedDocuments, the set of documents the
        // server considers to be in the target). So when a secondary becomes
        // primary, we need to need to make sure that all views for all targets
        // match the state on disk.
        const t = n74.sharedClientState.getAllActiveQueryTargets(), e = await Ea(n74, t.toArray());
        n74.ha = !0, await bu(n74.remoteStore, !0);
        for (const t333 of e)su(n74.remoteStore, t333);
    } else if (!1 === e178 && !1 !== n74.ha) {
        const t334 = [];
        let e177 = Promise.resolve();
        n74.na.forEach((s, i)=>{
            n74.sharedClientState.isLocalQueryTarget(i) ? t334.push(i) : e177 = e177.then(()=>(ha(n74, i), lo(n74.localStore, i, /*keepPersistedTargetData=*/ !0))
            ), iu(n74.remoteStore, i);
        }), await e177, await Ea(n74, t334), // PORTING NOTE: Multi-Tab only.
        function(t) {
            const e = K(t);
            e.ra.forEach((t, n)=>{
                iu(e.remoteStore, n);
            }), e.oa.bi(), e.ra = new Map, e.ia = new Bn(xt.comparator);
        }(n74), n74.ha = !1, await bu(n74.remoteStore, !1);
    }
}
async function Ea(t, e, n) {
    const s = K(t), i = [], r = [];
    for (const t335 of e){
        let e;
        const n = s.na.get(t335);
        if (n && 0 !== n.length) {
            // For queries that have a local View, we fetch their current state
            // from LocalStore (as the resume token and the snapshot version
            // might have changed) and reconcile their views with the persisted
            // state (the list of syncedDocuments may have gotten out of sync).
            e = await ho(s.localStore, Ge(n[0]));
            for (const t of n){
                const e = s.ea.get(t), n = await ya(s, e);
                n.snapshot && r.push(n.snapshot);
            }
        } else {
            // For queries that never executed on this client, we need to
            // allocate the target in LocalStore and initialize a new View.
            const n = await _o(s.localStore, t335);
            e = await ho(s.localStore, n), await Zu(s, Aa(n), t335, /*current=*/ !1);
        }
        i.push(e);
    }
    return s.ta.Qo(r), i;
}
/**
 * Creates a `Query` object from the specified `Target`. There is no way to
 * obtain the original `Query`, so we synthesize a `Query` from the `Target`
 * object.
 *
 * The synthesized result might be different from the original `Query`, but
 * since the synthesized `Query` should return the same results as the
 * original one (only the presentation of results might differ), the potential
 * difference will not cause issues.
 */ // PORTING NOTE: Multi-Tab only.
function Aa(t) {
    return Oe(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
}
/** Returns the IDs of the clients that are currently active. */ // PORTING NOTE: Multi-Tab only.
function Ra(t) {
    const e = K(t);
    return K(K(e.localStore).persistence).Fs();
}
/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
async function Pa(t, e, n, s) {
    const i = K(t);
    if (i.ha) // If we receive a target state notification via WebStorage, we are
    // either already secondary or another tab has taken the primary lease.
    return void O("SyncEngine", "Ignoring unexpected query state notification.");
    const r = i.na.get(e);
    if (r && r.length > 0) switch(n){
        case "current":
        case "not-current":
            {
                const t = await wo(i.localStore, Je(r[0])), s = es.createSynthesizedRemoteEventForCurrentChange(e, "current" === n);
                await wa(i, t, s);
                break;
            }
        case "rejected":
            await lo(i.localStore, e, /* keepPersistedTargetData */ !0), ha(i, e, s);
            break;
        default:
            L();
    }
}
/** Adds or removes Watch targets for queries from different tabs. */ async function ba(t, e, n) {
    const s = Va(t);
    if (s.ha) {
        for (const t of e){
            if (s.na.has(t)) {
                // A target might have been added in a previous attempt
                O("SyncEngine", "Adding an already active target " + t);
                continue;
            }
            const e = await _o(s.localStore, t), n = await ho(s.localStore, e);
            await Zu(s, Aa(e), n.targetId, /*current=*/ !1), su(s.remoteStore, n);
        }
        for (const t336 of n)// Check that the target is still active since the target might have been
        // removed if it has been rejected by the backend.
        s.na.has(t336) && // Release queries that are still active.
        await lo(s.localStore, t336, /* keepPersistedTargetData */ !1).then(()=>{
            iu(s.remoteStore, t336), ha(s, t336);
        }).catch(Cr);
    }
}
function Va(t) {
    const e = K(t);
    return e.remoteStore.remoteSyncer.applyRemoteEvent = na.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = ga.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = ia.bind(null, e), e.ta.Qo = $u.bind(null, e.eventManager), e.ta.fa = Bu.bind(null, e.eventManager), e;
}
function va(t) {
    const e = K(t);
    return e.remoteStore.remoteSyncer.applySuccessfulWrite = ra.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = oa.bind(null, e), e;
}
/**
 * Loads a Firestore bundle into the SDK. The returned promise resolves when
 * the bundle finished loading.
 *
 * @param syncEngine - SyncEngine to use.
 * @param bundleReader - Bundle to load into the SDK.
 * @param task - LoadBundleTask used to update the loading progress to public API.
 */ function Sa(t337, e179, n75) {
    const s40 = K(t337);
    /** Loads a bundle and returns the list of affected collection groups. */ // eslint-disable-next-line @typescript-eslint/no-floating-promises
    (async function(t338, e180, n76) {
        try {
            const s41 = await e180.getMetadata();
            if (await function(t339, e) {
                const n = K(t339), s = ms(e.createTime);
                return n.persistence.runTransaction("hasNewerBundle", "readonly", (t)=>n._s.getBundleMetadata(t, e.id)
                ).then((t)=>!!t && t.createTime.compareTo(s) >= 0
                );
            }(t338.localStore, s41)) return await e180.close(), n76._completeWith(function(t) {
                return {
                    taskState: "Success",
                    documentsLoaded: t.totalDocuments,
                    bytesLoaded: t.totalBytes,
                    totalDocuments: t.totalDocuments,
                    totalBytes: t.totalBytes
                };
            }(s41)), Promise.resolve(new Set);
            n76._updateProgress(Qu(s41));
            const i = new Gu(s41, t338.localStore, e180.M);
            let r = await e180.da();
            for(; r;){
                const t = await i.ku(r);
                t && n76._updateProgress(t), r = await e180.da();
            }
            const o = await i.complete();
            return await wa(t338, o.Fu, /* remoteEvent */ void 0), // Save metadata, so loading the same bundle will skip.
            await function(t340, e) {
                const n = K(t340);
                return n.persistence.runTransaction("Save bundle", "readwrite", (t)=>n._s.saveBundleMetadata(t, e)
                );
            }(t338.localStore, s41), n76._completeWith(o.progress), Promise.resolve(o.Ou);
        } catch (t) {
            return $("SyncEngine", `Loading bundle failed with ${t}`), n76._failWith(t), Promise.resolve(new Set);
        }
    })(s40, e179, n75).then((t)=>{
        s40.sharedClientState.notifyBundleLoaded(t);
    });
}
class Da {
    constructor(){
        this.synchronizeTabs = !1;
    }
    async initialize(t) {
        this.M = Wo(t.databaseInfo.databaseId), this.sharedClientState = this._a(t), this.persistence = this.wa(t), await this.persistence.start(), this.gcScheduler = this.ma(t), this.localStore = this.ga(t);
    }
    ma(t) {
        return null;
    }
    ga(t) {
        return so(this.persistence, new eo, t.initialUser, this.M);
    }
    wa(t) {
        return new Vo(So.zi, this.M);
    }
    _a(t) {
        return new Bo;
    }
    async terminate() {
        this.gcScheduler && this.gcScheduler.stop(), await this.sharedClientState.shutdown(), await this.persistence.shutdown();
    }
}
/**
 * Provides all components needed for Firestore with IndexedDB persistence.
 */ class Ca extends Da {
    constructor(t, e, n){
        super(), this.ya = t, this.cacheSizeBytes = e, this.forceOwnership = n, this.synchronizeTabs = !1;
    }
    async initialize(t) {
        await super.initialize(t), await this.ya.initialize(this, t), // Enqueue writes from a previous session
        await va(this.ya.syncEngine), await mu(this.ya.remoteStore), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.Ts(()=>(this.gcScheduler && !this.gcScheduler.started && this.gcScheduler.start(this.localStore), Promise.resolve())
        );
    }
    ga(t) {
        return so(this.persistence, new eo, t.initialUser, this.M);
    }
    ma(t) {
        const e = this.persistence.referenceDelegate.garbageCollector;
        return new kr(e, t.asyncQueue);
    }
    wa(t) {
        const e = Xr(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? yr.withCacheSize(this.cacheSizeBytes) : yr.DEFAULT;
        return new Hr(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, Qo(), jo(), this.M, this.sharedClientState, !!this.forceOwnership);
    }
    _a(t) {
        return new Bo;
    }
}
/**
 * Provides all components needed for Firestore with multi-tab IndexedDB
 * persistence.
 *
 * In the legacy client, this provider is used to provide both multi-tab and
 * non-multi-tab persistence since we cannot tell at build time whether
 * `synchronizeTabs` will be enabled.
 */ class xa extends Ca {
    constructor(t, e){
        super(t, e, /* forceOwnership= */ !1), this.ya = t, this.cacheSizeBytes = e, this.synchronizeTabs = !0;
    }
    async initialize(t341) {
        await super.initialize(t341);
        const e = this.ya.syncEngine;
        this.sharedClientState instanceof $o && (this.sharedClientState.syncEngine = {
            Mr: Ia.bind(null, e),
            Or: Pa.bind(null, e),
            Fr: ba.bind(null, e),
            Fs: Ra.bind(null, e),
            kr: pa.bind(null, e)
        }, await this.sharedClientState.start()), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.Ts(async (t)=>{
            await Ta(this.ya.syncEngine, t), this.gcScheduler && (t && !this.gcScheduler.started ? this.gcScheduler.start(this.localStore) : t || this.gcScheduler.stop());
        });
    }
    _a(t) {
        const e = Qo();
        if (!$o.vt(e)) throw new Q(G.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        const n = Xr(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
        return new $o(e, t.asyncQueue, n, t.clientId, t.initialUser);
    }
}
/**
 * Initializes and wires the components that are needed to interface with the
 * network.
 */ class Na {
    async initialize(t342, e) {
        this.localStore || (this.localStore = t342.localStore, this.sharedClientState = t342.sharedClientState, this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(e, /* startAsPrimary=*/ !t342.synchronizeTabs), this.sharedClientState.onlineStateHandler = (t)=>sa(this.syncEngine, t, 1 /* SharedClientState */ )
        , this.remoteStore.remoteSyncer.handleCredentialChange = ma.bind(null, this.syncEngine), await bu(this.remoteStore, this.syncEngine.isPrimaryClient));
    }
    createEventManager(t) {
        return new Mu;
    }
    createDatastore(t343) {
        const e181 = Wo(t343.databaseInfo.databaseId), n77 = (s43 = t343.databaseInfo, new Go(s43));
        var s43;
        /** Return the Platform-specific connectivity monitor. */ return function(t, e, n, s) {
            return new Xo(t, e, n, s);
        }(t343.authCredentials, t343.appCheckCredentials, n77, e181);
    }
    createRemoteStore(t344) {
        var e, n, s, i, r;
        return e = this.localStore, n = this.datastore, s = t344.asyncQueue, i = (t)=>sa(this.syncEngine, t, 0 /* RemoteStore */ )
        , r = Uo.vt() ? new Uo : new Lo, new tu(e, n, s, i, r);
    /** Re-enables the network. Idempotent. */ }
    createSyncEngine(t345, e182) {
        return function(t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
        s, i, r, o) {
            const u = new Yu(t, e, n, s, i, r);
            return o && (u.ha = !0), u;
        }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t345.initialUser, t345.maxConcurrentLimboResolutions, e182);
    }
    terminate() {
        return async function(t) {
            const e = K(t);
            O("RemoteStore", "RemoteStore shutting down."), e.fu.add(5 /* Shutdown */ ), await nu(e), e._u.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
            // triggering spurious listener events with cached data, etc.
            e.wu.set("Unknown" /* Unknown */ );
        }(this.remoteStore);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * How many bytes to read each time when `ReadableStreamReader.read()` is
 * called. Only applicable for byte streams that we control (e.g. those backed
 * by an UInt8Array).
 */ /**
 * Builds a `ByteStreamReader` from a UInt8Array.
 * @param source - The data source to use.
 * @param bytesPerRead - How many bytes each `read()` from the returned reader
 *        will read.
 */ function ka(t, e = 10240) {
    let n = 0;
    // The TypeScript definition for ReadableStreamReader changed. We use
    // `any` here to allow this code to compile with different versions.
    // See https://github.com/microsoft/TypeScript/issues/42970
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async read () {
            if (n < t.byteLength) {
                const s = {
                    value: t.slice(n, n + e),
                    done: !1
                };
                return n += e, s;
            }
            return {
                done: !0
            };
        },
        async cancel () {},
        releaseLock () {},
        closed: Promise.reject("unimplemented")
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */ class Ma {
    constructor(t){
        this.observer = t, /**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */ this.muted = !1;
    }
    next(t) {
        this.observer.next && this.pa(this.observer.next, t);
    }
    error(t) {
        this.observer.error ? this.pa(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
    }
    Ia() {
        this.muted = !0;
    }
    pa(t, e) {
        this.muted || setTimeout(()=>{
            this.muted || t(e);
        }, 0);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class representing a bundle.
 *
 * Takes a bundle stream or buffer, and presents abstractions to read bundled
 * elements out of the underlying content.
 */ class Oa {
    constructor(/** The reader to read from underlying binary bundle data source. */ t346, e){
        this.Ta = t346, this.M = e, /** Cached bundle metadata. */ this.metadata = new j, /**
         * Internal buffer to hold bundle content, accumulating incomplete element
         * content.
         */ this.buffer = new Uint8Array, this.Ea = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
        this.Aa().then((t)=>{
            t && t.xu() ? this.metadata.resolve(t.payload.metadata) : this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(null == t ? void 0 : t.payload)}`));
        }, (t)=>this.metadata.reject(t)
        );
    }
    close() {
        return this.Ta.cancel();
    }
    async getMetadata() {
        return this.metadata.promise;
    }
    async da() {
        // Makes sure metadata is read before proceeding.
        return await this.getMetadata(), this.Aa();
    }
    /**
     * Reads from the head of internal buffer, and pulling more data from
     * underlying stream if a complete element cannot be found, until an
     * element(including the prefixed length and the JSON string) is found.
     *
     * Once a complete element is read, it is dropped from internal buffer.
     *
     * Returns either the bundled element, or null if we have reached the end of
     * the stream.
     */ async Aa() {
        const t = await this.Ra();
        if (null === t) return null;
        const e = this.Ea.decode(t), n = Number(e);
        isNaN(n) && this.Pa(`length string (${e}) is not valid number`);
        const s = await this.ba(n);
        return new qu(JSON.parse(s), t.length + n);
    }
    /** First index of '{' from the underlying buffer. */ Va() {
        return this.buffer.findIndex((t)=>t === "{".charCodeAt(0)
        );
    }
    /**
     * Reads from the beginning of the internal buffer, until the first '{', and
     * return the content.
     *
     * If reached end of the stream, returns a null.
     */ async Ra() {
        for(; this.Va() < 0;){
            if (await this.va()) break;
        }
        // Broke out of the loop because underlying stream is closed, and there
        // happens to be no more data to process.
        if (0 === this.buffer.length) return null;
        const t = this.Va();
        // Broke out of the loop because underlying stream is closed, but still
        // cannot find an open bracket.
        t < 0 && this.Pa("Reached the end of bundle when a length string is expected.");
        const e = this.buffer.slice(0, t);
        // Update the internal buffer to drop the read length.
        return this.buffer = this.buffer.slice(t), e;
    }
    /**
     * Reads from a specified position from the internal buffer, for a specified
     * number of bytes, pulling more data from the underlying stream if needed.
     *
     * Returns a string decoded from the read bytes.
     */ async ba(t) {
        for(; this.buffer.length < t;)await this.va() && this.Pa("Reached the end of bundle when more is expected.");
        const e = this.Ea.decode(this.buffer.slice(0, t));
        // Update the internal buffer to drop the read json string.
        return this.buffer = this.buffer.slice(t), e;
    }
    Pa(t) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        throw this.Ta.cancel(), new Error(`Invalid bundle format: ${t}`);
    }
    /**
     * Pulls more data from underlying stream to internal buffer.
     * Returns a boolean indicating whether the stream is finished.
     */ async va() {
        const t = await this.Ta.read();
        if (!t.done) {
            const e = new Uint8Array(this.buffer.length + t.value.length);
            e.set(this.buffer), e.set(t.value, this.buffer.length), this.buffer = e;
        }
        return t.done;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */ class Fa {
    constructor(t){
        this.datastore = t, // The version of each document that was read during this transaction.
        this.readVersions = new Map, this.mutations = [], this.committed = !1, /**
         * A deferred usage error that occurred previously in this transaction that
         * will cause the transaction to fail once it actually commits.
         */ this.lastWriteError = null, /**
         * Set of documents that have been written in the transaction.
         *
         * When there's more than one write to the same key in a transaction, any
         * writes after the first are handled differently.
         */ this.writtenDocs = new Set;
    }
    async lookup(t347) {
        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new Q(G.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
        const e183 = await async function(t348, e184) {
            const n = K(t348), s = As(n.M) + "/documents", i = {
                documents: e184.map((t)=>ps(n.M, t)
                )
            }, r = await n.ho("BatchGetDocuments", s, i), o = new Map;
            r.forEach((t)=>{
                const e = Vs(n.M, t);
                o.set(e.key.toString(), e);
            });
            const u = [];
            return e184.forEach((t)=>{
                const e = o.get(t.toString());
                U(!!e), u.push(e);
            }), u;
        }(this.datastore, t347);
        return e183.forEach((t)=>this.recordVersion(t)
        ), e183;
    }
    set(t, e) {
        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
    update(t, e) {
        try {
            this.write(e.toMutation(t, this.preconditionForUpdate(t)));
        } catch (t349) {
            this.lastWriteError = t349;
        }
        this.writtenDocs.add(t.toString());
    }
    delete(t) {
        this.write(new Cn(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
    async commit() {
        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;
        const t350 = this.readVersions;
        // For each mutation, note that the doc was written.
        this.mutations.forEach((e)=>{
            t350.delete(e.key.toString());
        }), // For each document that was read but not written to, we want to perform
        // a `verify` operation.
        t350.forEach((t, e)=>{
            const n = xt.fromPath(e);
            this.mutations.push(new xn(n, this.precondition(n)));
        }), await async function(t351, e) {
            const n = K(t351), s = As(n.M) + "/documents", i = {
                writes: e.map((t)=>Ss(n.M, t)
                )
            };
            await n.oo("Commit", s, i);
        }(this.datastore, this.mutations), this.committed = !0;
    }
    recordVersion(t) {
        let e;
        if (t.isFoundDocument()) e = t.version;
        else {
            if (!t.isNoDocument()) throw L();
            // For deleted docs, we must use baseVersion 0 when we overwrite them.
            e = ct.min();
        }
        const n = this.readVersions.get(t.key.toString());
        if (n) {
            if (!e.isEqual(n)) // This transaction will fail no matter what.
            throw new Q(G.ABORTED, "Document version changed between two reads.");
        } else this.readVersions.set(t.key.toString(), e);
    }
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */ precondition(t) {
        const e = this.readVersions.get(t.toString());
        return !this.writtenDocs.has(t.toString()) && e ? yn.updateTime(e) : yn.none();
    }
    /**
     * Returns the precondition for a document if the operation is an update.
     */ preconditionForUpdate(t) {
        const e = this.readVersions.get(t.toString());
        // The first time a document is written, we want to take into account the
        // read time and existence
        if (!this.writtenDocs.has(t.toString()) && e) {
            if (e.isEqual(ct.min())) // The document doesn't exist, so fail the transaction.
            // This has to be validated locally because you can't send a
            // precondition that a document does not exist without changing the
            // semantics of the backend write to be an insert. This is the reverse
            // of what we want, since we want to assert that the document doesn't
            // exist but then send the update and have it fail. Since we can't
            // express that to the backend, we have to validate locally.
            // Note: this can change once we can send separate verify writes in the
            // transaction.
            throw new Q(G.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
            // Document exists, base precondition on document update time.
            return yn.updateTime(e);
        }
        // Document was not read, so we just use the preconditions for a blind
        // update.
        return yn.exists(!0);
    }
    write(t) {
        this.ensureCommitNotCalled(), this.mutations.push(t);
    }
    ensureCommitNotCalled() {}
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */ class $a {
    constructor(t, e, n, s){
        this.asyncQueue = t, this.datastore = e, this.updateFunction = n, this.deferred = s, this.Sa = 5, this.Do = new zo(this.asyncQueue, "transaction_retry" /* TransactionRetry */ );
    }
    /** Runs the transaction and sets the result on deferred. */ run() {
        this.Sa -= 1, this.Da();
    }
    Da() {
        this.Do.To(async ()=>{
            const t352 = new Fa(this.datastore), e185 = this.Ca(t352);
            e185 && e185.then((e)=>{
                this.asyncQueue.enqueueAndForget(()=>t352.commit().then(()=>{
                        this.deferred.resolve(e);
                    }).catch((t)=>{
                        this.xa(t);
                    })
                );
            }).catch((t)=>{
                this.xa(t);
            });
        });
    }
    Ca(t) {
        try {
            const e = this.updateFunction(t);
            return !St(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
        } catch (t353) {
            // Do not retry errors thrown by user provided updateFunction.
            return this.deferred.reject(t353), null;
        }
    }
    xa(t) {
        this.Sa > 0 && this.Na(t) ? (this.Sa -= 1, this.asyncQueue.enqueueAndForget(()=>(this.Da(), Promise.resolve())
        )) : this.deferred.reject(t);
    }
    Na(t) {
        if ("FirebaseError" === t.name) {
            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
            // non-matching document versions with ABORTED. These errors should be retried.
            const e = t.code;
            return "aborted" === e || "failed-precondition" === e || !On(e);
        }
        return !1;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * FirestoreClient is a top-level class that constructs and owns all of the
 * pieces of the client SDK architecture. It is responsible for creating the
 * async queue that is shared by all of the other components in the system.
 */ class Ba {
    constructor(t354, e, /**
     * Asynchronous queue responsible for all of our internal processing. When
     * we get incoming work from the user (via public API) or the network
     * (incoming GRPC messages), we should always schedule onto this queue.
     * This ensures all of our work is properly serialized (e.g. we don't
     * start processing a new operation while the previous one is waiting for
     * an async I/O to complete).
     */ n, s){
        this.authCredentials = t354, this.appCheckCredentials = e, this.asyncQueue = n, this.databaseInfo = s, this.user = C.UNAUTHENTICATED, this.clientId = it.R(), this.authCredentialListener = ()=>Promise.resolve()
        , this.appCheckCredentialListener = ()=>Promise.resolve()
        , this.authCredentials.start(n, async (t)=>{
            O("FirestoreClient", "Received user=", t.uid), await this.authCredentialListener(t), this.user = t;
        }), this.appCheckCredentials.start(n, (t)=>(O("FirestoreClient", "Received new app check token=", t), this.appCheckCredentialListener(t, this.user))
        );
    }
    async getConfiguration() {
        return {
            asyncQueue: this.asyncQueue,
            databaseInfo: this.databaseInfo,
            clientId: this.clientId,
            authCredentials: this.authCredentials,
            appCheckCredentials: this.appCheckCredentials,
            initialUser: this.user,
            maxConcurrentLimboResolutions: 100
        };
    }
    setCredentialChangeListener(t) {
        this.authCredentialListener = t;
    }
    setAppCheckTokenChangeListener(t) {
        this.appCheckCredentialListener = t;
    }
    /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */ verifyNotTerminated() {
        if (this.asyncQueue.isShuttingDown) throw new Q(G.FAILED_PRECONDITION, "The client has already been terminated.");
    }
    terminate() {
        this.asyncQueue.enterRestrictedMode();
        const t = new j;
        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async ()=>{
            try {
                this.onlineComponents && await this.onlineComponents.terminate(), this.offlineComponents && await this.offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
                // RemoteStore as it will prevent the RemoteStore from retrieving auth
                // tokens.
                this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), t.resolve();
            } catch (e) {
                const n = Du(e, "Failed to shutdown persistence");
                t.reject(n);
            }
        }), t.promise;
    }
}
async function La(t355, e) {
    t355.asyncQueue.verifyOperationInProgress(), O("FirestoreClient", "Initializing OfflineComponentProvider");
    const n = await t355.getConfiguration();
    await e.initialize(n);
    let s = n.initialUser;
    t355.setCredentialChangeListener(async (t)=>{
        s.isEqual(t) || (await io(e.localStore, t), s = t);
    }), // When a user calls clearPersistence() in one client, all other clients
    // need to be terminated to allow the delete to succeed.
    e.persistence.setDatabaseDeletedListener(()=>t355.terminate()
    ), t355.offlineComponents = e;
}
async function Ua(t356, e) {
    t356.asyncQueue.verifyOperationInProgress();
    const n78 = await qa(t356);
    O("FirestoreClient", "Initializing OnlineComponentProvider");
    const s = await t356.getConfiguration();
    await e.initialize(n78, s), // The CredentialChangeListener of the online component provider takes
    // precedence over the offline component provider.
    t356.setCredentialChangeListener((t)=>Pu(e.remoteStore, t)
    ), t356.setAppCheckTokenChangeListener((t, n)=>Pu(e.remoteStore, n)
    ), t356.onlineComponents = e;
}
async function qa(t) {
    return t.offlineComponents || (O("FirestoreClient", "Using default OfflineComponentProvider"), await La(t, new Da)), t.offlineComponents;
}
async function Ka(t) {
    return t.onlineComponents || (O("FirestoreClient", "Using default OnlineComponentProvider"), await Ua(t, new Na)), t.onlineComponents;
}
function Ga(t357) {
    return qa(t357).then((t)=>t.persistence
    );
}
function Qa(t358) {
    return qa(t358).then((t)=>t.localStore
    );
}
function ja(t359) {
    return Ka(t359).then((t)=>t.remoteStore
    );
}
function Wa(t360) {
    return Ka(t360).then((t)=>t.syncEngine
    );
}
async function za(t) {
    const e = await Ka(t), n = e.eventManager;
    return n.onListen = Xu.bind(null, e.syncEngine), n.onUnlisten = ta.bind(null, e.syncEngine), n;
}
/** Enables the network connection and re-enqueues all pending operations. */ function Ha(t361) {
    return t361.asyncQueue.enqueue(async ()=>{
        const e186 = await Ga(t361), n = await ja(t361);
        return e186.setNetworkEnabled(!0), function(t) {
            const e = K(t);
            return e.fu.delete(0 /* UserDisabled */ ), eu(e);
        }(n);
    });
}
/** Disables the network connection. Pending operations will not complete. */ function Ja(t362) {
    return t362.asyncQueue.enqueue(async ()=>{
        const e187 = await Ga(t362), n = await ja(t362);
        return e187.setNetworkEnabled(!1), async function(t) {
            const e = K(t);
            e.fu.add(0 /* UserDisabled */ ), await nu(e), // Set the OnlineState to Offline so get()s return from cache, etc.
            e.wu.set("Offline" /* Offline */ );
        }(n);
    });
}
/**
 * Returns a Promise that resolves when all writes that were pending at the time
 * this method was called received server acknowledgement. An acknowledgement
 * can be either acceptance or rejection.
 */ function Ya(t363, e188) {
    const n79 = new j;
    return t363.asyncQueue.enqueueAndForget(async ()=>(async function(t364, e189, n80) {
            try {
                const s = await function(t365, e) {
                    const n = K(t365);
                    return n.persistence.runTransaction("read document", "readonly", (t)=>n.ci.Ls(t, e)
                    );
                }(t364, e189);
                s.isFoundDocument() ? n80.resolve(s) : s.isNoDocument() ? n80.resolve(null) : n80.reject(new Q(G.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
            } catch (t) {
                const s = Du(t, `Failed to get document '${e189} from cache`);
                n80.reject(s);
            }
        })(await Qa(t363), e188, n79)
    ), n79.promise;
}
function Xa(t366, e190, n81 = {}) {
    const s44 = new j;
    return t366.asyncQueue.enqueueAndForget(async ()=>(function(t367, e, n, s, i) {
            const r10 = new Ma({
                next: (r)=>{
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.enqueueAndForget(()=>Fu(t367, o)
                    );
                    const u = r.docs.has(n);
                    !u && r.fromCache ? // TODO(dimond): If we're online and the document doesn't
                    // exist then we resolve with a doc.exists set to false. If
                    // we're offline however, we reject the Promise in this
                    // case. Two options: 1) Cache the negative response from
                    // the server so we can deliver that even when you're
                    // offline 2) Actually reject the Promise in the online case
                    // if the document doesn't exist.
                    i.reject(new Q(G.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && r.fromCache && s && "server" === s.source ? i.reject(new Q(G.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r);
                },
                error: (t)=>i.reject(t)
            }), o = new Uu(Fe(n.path), r10, {
                includeMetadataChanges: !0,
                Cu: !0
            });
            return Ou(t367, o);
        })(await za(t366), t366.asyncQueue, e190, n81, s44)
    ), s44.promise;
}
function Za(t368, e191) {
    const n82 = new j;
    return t368.asyncQueue.enqueueAndForget(async ()=>(async function(t, e, n) {
            try {
                const s = await fo(t, e, /* usePreviousResults= */ !0), i = new zu(e, s.li), r = i.Gu(s.documents), o = i.applyChanges(r, /* updateLimboDocuments= */ !1);
                n.resolve(o.snapshot);
            } catch (t369) {
                const s = Du(t369, `Failed to execute query '${e} against cache`);
                n.reject(s);
            }
        })(await Qa(t368), e191, n82)
    ), n82.promise;
}
function tc(t370, e192, n83 = {}) {
    const s45 = new j;
    return t370.asyncQueue.enqueueAndForget(async ()=>(function(t371, e, n84, s, i) {
            const r = new Ma({
                next: (n)=>{
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.enqueueAndForget(()=>Fu(t371, o)
                    ), n.fromCache && "server" === s.source ? i.reject(new Q(G.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: (t)=>i.reject(t)
            }), o = new Uu(n84, r, {
                includeMetadataChanges: !0,
                Cu: !0
            });
            return Ou(t371, o);
        })(await za(t370), t370.asyncQueue, e192, n83, s45)
    ), s45.promise;
}
function ec(t372, e193) {
    const n = new Ma(e193);
    return t372.asyncQueue.enqueueAndForget(async ()=>(function(t, e) {
            K(t).Eu.add(e), // Immediately fire an initial event, indicating all existing listeners
            // are in-sync.
            e.next();
        })(await za(t372), n)
    ), ()=>{
        n.Ia(), t372.asyncQueue.enqueueAndForget(async ()=>(function(t, e) {
                K(t).Eu.delete(e);
            })(await za(t372), n)
        );
    };
}
/**
 * Takes an updateFunction in which a set of reads and writes can be performed
 * atomically. In the updateFunction, the client can read and write values
 * using the supplied transaction object. After the updateFunction, all
 * changes will be committed. If a retryable error occurs (ex: some other
 * client has changed any of the data referenced), then the updateFunction
 * will be called again after a backoff. If the updateFunction still fails
 * after all retries, then the transaction will be rejected.
 *
 * The transaction object passed to the updateFunction contains methods for
 * accessing documents and collections. Unlike other datastore access, data
 * accessed with the transaction will not reflect local changes that have not
 * been committed. For this reason, it is required that all reads are
 * performed before any writes. Transactions must be performed while online.
 */ function nc(t373, e) {
    const n = new j;
    return t373.asyncQueue.enqueueAndForget(async ()=>{
        const s = await function(t374) {
            return Ka(t374).then((t)=>t.datastore
            );
        }(t373);
        new $a(t373.asyncQueue, s, e, n).run();
    }), n.promise;
}
function sc(t375, e194, n85, s) {
    const i = function(t376, e195) {
        let n;
        n = "string" == typeof t376 ? (new TextEncoder).encode(t376) : t376;
        return function(t, e) {
            return new Oa(t, e);
        }(function(t, e) {
            if (t instanceof Uint8Array) return ka(t, e);
            if (t instanceof ArrayBuffer) return ka(new Uint8Array(t), e);
            if (t instanceof ReadableStream) return t.getReader();
            throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
        }(n), e195);
    }(n85, Wo(e194));
    t375.asyncQueue.enqueueAndForget(async ()=>{
        Sa(await Wa(t375), i, s);
    });
}
function ic(t377, e196) {
    return t377.asyncQueue.enqueue(async ()=>(function(t378, e) {
            const n = K(t378);
            return n.persistence.runTransaction("Get named query", "readonly", (t)=>n._s.getNamedQuery(t, e)
            );
        })(await Qa(t377), e196)
    );
}
const rc = new Map;
/**
 * An instance map that ensures only one Datastore exists per Firestore
 * instance.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function oc(t, e, n) {
    if (!n) throw new Q(G.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
}
/**
 * Validates that two boolean options are not set at the same time.
 * @internal
 */ function uc(t, e, n, s) {
    if (!0 === e && !0 === s) throw new Q(G.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
}
/**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */ function ac(t) {
    if (!xt.isDocumentKey(t)) throw new Q(G.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
}
/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */ function cc(t) {
    if (xt.isDocumentKey(t)) throw new Q(G.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */ /** Returns a string describing the type / value of the provided input. */ function hc(t379) {
    if (void 0 === t379) return "undefined";
    if (null === t379) return "null";
    if ("string" == typeof t379) return t379.length > 20 && (t379 = `${t379.substring(0, 20)}...`), JSON.stringify(t379);
    if ("number" == typeof t379 || "boolean" == typeof t379) return "" + t379;
    if ("object" == typeof t379) {
        if (t379 instanceof Array) return "an array";
        {
            const e = /** try to get the constructor name for an object. */ function(t) {
                if (t.constructor) return t.constructor.name;
                return null;
            }(t379);
            return e ? `a custom ${e} object` : "an object";
        }
    }
    return "function" == typeof t379 ? "a function" : L();
}
function lc(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
    if ("_delegate" in t && // Unwrap Compat types
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (t = t._delegate), !(t instanceof e)) {
        if (e.name === t.constructor.name) throw new Q(G.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        {
            const n = hc(t);
            throw new Q(G.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
        }
    }
    return t;
}
function fc(t, e) {
    if (e <= 0) throw new Q(G.INVALID_ARGUMENT, `Function ${t}() requires a positive number, but it was: ${e}.`);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // settings() defaults:
/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied `FirestoreSettings` object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */ class dc {
    constructor(t){
        var e;
        if (void 0 === t.host) {
            if (void 0 !== t.ssl) throw new Q(G.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
            this.host = "firestore.googleapis.com", this.ssl = true;
        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;
        else {
            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new Q(G.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
            this.cacheSizeBytes = t.cacheSizeBytes;
        }
        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, uc("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
    }
    isEqual(t) {
        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */ class _c {
    /** @hideconstructor */ constructor(t380, e, n){
        this._authCredentials = e, this._appCheckCredentials = n, /**
         * Whether it's a Firestore or Firestore Lite instance.
         */ this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new dc({}), this._settingsFrozen = !1, t380 instanceof vt ? this._databaseId = t380 : (this._app = t380, this._databaseId = function(t) {
            if (!Object.prototype.hasOwnProperty.apply(t.options, [
                "projectId"
            ])) throw new Q(G.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
            return new vt(t.options.projectId);
        }(t380));
    }
    /**
     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
     * instance.
     */ get app() {
        if (!this._app) throw new Q(G.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
    }
    get _initialized() {
        return this._settingsFrozen;
    }
    get _terminated() {
        return void 0 !== this._terminateTask;
    }
    _setSettings(t381) {
        if (this._settingsFrozen) throw new Q(G.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new dc(t381), void 0 !== t381.credentials && (this._authCredentials = function(t) {
            if (!t) return new z;
            switch(t.type){
                case "gapi":
                    const e = t.client;
                    // Make sure this really is a Gapi client.
                    return U(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new X(e, t.sessionIndex || "0", t.iamToken || null);
                case "provider":
                    return t.client;
                default:
                    throw new Q(G.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
            }
        }(t381.credentials));
    }
    _getSettings() {
        return this._settings;
    }
    _freezeSettings() {
        return this._settingsFrozen = !0, this._settings;
    }
    _delete() {
        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }
    /** Returns a JSON-serializable representation of this `Firestore` instance. */ toJSON() {
        return {
            app: this._app,
            databaseId: this._databaseId,
            settings: this._settings
        };
    }
    /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */ _terminate() {
        /**
 * Removes all components associated with the provided instance. Must be called
 * when the `Firestore` instance is terminated.
 */ return function(t) {
            const e = rc.get(t);
            e && (O("ComponentProvider", "Removing Datastore"), rc.delete(t), e.terminate());
        }(this), Promise.resolve();
    }
}
function wc(t, e, n, s = {}) {
    var i;
    const r = (t = lc(t, _c))._getSettings();
    if ("firestore.googleapis.com" !== r.host && r.host !== e && $("Host has been set in both settings() and useEmulator(), emulator host will be used"), t._setSettings(Object.assign(Object.assign({}, r), {
        host: `${e}:${n}`,
        ssl: !1
    })), s.mockUserToken) {
        let e, n;
        if ("string" == typeof s.mockUserToken) e = s.mockUserToken, n = C.MOCK_USER;
        else {
            // Let createMockUserToken validate first (catches common mistakes like
            // invalid field "uid" and missing field "sub" / "user_id".)
            e = _util.createMockUserToken(s.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);
            const r = s.mockUserToken.sub || s.mockUserToken.user_id;
            if (!r) throw new Q(G.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
            n = new C(r);
        }
        t._authCredentials = new H(new W(e, n));
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `DocumentReference` refers to a document location in a Firestore database
 * and can be used to write, read, or listen to the location. The document at
 * the referenced location may or may not exist.
 */ class mc {
    /** @hideconstructor */ constructor(t, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ e, n){
        this.converter = e, this._key = n, /** The type of this Firestore reference. */ this.type = "document", this.firestore = t;
    }
    get _path() {
        return this._key.path;
    }
    /**
     * The document's identifier within its collection.
     */ get id() {
        return this._key.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced document (relative
     * to the root of the database).
     */ get path() {
        return this._key.path.canonicalString();
    }
    /**
     * The collection this `DocumentReference` belongs to.
     */ get parent() {
        return new yc(this.firestore, this.converter, this._key.path.popLast());
    }
    withConverter(t) {
        return new mc(this.firestore, t, this._key);
    }
}
/**
 * A `Query` refers to a query which you can read or listen to. You can also
 * construct refined `Query` objects by adding filters and ordering.
 */ class gc {
    // This is the lite version of the Query class in the main SDK.
    /** @hideconstructor protected */ constructor(t, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ e, n){
        this.converter = e, this._query = n, /** The type of this Firestore reference. */ this.type = "query", this.firestore = t;
    }
    withConverter(t) {
        return new gc(this.firestore, t, this._query);
    }
}
/**
 * A `CollectionReference` object can be used for adding documents, getting
 * document references, and querying for documents (using {@link query}).
 */ class yc extends gc {
    /** @hideconstructor */ constructor(t, e, n){
        super(t, e, Fe(n)), this._path = n, /** The type of this Firestore reference. */ this.type = "collection";
    }
    /** The collection's identifier. */ get id() {
        return this._query.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced collection (relative
     * to the root of the database).
     */ get path() {
        return this._query.path.canonicalString();
    }
    /**
     * A reference to the containing `DocumentReference` if this is a
     * subcollection. If this isn't a subcollection, the reference is null.
     */ get parent() {
        const t = this._path.popLast();
        return t.isEmpty() ? null : new mc(this.firestore, /* converter= */ null, new xt(t));
    }
    withConverter(t) {
        return new yc(this.firestore, t, this._path);
    }
}
function pc(t, e, ...n) {
    if (t = _util.getModularInstance(t), oc("collection", "path", e), t instanceof _c) {
        const s = _t.fromString(e, ...n);
        return cc(s), new yc(t, /* converter= */ null, s);
    }
    {
        if (!(t instanceof mc || t instanceof yc)) throw new Q(G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const s = t._path.child(_t.fromString(e, ...n));
        return cc(s), new yc(t.firestore, /* converter= */ null, s);
    }
}
// TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore - A reference to the root `Firestore` instance.
 * @param collectionId - Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @returns The created `Query`.
 */ function Ic(t382, e) {
    if (t382 = lc(t382, _c), oc("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new Q(G.INVALID_ARGUMENT, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
    return new gc(t382, /* converter= */ null, /**
 * Creates a new Query for a collection group query that matches all documents
 * within the provided collection group.
 */ function(t) {
        return new Me(_t.emptyPath(), t);
    }(e));
}
function Tc(t, e, ...n) {
    if (t = _util.getModularInstance(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
    // 'undefined' and 'null'.
    1 === arguments.length && (e = it.R()), oc("doc", "path", e), t instanceof _c) {
        const s = _t.fromString(e, ...n);
        return ac(s), new mc(t, /* converter= */ null, new xt(s));
    }
    {
        if (!(t instanceof mc || t instanceof yc)) throw new Q(G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const s = t._path.child(_t.fromString(e, ...n));
        return ac(s), new mc(t.firestore, t instanceof yc ? t.converter : null, new xt(s));
    }
}
/**
 * Returns true if the provided references are equal.
 *
 * @param left - A reference to compare.
 * @param right - A reference to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */ function Ec(t, e) {
    return t = _util.getModularInstance(t), e = _util.getModularInstance(e), (t instanceof mc || t instanceof yc) && (e instanceof mc || e instanceof yc) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;
}
/**
 * Returns true if the provided queries point to the same collection and apply
 * the same constraints.
 *
 * @param left - A `Query` to compare.
 * @param right - A `Query` to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */ function Ac(t, e) {
    return t = _util.getModularInstance(t), e = _util.getModularInstance(e), t instanceof gc && e instanceof gc && t.firestore === e.firestore && je(t._query, e._query) && t.converter === e.converter;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Rc {
    constructor(){
        // The last promise in the queue.
        this.ka = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
        // retried with backoff.
        this.Ma = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.Oa = !1, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.Fa = [], // visible for testing
        this.$a = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.Ba = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.La = !1, // List of TimerIds to fast-forward delays for.
        this.Ua = [], // Backoff timer used to schedule retries for retryable operations
        this.Do = new zo(this, "async_queue_retry" /* AsyncQueueRetry */ ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.qa = ()=>{
            const t = jo();
            t && O("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.Do.Ao();
        };
        const t383 = jo();
        t383 && "function" == typeof t383.addEventListener && t383.addEventListener("visibilitychange", this.qa);
    }
    get isShuttingDown() {
        return this.Oa;
    }
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */ enqueueAndForget(t) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.enqueue(t);
    }
    enqueueAndForgetEvenWhileRestricted(t) {
        this.Ka(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.Ga(t);
    }
    enterRestrictedMode(t) {
        if (!this.Oa) {
            this.Oa = !0, this.La = t || !1;
            const e = jo();
            e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.qa);
        }
    }
    enqueue(t) {
        if (this.Ka(), this.Oa) // Return a Promise which never resolves.
        return new Promise(()=>{});
        // Create a deferred Promise that we can return to the callee. This
        // allows us to return a "hanging Promise" only to the callee and still
        // advance the queue even when the operation is not run.
        const e = new j;
        return this.Ga(()=>this.Oa && this.La ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise)
        ).then(()=>e.promise
        );
    }
    enqueueRetryable(t) {
        this.enqueueAndForget(()=>(this.Ma.push(t), this.Qa())
        );
    }
    /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */ async Qa() {
        if (0 !== this.Ma.length) {
            try {
                await this.Ma[0](), this.Ma.shift(), this.Do.reset();
            } catch (t) {
                if (!Ri(t)) throw t;
                // Failure will be handled by AsyncQueue
                O("AsyncQueue", "Operation failed with retryable error: " + t);
            }
            this.Ma.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
            // This is necessary to run retryable operations that failed during
            // their initial attempt since we don't know whether they are already
            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
            // call scheduled here.
            // Since `backoffAndRun()` cancels an existing backoff and schedules a
            // new backoff on every call, there is only ever a single additional
            // operation in the queue.
            this.Do.To(()=>this.Qa()
            );
        }
    }
    Ga(t384) {
        const e197 = this.ka.then(()=>(this.Ba = !0, t384().catch((t385)=>{
                this.$a = t385, this.Ba = !1;
                const e198 = /**
 * Chrome includes Error.message in Error.stack. Other browsers do not.
 * This returns expected output of message + stack when available.
 * @param error - Error or FirestoreError
 */ function(t) {
                    let e = t.message || "";
                    t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return e;
                }(t385);
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw F("INTERNAL UNHANDLED ERROR: ", e198), t385;
            }).then((t)=>(this.Ba = !1, t)
            ))
        );
        return this.ka = e197, e197;
    }
    enqueueAfterDelay(t386, e, n) {
        this.Ka(), // Fast-forward delays for timerIds that have been overriden.
        this.Ua.indexOf(t386) > -1 && (e = 0);
        const s = Su.createAndSchedule(this, t386, e, n, (t)=>this.ja(t)
        );
        return this.Fa.push(s), s;
    }
    Ka() {
        this.$a && L();
    }
    verifyOperationInProgress() {}
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */ async Wa() {
        // Operations in the queue prior to draining may have enqueued additional
        // operations. Keep draining the queue until the tail is no longer advanced,
        // which indicates that no more new operations were enqueued and that all
        // operations were executed.
        let t;
        do t = this.ka, await t;
        while (t !== this.ka)
    }
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */ za(t) {
        for (const e of this.Fa)if (e.timerId === t) return !0;
        return !1;
    }
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */ Ha(t387) {
        // Note that draining may generate more delayed ops, so we do that first.
        return this.Wa().then(()=>{
            // Run ops in the same order they'd run if they ran naturally.
            this.Fa.sort((t, e)=>t.targetTimeMs - e.targetTimeMs
            );
            for (const e199 of this.Fa)if (e199.skipDelay(), "all" /* All */  !== t387 && e199.timerId === t387) break;
            return this.Wa();
        });
    }
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */ Ja(t) {
        this.Ua.push(t);
    }
    /** Called once a DelayedOperation is run or canceled. */ ja(t) {
        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
        const e = this.Fa.indexOf(t);
        this.Fa.splice(e, 1);
    }
}
function Pc(t389) {
    /**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */ return function(t, e) {
        if ("object" != typeof t || null === t) return !1;
        const n = t;
        for (const t388 of e)if (t388 in n && "function" == typeof n[t388]) return !0;
        return !1;
    }(t389, [
        "next",
        "error",
        "complete"
    ]);
}
class bc {
    constructor(){
        this._progressObserver = {}, this._taskCompletionResolver = new j, this._lastProgress = {
            taskState: "Running",
            totalBytes: 0,
            totalDocuments: 0,
            bytesLoaded: 0,
            documentsLoaded: 0
        };
    }
    /**
     * Registers functions to listen to bundle loading progress events.
     * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
     *   each time a Firestore document is loaded from the bundle.
     * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
     *   error, and there should be no more updates after this.
     * @param complete - Called when the loading task is complete.
     */ onProgress(t, e, n) {
        this._progressObserver = {
            next: t,
            error: e,
            complete: n
        };
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
     *
     * @param onRejected - Called when an error occurs during bundle loading.
     */ catch(t) {
        return this._taskCompletionResolver.promise.catch(t);
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
     *
     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
     *   The update will always have its `taskState` set to `"Success"`.
     * @param onRejected - Called when an error occurs during bundle loading.
     */ then(t, e) {
        return this._taskCompletionResolver.promise.then(t, e);
    }
    /**
     * Notifies all observers that bundle loading has completed, with a provided
     * `LoadBundleTaskProgress` object.
     *
     * @private
     */ _completeWith(t) {
        this._updateProgress(t), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t);
    }
    /**
     * Notifies all observers that bundle loading has failed, with a provided
     * `Error` as the reason.
     *
     * @private
     */ _failWith(t) {
        this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t), this._taskCompletionResolver.reject(t);
    }
    /**
     * Notifies a progress update of loading a bundle.
     * @param progress - The new progress.
     *
     * @private
     */ _updateProgress(t) {
        this._lastProgress = t, this._progressObserver.next && this._progressObserver.next(t);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** DOMException error code constants. */ const Vc = -1;
/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */ class vc extends _c {
    /** @hideconstructor */ constructor(t, e, n){
        super(t, e, n), /**
         * Whether it's a {@link Firestore} or Firestore Lite instance.
         */ this.type = "firestore", this._queue = new Rc, this._persistenceKey = "name" in t ? t.name : "[DEFAULT]";
    }
    _terminate() {
        return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
        // usage throws an exception.
        xc(this), this._firestoreClient.terminate();
    }
}
/**
 * Initializes a new instance of {@link Firestore} with the provided settings.
 * Can only be called before any other function, including
 * {@link getFirestore}. If the custom settings are empty, this function is
 * equivalent to calling {@link getFirestore}.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will
 * be associated.
 * @param settings - A settings object to configure the {@link Firestore} instance.
 * @returns A newly initialized {@link Firestore} instance.
 */ function Sc(t, e) {
    const n = _app._getProvider(t, "firestore");
    if (n.isInitialized()) {
        const t = n.getImmediate(), s = n.getOptions();
        if (_util.deepEqual(s, e)) return t;
        throw new Q(G.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
    }
    if (void 0 !== e.cacheSizeBytes && -1 !== e.cacheSizeBytes && e.cacheSizeBytes < 1048576) throw new Q(G.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
    return n.initialize({
        options: e
    });
}
/**
 * Returns the existing {@link Firestore} instance that is associated with the
 * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
 * instance with default settings.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}
 * instance is associated with.
 * @returns The {@link Firestore} instance of the provided app.
 */ function Dc(e = _app.getApp()) {
    return _app._getProvider(e, "firestore").getImmediate();
}
/**
 * @internal
 */ function Cc(t) {
    return t._firestoreClient || xc(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
}
function xc(t390) {
    var e200;
    const n86 = t390._freezeSettings(), s46 = function(t, e, n, s) {
        return new Vt(t, e, n, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams);
    }(t390._databaseId, (null === (e200 = t390._app) || void 0 === e200 ? void 0 : e200.options.appId) || "", t390._persistenceKey, n86);
    t390._firestoreClient = new Ba(t390._authCredentials, t390._appCheckCredentials, t390._queue, s46);
}
/**
 * Attempts to enable persistent storage, if possible.
 *
 * Must be called before any other functions (other than
 * {@link initializeFirestore}, {@link getFirestore} or
 * {@link clearIndexedDbPersistence}.
 *
 * If this fails, `enableIndexedDbPersistence()` will reject the promise it
 * returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @param persistenceSettings - Optional settings object to configure
 * persistence.
 * @returns A `Promise` that represents successfully enabling persistent storage.
 */ function Nc(t, e) {
    Kc(t = lc(t, vc));
    const n = Cc(t), s = t._freezeSettings(), i = new Na;
    return Mc(n, i, new Ca(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
}
/**
 * Attempts to enable multi-tab persistent storage, if possible. If enabled
 * across all tabs, all operations share access to local persistence, including
 * shared execution of queries and latency-compensated local document updates
 * across all connected instances.
 *
 * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise
 * it returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab and
 *     multi-tab is not enabled.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @returns A `Promise` that represents successfully enabling persistent
 * storage.
 */ function kc(t) {
    Kc(t = lc(t, vc));
    const e = Cc(t), n = t._freezeSettings(), s = new Na;
    return Mc(e, s, new xa(s, n.cacheSizeBytes));
}
/**
 * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
 * If the operation fails with a recoverable error (see
 * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
 * but the client remains usable.
 */ function Mc(t391, e, n) {
    const s = new j;
    return t391.asyncQueue.enqueue(async ()=>{
        try {
            await La(t391, n), await Ua(t391, e), s.resolve();
        } catch (t392) {
            if (!/**
 * Decides whether the provided error allows us to gracefully disable
 * persistence (as opposed to crashing the client).
 */ function(t) {
                if ("FirebaseError" === t.name) return t.code === G.FAILED_PRECONDITION || t.code === G.UNIMPLEMENTED;
                if ("undefined" != typeof DOMException && t instanceof DOMException) // There are a few known circumstances where we can open IndexedDb but
                // trying to read/write will fail (e.g. quota exceeded). For
                // well-understood cases, we attempt to detect these and then gracefully
                // fall back to memory persistence.
                // NOTE: Rather than continue to add to this list, we could decide to
                // always fall back, with the risk that we might accidentally hide errors
                // representing actual SDK bugs.
                // When the browser is out of quota we could get either quota exceeded
                // or an aborted error depending on whether the error happened during
                // schema migration.
                return 22 === t.code || 20 === t.code || // Firefox Private Browsing mode disables IndexedDb and returns
                // INVALID_STATE for any usage.
                11 === t.code;
                return !0;
            }(t392)) throw t392;
            console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + t392), s.reject(t392);
        }
    }).then(()=>s.promise
    );
}
function Oc(t393) {
    if (t393._initialized && !t393._terminated) throw new Q(G.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
    const e201 = new j;
    return t393._queue.enqueueAndForgetEvenWhileRestricted(async ()=>{
        try {
            await async function(t) {
                if (!Ti.vt()) return Promise.resolve();
                const e = t + "main";
                await Ti.delete(e);
            }(Xr(t393._databaseId, t393._persistenceKey)), e201.resolve();
        } catch (t) {
            e201.reject(t);
        }
    }), e201.promise;
}
/**
 * Waits until all currently pending writes for the active user have been
 * acknowledged by the backend.
 *
 * The returned promise resolves immediately if there are no outstanding writes.
 * Otherwise, the promise waits for all previously issued writes (including
 * those written in a previous app session), but it does not wait for writes
 * that were added after the function is called. If you want to wait for
 * additional writes, call `waitForPendingWrites()` again.
 *
 * Any outstanding `waitForPendingWrites()` promises are rejected during user
 * changes.
 *
 * @returns A `Promise` which resolves when all currently pending writes have been
 * acknowledged by the backend.
 */ function Fc(t394) {
    return function(t) {
        const e = new j;
        return t.asyncQueue.enqueueAndForget(async ()=>ua(await Wa(t), e)
        ), e.promise;
    }(Cc(t394 = lc(t394, vc)));
}
/**
 * Re-enables use of the network for this {@link Firestore} instance after a prior
 * call to {@link disableNetwork}.
 *
 * @returns A `Promise` that is resolved once the network has been enabled.
 */ function $c(t) {
    return Ha(Cc(t = lc(t, vc)));
}
/**
 * Disables network usage for this instance. It can be re-enabled via {@link
 * enableNetwork}. While the network is disabled, any snapshot listeners,
 * `getDoc()` or `getDocs()` calls will return results from cache, and any write
 * operations will be queued until the network is restored.
 *
 * @returns A `Promise` that is resolved once the network has been disabled.
 */ function Bc(t) {
    return Ja(Cc(t = lc(t, vc)));
}
/**
 * Terminates the provided {@link Firestore} instance.
 *
 * After calling `terminate()` only the `clearIndexedDbPersistence()` function
 * may be used. Any other function will throw a `FirestoreError`.
 *
 * To restart after termination, create a new instance of FirebaseFirestore with
 * {@link getFirestore}.
 *
 * Termination does not cancel any pending writes, and any promises that are
 * awaiting a response from the server will not be resolved. If you have
 * persistence enabled, the next time you start this instance, it will resume
 * sending these writes to the server.
 *
 * Note: Under normal circumstances, calling `terminate()` is not required. This
 * function is useful only when you want to force this instance to release all
 * of its resources or in combination with `clearIndexedDbPersistence()` to
 * ensure that all local state is destroyed between test runs.
 *
 * @returns A `Promise` that is resolved when the instance has been successfully
 * terminated.
 */ function Lc(t) {
    return _app._removeServiceInstance(t.app, "firestore"), t._delete();
}
/**
 * Loads a Firestore bundle into the local cache.
 *
 * @param firestore - The {@link Firestore} instance to load bundles for.
 * @param bundleData - An object representing the bundle to be loaded. Valid
 * objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
 *
 * @returns A `LoadBundleTask` object, which notifies callers with progress
 * updates, and completion or error events. It can be used as a
 * `Promise<LoadBundleTaskProgress>`.
 */ function Uc(t, e) {
    const n = Cc(t = lc(t, vc)), s = new bc;
    return sc(n, t._databaseId, e, s), s;
}
/**
 * Reads a Firestore {@link Query} from local cache, identified by the given
 * name.
 *
 * The named queries are packaged  into bundles on the server side (along
 * with resulting documents), and loaded to local cache using `loadBundle`. Once
 * in local cache, use this method to extract a {@link Query} by name.
 *
 * @param firestore - The {@link Firestore} instance to read the query from.
 * @param name - The name of the query.
 * @returns A `Promise` that is resolved with the Query or `null`.
 */ function qc(t, e202) {
    return ic(Cc(t = lc(t, vc)), e202).then((e)=>e ? new gc(t, null, e.query) : null
    );
}
function Kc(t) {
    if (t._initialized || t._terminated) throw new Q(G.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */ class Gc {
    /**
     * Creates a `FieldPath` from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames - A list of field names.
     */ constructor(...t){
        for(let e = 0; e < t.length; ++e)if (0 === t[e].length) throw new Q(G.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new mt(t);
    }
    /**
     * Returns true if this `FieldPath` is equal to the provided one.
     *
     * @param other - The `FieldPath` to compare against.
     * @returns true if this `FieldPath` is equal to the provided one.
     */ isEqual(t) {
        return this._internalPath.isEqual(t._internalPath);
    }
}
/**
 * Returns a special sentinel `FieldPath` to refer to the ID of a document.
 * It can be used in queries to sort or filter by the document ID.
 */ function Qc() {
    return new Gc("__name__");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing an array of bytes.
 */ class jc {
    /** @hideconstructor */ constructor(t){
        this._byteString = t;
    }
    /**
     * Creates a new `Bytes` object from the given Base64 string, converting it to
     * bytes.
     *
     * @param base64 - The Base64 string used to create the `Bytes` object.
     */ static fromBase64String(t) {
        try {
            return new jc(pt.fromBase64String(t));
        } catch (t395) {
            throw new Q(G.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t395);
        }
    }
    /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */ static fromUint8Array(t) {
        return new jc(pt.fromUint8Array(t));
    }
    /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */ toBase64() {
        return this._byteString.toBase64();
    }
    /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */ toUint8Array() {
        return this._byteString.toUint8Array();
    }
    /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */ toString() {
        return "Bytes(base64: " + this.toBase64() + ")";
    }
    /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */ isEqual(t) {
        return this._byteString.isEqual(t._byteString);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */ class Wc {
    /**
     * @param _methodName - The public API endpoint that returns this class.
     * @hideconstructor
     */ constructor(t){
        this._methodName = t;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing a geographic location in Firestore. The
 * location is represented as latitude/longitude pair.
 *
 * Latitude values are in the range of [-90, 90].
 * Longitude values are in the range of [-180, 180].
 */ class zc {
    /**
     * Creates a new immutable `GeoPoint` object with the provided latitude and
     * longitude values.
     * @param latitude - The latitude as number between -90 and 90.
     * @param longitude - The longitude as number between -180 and 180.
     */ constructor(t, e){
        if (!isFinite(t) || t < -90 || t > 90) throw new Q(G.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
        if (!isFinite(e) || e < -180 || e > 180) throw new Q(G.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
        this._lat = t, this._long = e;
    }
    /**
     * The latitude of this `GeoPoint` instance.
     */ get latitude() {
        return this._lat;
    }
    /**
     * The longitude of this `GeoPoint` instance.
     */ get longitude() {
        return this._long;
    }
    /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */ isEqual(t) {
        return this._lat === t._lat && this._long === t._long;
    }
    /** Returns a JSON-serializable representation of this GeoPoint. */ toJSON() {
        return {
            latitude: this._lat,
            longitude: this._long
        };
    }
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */ _compareTo(t) {
        return rt(this._lat, t._lat) || rt(this._long, t._long);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const Hc = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */ class Jc {
    constructor(t, e, n){
        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
    }
    toMutation(t, e) {
        return null !== this.fieldMask ? new Vn(t, this.data, this.fieldMask, e, this.fieldTransforms) : new bn(t, this.data, e, this.fieldTransforms);
    }
}
/** The result of parsing "update" data (i.e. for an updateData call). */ class Yc {
    constructor(t, // The fieldMask does not include document transforms.
    e, n){
        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
    }
    toMutation(t, e) {
        return new Vn(t, this.data, this.fieldMask, e, this.fieldTransforms);
    }
}
function Xc(t) {
    switch(t){
        case 0 /* Set */ :
        // fall through
        case 2 /* MergeSet */ :
        // fall through
        case 1 /* Update */ :
            return !0;
        case 3 /* Argument */ :
        case 4 /* ArrayArgument */ :
            return !1;
        default:
            throw L();
    }
}
/** A "context" object passed around while parsing user data. */ class Zc {
    /**
     * Initializes a ParseContext with the given source and path.
     *
     * @param settings - The settings for the parser.
     * @param databaseId - The database ID of the Firestore instance.
     * @param serializer - The serializer to use to generate the Value proto.
     * @param ignoreUndefinedProperties - Whether to ignore undefined properties
     * rather than throw.
     * @param fieldTransforms - A mutable list of field transforms encountered
     * while parsing the data.
     * @param fieldMask - A mutable list of field paths encountered while parsing
     * the data.
     *
     * TODO(b/34871131): We don't support array paths right now, so path can be
     * null to indicate the context represents any location within an array (in
     * which case certain features will not work and errors will be somewhat
     * compromised).
     */ constructor(t, e, n, s, i, r){
        this.settings = t, this.databaseId = e, this.M = n, this.ignoreUndefinedProperties = s, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === i && this.Ya(), this.fieldTransforms = i || [], this.fieldMask = r || [];
    }
    get path() {
        return this.settings.path;
    }
    get Xa() {
        return this.settings.Xa;
    }
    /** Returns a new context with the specified settings overwritten. */ Za(t) {
        return new Zc(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.M, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }
    tc(t) {
        var e;
        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.Za({
            path: n,
            ec: !1
        });
        return s.nc(t), s;
    }
    sc(t) {
        var e;
        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.Za({
            path: n,
            ec: !1
        });
        return s.Ya(), s;
    }
    ic(t) {
        // TODO(b/34871131): We don't support array paths right now; so make path
        // undefined.
        return this.Za({
            path: void 0,
            ec: !0
        });
    }
    rc(t) {
        return ph(t, this.settings.methodName, this.settings.oc || !1, this.path, this.settings.uc);
    }
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ contains(t) {
        return void 0 !== this.fieldMask.find((e)=>t.isPrefixOf(e)
        ) || void 0 !== this.fieldTransforms.find((e)=>t.isPrefixOf(e.field)
        );
    }
    Ya() {
        // TODO(b/34871131): Remove null check once we have proper paths for fields
        // within arrays.
        if (this.path) for(let t = 0; t < this.path.length; t++)this.nc(this.path.get(t));
    }
    nc(t) {
        if (0 === t.length) throw this.rc("Document fields must not be empty");
        if (Xc(this.Xa) && Hc.test(t)) throw this.rc('Document fields cannot begin and end with "__"');
    }
}
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */ class th {
    constructor(t, e, n){
        this.databaseId = t, this.ignoreUndefinedProperties = e, this.M = n || Wo(t);
    }
    /** Creates a new top-level parse context. */ ac(t, e, n, s = !1) {
        return new Zc({
            Xa: t,
            methodName: e,
            uc: n,
            path: mt.emptyPath(),
            ec: !1,
            oc: s
        }, this.databaseId, this.M, this.ignoreUndefinedProperties);
    }
}
function eh(t) {
    const e = t._freezeSettings(), n = Wo(t._databaseId);
    return new th(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
/** Parse document data from a set() call. */ function nh(t, e, n, s, i, r = {}) {
    const o = t.ac(r.merge || r.mergeFields ? 2 /* MergeSet */  : 0 /* Set */ , e, n, i);
    wh("Data must be an object, but it was:", o, s);
    const u = dh(s, o);
    let a, c;
    if (r.merge) a = new gt(o.fieldMask), c = o.fieldTransforms;
    else if (r.mergeFields) {
        const t396 = [];
        for (const s of r.mergeFields){
            const i = mh(e, s, n);
            if (!o.contains(i)) throw new Q(G.INVALID_ARGUMENT, `Field '${i}' is specified in your field mask but missing from your input data.`);
            Ih(t396, i) || t396.push(i);
        }
        a = new gt(t396), c = o.fieldTransforms.filter((t)=>a.covers(t.field)
        );
    } else a = null, c = o.fieldTransforms;
    return new Jc(new te(u), a, c);
}
class sh extends Wc {
    _toFieldTransform(t) {
        if (2 /* MergeSet */  !== t.Xa) throw 1 /* Update */  === t.Xa ? t.rc(`${this._methodName}() can only appear at the top level of your update data`) : t.rc(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
        // No transform to add for a delete, but we need to add it to our
        // fieldMask so it gets deleted.
        return t.fieldMask.push(t.path), null;
    }
    isEqual(t) {
        return t instanceof sh;
    }
}
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue - The sentinel FieldValue for which to create a child
 *     context.
 * @param context - The parent context.
 * @param arrayElement - Whether or not the FieldValue has an array.
 */ function ih(t, e, n) {
    return new Zc({
        Xa: 3 /* Argument */ ,
        uc: e.settings.uc,
        methodName: t._methodName,
        ec: n
    }, e.databaseId, e.M, e.ignoreUndefinedProperties);
}
class rh extends Wc {
    _toFieldTransform(t) {
        return new wn(t.path, new un);
    }
    isEqual(t) {
        return t instanceof rh;
    }
}
class oh extends Wc {
    constructor(t, e){
        super(t), this.cc = e;
    }
    _toFieldTransform(t397) {
        const e = ih(this, t397, /*array=*/ !0), n = this.cc.map((t)=>fh(t, e)
        ), s = new an(n);
        return new wn(t397.path, s);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
class uh extends Wc {
    constructor(t, e){
        super(t), this.cc = e;
    }
    _toFieldTransform(t398) {
        const e = ih(this, t398, /*array=*/ !0), n = this.cc.map((t)=>fh(t, e)
        ), s = new hn(n);
        return new wn(t398.path, s);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
class ah extends Wc {
    constructor(t, e){
        super(t), this.hc = e;
    }
    _toFieldTransform(t) {
        const e = new fn(t.M, en(t.M, this.hc));
        return new wn(t.path, e);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
/** Parse update data from an update() call. */ function ch(t399, e, n, s47) {
    const i = t399.ac(1 /* Update */ , e, n);
    wh("Data must be an object, but it was:", i, s47);
    const r = [], o = te.empty();
    lt(s47, (t, s)=>{
        const u = yh(e, t, n);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        s = _util.getModularInstance(s);
        const a = i.sc(u);
        if (s instanceof sh) // Add it to the field mask, but don't add anything to updateData.
        r.push(u);
        else {
            const t = fh(s, a);
            null != t && (r.push(u), o.set(u, t));
        }
    });
    const u2 = new gt(r);
    return new Yc(o, u2, i.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */ function hh(t, e, n, s, i, r) {
    const o = t.ac(1 /* Update */ , e, n), u = [
        mh(e, s, n)
    ], a = [
        i
    ];
    if (r.length % 2 != 0) throw new Q(G.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
    for(let t400 = 0; t400 < r.length; t400 += 2)u.push(mh(e, r[t400])), a.push(r[t400 + 1]);
    const c = [], h = te.empty();
    // We iterate in reverse order to pick the last value for a field if the
    // user specified the field multiple times.
    for(let t401 = u.length - 1; t401 >= 0; --t401)if (!Ih(c, u[t401])) {
        const e = u[t401];
        let n = a[t401];
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        n = _util.getModularInstance(n);
        const s = o.sc(e);
        if (n instanceof sh) // Add it to the field mask, but don't add anything to updateData.
        c.push(e);
        else {
            const t = fh(n, s);
            null != t && (c.push(e), h.set(e, t));
        }
    }
    const l = new gt(c);
    return new Yc(h, l, o.fieldTransforms);
}
/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays - Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */ function lh(t, e, n, s = !1) {
    return fh(n, t.ac(s ? 4 /* ArrayArgument */  : 3 /* Argument */ , e));
}
/**
 * Parses user data to Protobuf Values.
 *
 * @param input - Data to be parsed.
 * @param context - A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @returns The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */ function fh(t402, e203) {
    if (_h(// Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t402 = _util.getModularInstance(t402))) return wh("Unsupported field value:", e203, t402), dh(t402, e203);
    if (t402 instanceof Wc) // FieldValues usually parse into transforms (except deleteField())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.
    /**
 * "Parses" the provided FieldValueImpl, adding any necessary transforms to
 * context.fieldTransforms.
 */ return function(t, e) {
        // Sentinels are only supported with writes, and not within arrays.
        if (!Xc(e.Xa)) throw e.rc(`${t._methodName}() can only be used with update() and set()`);
        if (!e.path) throw e.rc(`${t._methodName}() is not currently supported inside arrays`);
        const n = t._toFieldTransform(e);
        n && e.fieldTransforms.push(n);
    }(t402, e203), null;
    if (void 0 === t402 && e203.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
    // don't handle this below. If `ignoreUndefinedProperties` is false,
    // `parseScalarValue` will reject an undefined value.
    return null;
    if (// If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e203.path && e203.fieldMask.push(e203.path), t402 instanceof Array) {
        // TODO(b/34871131): Include the path containing the array in the error
        // message.
        // In the case of IN queries, the parsed data is an array (representing
        // the set of values to be included for the IN query) that may directly
        // contain additional arrays (each representing an individual field
        // value), so we disable this validation.
        if (e203.settings.ec && 4 /* ArrayArgument */  !== e203.Xa) throw e203.rc("Nested arrays are not supported");
        return function(t, e) {
            const n = [];
            let s = 0;
            for (const i of t){
                let t = fh(i, e.ic(s));
                null == t && // Just include nulls in the array for fields being replaced with a
                // sentinel.
                (t = {
                    nullValue: "NULL_VALUE"
                }), n.push(t), s++;
            }
            return {
                arrayValue: {
                    values: n
                }
            };
        }(t402, e203);
    }
    return function(t, e) {
        if (null === (t = _util.getModularInstance(t))) return {
            nullValue: "NULL_VALUE"
        };
        if ("number" == typeof t) return en(e.M, t);
        if ("boolean" == typeof t) return {
            booleanValue: t
        };
        if ("string" == typeof t) return {
            stringValue: t
        };
        if (t instanceof Date) {
            const n = at.fromDate(t);
            return {
                timestampValue: ds(e.M, n)
            };
        }
        if (t instanceof at) {
            // Firestore backend truncates precision down to microseconds. To ensure
            // offline mode works the same with regards to truncation, perform the
            // truncation immediately without waiting for the backend to do that.
            const n = new at(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
            return {
                timestampValue: ds(e.M, n)
            };
        }
        if (t instanceof zc) return {
            geoPointValue: {
                latitude: t.latitude,
                longitude: t.longitude
            }
        };
        if (t instanceof jc) return {
            bytesValue: _s(e.M, t._byteString)
        };
        if (t instanceof mc) {
            const n = e.databaseId, s = t.firestore._databaseId;
            if (!s.isEqual(n)) throw e.rc(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
            return {
                referenceValue: gs(t.firestore._databaseId || e.databaseId, t._key.path)
            };
        }
        throw e.rc(`Unsupported field value: ${hc(t)}`);
    }(t402, e203);
}
function dh(t403, e) {
    const n = {};
    return ft(t403) ? // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e.path && e.path.length > 0 && e.fieldMask.push(e.path) : lt(t403, (t, s)=>{
        const i = fh(s, e.tc(t));
        null != i && (n[t] = i);
    }), {
        mapValue: {
            fields: n
        }
    };
}
function _h(t) {
    return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof at || t instanceof zc || t instanceof jc || t instanceof mc || t instanceof Wc);
}
function wh(t404, e, n) {
    if (!_h(n) || !function(t) {
        return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
    }(n)) {
        const s = hc(n);
        throw "an object" === s ? e.rc(t404 + " a custom object") : e.rc(t404 + " " + s);
    }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */ function mh(t, e, n) {
    if (// If required, replace the FieldPath Compat class with with the firestore-exp
    // FieldPath.
    (e = _util.getModularInstance(e)) instanceof Gc) return e._internalPath;
    if ("string" == typeof e) return yh(t, e);
    throw ph("Field path arguments must be of type string or ", t, /* hasConverter= */ !1, /* path= */ void 0, n);
}
/**
 * Matches any characters in a field path string that are reserved.
 */ const gh = new RegExp("[~\\*/\\[\\]]");
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName - The publicly visible method name
 * @param path - The dot-separated string form of a field path which will be
 * split on dots.
 * @param targetDoc - The document against which the field path will be
 * evaluated.
 */ function yh(t, e, n) {
    if (e.search(gh) >= 0) throw ph(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, /* hasConverter= */ !1, /* path= */ void 0, n);
    try {
        return new Gc(...e.split("."))._internalPath;
    } catch (s) {
        throw ph(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, /* hasConverter= */ !1, /* path= */ void 0, n);
    }
}
function ph(t, e, n, s, i) {
    const r = s && !s.isEmpty(), o = void 0 !== i;
    let u = `Function ${e}() called with invalid data`;
    n && (u += " (via `toFirestore()`)"), u += ". ";
    let a = "";
    return (r || o) && (a += " (found", r && (a += ` in field ${s}`), o && (a += ` in document ${i}`), a += ")"), new Q(G.INVALID_ARGUMENT, u + t + a);
}
/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Ih(t405, e) {
    return t405.some((t)=>t.isEqual(e)
    );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ class Th {
    // Note: This class is stripped down version of the DocumentSnapshot in
    // the legacy SDK. The changes are:
    // - No support for SnapshotMetadata.
    // - No support for SnapshotOptions.
    /** @hideconstructor protected */ constructor(t, e, n, s, i){
        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, this._converter = i;
    }
    /** Property of the `DocumentSnapshot` that provides the document's ID. */ get id() {
        return this._key.path.lastSegment();
    }
    /**
     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
     */ get ref() {
        return new mc(this._firestore, this._converter, this._key);
    }
    /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */ exists() {
        return null !== this._document;
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */ data() {
        if (this._document) {
            if (this._converter) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                const t = new Eh(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */ null);
                return this._converter.fromFirestore(t);
            }
            return this._userDataWriter.convertValue(this._document.data.value);
        }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */ // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(t) {
        if (this._document) {
            const e = this._document.data.field(Ah("DocumentSnapshot.get", t));
            if (null !== e) return this._userDataWriter.convertValue(e);
        }
    }
}
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */ class Eh extends Th {
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @returns An `Object` containing all fields in the document.
     */ data() {
        return super.data();
    }
}
/**
 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
 */ function Ah(t, e) {
    return "string" == typeof e ? yh(t, e) : e instanceof Gc ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Metadata about a snapshot, describing the state of the snapshot.
 */ class Rh {
    /** @hideconstructor */ constructor(t, e){
        this.hasPendingWrites = t, this.fromCache = e;
    }
    /**
     * Returns true if this `SnapshotMetadata` is equal to the provided one.
     *
     * @param other - The `SnapshotMetadata` to compare against.
     * @returns true if this `SnapshotMetadata` is equal to the provided one.
     */ isEqual(t) {
        return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
    }
}
/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ class Ph extends Th {
    /** @hideconstructor protected */ constructor(t, e, n, s, i, r){
        super(t, e, n, s, r), this._firestore = t, this._firestoreImpl = t, this.metadata = i;
    }
    /**
     * Returns whether or not the data exists. True if the document exists.
     */ exists() {
        return super.exists();
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * By default, `serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document or `undefined` if
     * the document doesn't exist.
     */ data(t = {}) {
        if (this._document) {
            if (this._converter) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                const e = new bh(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, /* converter= */ null);
                return this._converter.fromFirestore(e, t);
            }
            return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
        }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * By default, a `serverTimestamp()` that has not yet been set to
     * its final value will be returned as `null`. You can override this by
     * passing an options object.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @param options - An options object to configure how the field is retrieved
     * from the snapshot (for example the desired behavior for server timestamps
     * that have not yet been set to their final value).
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */ // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(t, e = {}) {
        if (this._document) {
            const n = this._document.data.field(Ah("DocumentSnapshot.get", t));
            if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
        }
    }
}
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */ class bh extends Ph {
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * By default, `serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @override
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document.
     */ data(t = {}) {
        return super.data(t);
    }
}
/**
 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
 * representing the results of a query. The documents can be accessed as an
 * array via the `docs` property or enumerated using the `forEach` method. The
 * number of documents can be determined via the `empty` and `size`
 * properties.
 */ class Vh {
    /** @hideconstructor */ constructor(t, e, n, s){
        this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new Rh(s.hasPendingWrites, s.fromCache), this.query = n;
    }
    /** An array of all the documents in the `QuerySnapshot`. */ get docs() {
        const t = [];
        return this.forEach((e)=>t.push(e)
        ), t;
    }
    /** The number of documents in the `QuerySnapshot`. */ get size() {
        return this._snapshot.docs.size;
    }
    /** True if there are no documents in the `QuerySnapshot`. */ get empty() {
        return 0 === this.size;
    }
    /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */ forEach(t, e) {
        this._snapshot.docs.forEach((n)=>{
            t.call(e, new bh(this._firestore, this._userDataWriter, n.key, n, new Rh(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));
        });
    }
    /**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as 'added'
     * changes.
     *
     * @param options - `SnapshotListenOptions` that control whether metadata-only
     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
     * snapshot events.
     */ docChanges(t406 = {}) {
        const e204 = !!t406.includeMetadataChanges;
        if (e204 && this._snapshot.excludesMetadataChanges) throw new Q(G.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e204 || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */ function(t407, e205) {
            if (t407._snapshot.oldDocs.isEmpty()) {
                let e = 0;
                return t407._snapshot.docChanges.map((n)=>({
                        type: "added",
                        doc: new bh(t407._firestore, t407._userDataWriter, n.doc.key, n.doc, new Rh(t407._snapshot.mutatedKeys.has(n.doc.key), t407._snapshot.fromCache), t407.query.converter),
                        oldIndex: -1,
                        newIndex: e++
                    })
                );
            }
            {
                // A `DocumentSet` that is updated incrementally as changes are applied to use
                // to lookup the index of a document.
                let n = t407._snapshot.oldDocs;
                return t407._snapshot.docChanges.filter((t)=>e205 || 3 /* Metadata */  !== t.type
                ).map((e)=>{
                    const s = new bh(t407._firestore, t407._userDataWriter, e.doc.key, e.doc, new Rh(t407._snapshot.mutatedKeys.has(e.doc.key), t407._snapshot.fromCache), t407.query.converter);
                    let i = -1, r = -1;
                    return 0 /* Added */  !== e.type && (i = n.indexOf(e.doc.key), n = n.delete(e.doc.key)), 1 /* Removed */  !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
                        type: vh(e.type),
                        doc: s,
                        oldIndex: i,
                        newIndex: r
                    };
                });
            }
        }(this, e204), this._cachedChangesIncludeMetadataChanges = e204), this._cachedChanges;
    }
}
function vh(t) {
    switch(t){
        case 0 /* Added */ :
            return "added";
        case 2 /* Modified */ :
        case 3 /* Metadata */ :
            return "modified";
        case 1 /* Removed */ :
            return "removed";
        default:
            return L();
    }
}
// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
// metadata
/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left - A snapshot to compare.
 * @param right - A snapshot to compare.
 * @returns true if the snapshots are equal.
 */ function Sh(t, e) {
    return t instanceof Ph && e instanceof Ph ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Vh && e instanceof Vh && t._firestore === e._firestore && Ac(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Dh(t) {
    if (Be(t) && 0 === t.explicitOrderBy.length) throw new Q(G.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
 * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */ class Ch {
}
/**
 * Creates a new immutable instance of {@link Query} that is extended to also include
 * additional query constraints.
 *
 * @param query - The {@link Query} instance to use as a base for the new constraints.
 * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */ function xh(t, ...e) {
    for (const n of e)t = n._apply(t);
    return t;
}
class Nh extends Ch {
    constructor(t, e, n){
        super(), this.lc = t, this.fc = e, this.dc = n, this.type = "where";
    }
    _apply(t408) {
        const e206 = eh(t408.firestore), n87 = function(t409, e207, n88, s48, i, r, o) {
            let u;
            if (i.isKeyField()) {
                if ("array-contains" /* ARRAY_CONTAINS */  === r || "array-contains-any" /* ARRAY_CONTAINS_ANY */  === r) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. You can't perform '${r}' queries on documentId().`);
                if ("in" /* IN */  === r || "not-in" /* NOT_IN */  === r) {
                    zh(o, r);
                    const e = [];
                    for (const n of o)e.push(Wh(s48, t409, n));
                    u = {
                        arrayValue: {
                            values: e
                        }
                    };
                } else u = Wh(s48, t409, o);
            } else "in" /* IN */  !== r && "not-in" /* NOT_IN */  !== r && "array-contains-any" /* ARRAY_CONTAINS_ANY */  !== r || zh(o, r), u = lh(n88, e207, o, /* allowArrays= */ "in" /* IN */  === r || "not-in" /* NOT_IN */  === r);
            const a = Te.create(i, r, u);
            return function(t410, e208) {
                if (e208.S()) {
                    const n = Ue(t410);
                    if (null !== n && !n.isEqual(e208.field)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e208.field.toString()}'`);
                    const s = Le(t410);
                    null !== s && Hh(t410, e208.field, s);
                }
                const n89 = function(t, e) {
                    for (const n of t.filters)if (e.indexOf(n.op) >= 0) return n.op;
                    return null;
                }(t410, /**
 * Given an operator, returns the set of operators that cannot be used with it.
 *
 * Operators in a query must adhere to the following set of rules:
 * 1. Only one array operator is allowed.
 * 2. Only one disjunctive operator is allowed.
 * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.
 * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
 *
 * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`
 * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`
 */ function(t) {
                    switch(t){
                        case "!=" /* NOT_EQUAL */ :
                            return [
                                "!=" /* NOT_EQUAL */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "array-contains" /* ARRAY_CONTAINS */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "in" /* IN */ :
                            return [
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "not-in" /* NOT_IN */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ ,
                                "!=" /* NOT_EQUAL */ 
                            ];
                        default:
                            return [];
                    }
                }(e208.op));
                if (null !== n89) // Special case when it's a duplicate op to give a slightly clearer error message.
                throw n89 === e208.op ? new Q(G.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e208.op.toString()}' filter.`) : new Q(G.INVALID_ARGUMENT, `Invalid query. You cannot use '${e208.op.toString()}' filters with '${n89.toString()}' filters.`);
            }(t409, a), a;
        }(t408._query, "where", e206, t408.firestore._databaseId, this.lc, this.fc, this.dc);
        return new gc(t408.firestore, t408.converter, function(t, e) {
            const n = t.filters.concat([
                e
            ]);
            return new Me(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
        }(t408._query, n87));
    }
}
/**
 * Creates a {@link QueryConstraint} that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath - The path to compare
 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
 *   "&lt;=", "!=").
 * @param value - The value for comparison
 * @returns The created {@link Query}.
 */ function kh(t, e, n) {
    const s = e, i = Ah("where", t);
    return new Nh(i, s, n);
}
class Mh extends Ch {
    constructor(t, e){
        super(), this.lc = t, this._c = e, this.type = "orderBy";
    }
    _apply(t411) {
        const e209 = function(t412, e210, n90) {
            if (null !== t412.startAt) throw new Q(G.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
            if (null !== t412.endAt) throw new Q(G.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
            const s = new Ce(e210, n90);
            return function(t, e) {
                if (null === Le(t)) {
                    // This is the first order by. It must match any inequality.
                    const n = Ue(t);
                    null !== n && Hh(t, n, e.field);
                }
            }(t412, s), s;
        }(t411._query, this.lc, this._c);
        return new gc(t411.firestore, t411.converter, function(t, e) {
            // TODO(dimond): validate that orderBy does not list the same key twice.
            const n = t.explicitOrderBy.concat([
                e
            ]);
            return new Me(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
        }(t411._query, e209));
    }
}
/**
 * Creates a {@link QueryConstraint} that sorts the query result by the
 * specified field, optionally in descending order instead of ascending.
 *
 * @param fieldPath - The field to sort by.
 * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
 * not specified, order will be ascending.
 * @returns The created {@link Query}.
 */ function Oh(t, e = "asc") {
    const n = e, s = Ah("orderBy", t);
    return new Mh(s, n);
}
class Fh extends Ch {
    constructor(t, e, n){
        super(), this.type = t, this.wc = e, this.mc = n;
    }
    _apply(t) {
        return new gc(t.firestore, t.converter, Qe(t._query, this.wc, this.mc));
    }
}
/**
 * Creates a {@link QueryConstraint} that only returns the first matching documents.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */ function $h(t) {
    return fc("limit", t), new Fh("limit", t, "F" /* First */ );
}
/**
 * Creates a {@link QueryConstraint} that only returns the last matching documents.
 *
 * You must specify at least one `orderBy` clause for `limitToLast` queries,
 * otherwise an exception will be thrown during execution.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */ function Bh(t) {
    return fc("limitToLast", t), new Fh("limitToLast", t, "L" /* Last */ );
}
class Lh extends Ch {
    constructor(t, e, n){
        super(), this.type = t, this.gc = e, this.yc = n;
    }
    _apply(t413) {
        const e211 = jh(t413, this.type, this.gc, this.yc);
        return new gc(t413.firestore, t413.converter, function(t, e) {
            return new Me(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
        }(t413._query, e211));
    }
}
function Uh(...t) {
    return new Lh("startAt", t, /*inclusive=*/ !0);
}
function qh(...t) {
    return new Lh("startAfter", t, /*inclusive=*/ !1);
}
class Kh extends Ch {
    constructor(t, e, n){
        super(), this.type = t, this.gc = e, this.yc = n;
    }
    _apply(t414) {
        const e212 = jh(t414, this.type, this.gc, this.yc);
        return new gc(t414.firestore, t414.converter, function(t, e) {
            return new Me(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
        }(t414._query, e212));
    }
}
function Gh(...t) {
    return new Kh("endBefore", t, /*inclusive=*/ !1);
}
function Qh(...t) {
    return new Kh("endAt", t, /*inclusive=*/ !0);
}
/** Helper function to create a bound from a document or fields */ function jh(t415, e213, n92, s49) {
    if (n92[0] = _util.getModularInstance(n92[0]), n92[0] instanceof Th) return function(t, e, n, s, i) {
        if (!s) throw new Q(G.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);
        const r = [];
        // Because people expect to continue/end a query at the exact document
        // provided, we need to use the implicit sort order rather than the explicit
        // sort order, because it's guaranteed to contain the document key. That way
        // the position becomes unambiguous and the query continues/ends exactly at
        // the provided document. Without the key (by using the explicit sort
        // orders), multiple documents could match the position, yielding duplicate
        // results.
        for (const n91 of Ke(t))if (n91.field.isKeyField()) r.push(qt(e, s.key));
        else {
            const t = s.data.field(n91.field);
            if (Rt(t)) throw new Q(G.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n91.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
            if (null === t) {
                const t = n91.field.canonicalString();
                throw new Q(G.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);
            }
            r.push(t);
        }
        return new De(r, i);
    }(t415._query, t415.firestore._databaseId, e213, n92[0]._document, s49);
    {
        const i22 = eh(t415.firestore);
        return function(t, e, n, s, i, r) {
            // Use explicit order by's because it has to match the query the user made
            const o = t.explicitOrderBy;
            if (i.length > o.length) throw new Q(G.INVALID_ARGUMENT, `Too many arguments provided to ${s}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
            const u = [];
            for(let r11 = 0; r11 < i.length; r11++){
                const a = i[r11];
                if (o[r11].field.isKeyField()) {
                    if ("string" != typeof a) throw new Q(G.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${s}(), but got a ${typeof a}`);
                    if (!qe(t) && -1 !== a.indexOf("/")) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${s}() must be a plain document ID, but '${a}' contains a slash.`);
                    const n = t.path.child(_t.fromString(a));
                    if (!xt.isDocumentKey(n)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${s}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);
                    const i = new xt(n);
                    u.push(qt(e, i));
                } else {
                    const t = lh(n, s, a);
                    u.push(t);
                }
            }
            return new De(u, r);
        }(t415._query, t415.firestore._databaseId, i22, e213, n92, s49);
    }
}
function Wh(t, e, n) {
    if ("string" == typeof (n = _util.getModularInstance(n))) {
        if ("" === n) throw new Q(G.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!qe(e) && -1 !== n.indexOf("/")) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
        const s = e.path.child(_t.fromString(n));
        if (!xt.isDocumentKey(s)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
        return qt(t, new xt(s));
    }
    if (n instanceof mc) return qt(t, n._key);
    throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${hc(n)}.`);
}
/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */ function zh(t, e) {
    if (!Array.isArray(t) || 0 === t.length) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
    if (t.length > 10) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);
}
function Hh(t, e, n) {
    if (!n.isEqual(e)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 *
 * @internal
 */ class Jh {
    convertValue(t, e = "none") {
        switch(Mt(t)){
            case 0 /* NullValue */ :
                return null;
            case 1 /* BooleanValue */ :
                return t.booleanValue;
            case 2 /* NumberValue */ :
                return Et(t.integerValue || t.doubleValue);
            case 3 /* TimestampValue */ :
                return this.convertTimestamp(t.timestampValue);
            case 4 /* ServerTimestampValue */ :
                return this.convertServerTimestamp(t, e);
            case 5 /* StringValue */ :
                return t.stringValue;
            case 6 /* BlobValue */ :
                return this.convertBytes(At(t.bytesValue));
            case 7 /* RefValue */ :
                return this.convertReference(t.referenceValue);
            case 8 /* GeoPointValue */ :
                return this.convertGeoPoint(t.geoPointValue);
            case 9 /* ArrayValue */ :
                return this.convertArray(t.arrayValue, e);
            case 10 /* ObjectValue */ :
                return this.convertObject(t.mapValue, e);
            default:
                throw L();
        }
    }
    convertObject(t416, e) {
        const n = {};
        return lt(t416.fields, (t, s)=>{
            n[t] = this.convertValue(s, e);
        }), n;
    }
    convertGeoPoint(t) {
        return new zc(Et(t.latitude), Et(t.longitude));
    }
    convertArray(t417, e) {
        return (t417.values || []).map((t)=>this.convertValue(t, e)
        );
    }
    convertServerTimestamp(t, e) {
        switch(e){
            case "previous":
                const n = Pt(t);
                return null == n ? null : this.convertValue(n, e);
            case "estimate":
                return this.convertTimestamp(bt(t));
            default:
                return null;
        }
    }
    convertTimestamp(t) {
        const e = Tt(t);
        return new at(e.seconds, e.nanos);
    }
    convertDocumentKey(t, e) {
        const n = _t.fromString(t);
        U(Gs(n));
        const s = new vt(n.get(1), n.get(3)), i = new xt(n.popFirst(5));
        return s.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
        F(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), i;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts custom model object of type T into `DocumentData` by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to `DocumentData`
 * because we want to provide the user with a more specific error message if
 * their `set()` or fails due to invalid data originating from a `toFirestore()`
 * call.
 */ function Yh(t, e, n) {
    let s;
    // Cast to `any` in order to satisfy the union type constraint on
    // toFirestore().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, s;
}
class Xh extends Jh {
    constructor(t){
        super(), this.firestore = t;
    }
    convertBytes(t) {
        return new jc(t);
    }
    convertReference(t) {
        const e = this.convertDocumentKey(t, this.firestore._databaseId);
        return new mc(this.firestore, /* converter= */ null, e);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch.commit} is
 * called.
 */ class Zh {
    /** @hideconstructor */ constructor(t, e){
        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = eh(t);
    }
    set(t, e, n) {
        this._verifyNotCommitted();
        const s = tl(t, this._firestore), i = Yh(s.converter, e, n), r = nh(this._dataReader, "WriteBatch.set", s._key, i, null !== s.converter, n);
        return this._mutations.push(r.toMutation(s._key, yn.none())), this;
    }
    update(t, e, n, ...s) {
        this._verifyNotCommitted();
        const i = tl(t, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        let r;
        return r = "string" == typeof (e = _util.getModularInstance(e)) || e instanceof Gc ? hh(this._dataReader, "WriteBatch.update", i._key, e, n, s) : ch(this._dataReader, "WriteBatch.update", i._key, e), this._mutations.push(r.toMutation(i._key, yn.exists(!0))), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */ delete(t) {
        this._verifyNotCommitted();
        const e = tl(t, this._firestore);
        return this._mutations = this._mutations.concat(new Cn(e._key, yn.none())), this;
    }
    /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `Promise` resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */ commit() {
        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }
    _verifyNotCommitted() {
        if (this._committed) throw new Q(G.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }
}
function tl(t, e) {
    if ((t = _util.getModularInstance(t)).firestore !== e) throw new Q(G.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
    return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
// legacy SDK.
/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Reads the document referred to by this `DocumentReference`.
 *
 * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
 * for data from the server, but it may return cached data or fail if you are
 * offline and the server cannot be reached. To specify this behavior, invoke
 * {@link getDocFromCache} or {@link getDocFromServer}.
 *
 * @param reference - The reference of the document to fetch.
 * @returns A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ function el(t) {
    t = lc(t, mc);
    const e = lc(t.firestore, vc);
    return Xa(Cc(e), t._key).then((n)=>wl(e, t, n)
    );
}
class nl extends Jh {
    constructor(t){
        super(), this.firestore = t;
    }
    convertBytes(t) {
        return new jc(t);
    }
    convertReference(t) {
        const e = this.convertDocumentKey(t, this.firestore._databaseId);
        return new mc(this.firestore, /* converter= */ null, e);
    }
}
/**
 * Reads the document referred to by this `DocumentReference` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ function sl(t) {
    t = lc(t, mc);
    const e = lc(t.firestore, vc), n93 = Cc(e), s = new nl(e);
    return Ya(n93, t._key).then((n)=>new Ph(e, s, t._key, n, new Rh(null !== n && n.hasLocalMutations, /* fromCache= */ !0), t.converter)
    );
}
/**
 * Reads the document referred to by this `DocumentReference` from the server.
 * Returns an error if the network is not available.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ function il(t) {
    t = lc(t, mc);
    const e = lc(t.firestore, vc);
    return Xa(Cc(e), t._key, {
        source: "server"
    }).then((n)=>wl(e, t, n)
    );
}
/**
 * Executes the query and returns the results as a `QuerySnapshot`.
 *
 * Note: `getDocs()` attempts to provide up-to-date data when possible by
 * waiting for data from the server, but it may return cached data or fail if
 * you are offline and the server cannot be reached. To specify this behavior,
 * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */ function rl(t) {
    t = lc(t, gc);
    const e = lc(t.firestore, vc), n94 = Cc(e), s = new nl(e);
    return Dh(t._query), tc(n94, t._query).then((n)=>new Vh(e, s, t, n)
    );
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */ function ol(t) {
    t = lc(t, gc);
    const e = lc(t.firestore, vc), n95 = Cc(e), s = new nl(e);
    return Za(n95, t._query).then((n)=>new Vh(e, s, t, n)
    );
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from the
 * server. Returns an error if the network is not available.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */ function ul(t) {
    t = lc(t, gc);
    const e = lc(t.firestore, vc), n96 = Cc(e), s = new nl(e);
    return tc(n96, t._query, {
        source: "server"
    }).then((n)=>new Vh(e, s, t, n)
    );
}
function al(t, e, n) {
    t = lc(t, mc);
    const s = lc(t.firestore, vc), i = Yh(t.converter, e, n);
    return _l(s, [
        nh(eh(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, yn.none())
    ]);
}
function cl(t, e, n, ...s) {
    t = lc(t, mc);
    const i = lc(t.firestore, vc), r = eh(i);
    let o;
    o = "string" == typeof // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    (e = _util.getModularInstance(e)) || e instanceof Gc ? hh(r, "updateDoc", t._key, e, n, s) : ch(r, "updateDoc", t._key, e);
    return _l(i, [
        o.toMutation(t._key, yn.exists(!0))
    ]);
}
/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * @param reference - A reference to the document to delete.
 * @returns A Promise resolved once the document has been successfully
 * deleted from the backend (note that it won't resolve while you're offline).
 */ function hl(t) {
    return _l(lc(t.firestore, vc), [
        new Cn(t._key, yn.none())
    ]);
}
/**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * @param reference - A reference to the collection to add this document to.
 * @param data - An Object containing the data for the new document.
 * @returns A `Promise` resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend (Note that it
 * won't resolve while you're offline).
 */ function ll(t, e) {
    const n = lc(t.firestore, vc), s = Tc(t), i = Yh(t.converter, e);
    return _l(n, [
        nh(eh(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, yn.exists(!1))
    ]).then(()=>s
    );
}
function fl(t418, ...e214) {
    var n97, s50, i24;
    t418 = _util.getModularInstance(t418);
    let r12 = {
        includeMetadataChanges: !1
    }, o = 0;
    "object" != typeof e214[o] || Pc(e214[o]) || (r12 = e214[o], o++);
    const u = {
        includeMetadataChanges: r12.includeMetadataChanges
    };
    if (Pc(e214[o])) {
        const t = e214[o];
        e214[o] = null === (n97 = t.next) || void 0 === n97 ? void 0 : n97.bind(t), e214[o + 1] = null === (s50 = t.error) || void 0 === s50 ? void 0 : s50.bind(t), e214[o + 2] = null === (i24 = t.complete) || void 0 === i24 ? void 0 : i24.bind(t);
    }
    let a, c, h;
    if (t418 instanceof mc) c = lc(t418.firestore, vc), h = Fe(t418._key.path), a = {
        next: (n)=>{
            e214[o] && e214[o](wl(c, t418, n));
        },
        error: e214[o + 1],
        complete: e214[o + 2]
    };
    else {
        const n = lc(t418, gc);
        c = lc(n.firestore, vc), h = n._query;
        const s = new nl(c);
        a = {
            next: (t)=>{
                e214[o] && e214[o](new Vh(c, s, n, t));
            },
            error: e214[o + 1],
            complete: e214[o + 2]
        }, Dh(t418._query);
    }
    return function(t, e, n, s) {
        const i = new Ma(s), r = new Uu(e, i, n);
        return t.asyncQueue.enqueueAndForget(async ()=>Ou(await za(t), r)
        ), ()=>{
            i.Ia(), t.asyncQueue.enqueueAndForget(async ()=>Fu(await za(t), r)
            );
        };
    }(Cc(c), h, u, a);
}
function dl(t, e) {
    return ec(Cc(t = lc(t, vc)), Pc(e) ? e : {
        next: e
    });
}
/**
 * Locally writes `mutations` on the async queue.
 * @internal
 */ function _l(t419, e215) {
    return function(t, e) {
        const n = new j;
        return t.asyncQueue.enqueueAndForget(async ()=>ea(await Wa(t), e, n)
        ), n.promise;
    }(Cc(t419), e215);
}
/**
 * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
 * to a {@link DocumentSnapshot}.
 */ function wl(t, e, n) {
    const s = n.docs.get(e._key), i = new nl(t);
    return new Ph(t, i, e._key, s, new Rh(n.hasPendingWrites, n.fromCache), e.converter);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */ class ml extends class {
    /** @hideconstructor */ constructor(t, e){
        this._firestore = t, this._transaction = e, this._dataReader = eh(t);
    }
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */ get(t421) {
        const e = tl(t421, this._firestore), n = new Xh(this._firestore);
        return this._transaction.lookup([
            e._key
        ]).then((t)=>{
            if (!t || 1 !== t.length) return L();
            const s = t[0];
            if (s.isFoundDocument()) return new Th(this._firestore, n, s.key, s, e.converter);
            if (s.isNoDocument()) return new Th(this._firestore, n, e._key, null, e.converter);
            throw L();
        });
    }
    set(t, e, n) {
        const s = tl(t, this._firestore), i = Yh(s.converter, e, n), r = nh(this._dataReader, "Transaction.set", s._key, i, null !== s.converter, n);
        return this._transaction.set(s._key, r), this;
    }
    update(t, e, n, ...s) {
        const i = tl(t, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        let r;
        return r = "string" == typeof (e = _util.getModularInstance(e)) || e instanceof Gc ? hh(this._dataReader, "Transaction.update", i._key, e, n, s) : ch(this._dataReader, "Transaction.update", i._key, e), this._transaction.update(i._key, r), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */ delete(t) {
        const e = tl(t, this._firestore);
        return this._transaction.delete(e._key), this;
    }
} {
    // This class implements the same logic as the Transaction API in the Lite SDK
    // but is subclassed in order to return its own DocumentSnapshot types.
    /** @hideconstructor */ constructor(t, e){
        super(t, e), this._firestore = t;
    }
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */ get(t420) {
        const e = tl(t420, this._firestore), n = new nl(this._firestore);
        return super.get(t420).then((t)=>new Ph(this._firestore, n, e._key, t._document, new Rh(/* hasPendingWrites= */ !1, /* fromCache= */ !1), e.converter)
        );
    }
}
/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore - A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction - The function to execute within the transaction
 * context.
 * @returns If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */ function gl(t, e) {
    return nc(Cc(t = lc(t, vc)), (n)=>e(new ml(t, n))
    );
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
 * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
 */ function yl() {
    return new sh("deleteField");
}
/**
 * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
 * include a server-generated timestamp in the written data.
 */ function pl() {
    return new rh("serverTimestamp");
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements - The elements to union into the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */ function Il(...t) {
    // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we'd need the Firestore instance to do this.
    return new oh("arrayUnion", t);
}
/**
 * Returns a special value that can be used with {@link (setDoc:1)} or {@link
 * updateDoc:1} that tells the server to remove the given elements from any
 * array value that already exists on the server. All instances of each element
 * specified will be removed from the array. If the field being modified is not
 * already an array it will be overwritten with an empty array.
 *
 * @param elements - The elements to remove from the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */ function Tl(...t) {
    // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we'd need the Firestore instance to do this.
    return new uh("arrayRemove", t);
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
 * the given value.
 *
 * If either the operand or the current field value uses floating point
 * precision, all arithmetic follows IEEE 754 semantics. If both values are
 * integers, values outside of JavaScript's safe number range
 * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
 * precision loss. Furthermore, once processed by the Firestore backend, all
 * integer operations are capped between -2^63 and 2^63-1.
 *
 * If the current field value is not of type `number`, or if the field does not
 * yet exist, the transformation sets the field to the given value.
 *
 * @param n - The value to increment by.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */ function El(t) {
    return new ah("increment", t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Creates a write batch, used for performing multiple writes as a single
 * atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}
 * is 500.
 *
 * Unlike transactions, write batches are persisted offline and therefore are
 * preferable when you don't need to condition your writes on read data.
 *
 * @returns A {@link WriteBatch} that can be used to atomically execute multiple
 * writes.
 */ function Al(t) {
    return Cc(t = lc(t, vc)), new Zh(t, (e)=>_l(t, e)
    );
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Rl(t423, e) {
    Cc(t423 = lc(t423, vc));
    const n = "string" == typeof e ? function(t) {
        try {
            return JSON.parse(t);
        } catch (t424) {
            throw new Q(G.INVALID_ARGUMENT, "Failed to parse JSON:" + t424.message);
        }
    }(e) : e, s = [];
    // PORTING NOTE: We don't return an error if the user has not enabled
    // persistence since `enableIndexeddbPersistence()` can fail on the Web.
    if (Array.isArray(n.indexes)) for (const t422 of n.indexes){
        const e = Pl(t422, "collectionGroup"), n = [];
        if (Array.isArray(t422.fields)) for (const e216 of t422.fields){
            const t = yh("setIndexConfiguration", Pl(e216, "fieldPath"));
            "CONTAINS" === e216.arrayConfig ? n.push(new oe(t, 2 /* CONTAINS */ )) : "ASCENDING" === e216.order ? n.push(new oe(t, 0 /* ASCENDING */ )) : "DESCENDING" === e216.order && n.push(new oe(t, 1 /* DESCENDING */ ));
        }
        s.push(new se(se.UNKNOWN_ID, e, n, ue.empty()));
    }
    // TODO(indexing): Configure indexes
    return Promise.resolve();
}
function Pl(t, e) {
    if ("string" != typeof t[e]) throw new Q(G.INVALID_ARGUMENT, "Missing string value for: " + e);
    return t[e];
}
/**
 * Cloud Firestore
 *
 * @packageDocumentation
 */ !function(t425, e = !0) {
    !function(t) {
        x = t;
    }(_app.SDK_VERSION), _app._registerComponent(new _component.Component("firestore", (t, { options: n  })=>{
        const s = t.getProvider("app").getImmediate(), i = new vc(s, new J(t.getProvider("auth-internal")), new tt(t.getProvider("app-check-internal")));
        return n = Object.assign({
            useFetchStreams: e
        }, n), i._setSettings(n), i;
    }, "PUBLIC")), _app.registerVersion(D, "3.4.8", t425), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    _app.registerVersion(D, "3.4.8", "esm2017");
}();

},{"@firebase/app":"3AcPV","@firebase/component":"bi1VB","@firebase/logger":"fZmft","@firebase/util":"ePiK6","@firebase/webchannel-wrapper":"yQiQ1","process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"yQiQ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ErrorCode", ()=>ErrorCode
);
parcelHelpers.export(exports, "Event", ()=>Event
);
parcelHelpers.export(exports, "EventType", ()=>EventType
);
parcelHelpers.export(exports, "FetchXmlHttpFactory", ()=>FetchXmlHttpFactory
);
parcelHelpers.export(exports, "Stat", ()=>Stat
);
parcelHelpers.export(exports, "WebChannel", ()=>WebChannel
);
parcelHelpers.export(exports, "XhrIo", ()=>XhrIo
);
parcelHelpers.export(exports, "createWebChannelTransport", ()=>createWebChannelTransport
);
parcelHelpers.export(exports, "default", ()=>esm
);
parcelHelpers.export(exports, "getStatEventTarget", ()=>getStatEventTarget
);
var global = arguments[3];
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
var esm = {};
/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/ var k, goog = goog || {}, l = commonjsGlobal || self;
function aa() {}
function ba(a) {
    var b = typeof a;
    b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
    return "array" == b || "object" == b && "number" == typeof a.length;
}
function p(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
}
function da(a) {
    return Object.prototype.hasOwnProperty.call(a, ea) && a[ea] || (a[ea] = ++fa);
}
var ea = "closure_uid_" + (1E9 * Math.random() >>> 0), fa = 0;
function ha(a, b, c) {
    return a.call.apply(a.bind, arguments);
}
function ia(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function() {
            var e = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(e, d);
            return a.apply(b, e);
        };
    }
    return function() {
        return a.apply(b, arguments);
    };
}
function q(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = ha : q = ia;
    return q.apply(null, arguments);
}
function ja(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function() {
        var d = c.slice();
        d.push.apply(d, arguments);
        return a.apply(this, d);
    };
}
function t(a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.Z = b.prototype;
    a.prototype = new c;
    a.prototype.constructor = a;
    a.Vb = function(d, e, f) {
        for(var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++)h[n - 2] = arguments[n];
        return b.prototype[e].apply(d, h);
    };
}
function v() {
    this.s = this.s;
    this.o = this.o;
}
var ka = 0, la = {};
v.prototype.s = !1;
v.prototype.na = function() {
    if (!this.s && (this.s = !0, this.M(), 0 != ka)) {
        var a = da(this);
        delete la[a];
    }
};
v.prototype.M = function() {
    if (this.o) for(; this.o.length;)this.o.shift()();
};
const ma = Array.prototype.indexOf ? function(a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
} : function(a, b) {
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
    for(let c = 0; c < a.length; c++)if (c in a && a[c] === b) return c;
    return -1;
}, na = Array.prototype.forEach ? function(a, b, c) {
    Array.prototype.forEach.call(a, b, c);
} : function(a, b, c) {
    const d = a.length, e = "string" === typeof a ? a.split("") : a;
    for(let f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
};
function oa(a) {
    a: {
        var b = pa;
        const c = a.length, d = "string" === typeof a ? a.split("") : a;
        for(let e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;
            break a;
        }
        b = -1;
    }
    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
}
function qa(a) {
    return Array.prototype.concat.apply([], arguments);
}
function ra(a) {
    const b = a.length;
    if (0 < b) {
        const c = Array(b);
        for(let d = 0; d < b; d++)c[d] = a[d];
        return c;
    }
    return [];
}
function sa(a) {
    return /^[\s\xa0]*$/.test(a);
}
var ta = String.prototype.trim ? function(a) {
    return a.trim();
} : function(a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};
function w(a, b) {
    return -1 != a.indexOf(b);
}
function ua(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
var x;
a: {
    var va = l.navigator;
    if (va) {
        var wa = va.userAgent;
        if (wa) {
            x = wa;
            break a;
        }
    }
    x = "";
}
function xa(a, b, c) {
    for(const d in a)b.call(c, a[d], d, a);
}
function ya(a) {
    const b = {};
    for(const c in a)b[c] = a[c];
    return b;
}
var za = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function Aa(a, b) {
    let c, d;
    for(let e = 1; e < arguments.length; e++){
        d = arguments[e];
        for(c in d)a[c] = d[c];
        for(let f = 0; f < za.length; f++)c = za[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
}
function Ca(a) {
    Ca[" "](a);
    return a;
}
Ca[" "] = aa;
function Fa(a) {
    var b = Ga;
    return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9);
}
var Ha = w(x, "Opera"), y = w(x, "Trident") || w(x, "MSIE"), Ia = w(x, "Edge"), Ja = Ia || y, Ka = w(x, "Gecko") && !(w(x.toLowerCase(), "webkit") && !w(x, "Edge")) && !(w(x, "Trident") || w(x, "MSIE")) && !w(x, "Edge"), La = w(x.toLowerCase(), "webkit") && !w(x, "Edge");
function Ma() {
    var a = l.document;
    return a ? a.documentMode : void 0;
}
var Na;
a: {
    var Oa = "", Pa = function() {
        var a = x;
        if (Ka) return /rv:([^\);]+)(\)|;)/.exec(a);
        if (Ia) return /Edge\/([\d\.]+)/.exec(a);
        if (y) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
        if (La) return /WebKit\/(\S+)/.exec(a);
        if (Ha) return /(?:Version)[ \/]?(\S+)/.exec(a);
    }();
    Pa && (Oa = Pa ? Pa[1] : "");
    if (y) {
        var Qa = Ma();
        if (null != Qa && Qa > parseFloat(Oa)) {
            Na = String(Qa);
            break a;
        }
    }
    Na = Oa;
}
var Ga = {};
function Ra() {
    return Fa(function() {
        let a = 0;
        const b = ta(String(Na)).split("."), c = ta("9").split("."), d = Math.max(b.length, c.length);
        for(let h = 0; 0 == a && h < d; h++){
            var e = b[h] || "", f = c[h] || "";
            do {
                e = /(\d*)(\D*)(.*)/.exec(e) || [
                    "",
                    "",
                    "",
                    ""
                ];
                f = /(\d*)(\D*)(.*)/.exec(f) || [
                    "",
                    "",
                    "",
                    ""
                ];
                if (0 == e[0].length && 0 == f[0].length) break;
                a = ua(0 == e[1].length ? 0 : parseInt(e[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || ua(0 == e[2].length, 0 == f[2].length) || ua(e[2], f[2]);
                e = e[3];
                f = f[3];
            }while (0 == a)
        }
        return 0 <= a;
    });
}
var Sa;
if (l.document && y) {
    var Ta = Ma();
    Sa = Ta ? Ta : parseInt(Na, 10) || void 0;
} else Sa = void 0;
var Ua = Sa;
var Va = function() {
    if (!l.addEventListener || !Object.defineProperty) return !1;
    var a = !1, b = Object.defineProperty({}, "passive", {
        get: function() {
            a = !0;
        }
    });
    try {
        l.addEventListener("test", aa, b), l.removeEventListener("test", aa, b);
    } catch (c) {}
    return a;
}();
function z(a, b) {
    this.type = a;
    this.g = this.target = b;
    this.defaultPrevented = !1;
}
z.prototype.h = function() {
    this.defaultPrevented = !0;
};
function A(a, b) {
    z.call(this, a ? a.type : "");
    this.relatedTarget = this.g = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.state = null;
    this.pointerId = 0;
    this.pointerType = "";
    this.i = null;
    if (a) {
        var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
        this.target = a.target || a.srcElement;
        this.g = b;
        if (b = a.relatedTarget) {
            if (Ka) {
                a: {
                    try {
                        Ca(b.nodeName);
                        var e = !0;
                        break a;
                    } catch (f) {}
                    e = !1;
                }
                e || (b = null);
            }
        } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
        this.relatedTarget = b;
        d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
        this.button = a.button;
        this.key = a.key || "";
        this.ctrlKey = a.ctrlKey;
        this.altKey = a.altKey;
        this.shiftKey = a.shiftKey;
        this.metaKey = a.metaKey;
        this.pointerId = a.pointerId || 0;
        this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Wa[a.pointerType] || "";
        this.state = a.state;
        this.i = a;
        a.defaultPrevented && A.Z.h.call(this);
    }
}
t(A, z);
var Wa = {
    2: "touch",
    3: "pen",
    4: "mouse"
};
A.prototype.h = function() {
    A.Z.h.call(this);
    var a = this.i;
    a.preventDefault ? a.preventDefault() : a.returnValue = !1;
};
var B = "closure_listenable_" + (1E6 * Math.random() | 0);
var Xa = 0;
function Ya(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.ia = e;
    this.key = ++Xa;
    this.ca = this.fa = !1;
}
function Za(a) {
    a.ca = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.ia = null;
}
function $a(a) {
    this.src = a;
    this.g = {};
    this.h = 0;
}
$a.prototype.add = function(a, b, c, d, e) {
    var f = a.toString();
    a = this.g[f];
    a || (a = this.g[f] = [], this.h++);
    var h = ab(a, b, d, e);
    -1 < h ? (b = a[h], c || (b.fa = !1)) : (b = new Ya(b, this.src, f, !!d, e), b.fa = c, a.push(b));
    return b;
};
function bb(a, b) {
    var c = b.type;
    if (c in a.g) {
        var d = a.g[c], e = ma(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && (Za(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
    }
}
function ab(a, b, c, d) {
    for(var e = 0; e < a.length; ++e){
        var f = a[e];
        if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d) return e;
    }
    return -1;
}
var cb = "closure_lm_" + (1E6 * Math.random() | 0), db = {};
function fb(a, b, c, d, e) {
    if (d && d.once) return gb(a, b, c, d, e);
    if (Array.isArray(b)) {
        for(var f = 0; f < b.length; f++)fb(a, b[f], c, d, e);
        return null;
    }
    c = hb(c);
    return a && a[B] ? a.N(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !1, d, e);
}
function ib(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var h = p(e) ? !!e.capture : !!e, n = jb(a);
    n || (a[cb] = n = new $a(a));
    c = n.add(b, c, d, h, f);
    if (c.proxy) return c;
    d = kb();
    c.proxy = d;
    d.src = a;
    d.listener = c;
    if (a.addEventListener) Va || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
    else if (a.attachEvent) a.attachEvent(lb(b.toString()), d);
    else if (a.addListener && a.removeListener) a.addListener(d);
    else throw Error("addEventListener and attachEvent are unavailable.");
    return c;
}
function kb() {
    function a(c) {
        return b.call(a.src, a.listener, c);
    }
    var b = mb;
    return a;
}
function gb(a, b, c, d, e) {
    if (Array.isArray(b)) {
        for(var f = 0; f < b.length; f++)gb(a, b[f], c, d, e);
        return null;
    }
    c = hb(c);
    return a && a[B] ? a.O(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !0, d, e);
}
function nb(a, b, c, d, e) {
    if (Array.isArray(b)) for(var f = 0; f < b.length; f++)nb(a, b[f], c, d, e);
    else (d = p(d) ? !!d.capture : !!d, c = hb(c), a && a[B]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c));
}
function ob(a) {
    if ("number" !== typeof a && a && !a.ca) {
        var b = a.src;
        if (b && b[B]) bb(b.i, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = jb(b)) ? (bb(c, a), 0 == c.h && (c.src = null, b[cb] = null)) : Za(a);
        }
    }
}
function lb(a) {
    return a in db ? db[a] : db[a] = "on" + a;
}
function mb(a, b) {
    if (a.ca) a = !0;
    else {
        b = new A(b, this);
        var c = a.listener, d = a.ia || a.src;
        a.fa && ob(a);
        a = c.call(d, b);
    }
    return a;
}
function jb(a) {
    a = a[cb];
    return a instanceof $a ? a : null;
}
var pb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
function hb(a) {
    if ("function" === typeof a) return a;
    a[pb] || (a[pb] = function(b) {
        return a.handleEvent(b);
    });
    return a[pb];
}
function C() {
    v.call(this);
    this.i = new $a(this);
    this.P = this;
    this.I = null;
}
t(C, v);
C.prototype[B] = !0;
C.prototype.removeEventListener = function(a, b, c, d) {
    nb(this, a, b, c, d);
};
function D(a, b) {
    var c, d = a.I;
    if (d) for(c = []; d; d = d.I)c.push(d);
    a = a.P;
    d = b.type || b;
    if ("string" === typeof b) b = new z(b, a);
    else if (b instanceof z) b.target = b.target || a;
    else {
        var e = b;
        b = new z(d, a);
        Aa(b, e);
    }
    e = !0;
    if (c) for(var f = c.length - 1; 0 <= f; f--){
        var h = b.g = c[f];
        e = qb(h, d, !0, b) && e;
    }
    h = b.g = a;
    e = qb(h, d, !0, b) && e;
    e = qb(h, d, !1, b) && e;
    if (c) for(f = 0; f < c.length; f++)h = b.g = c[f], e = qb(h, d, !1, b) && e;
}
C.prototype.M = function() {
    C.Z.M.call(this);
    if (this.i) {
        var a = this.i, c;
        for(c in a.g){
            for(var d = a.g[c], e = 0; e < d.length; e++)Za(d[e]);
            delete a.g[c];
            a.h--;
        }
    }
    this.I = null;
};
C.prototype.N = function(a, b, c, d) {
    return this.i.add(String(a), b, !1, c, d);
};
C.prototype.O = function(a, b, c, d) {
    return this.i.add(String(a), b, !0, c, d);
};
function qb(a, b, c, d) {
    b = a.i.g[String(b)];
    if (!b) return !0;
    b = b.concat();
    for(var e = !0, f = 0; f < b.length; ++f){
        var h = b[f];
        if (h && !h.ca && h.capture == c) {
            var n = h.listener, u = h.ia || h.src;
            h.fa && bb(a.i, h);
            e = !1 !== n.call(u, d) && e;
        }
    }
    return e && !d.defaultPrevented;
}
var rb = l.JSON.stringify;
function sb() {
    var a = tb;
    let b = null;
    a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
    return b;
}
class ub {
    constructor(){
        this.h = this.g = null;
    }
    add(a, b) {
        const c = vb.get();
        c.set(a, b);
        this.h ? this.h.next = c : this.g = c;
        this.h = c;
    }
}
var vb = new class {
    constructor(a, b){
        this.i = a;
        this.j = b;
        this.h = 0;
        this.g = null;
    }
    get() {
        let a;
        0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();
        return a;
    }
}(()=>new wb
, (a)=>a.reset()
);
class wb {
    constructor(){
        this.next = this.g = this.h = null;
    }
    set(a, b) {
        this.h = a;
        this.g = b;
        this.next = null;
    }
    reset() {
        this.next = this.g = this.h = null;
    }
}
function yb(a) {
    l.setTimeout(()=>{
        throw a;
    }, 0);
}
function zb(a, b) {
    Ab || Bb();
    Cb || (Ab(), Cb = !0);
    tb.add(a, b);
}
var Ab;
function Bb() {
    var a = l.Promise.resolve(void 0);
    Ab = function() {
        a.then(Db);
    };
}
var Cb = !1, tb = new ub;
function Db() {
    for(var a; a = sb();){
        try {
            a.h.call(a.g);
        } catch (c) {
            yb(c);
        }
        var b = vb;
        b.j(a);
        100 > b.h && (b.h++, a.next = b.g, b.g = a);
    }
    Cb = !1;
}
function Eb(a, b) {
    C.call(this);
    this.h = a || 1;
    this.g = b || l;
    this.j = q(this.kb, this);
    this.l = Date.now();
}
t(Eb, C);
k = Eb.prototype;
k.da = !1;
k.S = null;
k.kb = function() {
    if (this.da) {
        var a = Date.now() - this.l;
        0 < a && a < .8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), D(this, "tick"), this.da && (Fb(this), this.start()));
    }
};
k.start = function() {
    this.da = !0;
    this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now());
};
function Fb(a) {
    a.da = !1;
    a.S && (a.g.clearTimeout(a.S), a.S = null);
}
k.M = function() {
    Eb.Z.M.call(this);
    Fb(this);
    delete this.g;
};
function Gb(a, b, c) {
    if ("function" === typeof a) c && (a = q(a, c));
    else if (a && "function" == typeof a.handleEvent) a = q(a.handleEvent, a);
    else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
}
function Hb(a) {
    a.g = Gb(()=>{
        a.g = null;
        a.i && (a.i = !1, Hb(a));
    }, a.j);
    const b = a.h;
    a.h = null;
    a.m.apply(null, b);
}
class Ib extends v {
    constructor(a, b){
        super();
        this.m = a;
        this.j = b;
        this.h = null;
        this.i = !1;
        this.g = null;
    }
    l(a) {
        this.h = arguments;
        this.g ? this.i = !0 : Hb(this);
    }
    M() {
        super.M();
        this.g && (l.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
    }
}
function E(a) {
    v.call(this);
    this.h = a;
    this.g = {};
}
t(E, v);
var Jb = [];
function Kb(a, b, c, d) {
    Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb);
    for(var e = 0; e < c.length; e++){
        var f = fb(b, c[e], d || a.handleEvent, !1, a.h || a);
        if (!f) break;
        a.g[f.key] = f;
    }
}
function Lb(a) {
    xa(a.g, function(b, c) {
        this.g.hasOwnProperty(c) && ob(b);
    }, a);
    a.g = {};
}
E.prototype.M = function() {
    E.Z.M.call(this);
    Lb(this);
};
E.prototype.handleEvent = function() {
    throw Error("EventHandler.handleEvent not implemented");
};
function Mb() {
    this.g = !0;
}
Mb.prototype.Aa = function() {
    this.g = !1;
};
function Nb(a, b, c, d, e, f) {
    a.info(function() {
        if (a.g) {
            if (f) {
                var h = "";
                for(var n = f.split("&"), u = 0; u < n.length; u++){
                    var m = n[u].split("=");
                    if (1 < m.length) {
                        var r = m[0];
                        m = m[1];
                        var G = r.split("_");
                        h = 2 <= G.length && "type" == G[1] ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
                    }
                }
            } else h = null;
        } else h = f;
        return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h;
    });
}
function Ob(a, b, c, d, e, f, h) {
    a.info(function() {
        return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h;
    });
}
function F(a, b, c, d) {
    a.info(function() {
        return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : "");
    });
}
function Qb(a, b) {
    a.info(function() {
        return "TIMEOUT: " + b;
    });
}
Mb.prototype.info = function() {};
function Pb(a, b) {
    if (!a.g) return b;
    if (!b) return null;
    try {
        var c = JSON.parse(b);
        if (c) {
            for(a = 0; a < c.length; a++)if (Array.isArray(c[a])) {
                var d = c[a];
                if (!(2 > d.length)) {
                    var e = d[1];
                    if (Array.isArray(e) && !(1 > e.length)) {
                        var f = e[0];
                        if ("noop" != f && "stop" != f && "close" != f) for(var h = 1; h < e.length; h++)e[h] = "";
                    }
                }
            }
        }
        return rb(c);
    } catch (n) {
        return b;
    }
}
var H = {}, Rb = null;
function Sb() {
    return Rb = Rb || new C;
}
H.Ma = "serverreachability";
function Tb(a) {
    z.call(this, H.Ma, a);
}
t(Tb, z);
function I(a) {
    const b = Sb();
    D(b, new Tb(b, a));
}
H.STAT_EVENT = "statevent";
function Ub(a, b) {
    z.call(this, H.STAT_EVENT, a);
    this.stat = b;
}
t(Ub, z);
function J(a) {
    const b = Sb();
    D(b, new Ub(b, a));
}
H.Na = "timingevent";
function Vb(a, b) {
    z.call(this, H.Na, a);
    this.size = b;
}
t(Vb, z);
function K(a, b) {
    if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
    return l.setTimeout(function() {
        a();
    }, b);
}
var Wb = {
    NO_ERROR: 0,
    lb: 1,
    yb: 2,
    xb: 3,
    sb: 4,
    wb: 5,
    zb: 6,
    Ja: 7,
    TIMEOUT: 8,
    Cb: 9
};
var Xb = {
    qb: "complete",
    Mb: "success",
    Ka: "error",
    Ja: "abort",
    Eb: "ready",
    Fb: "readystatechange",
    TIMEOUT: "timeout",
    Ab: "incrementaldata",
    Db: "progress",
    tb: "downloadprogress",
    Ub: "uploadprogress"
};
function Yb() {}
Yb.prototype.h = null;
function Zb(a) {
    return a.h || (a.h = a.i());
}
function $b() {}
var L = {
    OPEN: "a",
    pb: "b",
    Ka: "c",
    Bb: "d"
};
function ac() {
    z.call(this, "d");
}
t(ac, z);
function bc() {
    z.call(this, "c");
}
t(bc, z);
var cc;
function dc() {}
t(dc, Yb);
dc.prototype.g = function() {
    return new XMLHttpRequest;
};
dc.prototype.i = function() {
    return {};
};
cc = new dc;
function M(a, b, c, d) {
    this.l = a;
    this.j = b;
    this.m = c;
    this.X = d || 1;
    this.V = new E(this);
    this.P = ec;
    a = Ja ? 125 : void 0;
    this.W = new Eb(a);
    this.H = null;
    this.i = !1;
    this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null;
    this.D = [];
    this.g = null;
    this.C = 0;
    this.o = this.u = null;
    this.N = -1;
    this.I = !1;
    this.O = 0;
    this.L = null;
    this.aa = this.J = this.$ = this.U = !1;
    this.h = new fc;
}
function fc() {
    this.i = null;
    this.g = "";
    this.h = !1;
}
var ec = 45E3, gc = {}, hc = {};
k = M.prototype;
k.setTimeout = function(a) {
    this.P = a;
};
function ic(a, b, c) {
    a.K = 1;
    a.v = jc(N(b));
    a.s = c;
    a.U = !0;
    kc(a, null);
}
function kc(a, b) {
    a.F = Date.now();
    lc(a);
    a.A = N(a.v);
    var c = a.A, d = a.X;
    Array.isArray(d) || (d = [
        String(d)
    ]);
    mc(c.h, "t", d);
    a.C = 0;
    c = a.l.H;
    a.h = new fc;
    a.g = nc(a.l, c ? b : null, !a.s);
    0 < a.O && (a.L = new Ib(q(a.Ia, a, a.g), a.O));
    Kb(a.V, a.g, "readystatechange", a.gb);
    b = a.H ? ya(a.H) : {};
    a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b));
    I(1);
    Nb(a.j, a.u, a.A, a.m, a.X, a.s);
}
k.gb = function(a) {
    a = a.target;
    const b = this.L;
    b && 3 == O(a) ? b.l() : this.Ia(a);
};
k.Ia = function(a) {
    try {
        if (a == this.g) a: {
            const r = O(this.g);
            var b = this.g.Da();
            const G = this.g.ba();
            if (!(3 > r) && (3 != r || Ja || this.g && (this.h.h || this.g.ga() || oc(this.g)))) {
                this.I || 4 != r || 7 == b || (8 == b || 0 >= G ? I(3) : I(2));
                pc(this);
                var c = this.g.ba();
                this.N = c;
                b: if (qc(this)) {
                    var d = oc(this.g);
                    a = "";
                    var e = d.length, f = 4 == O(this.g);
                    if (!this.h.i) {
                        if ("undefined" === typeof TextDecoder) {
                            P(this);
                            rc(this);
                            var h = "";
                            break b;
                        }
                        this.h.i = new l.TextDecoder;
                    }
                    for(b = 0; b < e; b++)this.h.h = !0, a += this.h.i.decode(d[b], {
                        stream: f && b == e - 1
                    });
                    d.splice(0, e);
                    this.h.g += a;
                    this.C = 0;
                    h = this.h.g;
                } else h = this.g.ga();
                this.i = 200 == c;
                Ob(this.j, this.u, this.A, this.m, this.X, r, c);
                if (this.i) {
                    if (this.$ && !this.J) {
                        b: {
                            if (this.g) {
                                var n, u = this.g;
                                if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(n)) {
                                    var m = n;
                                    break b;
                                }
                            }
                            m = null;
                        }
                        if (c = m) F(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = !0, sc(this, c);
                        else {
                            this.i = !1;
                            this.o = 3;
                            J(12);
                            P(this);
                            rc(this);
                            break a;
                        }
                    }
                    this.U ? (tc(this, r, h), Ja && this.i && 3 == r && (Kb(this.V, this.W, "tick", this.fb), this.W.start())) : (F(this.j, this.m, h, null), sc(this, h));
                    4 == r && P(this);
                    this.i && !this.I && (4 == r ? uc(this.l, this) : (this.i = !1, lc(this)));
                } else 400 == c && 0 < h.indexOf("Unknown SID") ? (this.o = 3, J(12)) : (this.o = 0, J(13)), P(this), rc(this);
            }
        }
    } catch (r) {} finally{}
};
function qc(a) {
    return a.g ? "GET" == a.u && 2 != a.K && a.l.Ba : !1;
}
function tc(a, b, c) {
    let d = !0, e;
    for(; !a.I && a.C < c.length;)if (e = vc(a, c), e == hc) {
        4 == b && (a.o = 4, J(14), d = !1);
        F(a.j, a.m, null, "[Incomplete Response]");
        break;
    } else if (e == gc) {
        a.o = 4;
        J(15);
        F(a.j, a.m, c, "[Invalid Chunk]");
        d = !1;
        break;
    } else F(a.j, a.m, e, null), sc(a, e);
    qc(a) && e != hc && e != gc && (a.h.g = "", a.C = 0);
    4 != b || 0 != c.length || a.h.h || (a.o = 1, J(16), d = !1);
    a.i = a.i && d;
    d ? 0 < c.length && !a.aa && (a.aa = !0, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.L = !0, J(11))) : (F(a.j, a.m, c, "[Invalid Chunked Response]"), P(a), rc(a));
}
k.fb = function() {
    if (this.g) {
        var a = O(this.g), b = this.g.ga();
        this.C < b.length && (pc(this), tc(this, a, b), this.i && 4 != a && lc(this));
    }
};
function vc(a, b) {
    var c = a.C, d = b.indexOf("\n", c);
    if (-1 == d) return hc;
    c = Number(b.substring(c, d));
    if (isNaN(c)) return gc;
    d += 1;
    if (d + c > b.length) return hc;
    b = b.substr(d, c);
    a.C = d + c;
    return b;
}
k.cancel = function() {
    this.I = !0;
    P(this);
};
function lc(a) {
    a.Y = Date.now() + a.P;
    xc(a, a.P);
}
function xc(a, b) {
    if (null != a.B) throw Error("WatchDog timer not null");
    a.B = K(q(a.eb, a), b);
}
function pc(a) {
    a.B && (l.clearTimeout(a.B), a.B = null);
}
k.eb = function() {
    this.B = null;
    const a = Date.now();
    0 <= a - this.Y ? (Qb(this.j, this.A), 2 != this.K && (I(3), J(17)), P(this), this.o = 2, rc(this)) : xc(this, this.Y - a);
};
function rc(a) {
    0 == a.l.G || a.I || uc(a.l, a);
}
function P(a) {
    pc(a);
    var b = a.L;
    b && "function" == typeof b.na && b.na();
    a.L = null;
    Fb(a.W);
    Lb(a.V);
    a.g && (b = a.g, a.g = null, b.abort(), b.na());
}
function sc(a, b) {
    try {
        var c = a.l;
        if (0 != c.G && (c.g == a || yc(c.i, a))) {
            if (c.I = a.N, !a.J && yc(c.i, a) && 3 == c.G) {
                try {
                    var d = c.Ca.g.parse(b);
                } catch (m) {
                    d = null;
                }
                if (Array.isArray(d) && 3 == d.length) {
                    var e = d;
                    if (0 == e[0]) {
                        a: if (!c.u) {
                            if (c.g) {
                                if (c.g.F + 3E3 < a.F) zc(c), Ac(c);
                                else break a;
                            }
                            Bc(c);
                            J(18);
                        }
                    } else c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = K(q(c.ab, c), 6E3));
                    if (1 >= Cc(c.i) && c.ka) {
                        try {
                            c.ka();
                        } catch (m) {}
                        c.ka = void 0;
                    }
                } else Q(c, 11);
            } else if ((a.J || c.g == a) && zc(c), !sa(b)) for(e = c.Ca.g.parse(b), b = 0; b < e.length; b++){
                let m = e[b];
                c.U = m[0];
                m = m[1];
                if (2 == c.G) {
                    if ("c" == m[0]) {
                        c.J = m[1];
                        c.la = m[2];
                        const r = m[3];
                        null != r && (c.ma = r, c.h.info("VER=" + c.ma));
                        const G = m[4];
                        null != G && (c.za = G, c.h.info("SVER=" + c.za));
                        const Da = m[5];
                        null != Da && "number" === typeof Da && 0 < Da && (d = 1.5 * Da, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
                        d = c;
                        const ca = a.g;
                        if (ca) {
                            const Ea = ca.g ? ca.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                            if (Ea) {
                                var f = d.i;
                                !f.g && (w(Ea, "spdy") || w(Ea, "quic") || w(Ea, "h2")) && (f.j = f.l, f.g = new Set, f.h && (Dc(f, f.h), f.h = null));
                            }
                            if (d.D) {
                                const xb = ca.g ? ca.g.getResponseHeader("X-HTTP-Session-Id") : null;
                                xb && (d.sa = xb, R(d.F, d.D, xb));
                            }
                        }
                        c.G = 3;
                        c.j && c.j.xa();
                        c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
                        d = c;
                        var h = a;
                        d.oa = Ec(d, d.H ? d.la : null, d.W);
                        if (h.J) {
                            Fc(d.i, h);
                            var n = h, u = d.K;
                            u && n.setTimeout(u);
                            n.B && (pc(n), lc(n));
                            d.g = h;
                        } else Gc(d);
                        0 < c.l.length && Hc(c);
                    } else "stop" != m[0] && "close" != m[0] || Q(c, 7);
                } else 3 == c.G && ("stop" == m[0] || "close" == m[0] ? "stop" == m[0] ? Q(c, 7) : Ic(c) : "noop" != m[0] && c.j && c.j.wa(m), c.A = 0);
            }
        }
        I(4);
    } catch (m) {}
}
function Jc(a) {
    if (a.R && "function" == typeof a.R) return a.R();
    if ("string" === typeof a) return a.split("");
    if (ba(a)) {
        for(var b = [], c = a.length, d = 0; d < c; d++)b.push(a[d]);
        return b;
    }
    b = [];
    c = 0;
    for(d in a)b[c++] = a[d];
    return b;
}
function Kc(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);
    else if (ba(a) || "string" === typeof a) na(a, b, void 0);
    else {
        if (a.T && "function" == typeof a.T) var c = a.T();
        else if (a.R && "function" == typeof a.R) c = void 0;
        else if (ba(a) || "string" === typeof a) {
            c = [];
            for(var d = a.length, e = 0; e < d; e++)c.push(e);
        } else for(e in c = [], d = 0, a)c[d++] = e;
        d = Jc(a);
        e = d.length;
        for(var f = 0; f < e; f++)b.call(void 0, d[f], c && c[f], a);
    }
}
function S(a, b) {
    this.h = {};
    this.g = [];
    this.i = 0;
    var c = arguments.length;
    if (1 < c) {
        if (c % 2) throw Error("Uneven number of arguments");
        for(var d = 0; d < c; d += 2)this.set(arguments[d], arguments[d + 1]);
    } else if (a) {
        if (a instanceof S) for(c = a.T(), d = 0; d < c.length; d++)this.set(c[d], a.get(c[d]));
        else for(d in a)this.set(d, a[d]);
    }
}
k = S.prototype;
k.R = function() {
    Lc(this);
    for(var a = [], b = 0; b < this.g.length; b++)a.push(this.h[this.g[b]]);
    return a;
};
k.T = function() {
    Lc(this);
    return this.g.concat();
};
function Lc(a) {
    if (a.i != a.g.length) {
        for(var b = 0, c = 0; b < a.g.length;){
            var d = a.g[b];
            T(a.h, d) && (a.g[c++] = d);
            b++;
        }
        a.g.length = c;
    }
    if (a.i != a.g.length) {
        var e = {};
        for(c = b = 0; b < a.g.length;)d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
        a.g.length = c;
    }
}
k.get = function(a, b) {
    return T(this.h, a) ? this.h[a] : b;
};
k.set = function(a, b) {
    T(this.h, a) || (this.i++, this.g.push(a));
    this.h[a] = b;
};
k.forEach = function(a, b) {
    for(var c = this.T(), d = 0; d < c.length; d++){
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    }
};
function T(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}
var Mc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
function Nc(a, b) {
    if (a) {
        a = a.split("&");
        for(var c = 0; c < a.length; c++){
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            } else f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    }
}
function U(a, b) {
    this.i = this.s = this.j = "";
    this.m = null;
    this.o = this.l = "";
    this.g = !1;
    if (a instanceof U) {
        this.g = void 0 !== b ? b : a.g;
        Oc(this, a.j);
        this.s = a.s;
        Pc(this, a.i);
        Qc(this, a.m);
        this.l = a.l;
        b = a.h;
        var c = new Rc;
        c.i = b.i;
        b.g && (c.g = new S(b.g), c.h = b.h);
        Sc(this, c);
        this.o = a.o;
    } else a && (c = String(a).match(Mc)) ? (this.g = !!b, Oc(this, c[1] || "", !0), this.s = Tc(c[2] || ""), Pc(this, c[3] || "", !0), Qc(this, c[4]), this.l = Tc(c[5] || "", !0), Sc(this, c[6] || "", !0), this.o = Tc(c[7] || "")) : (this.g = !!b, this.h = new Rc(null, this.g));
}
U.prototype.toString = function() {
    var a = [], b = this.j;
    b && a.push(Uc(b, Vc, !0), ":");
    var c = this.i;
    if (c || "file" == b) a.push("//"), (b = this.s) && a.push(Uc(b, Vc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c));
    if (c = this.l) this.i && "/" != c.charAt(0) && a.push("/"), a.push(Uc(c, "/" == c.charAt(0) ? Wc : Xc, !0));
    (c = this.h.toString()) && a.push("?", c);
    (c = this.o) && a.push("#", Uc(c, Yc));
    return a.join("");
};
function N(a) {
    return new U(a);
}
function Oc(a, b, c) {
    a.j = c ? Tc(b, !0) : b;
    a.j && (a.j = a.j.replace(/:$/, ""));
}
function Pc(a, b, c) {
    a.i = c ? Tc(b, !0) : b;
}
function Qc(a, b) {
    if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
        a.m = b;
    } else a.m = null;
}
function Sc(a, b, c) {
    b instanceof Rc ? (a.h = b, Zc(a.h, a.g)) : (c || (b = Uc(b, $c)), a.h = new Rc(b, a.g));
}
function R(a, b, c) {
    a.h.set(b, c);
}
function jc(a) {
    R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
    return a;
}
function ad(a) {
    return a instanceof U ? N(a) : new U(a, void 0);
}
function bd(a, b, c, d) {
    var e = new U(null, void 0);
    a && Oc(e, a);
    b && Pc(e, b);
    c && Qc(e, c);
    d && (e.l = d);
    return e;
}
function Tc(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}
function Uc(a, b, c) {
    return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}
function cd(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}
var Vc = /[#\/\?@]/g, Xc = /[#\?:]/g, Wc = /[#\?]/g, $c = /[#\?@]/g, Yc = /#/g;
function Rc(a, b) {
    this.h = this.g = null;
    this.i = a || null;
    this.j = !!b;
}
function V(a) {
    a.g || (a.g = new S, a.h = 0, a.i && Nc(a.i, function(b, c) {
        a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
}
k = Rc.prototype;
k.add = function(a, b) {
    V(this);
    this.i = null;
    a = W(this, a);
    var c = this.g.get(a);
    c || this.g.set(a, c = []);
    c.push(b);
    this.h += 1;
    return this;
};
function dd(a, b) {
    V(a);
    b = W(a, b);
    T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc(a)));
}
function ed(a, b) {
    V(a);
    b = W(a, b);
    return T(a.g.h, b);
}
k.forEach = function(a, b) {
    V(this);
    this.g.forEach(function(c, d) {
        na(c, function(e) {
            a.call(b, e, d, this);
        }, this);
    }, this);
};
k.T = function() {
    V(this);
    for(var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++)for(var e = a[d], f = 0; f < e.length; f++)c.push(b[d]);
    return c;
};
k.R = function(a) {
    V(this);
    var b = [];
    if ("string" === typeof a) ed(this, a) && (b = qa(b, this.g.get(W(this, a))));
    else {
        a = this.g.R();
        for(var c = 0; c < a.length; c++)b = qa(b, a[c]);
    }
    return b;
};
k.set = function(a, b) {
    V(this);
    this.i = null;
    a = W(this, a);
    ed(this, a) && (this.h -= this.g.get(a).length);
    this.g.set(a, [
        b
    ]);
    this.h += 1;
    return this;
};
k.get = function(a, b) {
    if (!a) return b;
    a = this.R(a);
    return 0 < a.length ? String(a[0]) : b;
};
function mc(a, b, c) {
    dd(a, b);
    0 < c.length && (a.i = null, a.g.set(W(a, b), ra(c)), a.h += c.length);
}
k.toString = function() {
    if (this.i) return this.i;
    if (!this.g) return "";
    for(var a = [], b = this.g.T(), c = 0; c < b.length; c++){
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.R(d);
        for(var f = 0; f < d.length; f++){
            var h = e;
            "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
            a.push(h);
        }
    }
    return this.i = a.join("&");
};
function W(a, b) {
    b = String(b);
    a.j && (b = b.toLowerCase());
    return b;
}
function Zc(a, b) {
    b && !a.j && (V(a), a.i = null, a.g.forEach(function(c, d) {
        var e = d.toLowerCase();
        d != e && (dd(this, d), mc(this, e, c));
    }, a));
    a.j = b;
}
var fd = class {
    constructor(a, b){
        this.h = a;
        this.g = b;
    }
};
function gd(a) {
    this.l = a || hd;
    l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(l.g && l.g.Ea && l.g.Ea() && l.g.Ea().Zb);
    this.j = a ? this.l : 1;
    this.g = null;
    1 < this.j && (this.g = new Set);
    this.h = null;
    this.i = [];
}
var hd = 10;
function id(a) {
    return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
}
function Cc(a) {
    return a.h ? 1 : a.g ? a.g.size : 0;
}
function yc(a, b) {
    return a.h ? a.h == b : a.g ? a.g.has(b) : !1;
}
function Dc(a, b) {
    a.g ? a.g.add(b) : a.h = b;
}
function Fc(a, b) {
    a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
}
gd.prototype.cancel = function() {
    this.i = jd(this);
    if (this.h) this.h.cancel(), this.h = null;
    else if (this.g && 0 !== this.g.size) {
        for (const a of this.g.values())a.cancel();
        this.g.clear();
    }
};
function jd(a) {
    if (null != a.h) return a.i.concat(a.h.D);
    if (null != a.g && 0 !== a.g.size) {
        let b = a.i;
        for (const c of a.g.values())b = b.concat(c.D);
        return b;
    }
    return ra(a.i);
}
function kd() {}
kd.prototype.stringify = function(a) {
    return l.JSON.stringify(a, void 0);
};
kd.prototype.parse = function(a) {
    return l.JSON.parse(a, void 0);
};
function ld() {
    this.g = new kd;
}
function md(a, b, c) {
    const d = c || "";
    try {
        Kc(a, function(e, f) {
            let h = e;
            p(e) && (h = rb(e));
            b.push(d + f + "=" + encodeURIComponent(h));
        });
    } catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    }
}
function nd(a, b) {
    const c = new Mb;
    if (l.Image) {
        const d = new Image;
        d.onload = ja(od, c, d, "TestLoadImage: loaded", !0, b);
        d.onerror = ja(od, c, d, "TestLoadImage: error", !1, b);
        d.onabort = ja(od, c, d, "TestLoadImage: abort", !1, b);
        d.ontimeout = ja(od, c, d, "TestLoadImage: timeout", !1, b);
        l.setTimeout(function() {
            if (d.ontimeout) d.ontimeout();
        }, 1E4);
        d.src = a;
    } else b(!1);
}
function od(a, b, c, d, e) {
    try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    } catch (f) {}
}
function pd(a) {
    this.l = a.$b || null;
    this.j = a.ib || !1;
}
t(pd, Yb);
pd.prototype.g = function() {
    return new qd(this.l, this.j);
};
pd.prototype.i = function(a) {
    return function() {
        return a;
    };
}({});
function qd(a, b) {
    C.call(this);
    this.D = a;
    this.u = b;
    this.m = void 0;
    this.readyState = rd;
    this.status = 0;
    this.responseType = this.responseText = this.response = this.statusText = "";
    this.onreadystatechange = null;
    this.v = new Headers;
    this.h = null;
    this.C = "GET";
    this.B = "";
    this.g = !1;
    this.A = this.j = this.l = null;
}
t(qd, C);
var rd = 0;
k = qd.prototype;
k.open = function(a, b) {
    if (this.readyState != rd) throw this.abort(), Error("Error reopening a connection");
    this.C = a;
    this.B = b;
    this.readyState = 1;
    sd(this);
};
k.send = function(a) {
    if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
    this.g = !0;
    const b = {
        headers: this.v,
        method: this.C,
        credentials: this.m,
        cache: void 0
    };
    a && (b.body = a);
    (this.D || l).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this));
};
k.abort = function() {
    this.response = this.responseText = "";
    this.v = new Headers;
    this.status = 0;
    this.j && this.j.cancel("Request was aborted.");
    1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, td(this));
    this.readyState = rd;
};
k.Va = function(a) {
    if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g))) {
        if ("arraybuffer" === this.responseType) a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));
        else if ("undefined" !== typeof l.ReadableStream && "body" in a) {
            this.j = a.body.getReader();
            if (this.u) {
                if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
                this.response = [];
            } else this.response = this.responseText = "", this.A = new TextDecoder;
            ud(this);
        } else a.text().then(this.Ua.bind(this), this.ha.bind(this));
    }
};
function ud(a) {
    a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a));
}
k.Sa = function(a) {
    if (this.g) {
        if (this.u && a.value) this.response.push(a.value);
        else if (!this.u) {
            var b = a.value ? a.value : new Uint8Array(0);
            if (b = this.A.decode(b, {
                stream: !a.done
            })) this.response = this.responseText += b;
        }
        a.done ? td(this) : sd(this);
        3 == this.readyState && ud(this);
    }
};
k.Ua = function(a) {
    this.g && (this.response = this.responseText = a, td(this));
};
k.Ta = function(a) {
    this.g && (this.response = a, td(this));
};
k.ha = function() {
    this.g && td(this);
};
function td(a) {
    a.readyState = 4;
    a.l = null;
    a.j = null;
    a.A = null;
    sd(a);
}
k.setRequestHeader = function(a, b) {
    this.v.append(a, b);
};
k.getResponseHeader = function(a) {
    return this.h ? this.h.get(a.toLowerCase()) || "" : "";
};
k.getAllResponseHeaders = function() {
    if (!this.h) return "";
    const a = [], b = this.h.entries();
    for(var c = b.next(); !c.done;)c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
    return a.join("\r\n");
};
function sd(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
}
Object.defineProperty(qd.prototype, "withCredentials", {
    get: function() {
        return "include" === this.m;
    },
    set: function(a) {
        this.m = a ? "include" : "same-origin";
    }
});
var vd = l.JSON.parse;
function X(a) {
    C.call(this);
    this.headers = new S;
    this.u = a || null;
    this.h = !1;
    this.C = this.g = null;
    this.H = "";
    this.m = 0;
    this.j = "";
    this.l = this.F = this.v = this.D = !1;
    this.B = 0;
    this.A = null;
    this.J = wd;
    this.K = this.L = !1;
}
t(X, C);
var wd = "", xd = /^https?$/i, yd = [
    "POST",
    "PUT"
];
k = X.prototype;
k.ea = function(a, b, c, d) {
    if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
    b = b ? b.toUpperCase() : "GET";
    this.H = a;
    this.j = "";
    this.m = 0;
    this.D = !1;
    this.h = !0;
    this.g = this.u ? this.u.g() : cc.g();
    this.C = this.u ? Zb(this.u) : Zb(cc);
    this.g.onreadystatechange = q(this.Fa, this);
    try {
        this.F = !0, this.g.open(b, String(a), !0), this.F = !1;
    } catch (f1) {
        zd(this, f1);
        return;
    }
    a = c || "";
    const e = new S(this.headers);
    d && Kc(d, function(f, h) {
        e.set(h, f);
    });
    d = oa(e.T());
    c = l.FormData && a instanceof l.FormData;
    !(0 <= ma(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    e.forEach(function(f, h) {
        this.g.setRequestHeader(h, f);
    }, this);
    this.J && (this.g.responseType = this.J);
    "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);
    try {
        Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
    } catch (f) {
        zd(this, f);
    }
};
function Bd(a) {
    return y && Ra() && "number" === typeof a.timeout && void 0 !== a.ontimeout;
}
function pa(a) {
    return "content-type" == a.toLowerCase();
}
k.pa = function() {
    "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D(this, "timeout"), this.abort(8));
};
function zd(a, b) {
    a.h = !1;
    a.g && (a.l = !0, a.g.abort(), a.l = !1);
    a.j = b;
    a.m = 5;
    Cd(a);
    Dd(a);
}
function Cd(a) {
    a.D || (a.D = !0, D(a, "complete"), D(a, "error"));
}
k.abort = function(a) {
    this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, D(this, "complete"), D(this, "abort"), Dd(this));
};
k.M = function() {
    this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Dd(this, !0));
    X.Z.M.call(this);
};
k.Fa = function() {
    this.s || (this.F || this.v || this.l ? Ed(this) : this.cb());
};
k.cb = function() {
    Ed(this);
};
function Ed(a) {
    if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != O(a) || 2 != a.ba())) {
        if (a.v && 4 == O(a)) Gb(a.Fa, 0, a);
        else if (D(a, "readystatechange"), 4 == O(a)) {
            a.h = !1;
            try {
                const n = a.ba();
                a: switch(n){
                    case 200:
                    case 201:
                    case 202:
                    case 204:
                    case 206:
                    case 304:
                    case 1223:
                        var b = !0;
                        break a;
                    default:
                        b = !1;
                }
                var c;
                if (!(c = b)) {
                    var d;
                    if (d = 0 === n) {
                        var e = String(a.H).match(Mc)[1] || null;
                        if (!e && l.self && l.self.location) {
                            var f = l.self.location.protocol;
                            e = f.substr(0, f.length - 1);
                        }
                        d = !xd.test(e ? e.toLowerCase() : "");
                    }
                    c = d;
                }
                if (c) D(a, "complete"), D(a, "success");
                else {
                    a.m = 6;
                    try {
                        var h = 2 < O(a) ? a.g.statusText : "";
                    } catch (u) {
                        h = "";
                    }
                    a.j = h + " [" + a.ba() + "]";
                    Cd(a);
                }
            } finally{
                Dd(a);
            }
        }
    }
}
function Dd(a, b) {
    if (a.g) {
        Ad(a);
        const c = a.g, d = a.C[0] ? aa : null;
        a.g = null;
        a.C = null;
        b || D(a, "ready");
        try {
            c.onreadystatechange = d;
        } catch (e) {}
    }
}
function Ad(a) {
    a.g && a.K && (a.g.ontimeout = null);
    a.A && (l.clearTimeout(a.A), a.A = null);
}
function O(a) {
    return a.g ? a.g.readyState : 0;
}
k.ba = function() {
    try {
        return 2 < O(this) ? this.g.status : -1;
    } catch (a) {
        return -1;
    }
};
k.ga = function() {
    try {
        return this.g ? this.g.responseText : "";
    } catch (a) {
        return "";
    }
};
k.Qa = function(a) {
    if (this.g) {
        var b = this.g.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return vd(b);
    }
};
function oc(a) {
    try {
        if (!a.g) return null;
        if ("response" in a.g) return a.g.response;
        switch(a.J){
            case wd:
            case "text":
                return a.g.responseText;
            case "arraybuffer":
                if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
        }
        return null;
    } catch (b) {
        return null;
    }
}
k.Da = function() {
    return this.m;
};
k.La = function() {
    return "string" === typeof this.j ? this.j : String(this.j);
};
function Fd(a) {
    let b = "";
    xa(a, function(c, d) {
        b += d;
        b += ":";
        b += c;
        b += "\r\n";
    });
    return b;
}
function Gd(a, b, c) {
    a: {
        for(d in c){
            var d = !1;
            break a;
        }
        d = !0;
    }
    d || (c = Fd(c), "string" === typeof a ? null != c && encodeURIComponent(String(c)) : R(a, b, c));
}
function Hd(a, b, c) {
    return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
}
function Id(a) {
    this.za = 0;
    this.l = [];
    this.h = new Mb;
    this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
    this.Za = this.V = 0;
    this.Xa = Hd("failFast", !1, a);
    this.N = this.v = this.u = this.m = this.j = null;
    this.X = !0;
    this.I = this.ta = this.U = -1;
    this.Y = this.A = this.C = 0;
    this.Pa = Hd("baseRetryDelayMs", 5E3, a);
    this.$a = Hd("retryDelaySeedMs", 1E4, a);
    this.Ya = Hd("forwardChannelMaxRetries", 2, a);
    this.ra = Hd("forwardChannelRequestTimeoutMs", 2E4, a);
    this.qa = a && a.xmlHttpFactory || void 0;
    this.Ba = a && a.Yb || !1;
    this.K = void 0;
    this.H = a && a.supportsCrossDomainXhr || !1;
    this.J = "";
    this.i = new gd(a && a.concurrentRequestLimit);
    this.Ca = new ld;
    this.ja = a && a.fastHandshake || !1;
    this.Ra = a && a.Wb || !1;
    a && a.Aa && this.h.Aa();
    a && a.forceLongPolling && (this.X = !1);
    this.$ = !this.ja && this.X && a && a.detectBufferingProxy || !1;
    this.ka = void 0;
    this.O = 0;
    this.L = !1;
    this.B = null;
    this.Wa = !a || !1 !== a.Xb;
}
k = Id.prototype;
k.ma = 8;
k.G = 1;
function Ic(a) {
    Jd(a);
    if (3 == a.G) {
        var b = a.V++, c = N(a.F);
        R(c, "SID", a.J);
        R(c, "RID", b);
        R(c, "TYPE", "terminate");
        Kd(a, c);
        b = new M(a, a.h, b, void 0);
        b.K = 2;
        b.v = jc(N(c));
        c = !1;
        l.navigator && l.navigator.sendBeacon && (c = l.navigator.sendBeacon(b.v.toString(), ""));
        !c && l.Image && ((new Image).src = b.v, c = !0);
        c || (b.g = nc(b.l, null), b.g.ea(b.v));
        b.F = Date.now();
        lc(b);
    }
    Ld(a);
}
k.hb = function(a) {
    try {
        this.h.info("Origin Trials invoked: " + a);
    } catch (b) {}
};
function Ac(a) {
    a.g && (wc(a), a.g.cancel(), a.g = null);
}
function Jd(a) {
    Ac(a);
    a.u && (l.clearTimeout(a.u), a.u = null);
    zc(a);
    a.i.cancel();
    a.m && ("number" === typeof a.m && l.clearTimeout(a.m), a.m = null);
}
function Md(a, b) {
    a.l.push(new fd(a.Za++, b));
    3 == a.G && Hc(a);
}
function Hc(a) {
    id(a.i) || a.m || (a.m = !0, zb(a.Ha, a), a.C = 0);
}
function Nd(a, b) {
    if (Cc(a.i) >= a.i.j - (a.m ? 1 : 0)) return !1;
    if (a.m) return a.l = b.D.concat(a.l), !0;
    if (1 == a.G || 2 == a.G || a.C >= (a.Xa ? 0 : a.Ya)) return !1;
    a.m = K(q(a.Ha, a, b), Od(a, a.C));
    a.C++;
    return !0;
}
k.Ha = function(a) {
    if (this.m) {
        if (this.m = null, 1 == this.G) {
            if (!a) {
                this.V = Math.floor(1E5 * Math.random());
                a = this.V++;
                const e = new M(this, this.h, a, void 0);
                let f = this.s;
                this.P && (f ? (f = ya(f), Aa(f, this.P)) : f = this.P);
                null === this.o && (e.H = f);
                if (this.ja) a: {
                    var b = 0;
                    for(var c = 0; c < this.l.length; c++){
                        b: {
                            var d = this.l[c];
                            if ("__data__" in d.g && (d = d.g.__data__, "string" === typeof d)) {
                                d = d.length;
                                break b;
                            }
                            d = void 0;
                        }
                        if (void 0 === d) break;
                        b += d;
                        if (4096 < b) {
                            b = c;
                            break a;
                        }
                        if (4096 === b || c === this.l.length - 1) {
                            b = c + 1;
                            break a;
                        }
                    }
                    b = 1E3;
                }
                else b = 1E3;
                b = Pd(this, e, b);
                c = N(this.F);
                R(c, "RID", a);
                R(c, "CVER", 22);
                this.D && R(c, "X-HTTP-Session-Id", this.D);
                Kd(this, c);
                this.o && f && Gd(c, this.o, f);
                Dc(this.i, e);
                this.Ra && R(c, "TYPE", "init");
                this.ja ? (R(c, "$req", b), R(c, "SID", "null"), e.$ = !0, ic(e, c, null)) : ic(e, c, b);
                this.G = 2;
            }
        } else 3 == this.G && (a ? Qd(this, a) : 0 == this.l.length || id(this.i) || Qd(this));
    }
};
function Qd(a, b) {
    var c;
    b ? c = b.m : c = a.V++;
    const d = N(a.F);
    R(d, "SID", a.J);
    R(d, "RID", c);
    R(d, "AID", a.U);
    Kd(a, d);
    a.o && a.s && Gd(d, a.o, a.s);
    c = new M(a, a.h, c, a.C + 1);
    null === a.o && (c.H = a.s);
    b && (a.l = b.D.concat(a.l));
    b = Pd(a, c, 1E3);
    c.setTimeout(Math.round(.5 * a.ra) + Math.round(.5 * a.ra * Math.random()));
    Dc(a.i, c);
    ic(c, d, b);
}
function Kd(a, b) {
    a.j && Kc({}, function(c, d) {
        R(b, d, c);
    });
}
function Pd(a, b, c) {
    c = Math.min(a.l.length, c);
    var d = a.j ? q(a.j.Oa, a.j, a) : null;
    a: {
        var e = a.l;
        let f = -1;
        for(;;){
            const h = [
                "count=" + c
            ];
            -1 == f ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
            let n = !0;
            for(let u = 0; u < c; u++){
                let m = e[u].h;
                const r = e[u].g;
                m -= f;
                if (0 > m) f = Math.max(0, e[u].h - 100), n = !1;
                else try {
                    md(r, h, "req" + m + "_");
                } catch (G) {
                    d && d(r);
                }
            }
            if (n) {
                d = h.join("&");
                break a;
            }
        }
    }
    a = a.l.splice(0, c);
    b.D = a;
    return d;
}
function Gc(a) {
    a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0);
}
function Bc(a) {
    if (a.g || a.u || 3 <= a.A) return !1;
    a.Y++;
    a.u = K(q(a.Ga, a), Od(a, a.A));
    a.A++;
    return !0;
}
k.Ga = function() {
    this.u = null;
    Rd(this);
    if (this.$ && !(this.L || null == this.g || 0 >= this.O)) {
        var a = 2 * this.O;
        this.h.info("BP detection timer enabled: " + a);
        this.B = K(q(this.bb, this), a);
    }
};
k.bb = function() {
    this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.L = !0, J(10), Ac(this), Rd(this));
};
function wc(a) {
    null != a.B && (l.clearTimeout(a.B), a.B = null);
}
function Rd(a) {
    a.g = new M(a, a.h, "rpc", a.Y);
    null === a.o && (a.g.H = a.s);
    a.g.O = 0;
    var b = N(a.oa);
    R(b, "RID", "rpc");
    R(b, "SID", a.J);
    R(b, "CI", a.N ? "0" : "1");
    R(b, "AID", a.U);
    Kd(a, b);
    R(b, "TYPE", "xmlhttp");
    a.o && a.s && Gd(b, a.o, a.s);
    a.K && a.g.setTimeout(a.K);
    var c = a.g;
    a = a.la;
    c.K = 1;
    c.v = jc(N(b));
    c.s = null;
    c.U = !0;
    kc(c, a);
}
k.ab = function() {
    null != this.v && (this.v = null, Ac(this), Bc(this), J(19));
};
function zc(a) {
    null != a.v && (l.clearTimeout(a.v), a.v = null);
}
function uc(a, b) {
    var c = null;
    if (a.g == b) {
        zc(a);
        wc(a);
        a.g = null;
        var d = 2;
    } else if (yc(a.i, b)) c = b.D, Fc(a.i, b), d = 1;
    else return;
    a.I = b.N;
    if (0 != a.G) {
        if (b.i) {
            if (1 == d) {
                c = b.s ? b.s.length : 0;
                b = Date.now() - b.F;
                var e = a.C;
                d = Sb();
                D(d, new Vb(d, c, b, e));
                Hc(a);
            } else Gc(a);
        } else if (e = b.o, 3 == e || 0 == e && 0 < a.I || !(1 == d && Nd(a, b) || 2 == d && Bc(a))) switch(c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e){
            case 1:
                Q(a, 5);
                break;
            case 4:
                Q(a, 10);
                break;
            case 3:
                Q(a, 6);
                break;
            default:
                Q(a, 2);
        }
    }
}
function Od(a, b) {
    let c = a.Pa + Math.floor(Math.random() * a.$a);
    a.j || (c *= 2);
    return c * b;
}
function Q(a, b) {
    a.h.info("Error code " + b);
    if (2 == b) {
        var c = null;
        a.j && (c = null);
        var d = q(a.jb, a);
        c || (c = new U("//www.google.com/images/cleardot.gif"), l.location && "http" == l.location.protocol || Oc(c, "https"), jc(c));
        nd(c.toString(), d);
    } else J(2);
    a.G = 0;
    a.j && a.j.va(b);
    Ld(a);
    Jd(a);
}
k.jb = function(a) {
    a ? (this.h.info("Successfully pinged google.com"), J(2)) : (this.h.info("Failed to ping google.com"), J(1));
};
function Ld(a) {
    a.G = 0;
    a.I = -1;
    if (a.j) {
        if (0 != jd(a.i).length || 0 != a.l.length) a.i.i.length = 0, ra(a.l), a.l.length = 0;
        a.j.ua();
    }
}
function Ec(a, b, c) {
    let d = ad(c);
    if ("" != d.i) b && Pc(d, b + "." + d.i), Qc(d, d.m);
    else {
        const e = l.location;
        d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    }
    a.aa && xa(a.aa, function(e, f) {
        R(d, f, e);
    });
    b = a.D;
    c = a.sa;
    b && c && R(d, b, c);
    R(d, "VER", a.ma);
    Kd(a, d);
    return d;
}
function nc(a, b, c) {
    if (b && !a.H) throw Error("Can't create secondary domain capable XhrIo object.");
    b = c && a.Ba && !a.qa ? new X(new pd({
        ib: !0
    })) : new X(a.qa);
    b.L = a.H;
    return b;
}
function Sd() {}
k = Sd.prototype;
k.xa = function() {};
k.wa = function() {};
k.va = function() {};
k.ua = function() {};
k.Oa = function() {};
function Td() {
    if (y && !(10 <= Number(Ua))) throw Error("Environmental error: no available transport.");
}
Td.prototype.g = function(a, b) {
    return new Y(a, b);
};
function Y(a, b) {
    C.call(this);
    this.g = new Id(b);
    this.l = a;
    this.h = b && b.messageUrlParams || null;
    a = b && b.messageHeaders || null;
    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
        "X-Client-Protocol": "webchannel"
    });
    this.g.s = a;
    a = b && b.initMessageHeaders || null;
    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
        "X-WebChannel-Content-Type": b.messageContentType
    });
    b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = {
        "X-WebChannel-Client-Profile": b.ya
    });
    this.g.P = a;
    (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.g.o = a);
    this.A = b && b.supportsCrossDomainXhr || !1;
    this.v = b && b.sendRawJson || !1;
    (b = b && b.httpSessionIdParam) && !sa(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
    this.j = new Z(this);
}
t(Y, C);
Y.prototype.m = function() {
    this.g.j = this.j;
    this.A && (this.g.H = !0);
    var a = this.g, b = this.l, c = this.h || void 0;
    a.Wa && (a.h.info("Origin Trials enabled."), zb(q(a.hb, a, b)));
    J(0);
    a.W = b;
    a.aa = c || {};
    a.N = a.X;
    a.F = Ec(a, null, a.W);
    Hc(a);
};
Y.prototype.close = function() {
    Ic(this.g);
};
Y.prototype.u = function(a) {
    if ("string" === typeof a) {
        var b = {};
        b.__data__ = a;
        Md(this.g, b);
    } else this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a);
};
Y.prototype.M = function() {
    this.g.j = null;
    delete this.j;
    Ic(this.g);
    delete this.g;
    Y.Z.M.call(this);
};
function Ud(a) {
    ac.call(this);
    var b = a.__sm__;
    if (b) {
        a: {
            for(const c in b){
                a = c;
                break a;
            }
            a = void 0;
        }
        if (this.i = a) a = this.i, b = null !== b && a in b ? b[a] : void 0;
        this.data = b;
    } else this.data = a;
}
t(Ud, ac);
function Vd() {
    bc.call(this);
    this.status = 1;
}
t(Vd, bc);
function Z(a) {
    this.g = a;
}
t(Z, Sd);
Z.prototype.xa = function() {
    D(this.g, "a");
};
Z.prototype.wa = function(a) {
    D(this.g, new Ud(a));
};
Z.prototype.va = function(a) {
    D(this.g, new Vd(a));
};
Z.prototype.ua = function() {
    D(this.g, "b");
}; /*

 Copyright 2017 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/ 
Td.prototype.createWebChannel = Td.prototype.g;
Y.prototype.send = Y.prototype.u;
Y.prototype.open = Y.prototype.m;
Y.prototype.close = Y.prototype.close;
Wb.NO_ERROR = 0;
Wb.TIMEOUT = 8;
Wb.HTTP_ERROR = 6;
Xb.COMPLETE = "complete";
$b.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
C.prototype.listen = C.prototype.N;
X.prototype.listenOnce = X.prototype.O;
X.prototype.getLastError = X.prototype.La;
X.prototype.getLastErrorCode = X.prototype.Da;
X.prototype.getStatus = X.prototype.ba;
X.prototype.getResponseJson = X.prototype.Qa;
X.prototype.getResponseText = X.prototype.ga;
X.prototype.send = X.prototype.ea;
var createWebChannelTransport = esm.createWebChannelTransport = function() {
    return new Td;
};
var getStatEventTarget = esm.getStatEventTarget = function() {
    return Sb();
};
var ErrorCode = esm.ErrorCode = Wb;
var EventType = esm.EventType = Xb;
var Event = esm.Event = H;
var Stat = esm.Stat = {
    rb: 0,
    ub: 1,
    vb: 2,
    Ob: 3,
    Tb: 4,
    Qb: 5,
    Rb: 6,
    Pb: 7,
    Nb: 8,
    Sb: 9,
    PROXY: 10,
    NOPROXY: 11,
    Lb: 12,
    Hb: 13,
    Ib: 14,
    Gb: 15,
    Jb: 16,
    Kb: 17,
    nb: 18,
    mb: 19,
    ob: 20
};
var FetchXmlHttpFactory = esm.FetchXmlHttpFactory = pd;
var WebChannel = esm.WebChannel = $b;
var XhrIo = esm.XhrIo = X;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"9dDUH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _storage = require("@firebase/storage");
parcelHelpers.exportAll(_storage, exports);

},{"@firebase/storage":"jEcdO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jEcdO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringFormat", ()=>StringFormat
);
parcelHelpers.export(exports, "_FbsBlob", ()=>FbsBlob
);
parcelHelpers.export(exports, "_Location", ()=>Location
);
parcelHelpers.export(exports, "_TaskEvent", ()=>TaskEvent
);
parcelHelpers.export(exports, "_TaskState", ()=>TaskState
);
parcelHelpers.export(exports, "_UploadTask", ()=>UploadTask
);
parcelHelpers.export(exports, "_dataFromString", ()=>dataFromString
);
parcelHelpers.export(exports, "_getChild", ()=>_getChild
);
parcelHelpers.export(exports, "_invalidArgument", ()=>invalidArgument
);
parcelHelpers.export(exports, "_invalidRootOperation", ()=>invalidRootOperation
);
parcelHelpers.export(exports, "connectStorageEmulator", ()=>connectStorageEmulator
);
parcelHelpers.export(exports, "deleteObject", ()=>deleteObject
);
parcelHelpers.export(exports, "getBlob", ()=>getBlob
);
parcelHelpers.export(exports, "getBytes", ()=>getBytes
);
parcelHelpers.export(exports, "getDownloadURL", ()=>getDownloadURL
);
parcelHelpers.export(exports, "getMetadata", ()=>getMetadata
);
parcelHelpers.export(exports, "getStorage", ()=>getStorage
);
parcelHelpers.export(exports, "getStream", ()=>getStream
);
parcelHelpers.export(exports, "list", ()=>list
);
parcelHelpers.export(exports, "listAll", ()=>listAll
);
parcelHelpers.export(exports, "ref", ()=>ref
);
parcelHelpers.export(exports, "updateMetadata", ()=>updateMetadata
);
parcelHelpers.export(exports, "uploadBytes", ()=>uploadBytes
);
parcelHelpers.export(exports, "uploadBytesResumable", ()=>uploadBytesResumable
);
parcelHelpers.export(exports, "uploadString", ()=>uploadString
);
var _app = require("@firebase/app");
var _util = require("@firebase/util");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Constants used in the Firebase Storage library.
 */ /**
 * Domain name for firebase storage.
 */ const DEFAULT_HOST = 'firebasestorage.googleapis.com';
/**
 * The key in Firebase config json for the storage bucket.
 */ const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
/**
 * 2 minutes
 *
 * The timeout for all operations except upload.
 */ const DEFAULT_MAX_OPERATION_RETRY_TIME = 120000;
/**
 * 10 minutes
 *
 * The timeout for upload.
 */ const DEFAULT_MAX_UPLOAD_RETRY_TIME = 600000;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An error returned by the Firebase Storage SDK.
 * @public
 */ class StorageError extends _util.FirebaseError {
    /**
     * @param code - A StorageErrorCode string to be prefixed with 'storage/' and
     *  added to the end of the message.
     * @param message  - Error message.
     */ constructor(code, message){
        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);
        /**
         * Stores custom error data unque to StorageError.
         */ this.customData = {
            serverResponse: null
        };
        this._baseMessage = this.message;
        // Without this, `instanceof StorageError`, in tests for example,
        // returns false.
        Object.setPrototypeOf(this, StorageError.prototype);
    }
    /**
     * Compares a StorageErrorCode against this error's code, filtering out the prefix.
     */ _codeEquals(code) {
        return prependCode(code) === this.code;
    }
    /**
     * Optional response message that was added by the server.
     */ get serverResponse() {
        return this.customData.serverResponse;
    }
    set serverResponse(serverResponse) {
        this.customData.serverResponse = serverResponse;
        if (this.customData.serverResponse) this.message = `${this._baseMessage}\n${this.customData.serverResponse}`;
        else this.message = this._baseMessage;
    }
}
function prependCode(code) {
    return 'storage/' + code;
}
function unknown() {
    const message = "An unknown error occurred, please check the error payload for server response.";
    return new StorageError("unknown" /* UNKNOWN */ , message);
}
function objectNotFound(path) {
    return new StorageError("object-not-found" /* OBJECT_NOT_FOUND */ , "Object '" + path + "' does not exist.");
}
function quotaExceeded(bucket) {
    return new StorageError("quota-exceeded" /* QUOTA_EXCEEDED */ , "Quota for bucket '" + bucket + "' exceeded, please view quota on " + 'https://firebase.google.com/pricing/.');
}
function unauthenticated() {
    const message = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
    return new StorageError("unauthenticated" /* UNAUTHENTICATED */ , message);
}
function unauthorizedApp() {
    return new StorageError("unauthorized-app" /* UNAUTHORIZED_APP */ , 'This app does not have permission to access Firebase Storage on this project.');
}
function unauthorized(path) {
    return new StorageError("unauthorized" /* UNAUTHORIZED */ , "User does not have permission to access '" + path + "'.");
}
function retryLimitExceeded() {
    return new StorageError("retry-limit-exceeded" /* RETRY_LIMIT_EXCEEDED */ , 'Max retry time for operation exceeded, please try again.');
}
function canceled() {
    return new StorageError("canceled" /* CANCELED */ , 'User canceled the upload/download.');
}
function invalidUrl(url) {
    return new StorageError("invalid-url" /* INVALID_URL */ , "Invalid URL '" + url + "'.");
}
function invalidDefaultBucket(bucket) {
    return new StorageError("invalid-default-bucket" /* INVALID_DEFAULT_BUCKET */ , "Invalid default bucket '" + bucket + "'.");
}
function noDefaultBucket() {
    return new StorageError("no-default-bucket" /* NO_DEFAULT_BUCKET */ , "No default bucket found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
}
function cannotSliceBlob() {
    return new StorageError("cannot-slice-blob" /* CANNOT_SLICE_BLOB */ , 'Cannot slice blob for upload. Please retry the upload.');
}
function serverFileWrongSize() {
    return new StorageError("server-file-wrong-size" /* SERVER_FILE_WRONG_SIZE */ , 'Server recorded incorrect upload file size, please retry the upload.');
}
function noDownloadURL() {
    return new StorageError("no-download-url" /* NO_DOWNLOAD_URL */ , 'The given file does not have any download URLs.');
}
/**
 * @internal
 */ function invalidArgument(message) {
    return new StorageError("invalid-argument" /* INVALID_ARGUMENT */ , message);
}
function appDeleted() {
    return new StorageError("app-deleted" /* APP_DELETED */ , 'The Firebase app was deleted.');
}
/**
 * @param name - The name of the operation that was invalid.
 *
 * @internal
 */ function invalidRootOperation(name1) {
    return new StorageError("invalid-root-operation" /* INVALID_ROOT_OPERATION */ , "The operation '" + name1 + "' cannot be performed on a root reference, create a non-root " + "reference using child, such as .child('file.png').");
}
/**
 * @param format - The format that was not valid.
 * @param message - A message describing the format violation.
 */ function invalidFormat(format, message) {
    return new StorageError("invalid-format" /* INVALID_FORMAT */ , "String does not match format '" + format + "': " + message);
}
/**
 * @param message - A message describing the internal error.
 */ function internalError(message) {
    throw new StorageError("internal-error" /* INTERNAL_ERROR */ , 'Internal error: ' + message);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Firebase Storage location data.
 *
 * @internal
 */ class Location {
    constructor(bucket, path){
        this.bucket = bucket;
        this.path_ = path;
    }
    get path() {
        return this.path_;
    }
    get isRoot() {
        return this.path.length === 0;
    }
    fullServerUrl() {
        const encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
    }
    bucketOnlyServerUrl() {
        const encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o';
    }
    static makeFromBucketSpec(bucketString, host) {
        let bucketLocation;
        try {
            bucketLocation = Location.makeFromUrl(bucketString, host);
        } catch (e) {
            // Not valid URL, use as-is. This lets you put bare bucket names in
            // config.
            return new Location(bucketString, '');
        }
        if (bucketLocation.path === '') return bucketLocation;
        else throw invalidDefaultBucket(bucketString);
    }
    static makeFromUrl(url, host) {
        let location = null;
        const bucketDomain = '([A-Za-z0-9.\\-_]+)';
        function gsModify(loc) {
            if (loc.path.charAt(loc.path.length - 1) === '/') loc.path_ = loc.path_.slice(0, -1);
        }
        const gsPath = '(/(.*))?$';
        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
        const gsIndices = {
            bucket: 1,
            path: 3
        };
        function httpModify(loc) {
            loc.path_ = decodeURIComponent(loc.path);
        }
        const version1 = 'v[A-Za-z0-9_]+';
        const firebaseStorageHost = host.replace(/[.]/g, '\\.');
        const firebaseStoragePath = '(/([^?#]*).*)?$';
        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version1}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');
        const firebaseStorageIndices = {
            bucket: 1,
            path: 3
        };
        const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;
        const cloudStoragePath = '([^?#]*)';
        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');
        const cloudStorageIndices = {
            bucket: 1,
            path: 2
        };
        const groups = [
            {
                regex: gsRegex,
                indices: gsIndices,
                postModify: gsModify
            },
            {
                regex: firebaseStorageRegExp,
                indices: firebaseStorageIndices,
                postModify: httpModify
            },
            {
                regex: cloudStorageRegExp,
                indices: cloudStorageIndices,
                postModify: httpModify
            }
        ];
        for(let i = 0; i < groups.length; i++){
            const group = groups[i];
            const captures = group.regex.exec(url);
            if (captures) {
                const bucketValue = captures[group.indices.bucket];
                let pathValue = captures[group.indices.path];
                if (!pathValue) pathValue = '';
                location = new Location(bucketValue, pathValue);
                group.postModify(location);
                break;
            }
        }
        if (location == null) throw invalidUrl(url);
        return location;
    }
}
/**
 * A request whose promise always fails.
 */ class FailRequest {
    constructor(error){
        this.promise_ = Promise.reject(error);
    }
    /** @inheritDoc */ getPromise() {
        return this.promise_;
    }
    /** @inheritDoc */ cancel(_appDelete = false) {}
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */ function start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any
callback, timeout) {
    // TODO(andysoto): make this code cleaner (probably refactor into an actual
    // type instead of a bunch of functions with state shared in the closure)
    let waitSeconds = 1;
    // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
    // TODO: find a way to exclude Node type definition for storage because storage only works in browser
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let retryTimeoutId = null;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let globalTimeoutId = null;
    let hitTimeout = false;
    let cancelState = 0;
    function canceled1() {
        return cancelState === 2;
    }
    let triggeredCallback = false;
    function triggerCallback(...args) {
        if (!triggeredCallback) {
            triggeredCallback = true;
            callback.apply(null, args);
        }
    }
    function callWithDelay(millis) {
        retryTimeoutId = setTimeout(()=>{
            retryTimeoutId = null;
            f(handler, canceled1());
        }, millis);
    }
    function clearGlobalTimeout() {
        if (globalTimeoutId) clearTimeout(globalTimeoutId);
    }
    function handler(success, ...args) {
        if (triggeredCallback) {
            clearGlobalTimeout();
            return;
        }
        if (success) {
            clearGlobalTimeout();
            triggerCallback.call(null, success, ...args);
            return;
        }
        const mustStop = canceled1() || hitTimeout;
        if (mustStop) {
            clearGlobalTimeout();
            triggerCallback.call(null, success, ...args);
            return;
        }
        if (waitSeconds < 64) /* TODO(andysoto): don't back off so quickly if we know we're offline. */ waitSeconds *= 2;
        let waitMillis;
        if (cancelState === 1) {
            cancelState = 2;
            waitMillis = 0;
        } else waitMillis = (waitSeconds + Math.random()) * 1000;
        callWithDelay(waitMillis);
    }
    let stopped = false;
    function stop1(wasTimeout) {
        if (stopped) return;
        stopped = true;
        clearGlobalTimeout();
        if (triggeredCallback) return;
        if (retryTimeoutId !== null) {
            if (!wasTimeout) cancelState = 2;
            clearTimeout(retryTimeoutId);
            callWithDelay(0);
        } else if (!wasTimeout) cancelState = 1;
    }
    callWithDelay(0);
    globalTimeoutId = setTimeout(()=>{
        hitTimeout = true;
        stop1(true);
    }, timeout);
    return stop1;
}
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */ function stop(id) {
    id(false);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function isJustDef(p) {
    return p !== void 0;
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isFunction(p) {
    return typeof p === 'function';
}
function isNonArrayObject(p) {
    return typeof p === 'object' && !Array.isArray(p);
}
function isString(p) {
    return typeof p === 'string' || p instanceof String;
}
function isNativeBlob(p) {
    return isNativeBlobDefined() && p instanceof Blob;
}
function isNativeBlobDefined() {
    return typeof Blob !== 'undefined';
}
function validateNumber(argument, minValue, maxValue, value) {
    if (value < minValue) throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);
    if (value > maxValue) throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function makeUrl(urlPart, host, protocol) {
    let origin = host;
    if (protocol == null) origin = `https://${host}`;
    return `${protocol}://${origin}/v0${urlPart}`;
}
function makeQueryString(params) {
    const encode = encodeURIComponent;
    let queryPart = '?';
    for(const key in params)if (params.hasOwnProperty(key)) {
        const nextPart = encode(key) + '=' + encode(params[key]);
        queryPart = queryPart + nextPart + '&';
    }
    // Chop off the extra '&' or '?' on the end
    queryPart = queryPart.slice(0, -1);
    return queryPart;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Error codes for requests made by the the XhrIo wrapper.
 */ var ErrorCode;
(function(ErrorCode1) {
    ErrorCode1[ErrorCode1["NO_ERROR"] = 0] = "NO_ERROR";
    ErrorCode1[ErrorCode1["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
    ErrorCode1[ErrorCode1["ABORT"] = 2] = "ABORT";
})(ErrorCode || (ErrorCode = {}));
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Handles network logic for all Storage Requests, including error reporting and
 * retries with backoff.
 *
 * @param I - the type of the backend's network response.
 * @param - O the output type used by the rest of the SDK. The conversion
 * happens in the specified `callback_`.
 */ class NetworkRequest {
    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_){
        this.url_ = url_;
        this.method_ = method_;
        this.headers_ = headers_;
        this.body_ = body_;
        this.successCodes_ = successCodes_;
        this.additionalRetryCodes_ = additionalRetryCodes_;
        this.callback_ = callback_;
        this.errorCallback_ = errorCallback_;
        this.timeout_ = timeout_;
        this.progressCallback_ = progressCallback_;
        this.connectionFactory_ = connectionFactory_;
        this.pendingConnection_ = null;
        this.backoffId_ = null;
        this.canceled_ = false;
        this.appDelete_ = false;
        this.promise_ = new Promise((resolve, reject)=>{
            this.resolve_ = resolve;
            this.reject_ = reject;
            this.start_();
        });
    }
    /**
     * Actually starts the retry loop.
     */ start_() {
        const doTheRequest = (backoffCallback, canceled2)=>{
            if (canceled2) {
                backoffCallback(false, new RequestEndStatus(false, null, true));
                return;
            }
            const connection = this.connectionFactory_();
            this.pendingConnection_ = connection;
            const progressListener = (progressEvent)=>{
                const loaded = progressEvent.loaded;
                const total = progressEvent.lengthComputable ? progressEvent.total : -1;
                if (this.progressCallback_ !== null) this.progressCallback_(loaded, total);
            };
            if (this.progressCallback_ !== null) connection.addUploadProgressListener(progressListener);
            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            connection.send(this.url_, this.method_, this.body_, this.headers_).then(()=>{
                if (this.progressCallback_ !== null) connection.removeUploadProgressListener(progressListener);
                this.pendingConnection_ = null;
                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;
                const status = connection.getStatus();
                if (!hitServer || this.isRetryStatusCode_(status)) {
                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;
                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                    return;
                }
                const successCode = this.successCodes_.indexOf(status) !== -1;
                backoffCallback(true, new RequestEndStatus(successCode, connection));
            });
        };
        /**
         * @param requestWentThrough - True if the request eventually went
         *     through, false if it hit the retry limit or was canceled.
         */ const backoffDone = (requestWentThrough, status)=>{
            const resolve = this.resolve_;
            const reject = this.reject_;
            const connection = status.connection;
            if (status.wasSuccessCode) try {
                const result = this.callback_(connection, connection.getResponse());
                if (isJustDef(result)) resolve(result);
                else resolve();
            } catch (e) {
                reject(e);
            }
            else {
                if (connection !== null) {
                    const err = unknown();
                    err.serverResponse = connection.getErrorText();
                    if (this.errorCallback_) reject(this.errorCallback_(connection, err));
                    else reject(err);
                } else if (status.canceled) {
                    const err = this.appDelete_ ? appDeleted() : canceled();
                    reject(err);
                } else {
                    const err = retryLimitExceeded();
                    reject(err);
                }
            }
        };
        if (this.canceled_) backoffDone(false, new RequestEndStatus(false, null, true));
        else this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
    }
    /** @inheritDoc */ getPromise() {
        return this.promise_;
    }
    /** @inheritDoc */ cancel(appDelete) {
        this.canceled_ = true;
        this.appDelete_ = appDelete || false;
        if (this.backoffId_ !== null) stop(this.backoffId_);
        if (this.pendingConnection_ !== null) this.pendingConnection_.abort();
    }
    isRetryStatusCode_(status) {
        // The codes for which to retry came from this page:
        // https://cloud.google.com/storage/docs/exponential-backoff
        const isFiveHundredCode = status >= 500 && status < 600;
        const extraRetryCodes = [
            // Request Timeout: web server didn't receive full request in time.
            408,
            // Too Many Requests: you're getting rate-limited, basically.
            429
        ];
        const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
        const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
    }
}
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled - Defaults to false.
 */ class RequestEndStatus {
    constructor(wasSuccessCode, connection, canceled3){
        this.wasSuccessCode = wasSuccessCode;
        this.connection = connection;
        this.canceled = !!canceled3;
    }
}
function addAuthHeader_(headers, authToken) {
    if (authToken !== null && authToken.length > 0) headers['Authorization'] = 'Firebase ' + authToken;
}
function addVersionHeader_(headers, firebaseVersion) {
    headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');
}
function addGmpidHeader_(headers, appId) {
    if (appId) headers['X-Firebase-GMPID'] = appId;
}
function addAppCheckHeader_(headers, appCheckToken) {
    if (appCheckToken !== null) headers['X-Firebase-AppCheck'] = appCheckToken;
}
function makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {
    const queryPart = makeQueryString(requestInfo.urlParams);
    const url = requestInfo.url + queryPart;
    const headers = Object.assign({}, requestInfo.headers);
    addGmpidHeader_(headers, appId);
    addAuthHeader_(headers, authToken);
    addVersionHeader_(headers, firebaseVersion);
    addAppCheckHeader_(headers, appCheckToken);
    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getBlobBuilder() {
    if (typeof BlobBuilder !== 'undefined') return BlobBuilder;
    else if (typeof WebKitBlobBuilder !== 'undefined') return WebKitBlobBuilder;
    else return undefined;
}
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param args The values that will make up the resulting blob.
 * @return The blob.
 */ function getBlob$1(...args) {
    const BlobBuilder = getBlobBuilder();
    if (BlobBuilder !== undefined) {
        const bb = new BlobBuilder();
        for(let i = 0; i < args.length; i++)bb.append(args[i]);
        return bb.getBlob();
    } else {
        if (isNativeBlobDefined()) return new Blob(args);
        else throw new StorageError("unsupported-environment" /* UNSUPPORTED_ENVIRONMENT */ , "This browser doesn't seem to support creating Blobs");
    }
}
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */ function sliceBlob(blob, start1, end) {
    if (blob.webkitSlice) return blob.webkitSlice(start1, end);
    else if (blob.mozSlice) return blob.mozSlice(start1, end);
    else if (blob.slice) return blob.slice(start1, end);
    return null;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Converts a Base64 encoded string to a binary string. */ function decodeBase64(encoded) {
    return atob(encoded);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An enumeration of the possible string formats for upload.
 * @public
 */ const StringFormat = {
    /**
     * Indicates the string should be interpreted "raw", that is, as normal text.
     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte
     * sequence.
     * Example: The string 'Hello! \\ud83d\\ude0a' becomes the byte sequence
     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a
     */ RAW: 'raw',
    /**
     * Indicates the string should be interpreted as base64-encoded data.
     * Padding characters (trailing '='s) are optional.
     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence
     * ad 69 8e fb e1 3a b7 bf eb 97
     */ BASE64: 'base64',
    /**
     * Indicates the string should be interpreted as base64url-encoded data.
     * Padding characters (trailing '='s) are optional.
     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence
     * ad 69 8e fb e1 3a b7 bf eb 97
     */ BASE64URL: 'base64url',
    /**
     * Indicates the string is a data URL, such as one obtained from
     * canvas.toDataURL().
     * Example: the string 'data:application/octet-stream;base64,aaaa'
     * becomes the byte sequence
     * 69 a6 9a
     * (the content-type "application/octet-stream" is also applied, but can
     * be overridden in the metadata object).
     */ DATA_URL: 'data_url'
};
class StringData {
    constructor(data, contentType){
        this.data = data;
        this.contentType = contentType || null;
    }
}
/**
 * @internal
 */ function dataFromString(format, stringData) {
    switch(format){
        case StringFormat.RAW:
            return new StringData(utf8Bytes_(stringData));
        case StringFormat.BASE64:
        case StringFormat.BASE64URL:
            return new StringData(base64Bytes_(format, stringData));
        case StringFormat.DATA_URL:
            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
    }
    // assert(false);
    throw unknown();
}
function utf8Bytes_(value) {
    const b = [];
    for(let i = 0; i < value.length; i++){
        let c = value.charCodeAt(i);
        if (c <= 127) b.push(c);
        else if (c <= 2047) b.push(192 | c >> 6, 128 | c & 63);
        else {
            if ((c & 64512) === 55296) {
                // The start of a surrogate pair.
                const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
                if (!valid) // The second surrogate wasn't there.
                b.push(239, 191, 189);
                else {
                    const hi = c;
                    const lo = value.charCodeAt(++i);
                    c = 65536 | (hi & 1023) << 10 | lo & 1023;
                    b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
                }
            } else if ((c & 64512) === 56320) // Invalid low surrogate.
            b.push(239, 191, 189);
            else b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
        }
    }
    return new Uint8Array(b);
}
function percentEncodedBytes_(value) {
    let decoded;
    try {
        decoded = decodeURIComponent(value);
    } catch (e) {
        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
    }
    return utf8Bytes_(decoded);
}
function base64Bytes_(format, value) {
    switch(format){
        case StringFormat.BASE64:
            {
                const hasMinus = value.indexOf('-') !== -1;
                const hasUnder = value.indexOf('_') !== -1;
                if (hasMinus || hasUnder) {
                    const invalidChar = hasMinus ? '-' : '_';
                    throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
                }
                break;
            }
        case StringFormat.BASE64URL:
            {
                const hasPlus = value.indexOf('+') !== -1;
                const hasSlash = value.indexOf('/') !== -1;
                if (hasPlus || hasSlash) {
                    const invalidChar = hasPlus ? '+' : '/';
                    throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
                }
                value = value.replace(/-/g, '+').replace(/_/g, '/');
                break;
            }
    }
    let bytes;
    try {
        bytes = decodeBase64(value);
    } catch (e) {
        throw invalidFormat(format, 'Invalid character found');
    }
    const array = new Uint8Array(bytes.length);
    for(let i = 0; i < bytes.length; i++)array[i] = bytes.charCodeAt(i);
    return array;
}
class DataURLParts {
    constructor(dataURL){
        this.base64 = false;
        this.contentType = null;
        const matches = dataURL.match(/^data:([^,]+)?,/);
        if (matches === null) throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
        const middle = matches[1] || null;
        if (middle != null) {
            this.base64 = endsWith(middle, ';base64');
            this.contentType = this.base64 ? middle.substring(0, middle.length - 7) : middle;
        }
        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
    }
}
function dataURLBytes_(dataUrl) {
    const parts = new DataURLParts(dataUrl);
    if (parts.base64) return base64Bytes_(StringFormat.BASE64, parts.rest);
    else return percentEncodedBytes_(parts.rest);
}
function dataURLContentType_(dataUrl) {
    const parts = new DataURLParts(dataUrl);
    return parts.contentType;
}
function endsWith(s, end) {
    const longEnough = s.length >= end.length;
    if (!longEnough) return false;
    return s.substring(s.length - end.length) === end;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param opt_elideCopy - If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 *
 * @internal
 */ class FbsBlob {
    constructor(data, elideCopy){
        let size = 0;
        let blobType = '';
        if (isNativeBlob(data)) {
            this.data_ = data;
            size = data.size;
            blobType = data.type;
        } else if (data instanceof ArrayBuffer) {
            if (elideCopy) this.data_ = new Uint8Array(data);
            else {
                this.data_ = new Uint8Array(data.byteLength);
                this.data_.set(new Uint8Array(data));
            }
            size = this.data_.length;
        } else if (data instanceof Uint8Array) {
            if (elideCopy) this.data_ = data;
            else {
                this.data_ = new Uint8Array(data.length);
                this.data_.set(data);
            }
            size = data.length;
        }
        this.size_ = size;
        this.type_ = blobType;
    }
    size() {
        return this.size_;
    }
    type() {
        return this.type_;
    }
    slice(startByte, endByte) {
        if (isNativeBlob(this.data_)) {
            const realBlob = this.data_;
            const sliced = sliceBlob(realBlob, startByte, endByte);
            if (sliced === null) return null;
            return new FbsBlob(sliced);
        } else {
            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
            return new FbsBlob(slice, true);
        }
    }
    static getBlob(...args) {
        if (isNativeBlobDefined()) {
            const blobby = args.map((val)=>{
                if (val instanceof FbsBlob) return val.data_;
                else return val;
            });
            return new FbsBlob(getBlob$1.apply(null, blobby));
        } else {
            const uint8Arrays = args.map((val)=>{
                if (isString(val)) return dataFromString(StringFormat.RAW, val).data;
                else // Blobs don't exist, so this has to be a Uint8Array.
                return val.data_;
            });
            let finalLength = 0;
            uint8Arrays.forEach((array)=>{
                finalLength += array.byteLength;
            });
            const merged = new Uint8Array(finalLength);
            let index = 0;
            uint8Arrays.forEach((array)=>{
                for(let i = 0; i < array.length; i++)merged[index++] = array[i];
            });
            return new FbsBlob(merged, true);
        }
    }
    uploadData() {
        return this.data_;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */ function jsonObjectOrNull(s) {
    let obj;
    try {
        obj = JSON.parse(s);
    } catch (e) {
        return null;
    }
    if (isNonArrayObject(obj)) return obj;
    else return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Contains helper methods for manipulating paths.
 */ /**
 * @return Null if the path is already at the root.
 */ function parent(path) {
    if (path.length === 0) return null;
    const index = path.lastIndexOf('/');
    if (index === -1) return '';
    const newPath = path.slice(0, index);
    return newPath;
}
function child(path, childPath) {
    const canonicalChildPath = childPath.split('/').filter((component)=>component.length > 0
    ).join('/');
    if (path.length === 0) return canonicalChildPath;
    else return path + '/' + canonicalChildPath;
}
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */ function lastComponent(path) {
    const index = path.lastIndexOf('/', path.length - 2);
    if (index === -1) return path;
    else return path.slice(index + 1);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function noXform_(metadata, value) {
    return value;
}
class Mapping {
    constructor(server, local, writable, xform){
        this.server = server;
        this.local = local || server;
        this.writable = !!writable;
        this.xform = xform || noXform_;
    }
}
let mappings_ = null;
function xformPath(fullPath) {
    if (!isString(fullPath) || fullPath.length < 2) return fullPath;
    else return lastComponent(fullPath);
}
function getMappings() {
    if (mappings_) return mappings_;
    const mappings = [];
    mappings.push(new Mapping('bucket'));
    mappings.push(new Mapping('generation'));
    mappings.push(new Mapping('metageneration'));
    mappings.push(new Mapping('name', 'fullPath', true));
    function mappingsXformPath(_metadata, fullPath) {
        return xformPath(fullPath);
    }
    const nameMapping = new Mapping('name');
    nameMapping.xform = mappingsXformPath;
    mappings.push(nameMapping);
    /**
     * Coerces the second param to a number, if it is defined.
     */ function xformSize(_metadata, size) {
        if (size !== undefined) return Number(size);
        else return size;
    }
    const sizeMapping = new Mapping('size');
    sizeMapping.xform = xformSize;
    mappings.push(sizeMapping);
    mappings.push(new Mapping('timeCreated'));
    mappings.push(new Mapping('updated'));
    mappings.push(new Mapping('md5Hash', null, true));
    mappings.push(new Mapping('cacheControl', null, true));
    mappings.push(new Mapping('contentDisposition', null, true));
    mappings.push(new Mapping('contentEncoding', null, true));
    mappings.push(new Mapping('contentLanguage', null, true));
    mappings.push(new Mapping('contentType', null, true));
    mappings.push(new Mapping('metadata', 'customMetadata', true));
    mappings_ = mappings;
    return mappings_;
}
function addRef(metadata, service) {
    function generateRef() {
        const bucket = metadata['bucket'];
        const path = metadata['fullPath'];
        const loc = new Location(bucket, path);
        return service._makeStorageReference(loc);
    }
    Object.defineProperty(metadata, 'ref', {
        get: generateRef
    });
}
function fromResource(service, resource, mappings) {
    const metadata = {};
    metadata['type'] = 'file';
    const len = mappings.length;
    for(let i = 0; i < len; i++){
        const mapping = mappings[i];
        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
    }
    addRef(metadata, service);
    return metadata;
}
function fromResourceString(service, resourceString, mappings) {
    const obj = jsonObjectOrNull(resourceString);
    if (obj === null) return null;
    const resource = obj;
    return fromResource(service, resource, mappings);
}
function downloadUrlFromResourceString(metadata, resourceString, host, protocol) {
    const obj = jsonObjectOrNull(resourceString);
    if (obj === null) return null;
    if (!isString(obj['downloadTokens'])) // This can happen if objects are uploaded through GCS and retrieved
    // through list, so we don't want to throw an Error.
    return null;
    const tokens = obj['downloadTokens'];
    if (tokens.length === 0) return null;
    const encode = encodeURIComponent;
    const tokensList = tokens.split(',');
    const urls = tokensList.map((token)=>{
        const bucket = metadata['bucket'];
        const path = metadata['fullPath'];
        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
        const base = makeUrl(urlPart, host, protocol);
        const queryString = makeQueryString({
            alt: 'media',
            token
        });
        return base + queryString;
    });
    return urls[0];
}
function toResourceString(metadata, mappings) {
    const resource = {};
    const len = mappings.length;
    for(let i = 0; i < len; i++){
        const mapping = mappings[i];
        if (mapping.writable) resource[mapping.server] = metadata[mapping.local];
    }
    return JSON.stringify(resource);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const PREFIXES_KEY = 'prefixes';
const ITEMS_KEY = 'items';
function fromBackendResponse(service, bucket, resource) {
    const listResult = {
        prefixes: [],
        items: [],
        nextPageToken: resource['nextPageToken']
    };
    if (resource[PREFIXES_KEY]) for (const path of resource[PREFIXES_KEY]){
        const pathWithoutTrailingSlash = path.replace(/\/$/, '');
        const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
        listResult.prefixes.push(reference);
    }
    if (resource[ITEMS_KEY]) for (const item of resource[ITEMS_KEY]){
        const reference = service._makeStorageReference(new Location(bucket, item['name']));
        listResult.items.push(reference);
    }
    return listResult;
}
function fromResponseString(service, bucket, resourceString) {
    const obj = jsonObjectOrNull(resourceString);
    if (obj === null) return null;
    const resource = obj;
    return fromBackendResponse(service, bucket, resource);
}
/**
 * Contains a fully specified request.
 *
 * @param I - the type of the backend's network response.
 * @param O - the output response type used by the rest of the SDK.
 */ class RequestInfo {
    constructor(url, method, /**
     * Returns the value with which to resolve the request's promise. Only called
     * if the request is successful. Throw from this function to reject the
     * returned Request's promise with the thrown error.
     * Note: The XhrIo passed to this function may be reused after this callback
     * returns. Do not keep a reference to it in any way.
     */ handler, timeout){
        this.url = url;
        this.method = method;
        this.handler = handler;
        this.timeout = timeout;
        this.urlParams = {};
        this.headers = {};
        this.body = null;
        this.errorHandler = null;
        /**
         * Called with the current number of bytes uploaded and total size (-1 if not
         * computable) of the request body (i.e. used to report upload progress).
         */ this.progressCallback = null;
        this.successCodes = [
            200
        ];
        this.additionalRetryCodes = [];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws the UNKNOWN StorageError if cndn is false.
 */ function handlerCheck(cndn) {
    if (!cndn) throw unknown();
}
function metadataHandler(service, mappings) {
    function handler(xhr, text) {
        const metadata = fromResourceString(service, text, mappings);
        handlerCheck(metadata !== null);
        return metadata;
    }
    return handler;
}
function listHandler(service, bucket) {
    function handler(xhr, text) {
        const listResult = fromResponseString(service, bucket, text);
        handlerCheck(listResult !== null);
        return listResult;
    }
    return handler;
}
function downloadUrlHandler(service, mappings) {
    function handler(xhr, text) {
        const metadata = fromResourceString(service, text, mappings);
        handlerCheck(metadata !== null);
        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);
    }
    return handler;
}
function sharedErrorHandler(location) {
    function errorHandler(xhr, err) {
        let newErr;
        if (xhr.getStatus() === 401) {
            if (// This exact message string is the only consistent part of the
            // server's error response that identifies it as an App Check error.
            xhr.getErrorText().includes('Firebase App Check token is invalid')) newErr = unauthorizedApp();
            else newErr = unauthenticated();
        } else {
            if (xhr.getStatus() === 402) newErr = quotaExceeded(location.bucket);
            else if (xhr.getStatus() === 403) newErr = unauthorized(location.path);
            else newErr = err;
        }
        newErr.serverResponse = err.serverResponse;
        return newErr;
    }
    return errorHandler;
}
function objectErrorHandler(location) {
    const shared = sharedErrorHandler(location);
    function errorHandler(xhr, err) {
        let newErr = shared(xhr, err);
        if (xhr.getStatus() === 404) newErr = objectNotFound(location.path);
        newErr.serverResponse = err.serverResponse;
        return newErr;
    }
    return errorHandler;
}
function getMetadata$2(service, location, mappings) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart, service.host, service._protocol);
    const method = 'GET';
    const timeout = service.maxOperationRetryTime;
    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function list$2(service, location, delimiter, pageToken, maxResults) {
    const urlParams = {};
    if (location.isRoot) urlParams['prefix'] = '';
    else urlParams['prefix'] = location.path + '/';
    if (delimiter && delimiter.length > 0) urlParams['delimiter'] = delimiter;
    if (pageToken) urlParams['pageToken'] = pageToken;
    if (maxResults) urlParams['maxResults'] = maxResults;
    const urlPart = location.bucketOnlyServerUrl();
    const url = makeUrl(urlPart, service.host, service._protocol);
    const method = 'GET';
    const timeout = service.maxOperationRetryTime;
    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
function getBytes$1(service, location, maxDownloadSizeBytes) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';
    const method = 'GET';
    const timeout = service.maxOperationRetryTime;
    const requestInfo = new RequestInfo(url, method, (_, data)=>data
    , timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    if (maxDownloadSizeBytes !== undefined) {
        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;
        requestInfo.successCodes = [
            200 /* OK */ ,
            206 /* Partial Content */ 
        ];
    }
    return requestInfo;
}
function getDownloadUrl(service, location, mappings) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart, service.host, service._protocol);
    const method = 'GET';
    const timeout = service.maxOperationRetryTime;
    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function updateMetadata$2(service, location, metadata, mappings) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart, service.host, service._protocol);
    const method = 'PATCH';
    const body = toResourceString(metadata, mappings);
    const headers = {
        'Content-Type': 'application/json; charset=utf-8'
    };
    const timeout = service.maxOperationRetryTime;
    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function deleteObject$2(service, location) {
    const urlPart = location.fullServerUrl();
    const url = makeUrl(urlPart, service.host, service._protocol);
    const method = 'DELETE';
    const timeout = service.maxOperationRetryTime;
    function handler(_xhr, _text) {}
    const requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.successCodes = [
        200,
        204
    ];
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
function determineContentType_(metadata, blob) {
    return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';
}
function metadataForUpload_(location, blob, metadata) {
    const metadataClone = Object.assign({}, metadata);
    metadataClone['fullPath'] = location.path;
    metadataClone['size'] = blob.size();
    if (!metadataClone['contentType']) metadataClone['contentType'] = determineContentType_(null, blob);
    return metadataClone;
}
/**
 * Prepare RequestInfo for uploads as Content-Type: multipart.
 */ function multipartUpload(service, location, mappings, blob, metadata) {
    const urlPart = location.bucketOnlyServerUrl();
    const headers = {
        'X-Goog-Upload-Protocol': 'multipart'
    };
    function genBoundary() {
        let str = '';
        for(let i = 0; i < 2; i++)str = str + Math.random().toString().slice(2);
        return str;
    }
    const boundary = genBoundary();
    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
    const metadata_ = metadataForUpload_(location, blob, metadata);
    const metadataString = toResourceString(metadata_, mappings);
    const preBlobPart = '--' + boundary + '\r\n' + 'Content-Type: application/json; charset=utf-8\r\n\r\n' + metadataString + '\r\n--' + boundary + '\r\n' + 'Content-Type: ' + metadata_['contentType'] + '\r\n\r\n';
    const postBlobPart = '\r\n--' + boundary + '--';
    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
    if (body === null) throw cannotSliceBlob();
    const urlParams = {
        name: metadata_['fullPath']
    };
    const url = makeUrl(urlPart, service.host, service._protocol);
    const method = 'POST';
    const timeout = service.maxUploadRetryTime;
    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 */ class ResumableUploadStatus {
    constructor(current, total, finalized, metadata){
        this.current = current;
        this.total = total;
        this.finalized = !!finalized;
        this.metadata = metadata || null;
    }
}
function checkResumeHeader_(xhr, allowed) {
    let status = null;
    try {
        status = xhr.getResponseHeader('X-Goog-Upload-Status');
    } catch (e) {
        handlerCheck(false);
    }
    const allowedStatus = allowed || [
        'active'
    ];
    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
    return status;
}
function createResumableUpload(service, location, mappings, blob, metadata) {
    const urlPart = location.bucketOnlyServerUrl();
    const metadataForUpload = metadataForUpload_(location, blob, metadata);
    const urlParams = {
        name: metadataForUpload['fullPath']
    };
    const url1 = makeUrl(urlPart, service.host, service._protocol);
    const method = 'POST';
    const headers = {
        'X-Goog-Upload-Protocol': 'resumable',
        'X-Goog-Upload-Command': 'start',
        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,
        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],
        'Content-Type': 'application/json; charset=utf-8'
    };
    const body = toResourceString(metadataForUpload, mappings);
    const timeout = service.maxUploadRetryTime;
    function handler(xhr) {
        checkResumeHeader_(xhr);
        let url;
        try {
            url = xhr.getResponseHeader('X-Goog-Upload-URL');
        } catch (e) {
            handlerCheck(false);
        }
        handlerCheck(isString(url));
        return url;
    }
    const requestInfo = new RequestInfo(url1, method, handler, timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */ function getResumableUploadStatus(service, location, url, blob) {
    const headers = {
        'X-Goog-Upload-Command': 'query'
    };
    function handler(xhr) {
        const status = checkResumeHeader_(xhr, [
            'active',
            'final'
        ]);
        let sizeString = null;
        try {
            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
        } catch (e) {
            handlerCheck(false);
        }
        if (!sizeString) // null or empty string
        handlerCheck(false);
        const size = Number(sizeString);
        handlerCheck(!isNaN(size));
        return new ResumableUploadStatus(size, blob.size(), status === 'final');
    }
    const method = 'POST';
    const timeout = service.maxUploadRetryTime;
    const requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */ const RESUMABLE_UPLOAD_CHUNK_SIZE = 262144;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */ function continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {
    // TODO(andysoto): standardize on internal asserts
    // assert(!(opt_status && opt_status.finalized));
    const status_ = new ResumableUploadStatus(0, 0);
    if (status) {
        status_.current = status.current;
        status_.total = status.total;
    } else {
        status_.current = 0;
        status_.total = blob.size();
    }
    if (blob.size() !== status_.total) throw serverFileWrongSize();
    const bytesLeft = status_.total - status_.current;
    let bytesToUpload = bytesLeft;
    if (chunkSize > 0) bytesToUpload = Math.min(bytesToUpload, chunkSize);
    const startByte = status_.current;
    const endByte = startByte + bytesToUpload;
    const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
    const headers = {
        'X-Goog-Upload-Command': uploadCommand,
        'X-Goog-Upload-Offset': `${status_.current}`
    };
    const body = blob.slice(startByte, endByte);
    if (body === null) throw cannotSliceBlob();
    function handler(xhr, text) {
        // TODO(andysoto): Verify the MD5 of each uploaded range:
        // the 'x-range-md5' header comes back with status code 308 responses.
        // We'll only be able to bail out though, because you can't re-upload a
        // range that you previously uploaded.
        const uploadStatus = checkResumeHeader_(xhr, [
            'active',
            'final'
        ]);
        const newCurrent = status_.current + bytesToUpload;
        const size = blob.size();
        let metadata;
        if (uploadStatus === 'final') metadata = metadataHandler(service, mappings)(xhr, text);
        else metadata = null;
        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
    }
    const method = 'POST';
    const timeout = service.maxUploadRetryTime;
    const requestInfo = new RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.progressCallback = progressCallback || null;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An event that is triggered on a task.
 * @internal
 */ const TaskEvent = {
    /**
     * For this event,
     * <ul>
     *   <li>The `next` function is triggered on progress updates and when the
     *       task is paused/resumed with an `UploadTaskSnapshot` as the first
     *       argument.</li>
     *   <li>The `error` function is triggered if the upload is canceled or fails
     *       for another reason.</li>
     *   <li>The `complete` function is triggered if the upload completes
     *       successfully.</li>
     * </ul>
     */ STATE_CHANGED: 'state_changed'
};
// type keys = keyof TaskState
/**
 * Represents the current state of a running upload.
 * @internal
 */ const TaskState = {
    /** The task is currently transferring data. */ RUNNING: 'running',
    /** The task was paused by the user. */ PAUSED: 'paused',
    /** The task completed successfully. */ SUCCESS: 'success',
    /** The task was canceled. */ CANCELED: 'canceled',
    /** The task failed with an error. */ ERROR: 'error'
};
function taskStateFromInternalTaskState(state) {
    switch(state){
        case "running" /* RUNNING */ :
        case "pausing" /* PAUSING */ :
        case "canceling" /* CANCELING */ :
            return TaskState.RUNNING;
        case "paused" /* PAUSED */ :
            return TaskState.PAUSED;
        case "success" /* SUCCESS */ :
            return TaskState.SUCCESS;
        case "canceled" /* CANCELED */ :
            return TaskState.CANCELED;
        case "error" /* ERROR */ :
            return TaskState.ERROR;
        default:
            // TODO(andysoto): assert(false);
            return TaskState.ERROR;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Observer {
    constructor(nextOrObserver, error, complete){
        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;
        if (asFunctions) {
            this.next = nextOrObserver;
            this.error = error !== null && error !== void 0 ? error : undefined;
            this.complete = complete !== null && complete !== void 0 ? complete : undefined;
        } else {
            const observer = nextOrObserver;
            this.next = observer.next;
            this.error = observer.error;
            this.complete = observer.complete;
        }
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */ // eslint-disable-next-line @typescript-eslint/ban-types
function async(f) {
    return (...argsToForward)=>{
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(()=>f(...argsToForward)
        );
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** An override for the text-based Connection. Used in tests. */ let textFactoryOverride = null;
/**
 * Network layer for browsers. We use this instead of goog.net.XhrIo because
 * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.
 */ class XhrConnection {
    constructor(){
        this.sent_ = false;
        this.xhr_ = new XMLHttpRequest();
        this.initXhr();
        this.errorCode_ = ErrorCode.NO_ERROR;
        this.sendPromise_ = new Promise((resolve)=>{
            this.xhr_.addEventListener('abort', ()=>{
                this.errorCode_ = ErrorCode.ABORT;
                resolve();
            });
            this.xhr_.addEventListener('error', ()=>{
                this.errorCode_ = ErrorCode.NETWORK_ERROR;
                resolve();
            });
            this.xhr_.addEventListener('load', ()=>{
                resolve();
            });
        });
    }
    send(url, method, body, headers) {
        if (this.sent_) throw internalError('cannot .send() more than once');
        this.sent_ = true;
        this.xhr_.open(method, url, true);
        if (headers !== undefined) {
            for(const key in headers)if (headers.hasOwnProperty(key)) this.xhr_.setRequestHeader(key, headers[key].toString());
        }
        if (body !== undefined) this.xhr_.send(body);
        else this.xhr_.send();
        return this.sendPromise_;
    }
    getErrorCode() {
        if (!this.sent_) throw internalError('cannot .getErrorCode() before sending');
        return this.errorCode_;
    }
    getStatus() {
        if (!this.sent_) throw internalError('cannot .getStatus() before sending');
        try {
            return this.xhr_.status;
        } catch (e) {
            return -1;
        }
    }
    getResponse() {
        if (!this.sent_) throw internalError('cannot .getResponse() before sending');
        return this.xhr_.response;
    }
    getErrorText() {
        if (!this.sent_) throw internalError('cannot .getErrorText() before sending');
        return this.xhr_.statusText;
    }
    /** Aborts the request. */ abort() {
        this.xhr_.abort();
    }
    getResponseHeader(header) {
        return this.xhr_.getResponseHeader(header);
    }
    addUploadProgressListener(listener) {
        if (this.xhr_.upload != null) this.xhr_.upload.addEventListener('progress', listener);
    }
    removeUploadProgressListener(listener) {
        if (this.xhr_.upload != null) this.xhr_.upload.removeEventListener('progress', listener);
    }
}
class XhrTextConnection extends XhrConnection {
    initXhr() {
        this.xhr_.responseType = 'text';
    }
}
function newTextConnection() {
    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();
}
class XhrBytesConnection extends XhrConnection {
    initXhr() {
        this.xhr_.responseType = 'arraybuffer';
    }
}
function newBytesConnection() {
    return new XhrBytesConnection();
}
class XhrBlobConnection extends XhrConnection {
    initXhr() {
        this.xhr_.responseType = 'blob';
    }
}
function newBlobConnection() {
    return new XhrBlobConnection();
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 * @internal
 */ class UploadTask {
    /**
     * @param ref - The firebaseStorage.Reference object this task came
     *     from, untyped to avoid cyclic dependencies.
     * @param blob - The blob to upload.
     */ constructor(ref1, blob, metadata = null){
        /**
         * Number of bytes transferred so far.
         */ this._transferred = 0;
        this._needToFetchStatus = false;
        this._needToFetchMetadata = false;
        this._observers = [];
        this._error = undefined;
        this._uploadUrl = undefined;
        this._request = undefined;
        this._chunkMultiplier = 1;
        this._resolve = undefined;
        this._reject = undefined;
        this._ref = ref1;
        this._blob = blob;
        this._metadata = metadata;
        this._mappings = getMappings();
        this._resumable = this._shouldDoResumable(this._blob);
        this._state = "running" /* RUNNING */ ;
        this._errorHandler = (error)=>{
            this._request = undefined;
            this._chunkMultiplier = 1;
            if (error._codeEquals("canceled" /* CANCELED */ )) {
                this._needToFetchStatus = true;
                this.completeTransitions_();
            } else {
                this._error = error;
                this._transition("error" /* ERROR */ );
            }
        };
        this._metadataErrorHandler = (error)=>{
            this._request = undefined;
            if (error._codeEquals("canceled" /* CANCELED */ )) this.completeTransitions_();
            else {
                this._error = error;
                this._transition("error" /* ERROR */ );
            }
        };
        this._promise = new Promise((resolve, reject)=>{
            this._resolve = resolve;
            this._reject = reject;
            this._start();
        });
        // Prevent uncaught rejections on the internal promise from bubbling out
        // to the top level with a dummy handler.
        this._promise.then(null, ()=>{});
    }
    _makeProgressCallback() {
        const sizeBefore = this._transferred;
        return (loaded)=>this._updateProgress(sizeBefore + loaded)
        ;
    }
    _shouldDoResumable(blob) {
        return blob.size() > 262144;
    }
    _start() {
        if (this._state !== "running" /* RUNNING */ ) // This can happen if someone pauses us in a resume callback, for example.
        return;
        if (this._request !== undefined) return;
        if (this._resumable) {
            if (this._uploadUrl === undefined) this._createResumable();
            else {
                if (this._needToFetchStatus) this._fetchStatus();
                else if (this._needToFetchMetadata) // Happens if we miss the metadata on upload completion.
                this._fetchMetadata();
                else this._continueUpload();
            }
        } else this._oneShotUpload();
    }
    _resolveToken(callback) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.all([
            this._ref.storage._getAuthToken(),
            this._ref.storage._getAppCheckToken()
        ]).then(([authToken, appCheckToken])=>{
            switch(this._state){
                case "running" /* RUNNING */ :
                    callback(authToken, appCheckToken);
                    break;
                case "canceling" /* CANCELING */ :
                    this._transition("canceled" /* CANCELED */ );
                    break;
                case "pausing" /* PAUSING */ :
                    this._transition("paused" /* PAUSED */ );
                    break;
            }
        });
    }
    // TODO(andysoto): assert false
    _createResumable() {
        this._resolveToken((authToken, appCheckToken)=>{
            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);
            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
            this._request = createRequest;
            createRequest.getPromise().then((url)=>{
                this._request = undefined;
                this._uploadUrl = url;
                this._needToFetchStatus = false;
                this.completeTransitions_();
            }, this._errorHandler);
        });
    }
    _fetchStatus() {
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        const url = this._uploadUrl;
        this._resolveToken((authToken, appCheckToken)=>{
            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);
            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
            this._request = statusRequest;
            statusRequest.getPromise().then((status)=>{
                this._request = undefined;
                this._updateProgress(status.current);
                this._needToFetchStatus = false;
                if (status.finalized) this._needToFetchMetadata = true;
                this.completeTransitions_();
            }, this._errorHandler);
        });
    }
    _continueUpload() {
        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
        const status = new ResumableUploadStatus(this._transferred, this._blob.size());
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        const url = this._uploadUrl;
        this._resolveToken((authToken, appCheckToken)=>{
            let requestInfo;
            try {
                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());
            } catch (e) {
                this._error = e;
                this._transition("error" /* ERROR */ );
                return;
            }
            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
            this._request = uploadRequest;
            uploadRequest.getPromise().then((newStatus)=>{
                this._increaseMultiplier();
                this._request = undefined;
                this._updateProgress(newStatus.current);
                if (newStatus.finalized) {
                    this._metadata = newStatus.metadata;
                    this._transition("success" /* SUCCESS */ );
                } else this.completeTransitions_();
            }, this._errorHandler);
        });
    }
    _increaseMultiplier() {
        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
        // Max chunk size is 32M.
        if (currentSize < 33554432) this._chunkMultiplier *= 2;
    }
    _fetchMetadata() {
        this._resolveToken((authToken, appCheckToken)=>{
            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);
            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
            this._request = metadataRequest;
            metadataRequest.getPromise().then((metadata)=>{
                this._request = undefined;
                this._metadata = metadata;
                this._transition("success" /* SUCCESS */ );
            }, this._metadataErrorHandler);
        });
    }
    _oneShotUpload() {
        this._resolveToken((authToken, appCheckToken)=>{
            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);
            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);
            this._request = multipartRequest;
            multipartRequest.getPromise().then((metadata)=>{
                this._request = undefined;
                this._metadata = metadata;
                this._updateProgress(this._blob.size());
                this._transition("success" /* SUCCESS */ );
            }, this._errorHandler);
        });
    }
    _updateProgress(transferred) {
        const old = this._transferred;
        this._transferred = transferred;
        // A progress update can make the "transferred" value smaller (e.g. a
        // partial upload not completed by server, after which the "transferred"
        // value may reset to the value at the beginning of the request).
        if (this._transferred !== old) this._notifyObservers();
    }
    _transition(state) {
        if (this._state === state) return;
        switch(state){
            case "canceling" /* CANCELING */ :
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING);
                this._state = state;
                if (this._request !== undefined) this._request.cancel();
                break;
            case "pausing" /* PAUSING */ :
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING);
                this._state = state;
                if (this._request !== undefined) this._request.cancel();
                break;
            case "running" /* RUNNING */ :
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.PAUSING);
                const wasPaused = this._state === "paused" /* PAUSED */ ;
                this._state = state;
                if (wasPaused) {
                    this._notifyObservers();
                    this._start();
                }
                break;
            case "paused" /* PAUSED */ :
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSING);
                this._state = state;
                this._notifyObservers();
                break;
            case "canceled" /* CANCELED */ :
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._error = canceled();
                this._state = state;
                this._notifyObservers();
                break;
            case "error" /* ERROR */ :
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._state = state;
                this._notifyObservers();
                break;
            case "success" /* SUCCESS */ :
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this._state = state;
                this._notifyObservers();
                break;
        }
    }
    completeTransitions_() {
        switch(this._state){
            case "pausing" /* PAUSING */ :
                this._transition("paused" /* PAUSED */ );
                break;
            case "canceling" /* CANCELING */ :
                this._transition("canceled" /* CANCELED */ );
                break;
            case "running" /* RUNNING */ :
                this._start();
                break;
        }
    }
    /**
     * A snapshot of the current task state.
     */ get snapshot() {
        const externalState = taskStateFromInternalTaskState(this._state);
        return {
            bytesTransferred: this._transferred,
            totalBytes: this._blob.size(),
            state: externalState,
            metadata: this._metadata,
            task: this,
            ref: this._ref
        };
    }
    /**
     * Adds a callback for an event.
     * @param type - The type of event to listen for.
     * @param nextOrObserver -
     *     The `next` function, which gets called for each item in
     *     the event stream, or an observer object with some or all of these three
     *     properties (`next`, `error`, `complete`).
     * @param error - A function that gets called with a `StorageError`
     *     if the event stream ends due to an error.
     * @param completed - A function that gets called if the
     *     event stream ends normally.
     * @returns
     *     If only the event argument is passed, returns a function you can use to
     *     add callbacks (see the examples above). If more than just the event
     *     argument is passed, returns a function you can call to unregister the
     *     callbacks.
     */ on(type, nextOrObserver, error, completed) {
        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);
        this._addObserver(observer);
        return ()=>{
            this._removeObserver(observer);
        };
    }
    /**
     * This object behaves like a Promise, and resolves with its snapshot data
     * when the upload completes.
     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.
     * @param onRejected - The rejection callback.
     */ then(onFulfilled, onRejected) {
        // These casts are needed so that TypeScript can infer the types of the
        // resulting Promise.
        return this._promise.then(onFulfilled, onRejected);
    }
    /**
     * Equivalent to calling `then(null, onRejected)`.
     */ catch(onRejected) {
        return this.then(null, onRejected);
    }
    /**
     * Adds the given observer.
     */ _addObserver(observer) {
        this._observers.push(observer);
        this._notifyObserver(observer);
    }
    /**
     * Removes the given observer.
     */ _removeObserver(observer) {
        const i = this._observers.indexOf(observer);
        if (i !== -1) this._observers.splice(i, 1);
    }
    _notifyObservers() {
        this._finishPromise();
        const observers = this._observers.slice();
        observers.forEach((observer)=>{
            this._notifyObserver(observer);
        });
    }
    _finishPromise() {
        if (this._resolve !== undefined) {
            let triggered = true;
            switch(taskStateFromInternalTaskState(this._state)){
                case TaskState.SUCCESS:
                    async(this._resolve.bind(null, this.snapshot))();
                    break;
                case TaskState.CANCELED:
                case TaskState.ERROR:
                    const toCall = this._reject;
                    async(toCall.bind(null, this._error))();
                    break;
                default:
                    triggered = false;
                    break;
            }
            if (triggered) {
                this._resolve = undefined;
                this._reject = undefined;
            }
        }
    }
    _notifyObserver(observer) {
        const externalState = taskStateFromInternalTaskState(this._state);
        switch(externalState){
            case TaskState.RUNNING:
            case TaskState.PAUSED:
                if (observer.next) async(observer.next.bind(observer, this.snapshot))();
                break;
            case TaskState.SUCCESS:
                if (observer.complete) async(observer.complete.bind(observer))();
                break;
            case TaskState.CANCELED:
            case TaskState.ERROR:
                if (observer.error) async(observer.error.bind(observer, this._error))();
                break;
            default:
                // TODO(andysoto): assert(false);
                if (observer.error) async(observer.error.bind(observer, this._error))();
        }
    }
    /**
     * Resumes a paused task. Has no effect on a currently running or failed task.
     * @returns True if the operation took effect, false if ignored.
     */ resume() {
        const valid = this._state === "paused" /* PAUSED */  || this._state === "pausing" /* PAUSING */ ;
        if (valid) this._transition("running" /* RUNNING */ );
        return valid;
    }
    /**
     * Pauses a currently running task. Has no effect on a paused or failed task.
     * @returns True if the operation took effect, false if ignored.
     */ pause() {
        const valid = this._state === "running" /* RUNNING */ ;
        if (valid) this._transition("pausing" /* PAUSING */ );
        return valid;
    }
    /**
     * Cancels a currently running or paused task. Has no effect on a complete or
     * failed task.
     * @returns True if the operation took effect, false if ignored.
     */ cancel() {
        const valid = this._state === "running" /* RUNNING */  || this._state === "pausing" /* PAUSING */ ;
        if (valid) this._transition("canceling" /* CANCELING */ );
        return valid;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @internal
 * @param _location - An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */ class Reference {
    constructor(_service, location){
        this._service = _service;
        if (location instanceof Location) this._location = location;
        else this._location = Location.makeFromUrl(location, _service.host);
    }
    /**
     * Returns the URL for the bucket and path this object references,
     *     in the form gs://<bucket>/<object-path>
     * @override
     */ toString() {
        return 'gs://' + this._location.bucket + '/' + this._location.path;
    }
    _newRef(service, location) {
        return new Reference(service, location);
    }
    /**
     * A reference to the root of this object's bucket.
     */ get root() {
        const location = new Location(this._location.bucket, '');
        return this._newRef(this._service, location);
    }
    /**
     * The name of the bucket containing this reference's object.
     */ get bucket() {
        return this._location.bucket;
    }
    /**
     * The full path of this object.
     */ get fullPath() {
        return this._location.path;
    }
    /**
     * The short name of this object, which is the last component of the full path.
     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.
     */ get name() {
        return lastComponent(this._location.path);
    }
    /**
     * The `StorageService` instance this `StorageReference` is associated with.
     */ get storage() {
        return this._service;
    }
    /**
     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if
     * this reference is the root.
     */ get parent() {
        const newPath = parent(this._location.path);
        if (newPath === null) return null;
        const location = new Location(this._location.bucket, newPath);
        return new Reference(this._service, location);
    }
    /**
     * Utility function to throw an error in methods that do not accept a root reference.
     */ _throwIfRoot(name2) {
        if (this._location.path === '') throw invalidRootOperation(name2);
    }
}
/**
 * Download the bytes at the object's location.
 * @returns A Promise containing the downloaded bytes.
 */ function getBytesInternal(ref2, maxDownloadSizeBytes) {
    ref2._throwIfRoot('getBytes');
    const requestInfo = getBytes$1(ref2.storage, ref2._location, maxDownloadSizeBytes);
    return ref2.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then((bytes)=>maxDownloadSizeBytes !== undefined ? bytes.slice(0, maxDownloadSizeBytes) : bytes
    );
}
/**
 * Download the bytes at the object's location.
 * @returns A Promise containing the downloaded blob.
 */ function getBlobInternal(ref3, maxDownloadSizeBytes) {
    ref3._throwIfRoot('getBlob');
    const requestInfo = getBytes$1(ref3.storage, ref3._location, maxDownloadSizeBytes);
    return ref3.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then((blob)=>maxDownloadSizeBytes !== undefined ? blob.slice(0, maxDownloadSizeBytes) : blob
    );
}
/**
 * Uploads data to this object's location.
 * The upload is not resumable.
 *
 * @param ref - StorageReference where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the newly uploaded data.
 * @returns A Promise containing an UploadResult
 */ function uploadBytes$1(ref4, data, metadata) {
    ref4._throwIfRoot('uploadBytes');
    const requestInfo = multipartUpload(ref4.storage, ref4._location, getMappings(), new FbsBlob(data, true), metadata);
    return ref4.storage.makeRequestWithTokens(requestInfo, newTextConnection).then((finalMetadata)=>{
        return {
            metadata: finalMetadata,
            ref: ref4
        };
    });
}
/**
 * Uploads data to this object's location.
 * The upload can be paused and resumed, and exposes progress updates.
 * @public
 * @param ref - StorageReference where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the newly uploaded data.
 * @returns An UploadTask
 */ function uploadBytesResumable$1(ref5, data, metadata) {
    ref5._throwIfRoot('uploadBytesResumable');
    return new UploadTask(ref5, new FbsBlob(data), metadata);
}
/**
 * Uploads a string to this object's location.
 * The upload is not resumable.
 * @public
 * @param ref - StorageReference where string should be uploaded.
 * @param value - The string to upload.
 * @param format - The format of the string to upload.
 * @param metadata - Metadata for the newly uploaded string.
 * @returns A Promise containing an UploadResult
 */ function uploadString$1(ref6, value, format = StringFormat.RAW, metadata) {
    ref6._throwIfRoot('uploadString');
    const data = dataFromString(format, value);
    const metadataClone = Object.assign({}, metadata);
    if (metadataClone['contentType'] == null && data.contentType != null) metadataClone['contentType'] = data.contentType;
    return uploadBytes$1(ref6, data.data, metadataClone);
}
/**
 * List all items (files) and prefixes (folders) under this storage reference.
 *
 * This is a helper method for calling list() repeatedly until there are
 * no more results. The default pagination size is 1000.
 *
 * Note: The results may not be consistent if objects are changed while this
 * operation is running.
 *
 * Warning: listAll may potentially consume too many resources if there are
 * too many results.
 * @public
 * @param ref - StorageReference to get list from.
 *
 * @returns A Promise that resolves with all the items and prefixes under
 *      the current storage reference. `prefixes` contains references to
 *      sub-directories and `items` contains references to objects in this
 *      folder. `nextPageToken` is never returned.
 */ function listAll$1(ref7) {
    const accumulator = {
        prefixes: [],
        items: []
    };
    return listAllHelper(ref7, accumulator).then(()=>accumulator
    );
}
/**
 * Separated from listAll because async functions can't use "arguments".
 * @param ref
 * @param accumulator
 * @param pageToken
 */ async function listAllHelper(ref8, accumulator, pageToken) {
    const opt = {
        // maxResults is 1000 by default.
        pageToken
    };
    const nextPage = await list$1(ref8, opt);
    accumulator.prefixes.push(...nextPage.prefixes);
    accumulator.items.push(...nextPage.items);
    if (nextPage.nextPageToken != null) await listAllHelper(ref8, accumulator, nextPage.nextPageToken);
}
/**
 * List items (files) and prefixes (folders) under this storage reference.
 *
 * List API is only available for Firebase Rules Version 2.
 *
 * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
 * delimited folder structure.
 * Refer to GCS's List API if you want to learn more.
 *
 * To adhere to Firebase Rules's Semantics, Firebase Storage does not
 * support objects whose paths end with "/" or contain two consecutive
 * "/"s. Firebase Storage List API will filter these unsupported objects.
 * list() may fail if there are too many unsupported objects in the bucket.
 * @public
 *
 * @param ref - StorageReference to get list from.
 * @param options - See ListOptions for details.
 * @returns A Promise that resolves with the items and prefixes.
 *      `prefixes` contains references to sub-folders and `items`
 *      contains references to objects in this folder. `nextPageToken`
 *      can be used to get the rest of the results.
 */ function list$1(ref9, options) {
    if (options != null) {
        if (typeof options.maxResults === 'number') validateNumber('options.maxResults', /* minValue= */ 1, /* maxValue= */ 1000, options.maxResults);
    }
    const op = options || {};
    const requestInfo = list$2(ref9.storage, ref9._location, /*delimiter= */ '/', op.pageToken, op.maxResults);
    return ref9.storage.makeRequestWithTokens(requestInfo, newTextConnection);
}
/**
 * A `Promise` that resolves with the metadata for this object. If this
 * object doesn't exist or metadata cannot be retreived, the promise is
 * rejected.
 * @public
 * @param ref - StorageReference to get metadata from.
 */ function getMetadata$1(ref10) {
    ref10._throwIfRoot('getMetadata');
    const requestInfo = getMetadata$2(ref10.storage, ref10._location, getMappings());
    return ref10.storage.makeRequestWithTokens(requestInfo, newTextConnection);
}
/**
 * Updates the metadata for this object.
 * @public
 * @param ref - StorageReference to update metadata for.
 * @param metadata - The new metadata for the object.
 *     Only values that have been explicitly set will be changed. Explicitly
 *     setting a value to null will remove the metadata.
 * @returns A `Promise` that resolves
 *     with the new metadata for this object.
 *     See `firebaseStorage.Reference.prototype.getMetadata`
 */ function updateMetadata$1(ref11, metadata) {
    ref11._throwIfRoot('updateMetadata');
    const requestInfo = updateMetadata$2(ref11.storage, ref11._location, metadata, getMappings());
    return ref11.storage.makeRequestWithTokens(requestInfo, newTextConnection);
}
/**
 * Returns the download URL for the given Reference.
 * @public
 * @returns A `Promise` that resolves with the download
 *     URL for this object.
 */ function getDownloadURL$1(ref12) {
    ref12._throwIfRoot('getDownloadURL');
    const requestInfo = getDownloadUrl(ref12.storage, ref12._location, getMappings());
    return ref12.storage.makeRequestWithTokens(requestInfo, newTextConnection).then((url)=>{
        if (url === null) throw noDownloadURL();
        return url;
    });
}
/**
 * Deletes the object at this location.
 * @public
 * @param ref - StorageReference for object to delete.
 * @returns A `Promise` that resolves if the deletion succeeds.
 */ function deleteObject$1(ref13) {
    ref13._throwIfRoot('deleteObject');
    const requestInfo = deleteObject$2(ref13.storage, ref13._location);
    return ref13.storage.makeRequestWithTokens(requestInfo, newTextConnection);
}
/**
 * Returns reference for object obtained by appending `childPath` to `ref`.
 *
 * @param ref - StorageReference to get child of.
 * @param childPath - Child path from provided ref.
 * @returns A reference to the object obtained by
 * appending childPath, removing any duplicate, beginning, or trailing
 * slashes.
 *
 */ function _getChild$1(ref14, childPath) {
    const newPath = child(ref14._location.path, childPath);
    const location = new Location(ref14._location.bucket, newPath);
    return new Reference(ref14.storage, location);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function isUrl(path) {
    return /^[A-Za-z]+:\/\//.test(path);
}
/**
 * Returns a firebaseStorage.Reference for the given url.
 */ function refFromURL(service, url) {
    return new Reference(service, url);
}
/**
 * Returns a firebaseStorage.Reference for the given path in the default
 * bucket.
 */ function refFromPath(ref15, path) {
    if (ref15 instanceof FirebaseStorageImpl) {
        const service = ref15;
        if (service._bucket == null) throw noDefaultBucket();
        const reference = new Reference(service, service._bucket);
        if (path != null) return refFromPath(reference, path);
        else return reference;
    } else {
        // ref is a Reference
        if (path !== undefined) return _getChild$1(ref15, path);
        else return ref15;
    }
}
function ref$1(serviceOrRef, pathOrUrl) {
    if (pathOrUrl && isUrl(pathOrUrl)) {
        if (serviceOrRef instanceof FirebaseStorageImpl) return refFromURL(serviceOrRef, pathOrUrl);
        else throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');
    } else return refFromPath(serviceOrRef, pathOrUrl);
}
function extractBucket(host, config) {
    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
    if (bucketString == null) return null;
    return Location.makeFromBucketSpec(bucketString, host);
}
function connectStorageEmulator$1(storage, host, port, options = {}) {
    storage.host = `${host}:${port}`;
    storage._protocol = 'http';
    const { mockUserToken  } = options;
    if (mockUserToken) storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : _util.createMockUserToken(mockUserToken, storage.app.options.projectId);
}
/**
 * A service that provides Firebase Storage Reference instances.
 * @param opt_url - gs:// url to a custom Storage Bucket
 *
 * @internal
 */ class FirebaseStorageImpl {
    constructor(/**
     * FirebaseApp associated with this StorageService instance.
     */ app, _authProvider, /**
     * @internal
     */ _appCheckProvider, /**
     * @internal
     */ _url, _firebaseVersion){
        this.app = app;
        this._authProvider = _authProvider;
        this._appCheckProvider = _appCheckProvider;
        this._url = _url;
        this._firebaseVersion = _firebaseVersion;
        this._bucket = null;
        /**
         * This string can be in the formats:
         * - host
         * - host:port
         */ this._host = DEFAULT_HOST;
        this._protocol = 'https';
        this._appId = null;
        this._deleted = false;
        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
        this._requests = new Set();
        if (_url != null) this._bucket = Location.makeFromBucketSpec(_url, this._host);
        else this._bucket = extractBucket(this._host, this.app.options);
    }
    /**
     * The host string for this service, in the form of `host` or
     * `host:port`.
     */ get host() {
        return this._host;
    }
    set host(host) {
        this._host = host;
        if (this._url != null) this._bucket = Location.makeFromBucketSpec(this._url, host);
        else this._bucket = extractBucket(host, this.app.options);
    }
    /**
     * The maximum time to retry uploads in milliseconds.
     */ get maxUploadRetryTime() {
        return this._maxUploadRetryTime;
    }
    set maxUploadRetryTime(time) {
        validateNumber('time', /* minValue=*/ 0, /* maxValue= */ Number.POSITIVE_INFINITY, time);
        this._maxUploadRetryTime = time;
    }
    /**
     * The maximum time to retry operations other than uploads or downloads in
     * milliseconds.
     */ get maxOperationRetryTime() {
        return this._maxOperationRetryTime;
    }
    set maxOperationRetryTime(time) {
        validateNumber('time', /* minValue=*/ 0, /* maxValue= */ Number.POSITIVE_INFINITY, time);
        this._maxOperationRetryTime = time;
    }
    async _getAuthToken() {
        if (this._overrideAuthToken) return this._overrideAuthToken;
        const auth = this._authProvider.getImmediate({
            optional: true
        });
        if (auth) {
            const tokenData = await auth.getToken();
            if (tokenData !== null) return tokenData.accessToken;
        }
        return null;
    }
    async _getAppCheckToken() {
        const appCheck = this._appCheckProvider.getImmediate({
            optional: true
        });
        if (appCheck) {
            const result = await appCheck.getToken();
            // TODO: What do we want to do if there is an error getting the token?
            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be
            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use
            // the token (actual or dummy) to send requests.
            return result.token;
        }
        return null;
    }
    /**
     * Stop running requests and prevent more from being created.
     */ _delete() {
        if (!this._deleted) {
            this._deleted = true;
            this._requests.forEach((request)=>request.cancel()
            );
            this._requests.clear();
        }
        return Promise.resolve();
    }
    /**
     * Returns a new firebaseStorage.Reference object referencing this StorageService
     * at the given Location.
     */ _makeStorageReference(loc) {
        return new Reference(this, loc);
    }
    /**
     * @param requestInfo - HTTP RequestInfo object
     * @param authToken - Firebase auth token
     */ _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {
        if (!this._deleted) {
            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);
            this._requests.add(request);
            // Request removes itself from set when complete.
            request.getPromise().then(()=>this._requests.delete(request)
            , ()=>this._requests.delete(request)
            );
            return request;
        } else return new FailRequest(appDeleted());
    }
    async makeRequestWithTokens(requestInfo, requestFactory) {
        const [authToken, appCheckToken] = await Promise.all([
            this._getAuthToken(),
            this._getAppCheckToken()
        ]);
        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();
    }
}
const name = "@firebase/storage";
const version = "0.9.5";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Type constant for Firebase Storage.
 */ const STORAGE_TYPE = 'storage';
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Downloads the data at the object's location. Returns an error if the object
 * is not found.
 *
 * To use this functionality, you have to whitelist your app's origin in your
 * Cloud Storage bucket. See also
 * https://cloud.google.com/storage/docs/configuring-cors
 *
 * @public
 * @param ref - StorageReference where data should be downloaded.
 * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to
 * retrieve.
 * @returns A Promise containing the object's bytes
 */ function getBytes(ref16, maxDownloadSizeBytes) {
    ref16 = _util.getModularInstance(ref16);
    return getBytesInternal(ref16, maxDownloadSizeBytes);
}
/**
 * Uploads data to this object's location.
 * The upload is not resumable.
 * @public
 * @param ref - {@link StorageReference} where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the data to upload.
 * @returns A Promise containing an UploadResult
 */ function uploadBytes(ref17, data, metadata) {
    ref17 = _util.getModularInstance(ref17);
    return uploadBytes$1(ref17, data, metadata);
}
/**
 * Uploads a string to this object's location.
 * The upload is not resumable.
 * @public
 * @param ref - {@link StorageReference} where string should be uploaded.
 * @param value - The string to upload.
 * @param format - The format of the string to upload.
 * @param metadata - Metadata for the string to upload.
 * @returns A Promise containing an UploadResult
 */ function uploadString(ref18, value, format, metadata) {
    ref18 = _util.getModularInstance(ref18);
    return uploadString$1(ref18, value, format, metadata);
}
/**
 * Uploads data to this object's location.
 * The upload can be paused and resumed, and exposes progress updates.
 * @public
 * @param ref - {@link StorageReference} where data should be uploaded.
 * @param data - The data to upload.
 * @param metadata - Metadata for the data to upload.
 * @returns An UploadTask
 */ function uploadBytesResumable(ref19, data, metadata) {
    ref19 = _util.getModularInstance(ref19);
    return uploadBytesResumable$1(ref19, data, metadata);
}
/**
 * A `Promise` that resolves with the metadata for this object. If this
 * object doesn't exist or metadata cannot be retreived, the promise is
 * rejected.
 * @public
 * @param ref - {@link StorageReference} to get metadata from.
 */ function getMetadata(ref20) {
    ref20 = _util.getModularInstance(ref20);
    return getMetadata$1(ref20);
}
/**
 * Updates the metadata for this object.
 * @public
 * @param ref - {@link StorageReference} to update metadata for.
 * @param metadata - The new metadata for the object.
 *     Only values that have been explicitly set will be changed. Explicitly
 *     setting a value to null will remove the metadata.
 * @returns A `Promise` that resolves with the new metadata for this object.
 */ function updateMetadata(ref21, metadata) {
    ref21 = _util.getModularInstance(ref21);
    return updateMetadata$1(ref21, metadata);
}
/**
 * List items (files) and prefixes (folders) under this storage reference.
 *
 * List API is only available for Firebase Rules Version 2.
 *
 * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
 * delimited folder structure.
 * Refer to GCS's List API if you want to learn more.
 *
 * To adhere to Firebase Rules's Semantics, Firebase Storage does not
 * support objects whose paths end with "/" or contain two consecutive
 * "/"s. Firebase Storage List API will filter these unsupported objects.
 * list() may fail if there are too many unsupported objects in the bucket.
 * @public
 *
 * @param ref - {@link StorageReference} to get list from.
 * @param options - See {@link ListOptions} for details.
 * @returns A `Promise` that resolves with the items and prefixes.
 *      `prefixes` contains references to sub-folders and `items`
 *      contains references to objects in this folder. `nextPageToken`
 *      can be used to get the rest of the results.
 */ function list(ref22, options) {
    ref22 = _util.getModularInstance(ref22);
    return list$1(ref22, options);
}
/**
 * List all items (files) and prefixes (folders) under this storage reference.
 *
 * This is a helper method for calling list() repeatedly until there are
 * no more results. The default pagination size is 1000.
 *
 * Note: The results may not be consistent if objects are changed while this
 * operation is running.
 *
 * Warning: `listAll` may potentially consume too many resources if there are
 * too many results.
 * @public
 * @param ref - {@link StorageReference} to get list from.
 *
 * @returns A `Promise` that resolves with all the items and prefixes under
 *      the current storage reference. `prefixes` contains references to
 *      sub-directories and `items` contains references to objects in this
 *      folder. `nextPageToken` is never returned.
 */ function listAll(ref23) {
    ref23 = _util.getModularInstance(ref23);
    return listAll$1(ref23);
}
/**
 * Returns the download URL for the given {@link StorageReference}.
 * @public
 * @param ref - {@link StorageReference} to get the download URL for.
 * @returns A `Promise` that resolves with the download
 *     URL for this object.
 */ function getDownloadURL(ref24) {
    ref24 = _util.getModularInstance(ref24);
    return getDownloadURL$1(ref24);
}
/**
 * Deletes the object at this location.
 * @public
 * @param ref - {@link StorageReference} for object to delete.
 * @returns A `Promise` that resolves if the deletion succeeds.
 */ function deleteObject(ref25) {
    ref25 = _util.getModularInstance(ref25);
    return deleteObject$1(ref25);
}
function ref(serviceOrRef, pathOrUrl) {
    serviceOrRef = _util.getModularInstance(serviceOrRef);
    return ref$1(serviceOrRef, pathOrUrl);
}
/**
 * @internal
 */ function _getChild(ref26, childPath) {
    return _getChild$1(ref26, childPath);
}
/**
 * Gets a {@link FirebaseStorage} instance for the given Firebase app.
 * @public
 * @param app - Firebase app to get {@link FirebaseStorage} instance for.
 * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.
 * If not passed, uses the app's default Storage Bucket.
 * @returns A {@link FirebaseStorage} instance.
 */ function getStorage(app = _app.getApp(), bucketUrl) {
    app = _util.getModularInstance(app);
    const storageProvider = _app._getProvider(app, STORAGE_TYPE);
    const storageInstance = storageProvider.getImmediate({
        identifier: bucketUrl
    });
    return storageInstance;
}
/**
 * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.
 *
 * @param storage - The {@link FirebaseStorage} instance
 * @param host - The emulator host (ex: localhost)
 * @param port - The emulator port (ex: 5001)
 * @param options - Emulator options. `options.mockUserToken` is the mock auth
 * token to use for unit testing Security Rules.
 * @public
 */ function connectStorageEmulator(storage, host, port, options = {}) {
    connectStorageEmulator$1(storage, host, port, options);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Downloads the data at the object's location. Returns an error if the object
 * is not found.
 *
 * To use this functionality, you have to whitelist your app's origin in your
 * Cloud Storage bucket. See also
 * https://cloud.google.com/storage/docs/configuring-cors
 *
 * This API is not available in Node.
 *
 * @public
 * @param ref - StorageReference where data should be downloaded.
 * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to
 * retrieve.
 * @returns A Promise that resolves with a Blob containing the object's bytes
 */ function getBlob(ref27, maxDownloadSizeBytes) {
    ref27 = _util.getModularInstance(ref27);
    return getBlobInternal(ref27, maxDownloadSizeBytes);
}
/**
 * Downloads the data at the object's location. Raises an error event if the
 * object is not found.
 *
 * This API is only available in Node.
 *
 * @public
 * @param ref - StorageReference where data should be downloaded.
 * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to
 * retrieve.
 * @returns A stream with the object's data as bytes
 */ function getStream(ref, maxDownloadSizeBytes) {
    throw new Error('getStream() is only supported by NodeJS builds');
}
/**
 * Cloud Storage for Firebase
 *
 * @packageDocumentation
 */ function factory(container, { instanceIdentifier: url  }) {
    const app = container.getProvider('app').getImmediate();
    const authProvider = container.getProvider('auth-internal');
    const appCheckProvider = container.getProvider('app-check-internal');
    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, _app.SDK_VERSION);
}
function registerStorage() {
    _app._registerComponent(new _component.Component(STORAGE_TYPE, factory, "PUBLIC" /* PUBLIC */ ).setMultipleInstances(true));
    //RUNTIME_ENV will be replaced during the compilation to "node" for nodejs and an empty string for browser
    _app.registerVersion(name, version, '');
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    _app.registerVersion(name, version, 'esm2017');
}
registerStorage();

},{"@firebase/app":"3AcPV","@firebase/util":"ePiK6","@firebase/component":"bi1VB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bOATt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFirebaseCart", ()=>createFirebaseCart
);
parcelHelpers.export(exports, "getFirebaseCart", ()=>getFirebaseCart
);
var _firestore = require("firebase/firestore");
async function createFirebaseCart(db, userId, cart) {
    try {
        await _firestore.setDoc(_firestore.doc(db, "cart", userId), {
            cart
        });
    } catch (e) {
        console.log(e);
    }
}
async function getFirebaseCart(db, userId) {
    const docRef = _firestore.doc(db, "cart", userId);
    const docSnap = await _firestore.getDoc(docRef);
    const result = docSnap.data();
    return result ? result.cart : [];
}

},{"firebase/firestore":"cJafS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aLoRT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addProductToCart", ()=>addProductToCart
);
parcelHelpers.export(exports, "getMycart", ()=>getMycart
);
parcelHelpers.export(exports, "currencyFormat", ()=>currencyFormat
);
async function addProductToCart(cart) {
    localStorage.setItem("cart", JSON.stringify(cart));
}
function getMycart() {
    const myCart = localStorage.getItem("cart");
    return myCart ? JSON.parse(myCart) : [];
}
function currencyFormat(price) {
    return new Intl.NumberFormat("es-CO", {
        style: 'currency',
        currency: 'COP',
        minimumFractionDigits: 0
    }).format(price);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["d2OCw","d7P74"], "d7P74", "parcelRequire014c")

//# sourceMappingURL=checkout.06e774f3.js.map
